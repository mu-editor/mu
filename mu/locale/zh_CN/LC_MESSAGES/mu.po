# Mu-Chinese
# Copyright (C) 2018 管宁川John
# 管宁川John <Guan.NingChuan@Gmail.Com>, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: Mu Chinese\n"
"POT-Creation-Date: 2019-04-12 00:09+0800\n"
"PO-Revision-Date: 2019-04-12 00:18+0800\n"
"Last-Translator: 管宁川John <Guan.NingChuan@Gmail.Com>\n"
"Language-Team: 管宁川John (Guan.NingChuan@Gmail.Com)\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: pygettext.py 1.5\n"
"X-Generator: Poedit 2.2.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Poedit-Basepath: ../../..\n"
"X-Poedit-SearchPath-0: .\n"

#: debugger/client.py:106
msgid ""
"Connection timed out. Is your machine slow or busy? Free up some of the "
"machine's resources and try again."
msgstr ""
"连接超时。是你的电脑运行太慢还是运行的东西太多？尝试清理内存或CPU占用再试一次"
"吧。"

#: debugger/client.py:116
msgid ""
"Could not find localhost.\n"
"Ensure you have '127.0.0.1 localhost' in your /etc/hosts file."
msgstr ""
"找不到 localhost 。\n"
"请确认你的 /etc/hosts 文件里有这一段：“127.0.0.1 localhost” 。"

#: interface/dialogs.py:60
msgid "Select Mode"
msgstr "选择模式"

#: interface/dialogs.py:62
msgid ""
"Please select the desired mode then click \"OK\". Otherwise, click \"Cancel"
"\"."
msgstr "请选择所需模式，然后单击“确定”。否则，请单击“取消”。"

#: interface/dialogs.py:78
msgid ""
"Change mode at any time by clicking the \"Mode\" button containing Mu's logo."
msgstr "通过点击有Mu图标的“模式”按钮来随时更改模式。"

#: interface/dialogs.py:112
msgid ""
"When reporting a bug, copy and paste the content of the following log file."
msgstr "反馈 bug 时，复制并粘贴以下日志文件的内容。"

#: interface/dialogs.py:132
msgid ""
"The environment variables shown below will be set each time you run a Python "
"3 script.\n"
"\n"
"Each separate enviroment variable should be on a new line and of the form:\n"
"NAME=VALUE"
msgstr ""
"每次运行 Python 3 脚本时都会设置下面的环境变量。\n"
"\n"
"每行一个单独的环境变量: \n"
"名称 = 值"

#: interface/dialogs.py:155
msgid "Minify Python code before flashing?"
msgstr "在刷入之前缩小 Python 代码？"

#: interface/dialogs.py:158
msgid ""
"Override the built-in MicroPython runtime with the following hex file (empty "
"means use the default):"
msgstr "使用下面的hex文件重写内置的 MicroPython 运行环境（留空使用默认文件）："

#: interface/dialogs.py:180
msgid ""
"The packages shown below will be available to import in Python 3 mode. "
"Delete a package from the list to remove its availability.\n"
"\n"
"Each separate package name should be on a new line. Packages are installed "
"from PyPI (see: https://pypi.org/)."
msgstr ""
"你可以在Python 3模式下通过import使用列表中的第三方库。想要删除库，将库的名称"
"从列表中去掉\n"
"\n"
"可以增加想要的库。每个第三方库占一行。Mu使用PyPI安装库 (见: https://pypi."
"org/)."

#: interface/dialogs.py:203 interface/main.py:1016
msgid "Mu Administration"
msgstr "Mu 管理"

#: interface/dialogs.py:216
msgid "Current Log"
msgstr "当前日志"

#: interface/dialogs.py:219
msgid "Python3 Environment"
msgstr "Python3 环境变量"

#: interface/dialogs.py:224
msgid "BBC micro:bit Settings"
msgstr "BBC micro:bit 设置"

#: interface/dialogs.py:227
msgid "Third Party Packages"
msgstr "第三方库"

#: interface/dialogs.py:257
msgid "Find / Replace"
msgstr "查找 / 替换"

#: interface/dialogs.py:261
msgid "Find:"
msgstr "查找："

#: interface/dialogs.py:267
msgid "Replace (optional):"
msgstr "替换（可选）:"

#: interface/dialogs.py:273
msgid "Replace all?"
msgstr "全部替换？"

#: interface/dialogs.py:321
msgid "Third Party Package Status"
msgstr "第三方库状态"

#: interface/editor.py:253 logic.py:1026
msgid "untitled"
msgstr "无标题"

#: interface/main.py:70
msgid "Mode"
msgstr "模式"

#: interface/main.py:71
msgid "Change Mu's mode of behaviour."
msgstr "改变Mu的运行模式。"

#: interface/main.py:73
msgid "New"
msgstr "新建"

#: interface/main.py:74
msgid "Create a new Python script."
msgstr "创建一个新的 Python 脚本。"

#: interface/main.py:75
msgid "Load"
msgstr "加载"

#: interface/main.py:76
msgid "Load a Python script."
msgstr "加载一个 Python 脚本。"

#: interface/main.py:77
msgid "Save"
msgstr "保存"

#: interface/main.py:78
msgid "Save the current Python script."
msgstr "保存当前 Python 脚本。"

#: interface/main.py:87
msgid "Zoom-in"
msgstr "放大"

#: interface/main.py:88
msgid "Zoom in (to make the text bigger)."
msgstr "放大编辑器文本。"

#: interface/main.py:89
msgid "Zoom-out"
msgstr "缩小"

#: interface/main.py:90
msgid "Zoom out (to make the text smaller)."
msgstr "缩小编辑器文本。"

#: interface/main.py:91
msgid "Theme"
msgstr "主题"

#: interface/main.py:92
msgid "Toggle theme between day, night or high contrast."
msgstr "切换日间、夜间或者高对比度的主题。"

#: interface/main.py:95
msgid "Check"
msgstr "检查"

#: interface/main.py:96
msgid "Check your code for mistakes."
msgstr "检查代码中的错误。"

#: interface/main.py:98
msgid "Tidy"
msgstr "整理代码"

#: interface/main.py:99
msgid "Tidy up the layout of your code."
msgstr "整理代码的格式"

#: interface/main.py:100
msgid "Help"
msgstr "帮助"

#: interface/main.py:101
msgid "Show help about Mu in a browser."
msgstr "在浏览器中显示关于Mu的帮助内容。"

#: interface/main.py:103
msgid "Quit"
msgstr "退出"

#: interface/main.py:104
msgid "Quit Mu."
msgstr "退出 Mu 。"

#: interface/main.py:183
msgid "Mu {}"
msgstr "Mu {}"

#: interface/main.py:381
msgid "Cannot connect to device on port {}"
msgstr "无法在 {} 端口上连接设备"

#: interface/main.py:403
#, fuzzy
#| msgid "Filesystem on micro:bit"
msgid "Filesystem on "
msgstr "micro:bit 上的文件系统"

#: interface/main.py:462
msgid "Python3 data tuple"
msgstr "Python3 数据元组"

#: interface/main.py:474
msgid "Python3 (Jupyter)"
msgstr "Python3（Jupyter）"

#: interface/main.py:481
msgid "{} REPL"
msgstr "{} REPL"

#: interface/main.py:497
msgid "{} Plotter"
msgstr "{} 绘图器"

#: interface/main.py:538
msgid "Running: {}"
msgstr "运行脚本：{}"

#: interface/main.py:561
msgid "Debug Inspector"
msgstr "调试检查器"

#: interface/main.py:579
msgid "Name"
msgstr "名称"

#: interface/main.py:579
msgid "Value"
msgstr "值"

#: interface/main.py:596
msgid "(A list of {} items.)"
msgstr "（ {} 项的列表(list)。）"

#: interface/main.py:609
msgid "(A dict of {} items.)"
msgstr "（ {} 项的字典(dict)。）"

#: interface/main.py:759
msgid "Mu"
msgstr "Mu"

#: interface/main.py:1009
msgid "Mu's current mode of behaviour."
msgstr "Mu 当前的运行模式。"

#: interface/panes.py:350
msgid "File already exists; overwrite it?"
msgstr "文件已存在，是否覆盖？"

#: interface/panes.py:351
msgid "File already exists"
msgstr "文件已存在"

#: interface/panes.py:379
msgid "Copying '{}' to micro:bit."
msgstr "正在将“{}”复制到 micro:bit 。"

#: interface/panes.py:388
msgid "'{}' successfully copied to micro:bit."
msgstr "“{}”已成功的复制到了 micro:bit 。"

#: interface/panes.py:394
msgid "Delete (cannot be undone)"
msgstr "删除（无法撤销）"

#: interface/panes.py:400
msgid "Deleting '{}' from micro:bit."
msgstr "正在从 micro:bit 中删除“{}”。"

#: interface/panes.py:409
msgid "'{}' successfully deleted from micro:bit."
msgstr "已成功从 micro:bit 中删除“{}”。"

#: interface/panes.py:439
msgid "Getting '{}' from micro:bit. Copying to '{}'."
msgstr "正在将“{}”复制到 micro:bit 。"

#: interface/panes.py:450
msgid "Successfully copied '{}' from the micro:bit to your computer."
msgstr "已成功从 micro:bit 中，复制“{}”到你的电脑上。"

#: interface/panes.py:463
msgid "Open in Mu"
msgstr "在 Mu 中打开"

#: interface/panes.py:465
msgid "Open"
msgstr "打开"

#: interface/panes.py:471
msgid "Opening '{}'"
msgstr "正在打开“{}”"

#: interface/panes.py:511
#, fuzzy
#| msgid "Files on your computer:"
msgid "Files on your device:"
msgstr "在电脑上的文件："

#: interface/panes.py:513
msgid "Files on your computer:"
msgstr "在电脑上的文件："

#: interface/panes.py:581
#, fuzzy
#| msgid ""
#| "There was a problem getting the list of files on the micro:bit. Please "
#| "check Mu's logs for technical information. Alternatively, try unplugging/"
#| "plugging-in your micro:bit and/or restarting Mu."
msgid ""
"There was a problem getting the list of files on the device. Please check "
"Mu's logs for technical information. Alternatively, try unplugging/plugging-"
"in your device and/or restarting Mu."
msgstr ""
"获取 micro:bit 上的文件列表时出现问题。 请查看Mu的日志以获取技术信息。 或者尝"
"试重新插拔 micro:bit 和重启 Mu 。"

#: interface/panes.py:592
#, fuzzy
#| msgid ""
#| "There was a problem copying the file '{}' onto the micro:bit. Please "
#| "check Mu's logs for more information."
msgid ""
"There was a problem copying the file '{}' onto the device. Please check Mu's "
"logs for more information."
msgstr ""
"将文件“{}”复制到 micro:bit 上时出现问题。 请查看 Mu 的日志以获取更多信息。"

#: interface/panes.py:600
#, fuzzy
#| msgid ""
#| "There was a problem deleting '{}' from the micro:bit. Please check Mu's "
#| "logs for more information."
msgid ""
"There was a problem deleting '{}' from the device. Please check Mu's logs "
"for more information."
msgstr "从 micro:bit 删除“{}”时出现问题。 请查看 Mu 的日志以获取更多信息。"

#: interface/panes.py:608
#, fuzzy
#| msgid ""
#| "There was a problem getting '{}' from the micro:bit. Please check Mu's "
#| "logs for more information."
msgid ""
"There was a problem getting '{}' from the device. Please check Mu's logs for "
"more information."
msgstr "从 micro:bit 获取’{}’时出现问题。 请查看 Mu 的日志以获取更多信息。"

#: logic.py:73
msgid "Hello, World!"
msgstr "你好，世界！"

#: logic.py:74
msgid ""
"This editor is free software written in Python. You can modify it, add "
"features or fix bugs if you like."
msgstr ""
"这个编辑器是用 Python 编写的免费软件。 您可以根据需要修改，添加功能或修复错"
"误。"

#: logic.py:76
msgid "This editor is called Mu (you say it 'mew' or 'moo')."
msgstr "这个编辑器名为 Mu ，你可以读作“谬(miu)”或“沐(mu)”。"

#: logic.py:77
msgid "Google, Facebook, NASA, Pixar, Disney and many more use Python."
msgstr "谷歌、Facebook、NASA、皮克斯、迪士尼等等都在使用Python。"

#: logic.py:78
msgid ""
"Programming is a form of magic. Learn to cast the right spells with code and "
"you'll be a wizard."
msgstr "编程是一种魔法。 学习使用代码施放正确的法术，你将成为一名魔法师。"

#: logic.py:80
msgid ""
"REPL stands for read, evaluate, print, loop. It's a fun way to talk to your "
"computer! :-)"
msgstr ""
"REPL 代表“读取(Read)-求值(Evaluate)-打印(Print)”的循环(Loop)。 这是与您的计算"
"机交谈的一个有趣方式！:-)"

#: logic.py:82
msgid "Be brave, break things, learn and have fun!"
msgstr "要勇敢的打破一切，快乐的学习和玩耍！"

#: logic.py:83
msgid "Make your software both useful AND fun. Empower your users."
msgstr "让你的软件既有用又有趣。 为你的用户赋能。"

#: logic.py:84
msgid "For the Zen of Python: import this"
msgstr "了解 Python 之禅：import this"

#: logic.py:85
msgid "Diversity promotes creativity."
msgstr "多样性促进创造力。"

#: logic.py:86
msgid "An open mind, spirit of adventure and respect for diversity are key."
msgstr "开阔思路、冒险精神及尊重是多样性的关键。"

#: logic.py:87
msgid ""
"Don't worry if it doesn't work. Learn the lesson, fix it and try again! :-)"
msgstr "如果它不起作用，别担心。 看看教程，修复它，然后再试一次！:-)"

#: logic.py:89
msgid "Coding is collaboration."
msgstr "编程需要合作。"

#: logic.py:90
msgid "Compliment and amplify the good things with code."
msgstr "使用代码来赞美和放大美好的东西。"

#: logic.py:91
msgid ""
"In theory, theory and practice are the same. In practice, they're not. ;-)"
msgstr "理论上来说，理论和实践都是一样的。 在实践中，并不是。;-)"

#: logic.py:93
msgid "Debugging is twice as hard as writing the code in the first place."
msgstr "在开始的时候，调试代码比写代码要难两倍。"

#: logic.py:94
msgid "It's fun to program."
msgstr "编程是个有趣的事情。"

#: logic.py:95
msgid "Programming has more to do with problem solving than writing code."
msgstr "编程更多地是为了解决问题，而不是单纯的写代码。"

#: logic.py:96
msgid "Start with your users' needs."
msgstr "从你的用户需求出发。"

#: logic.py:97
msgid "Try to see things from your users' point of view."
msgstr "尝试从用户的角度看问题。"

#: logic.py:98
msgid "Put yourself in your users' shoes."
msgstr "让自己站在用户的位置上。"

#: logic.py:99
msgid ""
"Explaining a programming problem to a friend often reveals the solution. :-)"
msgstr "与朋友讨论编程中遇到的问题，通常会获得新的解决方案。:-)"

#: logic.py:101
msgid "If you don't know, ask. Nobody to ask? Just look it up."
msgstr "如果你不知道，就提问吧。找不到人问的话，就自己查查看吧。"

#: logic.py:102
msgid "Complexity is the enemy. KISS - keep it simple, stupid!"
msgstr "复杂是敌人。 KISS - keep it simple, stupid!（保持简单和纯粹！）"

#: logic.py:103
msgid "Beautiful is better than ugly."
msgstr "优美胜于丑陋。"

#: logic.py:104
msgid "Explicit is better than implicit."
msgstr "显式胜于隐式。"

#: logic.py:105
msgid "Simple is better than complex. Complex is better than complicated."
msgstr "简单胜于复杂。复杂胜于难懂。"

#: logic.py:106
msgid "Flat is better than nested."
msgstr "扁平胜于嵌套。"

#: logic.py:107
msgid "Sparse is better than dense."
msgstr "分散胜于密集。"

#: logic.py:108
msgid "Readability counts."
msgstr "可读性应当被重视。"

#: logic.py:109
msgid ""
"Special cases aren't special enough to break the rules. Although "
"practicality beats purity."
msgstr "尽管实用性会打败纯粹性，特例也不能凌驾于规则之上。"

#: logic.py:111
msgid "Errors should never pass silently. Unless explicitly silenced."
msgstr "除非明确地使其沉默，错误永远不应该默默地溜走。"

#: logic.py:112
msgid "In the face of ambiguity, refuse the temptation to guess."
msgstr "面对不明确的定义，拒绝猜测的诱惑。"

#: logic.py:113
msgid "There should be one-- and preferably only one --obvious way to do it."
msgstr "只用一种方法，最好只有一种方法来做一件事。"

#: logic.py:114
msgid ""
"Now is better than never. Although never is often better than *right* now."
msgstr "做比不做好，但立马去做有时还不如不做。"

#: logic.py:116
msgid "If the implementation is hard to explain, it's a bad idea."
msgstr "如果写的代码很难清楚表述的话，那就是个糟糕想法。"

#: logic.py:117
msgid "If the implementation is easy to explain, it may be a good idea."
msgstr "如果写的代码很容易清楚表述的话，那很有可能是个好想法。"

#: logic.py:118
msgid "Namespaces are one honking great idea -- let's do more of those!"
msgstr "命名空间是个绝妙的想法，让我们多多地使用它们吧！"

#: logic.py:119
msgid "Mu was created by Nicholas H.Tollervey."
msgstr "Mu 由 Nicholas H.Tollervey 创造。"

#: logic.py:120
msgid "To understand what recursion is, you must first understand recursion."
msgstr "要理解递归是什么，你必须先了解递归。"

#: logic.py:121
msgid ""
"Algorithm: a word used by programmers when they don't want to explain what "
"they did."
msgstr "算法：程序员在不想解释他们所做的事情时使用的一个词。"

#: logic.py:123
msgid "Programmers count from zero."
msgstr "程序员们都从0开始计数。"

#: logic.py:124
msgid "Simplicity is the ultimate sophistication."
msgstr "简单是终极的复杂。"

#: logic.py:125
msgid "A good programmer is humble."
msgstr "一个优秀的程序员很谦虚。"

#: logic.py:126
msgid "A good programmer is playful."
msgstr "一个优秀的程序员很有趣。"

#: logic.py:127
msgid "A good programmer learns to learn."
msgstr "一个优秀的程序员会学习如何学习。"

#: logic.py:128
msgid "A good programmer thinks beyond the obvious."
msgstr "一个优秀的程序员思考不止于表面的问题。"

#: logic.py:129
msgid "A good programmer promotes simplicity."
msgstr "一个优秀的程序员崇尚简单。"

#: logic.py:130
msgid "A good programmer avoids complexity."
msgstr "一个优秀的程序员会避免复杂。"

#: logic.py:131
msgid "A good programmer is patient."
msgstr "一个优秀的程序员很有耐心。"

#: logic.py:132
msgid "A good programmer asks questions."
msgstr "一个优秀的程序员善于提问。"

#: logic.py:133
msgid "A good programmer is willing to say, 'I don't know'."
msgstr "一个优秀的程序员愿意说：“我不懂”。"

#: logic.py:134
msgid "Wisest are they that know they know nothing."
msgstr "最聪明的是他们知道他们什么都不知道。"

#: logic.py:473
msgid " above this line"
msgstr " 在这行之上"

#: logic.py:518
msgid ""
"Syntax error. Python cannot understand this line. Check for missing "
"characters!"
msgstr "语法错误。 Python 无法理解这一行。 检查缺少的字符！"

#: logic.py:710
msgid "# Write your code here :-)"
msgstr "# 在这里写上你的代码 :-)"

#: logic.py:750
#, python-brace-format
msgid ""
"The file contains characters Mu expects to be encoded as {0} or as the "
"computer's default encoding {1}, but which are encoded in some other way.\n"
"\n"
"If this file was saved in another application, re-save the file via the "
"'Save as' option and set the encoding to {0}"
msgstr ""
"文件的编码有问题，该文件所包含字符应为 Mu 的默认编码{0}或计算机的默认编码"
"{1}。\n"
"\n"
"如果此文件是通过另外一个应用程序保存，请通过“另存为”选项重新保存文件，并将编"
"码设置为{0}"

#: logic.py:775
msgid "The file \"{}\" is already open."
msgstr "文件“{}”已经打开。"

#: logic.py:787
msgid "Mu cannot read the characters in {}"
msgstr "Mu 无法读取 {} 中的字符"

#: logic.py:810
msgid "Mu was not able to open this file"
msgstr "Mu 无法打开此文件"

#: logic.py:811
msgid ""
"Currently Mu only works with Python source files or hex files created with "
"embedded MicroPython code."
msgstr ""
"目前，Mu 仅适用于使用嵌入式 MicroPython 代码创建的 Python 源文件或 hex 文件。"

#: logic.py:817
msgid "Could not load {}"
msgstr "无法加载 {}"

#: logic.py:819
msgid ""
"Does this file exist?\n"
"If it does, do you have permission to read it?\n"
"\n"
"Please check and try again."
msgstr ""
"这个文件存在吗？\n"
"如果存在，你有读取权限吗？\n"
"\n"
"请检查并重试。"

#: logic.py:825
msgid "Is this a {} file?"
msgstr "这是一个 {} 文件吗？"

#: logic.py:826
msgid ""
"It looks like this could be a {} file.\n"
"\n"
"Would you like to change Mu to the {}mode?"
msgstr ""
"看起来这可能是一个{}文件。\n"
"\n"
"你想将 Mu 改为{}模式吗？"

#: logic.py:920
msgid "Could not save file (disk problem)"
msgstr "无法保存文件（磁盘问题）"

#: logic.py:921
msgid ""
"Error saving file to disk. Ensure you have permission to write the file and "
"sufficient disk space."
msgstr "将文件保存到磁盘时出错。 确保你有写入文件的权限和足够的磁盘空间。"

#: logic.py:925
msgid "Could not save file (encoding problem)"
msgstr "无法保存文件（编码问题）"

#: logic.py:927
msgid ""
"Unable to convert all the characters. If you have an encoding line at the "
"top of the file, remove it and try again."
msgstr "无法转换所有字符。 如果文件顶部有编码行，请将其删除并重试。"

#: logic.py:936
msgid "Saved file: {}"
msgstr "已保存文件：{}"

#: logic.py:965 logic.py:1349
msgid "You cannot use the filename \"{}\""
msgstr "你不能使用文件名“{}”"

#: logic.py:967
msgid ""
"This name is already used by another part of Python. If you use this name, "
"things are likely to break. Please try again with a different filename."
msgstr ""
"这个名字已被 Python 的另一部分使用。如果你使用这个名字，可能会出问题。请使用"
"其他文件名重试。"

#: logic.py:1042
msgid "Good job! No problems found."
msgstr "干得漂亮！ 没有发现问题。"

#: logic.py:1043
msgid "Hurrah! Checker turned up no problems."
msgstr "诶嘿！检查结果显示，没有问题。"

#: logic.py:1044
msgid "Nice one! Zero problems detected."
msgstr "棒！ 检测到0个问题。"

#: logic.py:1045
msgid "Well done! No problems here."
msgstr "做得好！ 这里没问题。"

#: logic.py:1046
msgid "Awesome! Zero problems found."
msgstr "真棒！没发现问题。"

#: logic.py:1069
msgid ""
"There is un-saved work, exiting the application will cause you to lose it."
msgstr "你有还没有保存的代码，如果现在退出程序的话将不会保存。"

#: logic.py:1138
msgid "Could not find MicroPython runtime."
msgstr "找不到 MicroPython 运行时。"

#: logic.py:1139
msgid ""
"The micro:bit runtime you specified ('{}') does not exist. Please try again."
msgstr "您指定的 micro:bit 运行时（’{}’）不存在。请再试一次。"

#: logic.py:1240
msgid "Changed to {} mode."
msgstr "已更改为 {} 模式。"

#: logic.py:1285
msgid "Detected new {} device."
msgstr "检测到新的 {} 设备。"

#: logic.py:1295
msgid "Would you like to change Mu to the {} mode?"
msgstr "你想将 Mu 改为 {} 模式吗？"

#: logic.py:1330
msgid "Cannot Set Breakpoint."
msgstr "无法设置断点。"

#: logic.py:1331
msgid ""
"Lines that are comments or some multi-line statements cannot have "
"breakpoints."
msgstr "作为单行或多行注释语句不能设置断点。"

#: logic.py:1351
msgid ""
"This name is already used by another part of Python. If you use that name, "
"things are likely to break. Please try again with a different filename."
msgstr ""
"这个名字已被 Python 的另一部分使用。如果你使用这个名字，可能会出问题。请使用"
"其他文件名重试。"

#: logic.py:1368
msgid "Could not rename file."
msgstr "无法重命名文件。"

#: logic.py:1369
msgid "A file of that name is already open in Mu."
msgstr "该名称的文件已在 Mu 中打开。"

#: logic.py:1398
msgid "Replaced \"{}\" with \"{}\"."
msgstr "已将“{}”替换为“{}”。"

#: logic.py:1402
msgid "Replaced {} matches of \"{}\" with \"{}\"."
msgstr "已将{}个“{}”的匹配项替换为“{}”。"

#: logic.py:1407 logic.py:1414
msgid "Could not find \"{}\"."
msgstr "找不到 ”{}”。"

#: logic.py:1412
msgid "Highlighting matches for \"{}\"."
msgstr "高亮显示“{}”的匹配项。"

#: logic.py:1417
msgid "You must provide something to find."
msgstr "你需要提供需要查找的内容。"

#: logic.py:1418
msgid "Please try again, this time with something in the find box."
msgstr "请在查找框中输入内容，然后重试。"

#: logic.py:1447
msgid "Successfully cleaned the code. Use CTRL-Z to undo."
msgstr ""

#: logic.py:1453
msgid "Your code contains problems."
msgstr ""

#: logic.py:1454
msgid ""
"These must be fixed before tidying will work. Please use the 'Check' button "
"to highlight these problems."
msgstr ""

#: modes/adafruit.py:32
msgid "Adafruit CircuitPython"
msgstr "Adafruit CircuitPython"

#: modes/adafruit.py:33
msgid "Use CircuitPython on Adafruit's line of boards."
msgstr "在 Adafruit 的开发板上使用 CircuitPython 。"

#: modes/adafruit.py:83
msgid "Serial"
msgstr "串口"

#: modes/adafruit.py:84
msgid "Open a serial connection to your device."
msgstr "打开与设备的串口连接。"

#: modes/adafruit.py:91 modes/esp.py:80 modes/microbit.py:130
#: modes/python3.py:140
msgid "Plotter"
msgstr "绘图器"

#: modes/adafruit.py:92 modes/esp.py:81 modes/microbit.py:131
msgid "Plot incoming REPL data."
msgstr "绘制由 REPL 传入的数据。"

#: modes/adafruit.py:162
msgid "Could not find an attached Adafruit CircuitPython device."
msgstr "找不到已连接的 Adafruit CircuitPython 设备。"

#: modes/adafruit.py:164
msgid ""
"Python files for Adafruit CircuitPython devices are stored on the device. "
"Therefore, to edit these files you need to have the device plugged in. Until "
"you plug in a device, Mu will use the directory found here:\n"
"\n"
" {}\n"
"\n"
"...to store your code."
msgstr ""
"Adafruit CircuitPython 设备的 Python 文件存储在设备上。 因此，要编辑这些文"
"件，需要您插入设备。在插入设备之前，Mu 将使用这个目录：\n"
"\n"
" {}\n"
"\n"
"…来存储您的代码。"

#: modes/api/adafruit.py:23
msgid ""
"_stage.Layer(width, height, graphic, palette, grid) \n"
"Keep internal information about a layer of graphics (either a\n"
"Grid or a Sprite) in a format suitable for fast rendering\n"
"with the render() function.\n"
"\n"
"\n"
"Parameters:\n"
"width (int) -- The width of the grid in tiles, or 1 for sprites.\n"
"height (int) -- The height of the grid in tiles, or 1 for sprites.\n"
"graphic (bytearray) -- The graphic data of the tiles.\n"
"palette (bytearray) -- The color palette to be used.\n"
"grid (bytearray) -- The contents of the grid map."
msgstr ""

#: modes/api/adafruit.py:24
msgid "_stage.Layer.frame(frame, rotation) \n"
msgstr ""

#: modes/api/adafruit.py:25
msgid "_stage.Layer.move(x, y) \n"
msgstr ""

#: modes/api/adafruit.py:26
msgid ""
"_stage.Text(width, height, font, palette, chars) \n"
"Keep internal information about a text of text\n"
"in a format suitable for fast rendering\n"
"with the render() function.\n"
"\n"
"\n"
"Parameters:\n"
"width (int) -- The width of the grid in tiles, or 1 for sprites.\n"
"height (int) -- The height of the grid in tiles, or 1 for sprites.\n"
"font (bytearray) -- The font data of the characters.\n"
"palette (bytearray) -- The color palette to be used.\n"
"chars (bytearray) -- The contents of the character grid."
msgstr ""

#: modes/api/adafruit.py:27
msgid "_stage.Text.move(x, y) \n"
msgstr ""

#: modes/api/adafruit.py:28
msgid ""
"_stage.render(x0, y0, x1, y1, layers, buffer, spi) \n"
"Render and send to the display a fragment of the screen.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"x0 (int) -- Left edge of the fragment.\n"
"y0 (int) -- Top edge of the fragment.\n"
"x1 (int) -- Right edge of the fragment.\n"
"y1 (int) -- Bottom edge of the fragment.\n"
"layers (list) -- A list of the Layer objects.\n"
"buffer (bytearray) -- A buffer to use for rendering.\n"
"spi (SPI) -- The SPI bus to use.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Note that this function only sends the raw pixel data. Setting up\n"
"the display for receiving it and handling the chip-select and\n"
"data-command pins has to be done outside of it.\n"
"There are also no sanity checks, outside of the basic overflow\n"
"checking. The caller is responsible for making the passed parameters\n"
"valid.\n"
"This function is intended for internal use in the stage library\n"
"and all the necessary checks are performed there.\n"
msgstr ""

#: modes/api/adafruit.py:29 modes/api/adafruit.py:30
msgid ""
"analogio.AnalogIn(pin) \n"
"Use the AnalogIn on the given pin. The reference voltage varies by\n"
"platform so use reference_voltage to read the configured setting.\n"
"\n"
"\n"
"Parameters:pin (Pin) -- the pin to read from"
msgstr ""

#: modes/api/adafruit.py:31 modes/api/adafruit.py:32
msgid ""
"analogio.AnalogIn.deinit() \n"
"Turn off the AnalogIn and release the pin for other use.\n"
msgstr ""

#: modes/api/adafruit.py:33
msgid ""
"analogio.AnalogIn.reference_voltage() \n"
"The maximum voltage measurable. Also known as the reference voltage.\n"
"\n"
"\n"
"\n"
"\n"
"Returns:the reference voltage\n"
"\n"
"Return type:float\n"
"\n"
"\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:34
msgid ""
"analogio.AnalogIn.reference_voltage() \n"
"The maximum voltage measurable (also known as the reference voltage) as a\n"
"float in Volts.\n"
msgstr ""

#: modes/api/adafruit.py:35
msgid ""
"analogio.AnalogIn.value() \n"
"Read the value on the analog pin and return it.  The returned value\n"
"will be between 0 and 65535 inclusive (16-bit). Even if the underlying\n"
"analog to digital converter (ADC) is lower resolution, the result will\n"
"be scaled to be 16-bit.\n"
"\n"
"\n"
"\n"
"\n"
"Returns:the data read\n"
"\n"
"Return type:int\n"
"\n"
"\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:36
msgid ""
"analogio.AnalogIn.value() \n"
"The value on the analog pin between 0 and 65535 inclusive (16-bit). (read-"
"only)\n"
"Even if the underlying analog to digital converter (ADC) is lower\n"
"resolution, the value is 16-bit.\n"
msgstr ""

#: modes/api/adafruit.py:37 modes/api/adafruit.py:38
msgid ""
"analogio.AnalogOut(pin) \n"
"Use the AnalogOut on the given pin.\n"
"\n"
"\n"
"Parameters:pin (Pin) -- the pin to output to"
msgstr ""

#: modes/api/adafruit.py:39 modes/api/adafruit.py:40
msgid ""
"analogio.AnalogOut.deinit() \n"
"Turn off the AnalogOut and release the pin for other use.\n"
msgstr ""

#: modes/api/adafruit.py:41
msgid ""
"analogio.AnalogOut.value() \n"
"The value on the analog pin.  The value must be between 0 and 65535\n"
"inclusive (16-bit). Even if the underlying digital to analog converter\n"
"is lower resolution, the input must be scaled to be 16-bit.\n"
"\n"
"\n"
"\n"
"\n"
"Returns:the last value written\n"
"\n"
"Return type:int\n"
"\n"
"\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:42
msgid ""
"analogio.AnalogOut.value() \n"
"The value on the analog pin between 0 and 65535 inclusive (16-bit). (write-"
"only)\n"
"Even if the underlying digital to analog converter (DAC) is lower\n"
"resolution, the value is 16-bit.\n"
msgstr ""

#: modes/api/adafruit.py:43
msgid ""
"audiobusio.I2SOut(bit_clock, word_select, data, *, left_justified) \n"
"Create a I2SOut object associated with the given pins.\n"
"\n"
"\n"
"Parameters:\n"
"bit_clock (Pin) -- The bit clock (or serial clock) pin\n"
"word_select (Pin) -- The word select (or left/right clock) pin\n"
"data (Pin) -- The data pin\n"
"left_justified (bool) -- True when data bits are aligned with the word "
"select clock. False\n"
"when they are shifted by one to match classic I2S protocol."
msgstr ""

#: modes/api/adafruit.py:44
msgid ""
"audiobusio.I2SOut.deinit() \n"
"Deinitialises the I2SOut and releases any hardware resources for reuse.\n"
msgstr ""

#: modes/api/adafruit.py:45
msgid ""
"audiobusio.I2SOut.paused() \n"
"True when playback is paused. (read-only)\n"
msgstr ""

#: modes/api/adafruit.py:46
msgid ""
"audiobusio.I2SOut.playing() \n"
"True when the audio sample is being output. (read-only)\n"
msgstr ""

#: modes/api/adafruit.py:47
msgid ""
"audiobusio.PDMIn(clock_pin, data_pin, *, frequency=8000, bit_depth=8, "
"mono=True, oversample=64) \n"
"Create a PDMIn object associated with the given pins. This allows you to\n"
"record audio signals from the given pins. Individual ports may put further\n"
"restrictions on the recording parameters.\n"
"\n"
"\n"
"Parameters:\n"
"clock_pin (Pin) -- The pin to output the clock to\n"
"data_pin (Pin) -- The pin to read the data from\n"
"frequency (int) -- Target frequency of the resulting samples. Check "
"frequency for real value.\n"
"bit_depth (int) -- Final number of bits per sample. Must be divisible by 8\n"
"mono (bool) -- True when capturing a single channel of audio, captures two "
"channels otherwise\n"
"oversample (int) -- Number of single bit samples to decimate into a final "
"sample. Must be divisible by 8"
msgstr ""

#: modes/api/adafruit.py:48
msgid ""
"audiobusio.PDMIn(clock_pin, data_pin, *, sample_rate=16000, bit_depth=8, "
"mono=True, oversample=64, startup_delay=0.11) \n"
"Create a PDMIn object associated with the given pins. This allows you to\n"
"record audio signals from the given pins. Individual ports may put further\n"
"restrictions on the recording parameters. The overall sample rate is\n"
"determined by sample_rate x oversample, and the total must be 1MHz or\n"
"higher, so sample_rate must be a minimum of 16000.\n"
"\n"
"\n"
"Parameters:\n"
"clock_pin (Pin) -- The pin to output the clock to\n"
"data_pin (Pin) -- The pin to read the data from\n"
"sample_rate (int) -- Target sample_rate of the resulting samples. Check "
"sample_rate for actual value.\n"
"Minimum sample_rate is about 16000 Hz.\n"
"bit_depth (int) -- Final number of bits per sample. Must be divisible by 8\n"
"mono (bool) -- True when capturing a single channel of audio, captures two "
"channels otherwise\n"
"oversample (int) -- Number of single bit samples to decimate into a final "
"sample. Must be divisible by 8\n"
"startup_delay (float) -- seconds to wait after starting microphone clock\n"
"to allow microphone to turn on. Most require only 0.01s; some require 0.1s. "
"Longer is safer.\n"
"Must be in range 0.0-1.0 seconds."
msgstr ""

#: modes/api/adafruit.py:49
msgid ""
"audiobusio.PDMIn.deinit() \n"
"Deinitialises the PWMOut and releases any hardware resources for reuse.\n"
msgstr ""

#: modes/api/adafruit.py:50
msgid ""
"audiobusio.PDMIn.deinit() \n"
"Deinitialises the PDMIn and releases any hardware resources for reuse.\n"
msgstr ""

#: modes/api/adafruit.py:51
msgid ""
"audiobusio.PDMIn.frequency() \n"
"The actual frequency of the recording. This may not match the constructed\n"
"frequency due to internal clock limitations.\n"
msgstr ""

#: modes/api/adafruit.py:52
msgid ""
"audiobusio.PDMIn.sample_rate() \n"
"The actual sample_rate of the recording. This may not match the constructed\n"
"sample rate due to internal clock limitations.\n"
msgstr ""

#: modes/api/adafruit.py:53
msgid ""
"audioio.AudioOut(pin, sample_source) \n"
"Create a AudioOut object associated with the given pin. This allows you to\n"
"play audio signals out on the given pin. Sample_source must be a bytes-like "
"object.\n"
"\n"
"The sample itself should consist of 16 bit samples and be mono.\n"
"Microcontrollers with a lower output resolution will use the highest order\n"
"bits to output. For example, the SAMD21 has a 10 bit DAC that ignores the\n"
"lowest 6 bits when playing 16 bit samples.\n"
"\n"
"\n"
"Parameters:\n"
"pin (Pin) -- The pin to output to\n"
"sample_source (bytes-like) -- The source of the sample"
msgstr ""

#: modes/api/adafruit.py:54
msgid ""
"audioio.AudioOut(left_channel, right_channel=None) \n"
"Create a AudioOut object associated with the given pin(s). This allows you "
"to\n"
"play audio signals out on the given pin(s).\n"
"\n"
"\n"
"Parameters:\n"
"left_channel (Pin) -- The pin to output the left channel to\n"
"right_channel (Pin) -- The pin to output the right channel to"
msgstr ""

#: modes/api/adafruit.py:55
msgid ""
"audioio.AudioOut.deinit() \n"
"Deinitialises the PWMOut and releases any hardware resources for reuse.\n"
msgstr ""

#: modes/api/adafruit.py:56
msgid ""
"audioio.AudioOut.deinit() \n"
"Deinitialises the AudioOut and releases any hardware resources for reuse.\n"
msgstr ""

#: modes/api/adafruit.py:57
msgid ""
"audioio.AudioOut.frequency() \n"
"32 bit value that dictates how quickly samples are loaded into the DAC\n"
"in Hertz (cycles per second). When the sample is looped, this can change\n"
"the pitch output without changing the underlying sample.\n"
msgstr ""

#: modes/api/adafruit.py:58
msgid ""
"audioio.AudioOut.paused() \n"
"True when playback is paused. (read-only)\n"
msgstr ""

#: modes/api/adafruit.py:59
msgid ""
"audioio.AudioOut.playing() \n"
"True when the audio sample is being output.\n"
msgstr ""

#: modes/api/adafruit.py:60
msgid ""
"audioio.AudioOut.playing() \n"
"True when an audio sample is being output even if paused. (read-only)\n"
msgstr ""

#: modes/api/adafruit.py:61
msgid ""
"audioio.RawSample(buffer, *, channel_count=1, sample_rate=8000) \n"
"Create a RawSample based on the given buffer of signed values. If "
"channel_count is more than\n"
"1 then each channel’s samples should alternate. In other words, for a two "
"channel buffer, the\n"
"first sample will be for channel 1, the second sample will be for channel "
"two, the third for\n"
"channel 1 and so on.\n"
"\n"
"\n"
"Parameters:\n"
"buffer (array) -- An array.array with samples\n"
"channel_count (int) -- The number of channels in the buffer\n"
"sample_rate (int) -- The desired playback sample rate"
msgstr ""

#: modes/api/adafruit.py:62
msgid ""
"audioio.RawSample.deinit() \n"
"Deinitialises the AudioOut and releases any hardware resources for reuse.\n"
msgstr ""

#: modes/api/adafruit.py:63
msgid ""
"audioio.RawSample.sample_rate() \n"
"32 bit value that dictates how quickly samples are played in Hertz (cycles "
"per second).\n"
"When the sample is looped, this can change the pitch output without changing "
"the underlying\n"
"sample. This will not change the sample rate of any active playback. Call "
"play again to\n"
"change it.\n"
msgstr ""

#: modes/api/adafruit.py:64
msgid ""
"audioio.WaveFile(filename) \n"
"Load a .wav file for playback with audioio.AudioOut or audiobusio.I2SOut.\n"
"\n"
"\n"
"Parameters:file (bytes-like) -- Already opened wave file"
msgstr ""

#: modes/api/adafruit.py:65
msgid ""
"audioio.WaveFile.deinit() \n"
"Deinitialises the WaveFile and releases all memory resources for reuse.\n"
msgstr ""

#: modes/api/adafruit.py:66
msgid ""
"audioio.WaveFile.sample_rate() \n"
"32 bit value that dictates how quickly samples are loaded into the DAC\n"
"in Hertz (cycles per second). When the sample is looped, this can change\n"
"the pitch output without changing the underlying sample.\n"
msgstr ""

#: modes/api/adafruit.py:67
msgid ""
"bitbangio.I2C(scl, sda, *, frequency=400000) \n"
"I2C is a two-wire protocol for communicating between devices.  At the\n"
"physical level it consists of 2 wires: SCL and SDA, the clock and data\n"
"lines respectively.\n"
"\n"
"\n"
"Parameters:\n"
"scl (Pin) -- The clock pin\n"
"sda (Pin) -- The data pin\n"
"frequency (int) -- The clock frequency of the bus"
msgstr ""

#: modes/api/adafruit.py:68
msgid ""
"bitbangio.I2C(scl, sda, *, frequency=400000) \n"
"I2C is a two-wire protocol for communicating between devices.  At the\n"
"physical level it consists of 2 wires: SCL and SDA, the clock and data\n"
"lines respectively.\n"
"\n"
"\n"
"Parameters:\n"
"scl (Pin) -- The clock pin\n"
"sda (Pin) -- The data pin\n"
"frequency (int) -- The clock frequency of the bus\n"
"timeout (int) -- The maximum clock stretching timeout in microseconds"
msgstr ""

#: modes/api/adafruit.py:69 modes/api/adafruit.py:70
msgid ""
"bitbangio.I2C.deinit() \n"
"Releases control of the underlying hardware so other classes can use it.\n"
msgstr ""

#: modes/api/adafruit.py:71 modes/api/adafruit.py:72
msgid ""
"bitbangio.OneWire(pin) \n"
"Create a OneWire object associated with the given pin. The object\n"
"implements the lowest level timing-sensitive bits of the protocol.\n"
"\n"
"\n"
"Parameters:pin (Pin) -- Pin to read pulses from."
msgstr ""

#: modes/api/adafruit.py:73 modes/api/adafruit.py:74
msgid ""
"bitbangio.OneWire.deinit() \n"
"Deinitialize the OneWire bus and release any hardware resources for reuse.\n"
msgstr ""

#: modes/api/adafruit.py:75 modes/api/adafruit.py:76
msgid ""
"bitbangio.SPI(clock, MOSI=None, MISO=None) \n"
"\n"
"Parameters:\n"
"clock (Pin) -- the pin to use for the clock.\n"
"MOSI (Pin) -- the Master Out Slave In pin.\n"
"MISO (Pin) -- the Master In Slave Out pin."
msgstr ""

#: modes/api/adafruit.py:77 modes/api/adafruit.py:78
msgid ""
"bitbangio.SPI.deinit() \n"
"Turn off the SPI bus.\n"
msgstr ""

#: modes/api/adafruit.py:79
msgid ""
"busio.I2C(scl, sda, *, frequency=400000) \n"
"I2C is a two-wire protocol for communicating between devices.  At the\n"
"physical level it consists of 2 wires: SCL and SDA, the clock and data\n"
"lines respectively.\n"
"\n"
"\n"
"Parameters:\n"
"scl (Pin) -- The clock pin\n"
"sda (Pin) -- The data pin\n"
"frequency (int) -- The clock frequency in Hertz"
msgstr ""

#: modes/api/adafruit.py:80
msgid ""
"busio.I2C(scl, sda, *, frequency=400000) \n"
"I2C is a two-wire protocol for communicating between devices.  At the\n"
"physical level it consists of 2 wires: SCL and SDA, the clock and data\n"
"lines respectively.\n"
"\n"
"\n"
"Parameters:\n"
"scl (Pin) -- The clock pin\n"
"sda (Pin) -- The data pin\n"
"frequency (int) -- The clock frequency in Hertz\n"
"timeout (int) -- The maximum clock stretching timeut - only for bitbang"
msgstr ""

#: modes/api/adafruit.py:81 modes/api/adafruit.py:82
msgid ""
"busio.I2C.deinit() \n"
"Releases control of the underlying hardware so other classes can use it.\n"
msgstr ""

#: modes/api/adafruit.py:83 modes/api/adafruit.py:84
msgid ""
"busio.OneWire(pin) \n"
"Create a OneWire object associated with the given pin. The object\n"
"implements the lowest level timing-sensitive bits of the protocol.\n"
"\n"
"\n"
"Parameters:pin (Pin) -- Pin connected to the OneWire bus"
msgstr ""

#: modes/api/adafruit.py:85 modes/api/adafruit.py:86
msgid ""
"busio.OneWire.deinit() \n"
"Deinitialize the OneWire bus and release any hardware resources for reuse.\n"
msgstr ""

#: modes/api/adafruit.py:87 modes/api/adafruit.py:88
msgid ""
"busio.SPI(clock, MOSI=None, MISO=None) \n"
"\n"
"Parameters:\n"
"clock (Pin) -- the pin to use for the clock.\n"
"MOSI (Pin) -- the Master Out Slave In pin.\n"
"MISO (Pin) -- the Master In Slave Out pin."
msgstr ""

#: modes/api/adafruit.py:89 modes/api/adafruit.py:90
msgid ""
"busio.SPI.deinit() \n"
"Turn off the SPI bus.\n"
msgstr ""

#: modes/api/adafruit.py:91
msgid ""
"busio.SPI.frequency() \n"
"The actual SPI bus frequency. This may not match the frequency requested\n"
"due to internal limitations.\n"
msgstr ""

#: modes/api/adafruit.py:92
msgid ""
"busio.UART(tx, rx, *, baudrate=9600, bits=8, parity=None, stop=1, "
"timeout=1000, receiver_buffer_size=64) \n"
"A common bidirectional serial protocol that uses an an agreed upon speed\n"
"rather than a shared clock line.\n"
"\n"
"\n"
"Parameters:\n"
"tx (Pin) -- the pin to transmit with\n"
"rx (Pin) -- the pin to receive on\n"
"baudrate (int) -- the transmit and receive speed"
msgstr ""

#: modes/api/adafruit.py:93
msgid ""
"busio.UART(tx, rx, *, baudrate=9600, bits=8, parity=None, stop=1, "
"timeout=1000, receiver_buffer_size=64) \n"
"A common bidirectional serial protocol that uses an an agreed upon speed\n"
"rather than a shared clock line.\n"
"\n"
"\n"
"Parameters:\n"
"tx (Pin) -- the pin to transmit with, or None if this UART is receive-only.\n"
"rx (Pin) -- the pin to receive on, or None if this UART is transmit-only.\n"
"baudrate (int) -- the transmit and receive speed."
msgstr ""

#: modes/api/adafruit.py:94 modes/api/adafruit.py:95
msgid ""
"busio.UART.Parity() \n"
"Enum-like class to define the parity used to verify correct data transfer.\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:96 modes/api/adafruit.py:97
msgid ""
"busio.UART.Parity.EVEN() \n"
"Total number of ones should be even.\n"
msgstr ""

#: modes/api/adafruit.py:98 modes/api/adafruit.py:99
msgid ""
"busio.UART.Parity.ODD() \n"
"Total number of ones should be odd.\n"
msgstr ""

#: modes/api/adafruit.py:100
msgid ""
"busio.UART.baudrate() \n"
"The current baudrate.\n"
msgstr ""

#: modes/api/adafruit.py:101 modes/api/adafruit.py:102
msgid ""
"busio.UART.deinit() \n"
"Deinitialises the UART and releases any hardware resources for reuse.\n"
msgstr ""

#: modes/api/adafruit.py:103 modes/api/adafruit.py:104
msgid ""
"digitalio.DigitalInOut(pin) \n"
"Create a new DigitalInOut object associated with the pin. Defaults to input\n"
"with no pull. Use switch_to_input() and\n"
"switch_to_output() to change the direction.\n"
"\n"
"\n"
"Parameters:pin (Pin) -- The pin to control"
msgstr ""

#: modes/api/adafruit.py:105 modes/api/adafruit.py:106
msgid ""
"digitalio.DigitalInOut.Direction() \n"
"Enum-like class to define which direction the digital values are\n"
"going.\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:107 modes/api/adafruit.py:108
msgid ""
"digitalio.DigitalInOut.Direction.INPUT() \n"
"Read digital data in\n"
msgstr ""

#: modes/api/adafruit.py:109 modes/api/adafruit.py:110
msgid ""
"digitalio.DigitalInOut.Direction.OUTPUT() \n"
"Write digital data out\n"
msgstr ""

#: modes/api/adafruit.py:111 modes/api/adafruit.py:112
msgid ""
"digitalio.DigitalInOut.deinit() \n"
"Turn off the DigitalInOut and release the pin for other use.\n"
msgstr ""

#: modes/api/adafruit.py:113 modes/api/adafruit.py:114
msgid ""
"digitalio.DigitalInOut.direction() \n"
"The direction of the pin.\n"
"Setting this will use the defaults from the corresponding\n"
"switch_to_input() or switch_to_output() method. If\n"
"you want to set pull, value or drive mode prior to switching, then use\n"
"those methods instead.\n"
msgstr ""

#: modes/api/adafruit.py:115
msgid ""
"digitalio.DigitalInOut.drive_mode() \n"
"Get or set the pin drive mode.\n"
msgstr ""

#: modes/api/adafruit.py:116
msgid ""
"digitalio.DigitalInOut.drive_mode() \n"
"The pin drive mode. One of:\n"
"\n"
"digitalio.DriveMode.PUSH_PULL\n"
"digitalio.DriveMode.OPEN_DRAIN\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:117
msgid ""
"digitalio.DigitalInOut.pull() \n"
"Get or set the pin pull. Values may be digitalio.Pull.UP,\n"
"digitalio.Pull.DOWN or None.\n"
"\n"
"\n"
"\n"
"\n"
"Raises:AttributeError -- if the direction is ~`digitalio.Direction.OUTPUT`.\n"
"\n"
"\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:118
msgid ""
"digitalio.DigitalInOut.pull() \n"
"The pin pull direction. One of:\n"
"\n"
"digitalio.Pull.UP\n"
"digitalio.Pull.DOWN\n"
"None\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Raises:AttributeError -- if direction is OUTPUT.\n"
"\n"
"\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:119 modes/api/adafruit.py:120
msgid ""
"digitalio.DigitalInOut.value() \n"
"The digital logic level of the pin.\n"
msgstr ""

#: modes/api/adafruit.py:121 modes/api/adafruit.py:122
msgid ""
"digitalio.DriveMode() \n"
"Enum-like class to define the drive mode used when outputting\n"
"digital values.\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:123 modes/api/adafruit.py:124
msgid ""
"digitalio.DriveMode.OPEN_DRAIN() \n"
"Output low digital values but go into high z for digital high. This is\n"
"useful for i2c and other protocols that share a digital line.\n"
msgstr ""

#: modes/api/adafruit.py:125 modes/api/adafruit.py:126
msgid ""
"digitalio.DriveMode.PUSH_PULL() \n"
"Output both high and low digital values\n"
msgstr ""

#: modes/api/adafruit.py:127 modes/api/adafruit.py:128
msgid ""
"digitalio.Pull() \n"
"Enum-like class to define the pull value, if any, used while reading\n"
"digital values in.\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:129 modes/api/adafruit.py:130
msgid ""
"digitalio.Pull.DOWN() \n"
"When the input line isn’t being driven the pull down can pull the\n"
"state of the line low so it reads as false.\n"
msgstr ""

#: modes/api/adafruit.py:131 modes/api/adafruit.py:132
msgid ""
"digitalio.Pull.UP() \n"
"When the input line isn’t being driven the pull up can pull the state\n"
"of the line high so it reads as true.\n"
msgstr ""

#: modes/api/adafruit.py:133
msgid ""
"gamepad.GamePad(b1, b2, b3, b4, b5, b6, b7, b8) \n"
"Initializes button scanning routines.\n"
"\n"
"The b1-b8 parameters are DigitalInOut objects, which\n"
"immediately get switched to input with a pull-up, and then scanned\n"
"regularly for button presses. The order is the same as the order of\n"
"bits returned by the get_pressed function. You can re-initialize\n"
"it with different keys, then the new object will replace the previous\n"
"one.\n"
"\n"
"The basic feature required here is the ability to poll the keys at\n"
"regular intervals (so that de-bouncing is consistent) and fast enough\n"
"(so that we don’t miss short button presses) while at the same time\n"
"letting the user code run normally, call blocking functions and wait\n"
"on delays.\n"
"\n"
"They button presses are accumulated, until the get_pressed method\n"
"is called, at which point the button state is cleared, and the new\n"
"button presses start to be recorded.\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:134
msgid ""
"gamepad.GamePad.deinit() \n"
"Disable button scanning.\n"
msgstr ""

#: modes/api/adafruit.py:135
msgid ""
"gamepad.GamePad.get_pressed() \n"
"Get the status of buttons pressed since the last call and clear it.\n"
"Returns an 8-bit number, with bits that correspond to buttons,\n"
"which have been pressed (or held down) since the last call to this\n"
"function set to 1, and the remaining bits set to 0. Then it clears\n"
"the button state, so that new button presses (or buttons that are\n"
"held down) can be recorded for the next call.\n"
msgstr ""

#: modes/api/adafruit.py:136
msgid ""
"math.acos(x) \n"
"Return the inverse cosine of x.\n"
msgstr ""

#: modes/api/adafruit.py:137
msgid ""
"math.asin(x) \n"
"Return the inverse sine of x.\n"
msgstr ""

#: modes/api/adafruit.py:138
msgid ""
"math.atan(x) \n"
"Return the inverse tangent of x.\n"
msgstr ""

#: modes/api/adafruit.py:139
msgid ""
"math.atan2(y, x) \n"
"Return the principal value of the inverse tangent of y/x.\n"
msgstr ""

#: modes/api/adafruit.py:140
msgid ""
"math.ceil(x) \n"
"Return an integer, being x rounded towards positive infinity.\n"
msgstr ""

#: modes/api/adafruit.py:141
msgid ""
"math.copysign(x, y) \n"
"Return x with the sign of y.\n"
msgstr ""

#: modes/api/adafruit.py:142
msgid ""
"math.cos(x) \n"
"Return the cosine of x.\n"
msgstr ""

#: modes/api/adafruit.py:143
msgid ""
"math.degrees(x) \n"
"Return radians x converted to degrees.\n"
msgstr ""

#: modes/api/adafruit.py:144
msgid ""
"math.exp(x) \n"
"Return the exponential of x.\n"
msgstr ""

#: modes/api/adafruit.py:145
msgid ""
"math.fabs(x) \n"
"Return the absolute value of x.\n"
msgstr ""

#: modes/api/adafruit.py:146
msgid ""
"math.floor(x) \n"
"Return an integer, being x rounded towards negative infinity.\n"
msgstr ""

#: modes/api/adafruit.py:147
msgid ""
"math.fmod(x, y) \n"
"Return the remainder of x/y.\n"
msgstr ""

#: modes/api/adafruit.py:148
msgid ""
"math.frexp(x) \n"
"Decomposes a floating-point number into its mantissa and exponent.\n"
"The returned value is the tuple (m, e) such that x == m * 2**e\n"
"exactly.  If x == 0 then the function returns (0.0, 0), otherwise\n"
"the relation 0.5 <= abs(m) < 1 holds.\n"
msgstr ""

#: modes/api/adafruit.py:149
msgid ""
"math.isfinite(x) \n"
"Return True if x is finite.\n"
msgstr ""

#: modes/api/adafruit.py:150
msgid ""
"math.isinf(x) \n"
"Return True if x is infinite.\n"
msgstr ""

#: modes/api/adafruit.py:151
msgid ""
"math.isnan(x) \n"
"Return True if x is not-a-number\n"
msgstr ""

#: modes/api/adafruit.py:152
msgid ""
"math.ldexp(x, exp) \n"
"Return x * (2**exp).\n"
msgstr ""

#: modes/api/adafruit.py:153
msgid ""
"math.modf(x) \n"
"Return a tuple of two floats, being the fractional and integral parts of\n"
"x.  Both return values have the same sign as x.\n"
msgstr ""

#: modes/api/adafruit.py:154
msgid ""
"math.pow(x, y) \n"
"Returns x to the power of y.\n"
msgstr ""

#: modes/api/adafruit.py:155
msgid ""
"math.radians(x) \n"
"Return degrees x converted to radians.\n"
msgstr ""

#: modes/api/adafruit.py:156
msgid ""
"math.sin(x) \n"
"Return the sine of x.\n"
msgstr ""

#: modes/api/adafruit.py:157
msgid ""
"math.sqrt(x) \n"
"Returns the square root of x.\n"
msgstr ""

#: modes/api/adafruit.py:158
msgid ""
"math.tan(x) \n"
"Return the tangent of x.\n"
msgstr ""

#: modes/api/adafruit.py:159
msgid ""
"math.trunc(x) \n"
"Return an integer, being x rounded towards 0.\n"
msgstr ""

#: modes/api/adafruit.py:160 modes/api/adafruit.py:161
msgid ""
"microcontroller.Pin() \n"
"Identifies an IO pin on the microcontroller. They are fixed by the\n"
"hardware so they cannot be constructed on demand. Instead, use\n"
"board or microcontroller.pin to reference the desired pin.\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:162
msgid "microcontroller.Processor() \n"
msgstr ""

#: modes/api/adafruit.py:163
msgid ""
"microcontroller.Processor() \n"
"You cannot create an instance of microcontroller.Processor.\n"
"Use microcontroller.cpu to access the sole instance available.\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:164
msgid ""
"microcontroller.Processor.frequency() \n"
"The CPU operating frequency as an int, in Hertz. (read-only)\n"
msgstr ""

#: modes/api/adafruit.py:165
msgid ""
"microcontroller.Processor.temperature() \n"
"The on-chip temperature, in Celsius, as a float. (read-only)\n"
"Is None if the temperature is not available.\n"
msgstr ""

#: modes/api/adafruit.py:166
msgid ""
"microcontroller.Processor.uid() \n"
"The unique id (aka serial number) of the chip as a bytearray. (read-only)\n"
msgstr ""

#: modes/api/adafruit.py:167
msgid ""
"microcontroller.RunMode() \n"
"Enum-like class to define the run mode of the microcontroller and\n"
"CircuitPython.\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:168
msgid ""
"microcontroller.RunMode.BOOTLOADER() \n"
"Run the bootloader.\n"
msgstr ""

#: modes/api/adafruit.py:169
msgid ""
"microcontroller.RunMode.NORMAL() \n"
"Run CircuitPython as normal.\n"
msgstr ""

#: modes/api/adafruit.py:170
msgid ""
"microcontroller.RunMode.SAFE_MODE() \n"
"Run CircuitPython in safe mode. User code will not be run and the\n"
"file system will be writeable over USB.\n"
msgstr ""

#: modes/api/adafruit.py:171 modes/api/adafruit.py:172
msgid ""
"multiterminal.clear_secondary_terminal() \n"
"Clears the secondary terminal.\n"
msgstr ""

#: modes/api/adafruit.py:173 modes/api/adafruit.py:174
msgid ""
"multiterminal.get_secondary_terminal() \n"
"Returns the current secondary terminal.\n"
msgstr ""

#: modes/api/adafruit.py:175 modes/api/adafruit.py:176
msgid ""
"multiterminal.schedule_secondary_terminal_read(socket) \n"
"In cases where the underlying OS is doing task scheduling, this notifies\n"
"the OS when more data is available on the socket to read. This is useful\n"
"as a callback for lwip sockets.\n"
msgstr ""

#: modes/api/adafruit.py:177 modes/api/adafruit.py:178
msgid ""
"multiterminal.set_secondary_terminal(stream) \n"
"Read additional input from the given stream and write out back to it.\n"
"This doesn’t replace the core stream (usually UART or native USB) but is\n"
"mixed in instead.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:stream (stream) -- secondary stream\n"
"\n"
"\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:179 modes/api/adafruit.py:180
msgid ""
"nvm.ByteArray() \n"
"Not currently dynamically supported. Access the sole instance through "
"microcontroller.nvm.\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:181 modes/api/adafruit.py:182
msgid ""
"os.chdir(path) \n"
"Change current directory.\n"
msgstr ""

#: modes/api/adafruit.py:183 modes/api/adafruit.py:184
msgid ""
"os.getcwd() \n"
"Get the current directory.\n"
msgstr ""

#: modes/api/adafruit.py:185 modes/api/adafruit.py:186
msgid ""
"os.listdir(dir) \n"
"With no argument, list the current directory.  Otherwise list the given "
"directory.\n"
msgstr ""

#: modes/api/adafruit.py:187 modes/api/adafruit.py:188
msgid ""
"os.mkdir(path) \n"
"Create a new directory.\n"
msgstr ""

#: modes/api/adafruit.py:189 modes/api/adafruit.py:190
msgid ""
"os.remove(path) \n"
"Remove a file.\n"
msgstr ""

#: modes/api/adafruit.py:191 modes/api/adafruit.py:192
msgid ""
"os.rename(old_path, new_path) \n"
"Rename a file.\n"
msgstr ""

#: modes/api/adafruit.py:193 modes/api/adafruit.py:194
msgid ""
"os.rmdir(path) \n"
"Remove a directory.\n"
msgstr ""

#: modes/api/adafruit.py:195 modes/api/adafruit.py:196
msgid ""
"os.stat(path) \n"
"Get the status of a file or directory.\n"
msgstr ""

#: modes/api/adafruit.py:197 modes/api/adafruit.py:198
msgid ""
"os.statvfs(path) \n"
"Get the status of a fileystem.\n"
"Returns a tuple with the filesystem information in the following order:\n"
"\n"
"\n"
"f_bsize -- file system block size\n"
"f_frsize -- fragment size\n"
"f_blocks -- size of fs in f_frsize units\n"
"f_bfree -- number of free blocks\n"
"f_bavail -- number of free blocks for unpriviliged users\n"
"f_files -- number of inodes\n"
"f_ffree -- number of free inodes\n"
"f_favail -- number of free inodes for unpriviliged users\n"
"f_flag -- mount flags\n"
"f_namemax -- maximum filename length\n"
"\n"
"\n"
"Parameters related to inodes: f_files, f_ffree, f_avail\n"
"and the f_flags parameter may return 0 as they can be unavailable\n"
"in a port-specific implementation.\n"
msgstr ""

#: modes/api/adafruit.py:199 modes/api/adafruit.py:200
msgid ""
"os.sync() \n"
"Sync all filesystems.\n"
msgstr ""

#: modes/api/adafruit.py:201 modes/api/adafruit.py:202
msgid ""
"os.uname() \n"
"Returns a named tuple of operating specific and CircuitPython port\n"
"specific information.\n"
msgstr ""

#: modes/api/adafruit.py:203 modes/api/adafruit.py:204
msgid ""
"os.urandom(size) \n"
"Returns a string of size random bytes based on a hardware True Random\n"
"Number Generator. When not available, it will raise a NotImplementedError.\n"
msgstr ""

#: modes/api/adafruit.py:205 modes/api/adafruit.py:206
msgid ""
"pulseio.PWMOut(pin, *, duty_cycle=0, frequency=500, "
"variable_frequency=False) \n"
"Create a PWM object associated with the given pin. This allows you to\n"
"write PWM signals out on the given pin. Frequency is fixed after init\n"
"unless variable_frequency is True.\n"
"\n"
"\n"
"Parameters:\n"
"pin (Pin) -- The pin to output to\n"
"duty_cycle (int) -- The fraction of each pulse which is high. 16-bit\n"
"frequency (int) -- The target frequency in Hertz (32-bit)\n"
"variable_frequency (bool) -- True if the frequency will change over time"
msgstr ""

#: modes/api/adafruit.py:207 modes/api/adafruit.py:208
msgid ""
"pulseio.PWMOut.deinit() \n"
"Deinitialises the PWMOut and releases any hardware resources for reuse.\n"
msgstr ""

#: modes/api/adafruit.py:209 modes/api/adafruit.py:210
msgid ""
"pulseio.PWMOut.duty_cycle() \n"
"16 bit value that dictates how much of one cycle is high (1) versus low\n"
"(0). 0xffff will always be high, 0 will always be low and 0x7fff will\n"
"be half high and then half low.\n"
msgstr ""

#: modes/api/adafruit.py:211 modes/api/adafruit.py:212
msgid ""
"pulseio.PWMOut.frequency() \n"
"32 bit value that dictates the PWM frequency in Hertz (cycles per\n"
"second). Only writeable when constructed with variable_frequency=True.\n"
msgstr ""

#: modes/api/adafruit.py:213 modes/api/adafruit.py:214
msgid ""
"pulseio.PulseIn(pin, maxlen=2, *, idle_state=False) \n"
"Create a PulseIn object associated with the given pin. The object acts as\n"
"a read-only sequence of pulse lengths with a given max length. When it is\n"
"active, new pulse lengths are added to the end of the list. When there is\n"
"no more room (len() == maxlen) the oldest pulse length is removed to\n"
"make room.\n"
"\n"
"\n"
"Parameters:\n"
"pin (Pin) -- Pin to read pulses from.\n"
"maxlen (int) -- Maximum number of pulse durations to store at once\n"
"idle_state (bool) -- Idle state of the pin. At start and after resume\n"
"the first recorded pulse will the opposite state from idle."
msgstr ""

#: modes/api/adafruit.py:215 modes/api/adafruit.py:216
msgid ""
"pulseio.PulseIn.deinit() \n"
"Deinitialises the PulseIn and releases any hardware resources for reuse.\n"
msgstr ""

#: modes/api/adafruit.py:217
msgid ""
"pulseio.PulseIn.maxlen() \n"
"Returns the maximum length of the PulseIn. When len() is equal to maxlen,\n"
"it is unclear which pulses are active and which are idle.\n"
msgstr ""

#: modes/api/adafruit.py:218
msgid ""
"pulseio.PulseIn.maxlen() \n"
"The maximum length of the PulseIn. When len() is equal to maxlen,\n"
"it is unclear which pulses are active and which are idle.\n"
msgstr ""

#: modes/api/adafruit.py:219
msgid ""
"pulseio.PulseIn.paused() \n"
"True when pulse capture is paused as a result of pause() or an error during "
"capture\n"
"such as a signal that is too fast.\n"
msgstr ""

#: modes/api/adafruit.py:220 modes/api/adafruit.py:221
msgid ""
"pulseio.PulseOut(carrier) \n"
"Create a PulseOut object associated with the given PWM out experience.\n"
"\n"
"\n"
"Parameters:carrier (PWMOut) -- PWMOut that is set to output on the desired "
"pin."
msgstr ""

#: modes/api/adafruit.py:222 modes/api/adafruit.py:223
msgid ""
"pulseio.PulseOut.deinit() \n"
"Deinitialises the PulseOut and releases any hardware resources for reuse.\n"
msgstr ""

#: modes/api/adafruit.py:224 modes/api/adafruit.py:225
msgid ""
"random.choice(seq) \n"
"Returns a randomly selected element from the given sequence. Raises\n"
"IndexError when the sequence is empty.\n"
msgstr ""

#: modes/api/adafruit.py:226 modes/api/adafruit.py:227
msgid ""
"random.getrandbits(k) \n"
"Returns an integer with k random bits.\n"
msgstr ""

#: modes/api/adafruit.py:228 modes/api/adafruit.py:229
msgid ""
"random.randint(a, b) \n"
"Returns a randomly selected integer between a and b inclusive. Equivalent\n"
"to randrange(a, b + 1, 1)\n"
msgstr ""

#: modes/api/adafruit.py:230 modes/api/adafruit.py:231
msgid ""
"random.random() \n"
"Returns a random float between 0 and 1.0.\n"
msgstr ""

#: modes/api/adafruit.py:232 modes/api/adafruit.py:233
msgid ""
"random.randrange(stop) \n"
"Returns a randomly selected integer from range(start, stop, step).\n"
msgstr ""

#: modes/api/adafruit.py:234 modes/api/adafruit.py:235
msgid ""
"random.seed(seed) \n"
"Sets the starting seed of the random  number generation. Further calls to\n"
"random will return deterministic results afterwards.\n"
msgstr ""

#: modes/api/adafruit.py:236 modes/api/adafruit.py:237
msgid ""
"random.uniform(a, b) \n"
"Returns a random float between a and b. It may or may not be inclusive\n"
"depending on float rounding.\n"
msgstr ""

#: modes/api/adafruit.py:238
msgid ""
"rotaryio.IncrementalEncoder(pin_a, pin_b) \n"
"Create an IncrementalEncoder object associated with the given pins. It "
"tracks the positional\n"
"state of an incremental rotary encoder (also known as a quadrature encoder.) "
"Position is\n"
"relative to the position when the object is contructed.\n"
"\n"
"\n"
"Parameters:\n"
"pin_a (Pin) -- First pin to read pulses from.\n"
"pin_b (Pin) -- Second pin to read pulses from."
msgstr ""

#: modes/api/adafruit.py:239
msgid ""
"rotaryio.IncrementalEncoder.deinit() \n"
"Deinitializes the IncrementalEncoder and releases any hardware resources for "
"reuse.\n"
msgstr ""

#: modes/api/adafruit.py:240
msgid ""
"rotaryio.IncrementalEncoder.position() \n"
"The current position in terms of pulses. The number of pulses per rotation "
"is defined by the\n"
"specific hardware.\n"
msgstr ""

#: modes/api/adafruit.py:241
msgid ""
"rtc.RTC() \n"
"This class represents the onboard Real Time Clock. It is a singleton and "
"will always return the same instance.\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:242
msgid ""
"rtc.RTC.calibration() \n"
"The RTC calibration value.\n"
"A positive value speeds up the clock and a negative value slows it down.\n"
"Range and value is hardware specific, but one step is often approx. 1 ppm.\n"
msgstr ""

#: modes/api/adafruit.py:243
msgid ""
"rtc.RTC.datetime() \n"
"The date and time of the RTC.\n"
msgstr ""

#: modes/api/adafruit.py:244
msgid ""
"rtc.set_time_source(rtc) \n"
"Sets the rtc time source used by time.localtime().\n"
"The default is rtc.RTC().\n"
"Example usage:\n"
"import rtc\n"
"import time\n"
"\n"
"class RTC(object):\n"
"    @property\n"
"    def datetime(self):\n"
"        return time.struct_time((2018, 3, 17, 21, 1, 47, 0, 0, 0))\n"
"\n"
"r = RTC()\n"
"rtc.set_time_source(r)\n"
"\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:245 modes/api/adafruit.py:246
msgid ""
"storage.VfsFat(block_device) \n"
"Create a new VfsFat filesystem around the given block device.\n"
"\n"
"\n"
"Parameters:block_device -- Block device the the filesystem lives on"
msgstr ""

#: modes/api/adafruit.py:247
msgid ""
"storage.VfsFat.ilistdir(path) \n"
"Return an iterator whose values describe files and folders within\n"
"path\n"
msgstr ""

#: modes/api/adafruit.py:248
msgid ""
"storage.VfsFat.label() \n"
"The filesystem label, up to 11 case-insensitive bytes.  Note that\n"
"this property can only be set when the device is writable by the\n"
"microcontroller.\n"
msgstr ""

#: modes/api/adafruit.py:249
msgid ""
"storage.VfsFat.mkdir(path) \n"
"Like os.mkdir\n"
msgstr ""

#: modes/api/adafruit.py:250
msgid ""
"storage.VfsFat.mkfs() \n"
"Format the block device, deleting any data that may have been there\n"
msgstr ""

#: modes/api/adafruit.py:251
msgid ""
"storage.VfsFat.mount(readonly, mkfs) \n"
"Don’t call this directly, call storage.mount.\n"
msgstr ""

#: modes/api/adafruit.py:252
msgid ""
"storage.VfsFat.open(path, mode) \n"
"Like builtin open()\n"
msgstr ""

#: modes/api/adafruit.py:253
msgid ""
"storage.VfsFat.rmdir(path) \n"
"Like os.rmdir\n"
msgstr ""

#: modes/api/adafruit.py:254
msgid ""
"storage.VfsFat.stat(path) \n"
"Like os.stat\n"
msgstr ""

#: modes/api/adafruit.py:255
msgid ""
"storage.VfsFat.statvfs(path) \n"
"Like os.statvfs\n"
msgstr ""

#: modes/api/adafruit.py:256
msgid ""
"storage.VfsFat.umount() \n"
"Don’t call this directly, call storage.umount.\n"
msgstr ""

#: modes/api/adafruit.py:257
msgid ""
"storage.erase_filesystem() \n"
"Erase and re-create the CIRCUITPY filesystem.\n"
"On boards that present USB-visible CIRCUITPY drive (e.g., SAMD21 and "
"SAMD51),\n"
"then call microcontroller.reset() to restart CircuitPython and have the\n"
"host computer remount CIRCUITPY.\n"
"This function can be called from the REPL when CIRCUITPY\n"
"has become corrupted.\n"
"\n"
"Warning\n"
"All the data on CIRCUITPY will be lost, and\n"
"CircuitPython will restart on certain boards.\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:258
msgid ""
"storage.getmount(mount_path) \n"
"Retrieves the mount object associated with the mount path\n"
msgstr ""

#: modes/api/adafruit.py:259 modes/api/adafruit.py:260
msgid ""
"storage.mount(filesystem, mount_path, *, readonly=False) \n"
"Mounts the given filesystem object at the given path.\n"
"This is the CircuitPython analog to the UNIX mount command.\n"
msgstr ""

#: modes/api/adafruit.py:261
msgid ""
"storage.remount(mount_path, readonly) \n"
"Remounts the given path with new parameters.\n"
msgstr ""

#: modes/api/adafruit.py:262
msgid ""
"storage.remount(mount_path, readonly=False) \n"
"Remounts the given path with new parameters.\n"
msgstr ""

#: modes/api/adafruit.py:263 modes/api/adafruit.py:264
msgid ""
"storage.umount(mount) \n"
"Unmounts the given filesystem object or if mount is a path, then unmount\n"
"the filesystem mounted at that location.\n"
"This is the CircuitPython analog to the UNIX umount command.\n"
msgstr ""

#: modes/api/adafruit.py:265
msgid ""
"struct.calcsize(fmt) \n"
"Return the number of bytes needed to store the given fmt.\n"
msgstr ""

#: modes/api/adafruit.py:266
msgid ""
"struct.pack(fmt, v1, v2, ...) \n"
"Pack the values v1, v2, … according to the format string fmt.\n"
"The return value is a bytes object encoding the values.\n"
msgstr ""

#: modes/api/adafruit.py:267
msgid ""
"struct.pack_into(fmt, buffer, offset, v1, v2, ...) \n"
"Pack the values v1, v2, … according to the format string fmt into a buffer\n"
"starting at offset. offset may be negative to count from the end of buffer.\n"
msgstr ""

#: modes/api/adafruit.py:268
msgid ""
"struct.unpack(fmt, data) \n"
"Unpack from the data according to the format string fmt. The return value\n"
"is a tuple of the unpacked values.\n"
msgstr ""

#: modes/api/adafruit.py:269
msgid ""
"struct.unpack_from(fmt, data, offset) \n"
"Unpack from the data starting at offset according to the format string fmt.\n"
"offset may be negative to count from the end of buffer. The return value is\n"
"a tuple of the unpacked values.\n"
msgstr ""

#: modes/api/adafruit.py:270
msgid ""
"supervisor.Runtime() \n"
"You cannot create an instance of supervisor.Runtime.\n"
"Use supervisor.runtime to access the sole instance available.\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:271
msgid ""
"supervisor.Runtime.serial_connected() \n"
"Returns the USB serial communication status (read-only).\n"
msgstr ""

#: modes/api/adafruit.py:272 modes/api/adafruit.py:273
msgid ""
"time.struct_time((tm_year, tm_mon, tm_mday, tm_hour, tm_min, tm_sec, "
"tm_wday, tm_yday, tm_isdst)) \n"
"Structure used to capture a date and time. Note that it takes a tuple!\n"
"\n"
"\n"
"Parameters:\n"
"tm_year (int) -- the year, 2017 for example\n"
"tm_mon (int) -- the month, range [1, 12]\n"
"tm_mday (int) -- the day of the month, range [1, 31]\n"
"tm_hour (int) -- the hour, range [0, 23]\n"
"tm_min (int) -- the minute, range [0, 59]\n"
"tm_sec (int) -- the second, range [0, 61]\n"
"tm_wday (int) -- the day of the week, range [0, 6], Monday is 0\n"
"tm_yday (int) -- the day of the year, range [1, 366], -1 indicates not "
"known\n"
"tm_isdst (int) -- 1 when in daylight savings, 0 when not, -1 if unknown."
msgstr ""

#: modes/api/adafruit.py:274 modes/api/adafruit.py:275
msgid ""
"touchio.TouchIn(pin) \n"
"Use the TouchIn on the given pin.\n"
"\n"
"\n"
"Parameters:pin (Pin) -- the pin to read from"
msgstr ""

#: modes/api/adafruit.py:276 modes/api/adafruit.py:277
msgid ""
"touchio.TouchIn.deinit() \n"
"Deinitialises the TouchIn and releases any hardware resources for reuse.\n"
msgstr ""

#: modes/api/adafruit.py:278
msgid ""
"touchio.TouchIn.raw_value() \n"
"The raw touch measurement as an int. (read-only)\n"
msgstr ""

#: modes/api/adafruit.py:279
msgid ""
"touchio.TouchIn.threshold() \n"
"Minimum raw_value needed to detect a touch (and for value to be True).\n"
"When the TouchIn object is created, an initial raw_value is read from the "
"pin,\n"
"and then threshold is set to be 100 + that value.\n"
"You can adjust threshold to make the pin more or less sensitive.\n"
msgstr ""

#: modes/api/adafruit.py:280
msgid ""
"touchio.TouchIn.value() \n"
"Whether the touch pad is being touched or not.\n"
"\n"
"\n"
"\n"
"\n"
"Returns:True when touched, False otherwise.\n"
"\n"
"Return type:bool\n"
"\n"
"\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:281
msgid ""
"touchio.TouchIn.value() \n"
"Whether the touch pad is being touched or not. (read-only)\n"
"True when raw_value > threshold.\n"
msgstr ""

#: modes/api/adafruit.py:282 modes/api/adafruit.py:283
msgid ""
"usb_hid.Device() \n"
"Not currently dynamically supported.\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:284 modes/api/adafruit.py:285
msgid ""
"usb_hid.Device.send_report(buf) \n"
"Send a HID report.\n"
msgstr ""

#: modes/api/adafruit.py:286
msgid ""
"usb_hid.Device.usage() \n"
"The functionality of the device. For example Keyboard is 0x06 within the\n"
"generic desktop usage page 0x01. Mouse is 0x02 within the same usage\n"
"page.\n"
"\n"
"\n"
"\n"
"\n"
"Returns:the usage within the usage page\n"
"\n"
"Return type:int\n"
"\n"
"\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:287
msgid ""
"usb_hid.Device.usage() \n"
"The functionality of the device as an int. (read-only)\n"
"For example, Keyboard is 0x06 within the generic desktop usage page 0x01.\n"
"Mouse is 0x02 within the same usage page.\n"
msgstr ""

#: modes/api/adafruit.py:288
msgid ""
"usb_hid.Device.usage_page() \n"
"The usage page of the device. Can be thought of a category.\n"
"\n"
"\n"
"\n"
"\n"
"Returns:the device’s usage page\n"
"\n"
"Return type:int\n"
"\n"
"\n"
"\n"
msgstr ""

#: modes/api/adafruit.py:289
msgid ""
"usb_hid.Device.usage_page() \n"
"The usage page of the device as an int. Can be thought of a category. (read-"
"only)\n"
msgstr ""

#: modes/api/esp.py:24 modes/api/makeblock.py:24 modes/api/microbit.py:24
msgid ""
"random.getrandbits(n) \n"
"Return an integer with n random bits."
msgstr ""

#: modes/api/esp.py:25 modes/api/makeblock.py:25 modes/api/microbit.py:25
msgid ""
"random.seed(n) \n"
"Initialise the random number generator with a known integer 'n'."
msgstr ""

#: modes/api/esp.py:26 modes/api/makeblock.py:26 modes/api/microbit.py:26
msgid ""
"random.randint(a, b) \n"
"Return a random whole number between a and b (inclusive)."
msgstr ""

#: modes/api/esp.py:27 modes/api/makeblock.py:27 modes/api/microbit.py:27
msgid ""
"random.randrange(stop) \n"
"Return a random whole number between 0 and up to (but not including) stop."
msgstr ""

#: modes/api/esp.py:28 modes/api/makeblock.py:28 modes/api/microbit.py:28
msgid ""
"random.choice(seq) \n"
"Return a randomly selected element from a sequence of objects (such as a "
"list)."
msgstr ""

#: modes/api/esp.py:29 modes/api/makeblock.py:29 modes/api/microbit.py:29
msgid ""
"random.random() \n"
"Return a random floating point number between 0.0 and 1.0."
msgstr ""

#: modes/api/esp.py:30 modes/api/makeblock.py:30 modes/api/microbit.py:30
msgid ""
"random.uniform(a, b) \n"
"Return a random floating point number between a and b (inclusive)."
msgstr ""

#: modes/api/esp.py:32 modes/api/makeblock.py:32 modes/api/microbit.py:32
msgid ""
"os.listdir() \n"
"Return a list of the names of all the files contained within the local\n"
"on-device file system."
msgstr ""

#: modes/api/esp.py:33 modes/api/makeblock.py:33 modes/api/microbit.py:33
msgid ""
"os.remove(filename) \n"
"Remove (delete) the file named filename."
msgstr ""

#: modes/api/esp.py:34 modes/api/makeblock.py:34 modes/api/microbit.py:34
msgid ""
"os.size(filename) \n"
"Return the size, in bytes, of the file named filename."
msgstr ""

#: modes/api/esp.py:35 modes/api/makeblock.py:35 modes/api/microbit.py:35
msgid ""
"os.uname() \n"
"Return information about MicroPython and the device."
msgstr ""

#: modes/api/esp.py:36
msgid ""
"os.getcwd() \n"
"Return current working directory"
msgstr ""

#: modes/api/esp.py:37
msgid ""
"os.chdir(path) \n"
"Change current working directory"
msgstr ""

#: modes/api/esp.py:38
msgid ""
"os.mkdir(path) \n"
"Make new directory"
msgstr ""

#: modes/api/esp.py:39
msgid ""
"os.rmdir(path) \n"
"Remove directory"
msgstr ""

#: modes/api/esp.py:40
msgid ""
"os.listdir(path='.') \n"
"Return list of directory. Defaults to current working directory."
msgstr ""

#: modes/api/esp.py:42
msgid ""
"sys.version \n"
"Return Python version as a string "
msgstr ""

#: modes/api/esp.py:43
msgid ""
"sys.version_info \n"
"Return Python version as a tuple"
msgstr ""

#: modes/api/esp.py:44
msgid ""
"sys.implementation \n"
"Return MicroPython version"
msgstr ""

#: modes/api/esp.py:45
msgid ""
"sys.platform \n"
"Return hardware platform as string, e.g. 'esp8266' or 'esp32'"
msgstr ""

#: modes/api/esp.py:46
msgid ""
"sys.byteorder \n"
"Return platform endianness. 'little' for least-significant byte first or "
"'big' for most-significant byte first."
msgstr ""

#: modes/api/esp.py:47 modes/api/makeblock.py:42 modes/api/microbit.py:42
msgid ""
"sys.print_exception(ex) \n"
"Print to the REPL information about the exception 'ex'."
msgstr ""

#: modes/api/esp.py:49
msgid ""
"machine.reset() \n"
"Resets the device in a manner similar to pushing the external RESET button"
msgstr ""

#: modes/api/esp.py:50
msgid ""
"machine.freq() \n"
"Returns CPU frequency in hertz."
msgstr ""

#: modes/api/esp.py:52
msgid ""
"machine.Pin(id [, mode, pull])\n"
"Create a Pin-object. Only id is mandatory.\n"
"mode (optional): specifies the pin mode (Pin.OUT or Pin.IN)\n"
"pull (optional): specifies if the pin has a pull resistor attached \n"
"  pull can be one of: None, Pin.PULL_UP or Pin.PULL_DOWN."
msgstr ""

#: modes/api/esp.py:56
msgid ""
"machine.Pin.value([x])\n"
" This method allows to set and get the\n"
"value of the pin, depending on whether the argument x is supplied or not.\n"
"If the argument is omitted, the method returns the actual input value (0 or "
"1) on the pin.\n"
"If the argument is supplied, the method sets the output to the given value."
msgstr ""

#: modes/api/esp.py:60
msgid "machine.Pin.OUT"
msgstr ""

#: modes/api/esp.py:61
msgid "machine.Pin.IN"
msgstr ""

#: modes/api/esp.py:62
msgid "machine.Pin.PULL_UP"
msgstr ""

#: modes/api/esp.py:63
msgid "machine.Pin.PULL_DOWN"
msgstr ""

#: modes/api/esp.py:64
msgid ""
"machine.ADC(pin)\n"
"Create an ADC object associated with the given pin. \n"
"This allows you to then read analog values on that pin.\n"
"machine.ADC(machine.Pin(39))"
msgstr ""

#: modes/api/esp.py:68
msgid ""
"machine.ADC.read() \n"
"Read the analog pin value.\n"
"\n"
"adc = machine.ADC(machine.Pin(39))\n"
"value = adc.read()"
msgstr ""

#: modes/api/esp.py:70
msgid ""
"time.sleep(seconds) \n"
"Sleep the given number of seconds."
msgstr ""

#: modes/api/esp.py:71
msgid ""
"time.sleep_ms(milliseconds) \n"
"Sleep the given number of milliseconds."
msgstr ""

#: modes/api/esp.py:72
msgid ""
"time.sleep_us(milliseconds) \n"
"Sleep the given number of microseconds."
msgstr ""

#: modes/api/esp.py:73
msgid ""
"time.ticks_ms() \n"
"Return number of milliseconds from an increasing counter. Wraps around after "
"some value."
msgstr ""

#: modes/api/esp.py:74
msgid ""
"time.ticks_us() \n"
"Return number of microseconds from an increasing counter. Wraps around after "
"some value."
msgstr ""

#: modes/api/esp.py:75
msgid ""
"time.ticks_diff() \n"
"Compute difference between values ticks values obtained from time.ticks_ms() "
"and time.ticks_us()."
msgstr ""

#: modes/api/esp.py:76
msgid ""
"time.time() \n"
"Returns the number of seconds, as an integer, since the Epoch, \n"
"assuming that underlying RTC is set and maintained. If an\n"
"RTC is not set, this function returns number of seconds since a\n"
"port-specific reference point in time (usually since boot or reset)."
msgstr ""

#: modes/api/esp.py:82
msgid ""
"network.WLAN(interface_id) \n"
"\n"
"Create a WLAN interface object. Supported interfaces are:\n"
"network.STA_IF (station aka client, connects to upstream WiFi access points) "
"and \n"
"network.AP_IF (access point mode, allows other WiFi clients to connect)."
msgstr ""

#: modes/api/esp.py:86
msgid "network.WLAN.STA_IF"
msgstr ""

#: modes/api/esp.py:87
msgid "network.WLAN.AP_IF"
msgstr ""

#: modes/api/esp.py:88
msgid ""
"network.WLAN.active([ is_active ])\n"
"Activates or deactivates the network interface when given boolean\n"
"argument. When argument is omitted the function returns the current state."
msgstr ""

#: modes/api/esp.py:91
msgid ""
"network.WLAN.connect(ssid, password)\n"
"Connect to the specified wireless network using the specified password."
msgstr ""

#: modes/api/esp.py:93
msgid ""
"network.WLAN.disconnect() \n"
"Disconnect from the currently connected wireless network."
msgstr ""

#: modes/api/esp.py:94
msgid ""
"network.WLAN.scan()\n"
"Scan for the available wireless networks. Scanning is only possible on\n"
"STA interface. Returns list of tuples with the information about WiFi\n"
"access points:\n"
"   (ssid, bssid, channel, RSSI, authmode, hidden)"
msgstr ""

#: modes/api/esp.py:99
msgid ""
"network.WLAN.status()\n"
"Return the current status of the wireless connection. Possible values:\n"
" - STAT_IDLE (no connection and no activity)\n"
" - STAT_CONNECTING (connecting in progress)\n"
" - STAT_WRONG_PASSWORD (failed due to incorrect password),\n"
" - STAT_NO_AP_FOUND (failed because no access point replied),\n"
" - STAT_CONNECT_FAIL (failed due to other problems),\n"
" - STAT_GOT_IP (connection successful)"
msgstr ""

#: modes/api/esp.py:107
msgid ""
"network.WLAN.isconnected()\n"
"In case of STA mode, returns True if connected to a WiFi access point\n"
"and has a valid IP address. In AP mode returns True when a station is\n"
"connected. Returns False otherwise."
msgstr ""

#: modes/api/esp.py:111
msgid ""
"network.WLAN.ifconfig([ (ip, subnet, gateway, dns) ]) \n"
"Get/set IP-level network interface parameters: IP address, subnet\n"
"mask, gateway and DNS server. When called with no arguments, this\n"
"method returns a 4-tuple with the above information. To set the above\n"
"values, pass a 4-tuple with the required information. For example:\n"
"\n"
"nic = network.WLAN(network.WLAN.AP_IF)\n"
"nic.ifconfig(('192.168.0.4', '255.255.255.0', '192.168.0.1', '8.8.8.8'))"
msgstr ""

#: modes/api/esp.py:120
msgid ""
"urequests.get(url, headers={})\n"
"Send HTTP GET request to the given URL. \n"
"An optional dictionary of HTTP headers can be provided.\n"
"Returns a urequests.Response-object"
msgstr ""

#: modes/api/esp.py:124
msgid ""
"urequests.post(url, data=None, json=None, headers={}) \n"
"Send HTTP POST request to the given URL. Returns a\n"
"urequests.Response-object.\n"
" - data (optional): bytes to send in the body of the request.\n"
" - json (optional): JSON data to send in the body of the Request.\n"
" - headers (optional): An optional dictionary of HTTP headers."
msgstr ""

#: modes/api/esp.py:130
msgid ""
"urequests.Response() \n"
" Object returned by "
msgstr ""

#: modes/api/esp.py:131
msgid ""
"urequests.Response.text \n"
" String representation of response "
msgstr ""

#: modes/api/esp.py:132
msgid ""
"urequests.Response.json() \n"
" Convert Response from JSON to Python dictionary."
msgstr ""

#: modes/api/esp.py:134
msgid ""
"neopixel.NeoPixel(pin, n) \n"
"\n"
"Create a list representing a strip of 'n' neopixels controlled from\n"
"the specified pin (e.g. machine.Pin(0)). Use the resulting object to\n"
"change each pixel by position (starting from 0). Individual pixels\n"
"are given RGB (red, green, blue) values between 0-255 as a tupel. For\n"
"example, (255, 255, 255) is white:\n"
"\n"
"np = neopixel.NeoPixel(machine.Pin(0), 8)\n"
"np[0] = (255, 0, 128)\n"
"np.write()"
msgstr ""

#: modes/api/esp.py:144
msgid ""
"neopixel.NeoPixel.write() \n"
"Show the pixels. Must be called for any updates to become visible."
msgstr ""

#: modes/api/esp.py:146 modes/api/makeblock.py:266 modes/api/microbit.py:319
msgid ""
"math.sqrt(x) \n"
"Return the square root of 'x'."
msgstr ""

#: modes/api/esp.py:147 modes/api/makeblock.py:267 modes/api/microbit.py:320
msgid ""
"math.pow(x, y) \n"
"Return 'x' raised to the power 'y'."
msgstr ""

#: modes/api/esp.py:148 modes/api/makeblock.py:268 modes/api/microbit.py:321
msgid ""
"math.exp(x) \n"
"Return math.e**'x'."
msgstr ""

#: modes/api/esp.py:149 modes/api/makeblock.py:269 modes/api/microbit.py:322
msgid ""
"math.log(x, base=math.e) \n"
"With one argument, return the natural logarithm of 'x' (to base e).\n"
"With two arguments, return the logarithm of 'x' to the given 'base'."
msgstr ""

#: modes/api/esp.py:150 modes/api/makeblock.py:270 modes/api/microbit.py:323
msgid ""
"math.cos(x) \n"
"Return the cosine of 'x' radians."
msgstr ""

#: modes/api/esp.py:151 modes/api/makeblock.py:271 modes/api/microbit.py:324
msgid ""
"math.sin(x) \n"
"Return the sine of 'x' radians."
msgstr ""

#: modes/api/esp.py:152 modes/api/makeblock.py:272 modes/api/microbit.py:325
msgid ""
"math.tan(x) \n"
"Return the tangent of 'x' radians."
msgstr ""

#: modes/api/esp.py:153 modes/api/makeblock.py:273 modes/api/microbit.py:326
msgid ""
"math.acos(x) \n"
"Return the arc cosine of 'x', in radians."
msgstr ""

#: modes/api/esp.py:154 modes/api/makeblock.py:274 modes/api/microbit.py:327
msgid ""
"math.asin(x) \n"
"Return the arc sine of 'x', in radians."
msgstr ""

#: modes/api/esp.py:155 modes/api/makeblock.py:275 modes/api/microbit.py:328
msgid ""
"math.atan(x) \n"
"Return the arc tangent of 'x', in radians."
msgstr ""

#: modes/api/esp.py:156 modes/api/makeblock.py:276 modes/api/microbit.py:329
msgid ""
"math.atan2(x, y) \n"
"Return atan(y / x), in radians."
msgstr ""

#: modes/api/esp.py:157 modes/api/makeblock.py:277 modes/api/microbit.py:330
msgid ""
"math.ceil(x) \n"
"Return the ceiling of 'x', the smallest integer greater than or equal to 'x'."
msgstr ""

#: modes/api/esp.py:158 modes/api/makeblock.py:278 modes/api/microbit.py:331
msgid ""
"math.copysign(x, y) \n"
"Return a float with the magnitude (absolute value) of 'x' but the sign of "
"'y'. "
msgstr ""

#: modes/api/esp.py:159 modes/api/makeblock.py:279 modes/api/microbit.py:332
msgid ""
"math.fabs(x) \n"
"Return the absolute value of 'x'."
msgstr ""

#: modes/api/esp.py:160 modes/api/makeblock.py:280 modes/api/microbit.py:333
msgid ""
"math.floor(x) \n"
"Return the floor of 'x', the largest integer less than or equal to 'x'."
msgstr ""

#: modes/api/esp.py:161 modes/api/makeblock.py:281 modes/api/microbit.py:334
msgid ""
"math.fmod(x, y) \n"
"Return 'x' modulo 'y'."
msgstr ""

#: modes/api/esp.py:162 modes/api/makeblock.py:282 modes/api/microbit.py:335
msgid ""
"math.frexp(x) \n"
"Return the mantissa and exponent of 'x' as the pair (m, e). "
msgstr ""

#: modes/api/esp.py:163 modes/api/makeblock.py:283 modes/api/microbit.py:336
msgid ""
"math.ldexp(x, i) \n"
"Return 'x' * (2**'i')."
msgstr ""

#: modes/api/esp.py:164 modes/api/makeblock.py:284 modes/api/microbit.py:337
msgid ""
"math.modf(x) \n"
"Return the fractional and integer parts of x.\n"
"Both results carry the sign of x and are floats."
msgstr ""

#: modes/api/esp.py:165 modes/api/makeblock.py:285 modes/api/microbit.py:338
msgid ""
"math.isfinite(x) \n"
"Return True if 'x' is neither an infinity nor a NaN, and False otherwise."
msgstr ""

#: modes/api/esp.py:166 modes/api/makeblock.py:286 modes/api/microbit.py:339
msgid ""
"math.isinf(x) \n"
"Return True if 'x' is a positive or negative infinity, and False otherwise."
msgstr ""

#: modes/api/esp.py:167 modes/api/makeblock.py:287 modes/api/microbit.py:340
msgid ""
"math.isnan(x) \n"
"Return True if 'x' is a NaN (not a number), and False otherwise."
msgstr ""

#: modes/api/esp.py:168 modes/api/makeblock.py:288 modes/api/microbit.py:341
msgid ""
"math.trunc(x) \n"
"Return the Real value 'x' truncated to an Integral (usually an integer)."
msgstr ""

#: modes/api/esp.py:169 modes/api/makeblock.py:289 modes/api/microbit.py:342
msgid ""
"math.radians(x) \n"
"Convert angle 'x' from degrees to radians."
msgstr ""

#: modes/api/esp.py:170 modes/api/makeblock.py:290 modes/api/microbit.py:343
msgid ""
"math.degrees(x) \n"
"Convert angle 'x' from radians to degrees."
msgstr ""

#: modes/api/makeblock.py:37 modes/api/microbit.py:37
msgid "sys.version"
msgstr ""

#: modes/api/makeblock.py:38 modes/api/microbit.py:38
msgid "sys.version_info"
msgstr ""

#: modes/api/makeblock.py:39 modes/api/microbit.py:39
msgid "sys.implementation"
msgstr ""

#: modes/api/makeblock.py:40 modes/api/microbit.py:40
msgid "sys.platform"
msgstr ""

#: modes/api/makeblock.py:41 modes/api/microbit.py:41
msgid "sys.byteorder"
msgstr ""

#: modes/api/makeblock.py:44
msgid "time.sleep()"
msgstr ""

#: modes/api/makeblock.py:46
msgid ""
"mbuild.dc_motor_driver.set_power(speed, index = 1) \n"
"Set the power of the DC Motor."
msgstr ""

#: modes/api/makeblock.py:47
msgid ""
"mbuild.dc_motor_driver.change_power(speed, index = 1) \n"
"Change the power of the DC Motor"
msgstr ""

#: modes/api/makeblock.py:48
msgid ""
"mbuild.dc_motor_driver.get_power(index = 1) \n"
"Get the power of the DC Motor"
msgstr ""

#: modes/api/makeblock.py:49
msgid ""
"mbuild.dc_motor_driver.get_load(index = 1) \n"
"Get the load of the DC Motor"
msgstr ""

#: modes/api/makeblock.py:50
msgid ""
"mbuild.dc_motor_driver.stop_all() \n"
"Stop the DC Motor"
msgstr ""

#: modes/api/makeblock.py:52
msgid ""
"mbuild.dual_rgb_sensor.study(index = 1) \n"
"Calibrate the RGB Sensor"
msgstr ""

#: modes/api/makeblock.py:53
msgid ""
"mbuild.dual_rgb_sensor.get_all_data(index = 1) \n"
"Get all data from the RGB Sensor"
msgstr ""

#: modes/api/makeblock.py:54
msgid ""
"mbuild.dual_rgb_sensor.get_intensity(channel, index = 1) \n"
"Get the light intensity of the RGB Sensor"
msgstr ""

#: modes/api/makeblock.py:55
msgid ""
"mbuild.dual_rgb_sensor.is_state(state, index = 1) \n"
"Test the state of the RGB Sensor"
msgstr ""

#: modes/api/makeblock.py:56
msgid "mbuild.dual_rgb_sensor.get_offset_track_value(index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:57
msgid "mbuild.dual_rgb_sensor.is_color(channel, color, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:58
msgid ""
"mbuild.dual_rgb_sensor.set_led_color(color, index = 1) \n"
"Set the LED Color on the RGB Sensor"
msgstr ""

#: modes/api/makeblock.py:59
msgid "mbuild.dual_rgb_sensor.is_on_track(channel, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:60
msgid "mbuild.dual_rgb_sensor.is_on_background(channel, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:61
msgid "mbuild.dual_rgb_sensor.set_motor_diff_speed_kp(value) \n"
msgstr ""

#: modes/api/makeblock.py:62
msgid "mbuild.dual_rgb_sensor.get_motor_diff_speed(index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:63
msgid "mbuild.dual_rgb_sensor.set_report_mode(mode, timestamp, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:64
msgid "mbuild.dual_rgb_sensor.get_red(channel, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:65
msgid "mbuild.dual_rgb_sensor.get_green(channel, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:66
msgid "mbuild.dual_rgb_sensor.get_blue(channel, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:67
msgid "mbuild.dual_rgb_sensor.get_reflected_light(channel, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:68
msgid "mbuild.dual_rgb_sensor.set_light_color(color, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:69
msgid ""
"mbuild.dual_rgb_sensor.set_all_data_report_mode(mode, timestamp, index = "
"1) \n"
msgstr ""

#: modes/api/makeblock.py:71
msgid "mbuild.humiture_sensor.get_relative_humidity(index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:72
msgid "mbuild.humiture_sensor.get_temperature(opt = 'celsius', index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:73
msgid "mbuild.humiture_sensor.set_report_mode(mode,timestamp,index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:75
msgid ""
"mbuild.led_panel.show_image(image, pos_x = 0, pos_y = 0, time_s = None, "
"index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:76
msgid ""
"mbuild.led_panel.show(var, pos_x = None, pos_y = None, wait = True, index = "
"1) \n"
msgstr ""

#: modes/api/makeblock.py:77
msgid "mbuild.led_panel.set_pixel(pos_x, pos_y, status, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:78
msgid "mbuild.led_panel.get_pixel(pos_x, pos_y, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:79
msgid "mbuild.led_panel.toggle_pixel(pos_x, pos_y, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:80
msgid "mbuild.led_panel.clear(index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:82
msgid ""
"mbuild.led_strip.set_single(led_index, red_value, green_value, blue_value, "
"index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:83
msgid ""
"mbuild.led_strip.set_all(red_value, green_value, blue_value, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:84
msgid "mbuild.led_strip.off_all(index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:85
msgid "mbuild.led_strip.set_red(led_index, value, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:86
msgid "mbuild.led_strip.set_green(led_index, value, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:87
msgid "mbuild.led_strip.set_blue(led_index, value, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:88
msgid "mbuild.led_strip.change_red(led_index, value, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:89
msgid "mbuild.led_strip.change_green(led_index, value, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:90
msgid "mbuild.led_strip.change_blue(led_index, value, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:91
msgid "mbuild.led_strip.set_mode(mode, index =1) \n"
msgstr ""

#: modes/api/makeblock.py:92
msgid "mbuild.led_strip.set_block(led_num, data, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:93
msgid "mbuild.led_strip.set_effect(mode, speed, data, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:95
msgid "mbuild.pir_sensor.is_activated(index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:96
msgid "mbuild.pir_sensor.get_count(index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:97
msgid "mbuild.pir_sensor.reset_count(index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:98
msgid "mbuild.pir_sensor.set_report_mode(mode,timestamp,index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:100
msgid "mbuild.ranging_sensor.get_distance(index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:101
msgid "mbuild.ranging_sensor.set_report_mode(mode, timestamp, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:103
msgid "mbuild.servo_driver.set_angle(position, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:104
msgid "mbuild.servo_driver.change_angle(position, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:105
msgid "mbuild.servo_driver.get_angle(index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:106
msgid "mbuild.servo_driver.get_load(index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:107
msgid "mbuild.servo_driver.set_report_mode(mode, timestamp, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:109
msgid "mbuild.slider.get_value(index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:110
msgid "mbuild.slider.set_report_mode(mode, timestamp, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:112
msgid "mbuild.speaker.stop_sounds(index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:113
msgid "mbuild.speaker.set_volume(value, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:114
msgid "mbuild.speaker.change_volume(value, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:115
msgid "mbuild.speaker.get_volume(index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:116
msgid "mbuild.speaker.play_note(note, beat = None, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:117
msgid "mbuild.speaker.play_tone(frequency, time_s = None, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:118
msgid "mbuild.speaker.play_melody(sound_name, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:119
msgid "mbuild.speaker.play_melody_until_done(sound_name, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:120
msgid "mbuild.speaker.is_playing(index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:122
msgid "mbuild.ultrasonic_sensor.get_distance(index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:123
msgid "mbuild.ultrasonic_sensor.set_report_mode(mode, timestamp, index = 1) \n"
msgstr ""

#: modes/api/makeblock.py:126
msgid "halo.timer_t() \n"
msgstr ""

#: modes/api/makeblock.py:127
msgid "halo.reset_timer() \n"
msgstr ""

#: modes/api/makeblock.py:129
msgid "halo.button.is_pressed() \n"
msgstr ""

#: modes/api/makeblock.py:131
msgid "halo.led.show_single(self, led_id, r, g, b, percentage = 100) \n"
msgstr ""

#: modes/api/makeblock.py:132
msgid "halo.led.show_all(self, r_color, g = 0, b = 0, percentage = 100) \n"
msgstr ""

#: modes/api/makeblock.py:133
msgid "halo.led.off_single(self, led_id): \n"
msgstr ""

#: modes/api/makeblock.py:134
msgid "halo.led.off_all(self) \n"
msgstr ""

#: modes/api/makeblock.py:135
msgid "halo.led.clear(self) \n"
msgstr ""

#: modes/api/makeblock.py:136
msgid "halo.led.show_ring(self, color_str, offset = 0) \n"
msgstr ""

#: modes/api/makeblock.py:137
msgid "halo.led.ring_graph(self, percentage) \n"
msgstr ""

#: modes/api/makeblock.py:138
msgid "halo.led.meteor_effect(self) \n"
msgstr ""

#: modes/api/makeblock.py:139
msgid "halo.led.rainbow_effect(self) \n"
msgstr ""

#: modes/api/makeblock.py:140
msgid "halo.led.spoondrift_effect(self) \n"
msgstr ""

#: modes/api/makeblock.py:141
msgid "halo.led.firefly_effect(self) \n"
msgstr ""

#: modes/api/makeblock.py:142
msgid "halo.led.show_animation(self, name_string) \n"
msgstr ""

#: modes/api/makeblock.py:143
msgid "halo.led.show_full_color(self, data, offset = 0) \n"
msgstr ""

#: modes/api/makeblock.py:145
msgid "halo.mesh.mesh_keep_alive_task() \n"
msgstr ""

#: modes/api/makeblock.py:146
msgid "halo.mesh.mesh_keep_alive() \n"
msgstr ""

#: modes/api/makeblock.py:147
msgid ""
"halo.mesh.start(type = 'node', mesh_id = (0x77,0x77,0x77,0x77,0x77,0x77), "
"router_ssid = 'hello', router_password = '12345678', max_connection = n, "
"channel = 6) \n"
msgstr ""

#: modes/api/makeblock.py:148
msgid "halo.mesh.calculate_mesh_id(group_name) \n"
msgstr ""

#: modes/api/makeblock.py:149
msgid "halo.mesh.start_group(group_name) \n"
msgstr ""

#: modes/api/makeblock.py:150
msgid "halo.mesh.join_group(group_name) \n"
msgstr ""

#: modes/api/makeblock.py:151
msgid "halo.mesh.get_number_of_nodes() \n"
msgstr ""

#: modes/api/makeblock.py:152
msgid "halo.mesh.on_mesh_message_come(msg) \n"
msgstr ""

#: modes/api/makeblock.py:153
msgid "halo.mesh.get_info(msg) \n"
msgstr ""

#: modes/api/makeblock.py:154
msgid "halo.mesh.get_info_status(msg) \n"
msgstr ""

#: modes/api/makeblock.py:155
msgid "halo.mesh.get_all_info_status() \n"
msgstr ""

#: modes/api/makeblock.py:156
msgid "halo.mesh.get_info_once(msg) \n"
msgstr ""

#: modes/api/makeblock.py:157
msgid "halo.mesh.broadcast(message, value = ) \n"
msgstr ""

#: modes/api/makeblock.py:159
msgid "halo.microphone.get_loudness('average') \n"
msgstr ""

#: modes/api/makeblock.py:161
msgid "halo.pin0.write_digital(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:162
msgid "halo.pin0.servo_write(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:163
msgid "halo.pin0.read_analog(self) \n"
msgstr ""

#: modes/api/makeblock.py:164
msgid "halo.pin0.write_analog(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:165
msgid "halo.pin0.analog_set_frequency(self, frequency) \n"
msgstr ""

#: modes/api/makeblock.py:166
msgid "halo.pin0.is_touched(self) \n"
msgstr ""

#: modes/api/makeblock.py:167
msgid "halo.pin0.set_touchpad_threshold(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:168
msgid "halo.pin0.set_touchpad_sensitivity(self, level) \n"
msgstr ""

#: modes/api/makeblock.py:169
msgid "halo.pin0.get_touchpad_value(self) \n"
msgstr ""

#: modes/api/makeblock.py:170
msgid "halo.pin0.set_pwm_frequency(self, frequency) \n"
msgstr ""

#: modes/api/makeblock.py:171
msgid "halo.pin0.set_pwm_duty(self, duty) \n"
msgstr ""

#: modes/api/makeblock.py:172
msgid "halo.pin0.play_note(self, note, beat = None) \n"
msgstr ""

#: modes/api/makeblock.py:173
msgid "halo.pin0.play_tone(self, frequency, time_s = None) \n"
msgstr ""

#: modes/api/makeblock.py:174
msgid "halo.pin1.write_digital(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:175
msgid "halo.pin1.servo_write(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:176
msgid "halo.pin1.read_analog(self) \n"
msgstr ""

#: modes/api/makeblock.py:177
msgid "halo.pin1.write_analog(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:178
msgid "halo.pin1.analog_set_frequency(self, frequency) \n"
msgstr ""

#: modes/api/makeblock.py:179
msgid "halo.pin1.is_touched(self) \n"
msgstr ""

#: modes/api/makeblock.py:180
msgid "halo.pin1.set_touchpad_threshold(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:181
msgid "halo.pin1.set_touchpad_sensitivity(self, level) \n"
msgstr ""

#: modes/api/makeblock.py:182
msgid "halo.pin1.get_touchpad_value(self) \n"
msgstr ""

#: modes/api/makeblock.py:183
msgid "halo.pin1.set_pwm_frequency(self, frequency) \n"
msgstr ""

#: modes/api/makeblock.py:184
msgid "halo.pin1.set_pwm_duty(self, duty) \n"
msgstr ""

#: modes/api/makeblock.py:185
msgid "halo.pin1.play_note(self, note, beat = None) \n"
msgstr ""

#: modes/api/makeblock.py:186
msgid "halo.pin1.play_tone(self, frequency, time_s = None) \n"
msgstr ""

#: modes/api/makeblock.py:187
msgid "halo.pin2.write_digital(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:188
msgid "halo.pin2.servo_write(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:189
msgid "halo.pin2.read_analog(self) \n"
msgstr ""

#: modes/api/makeblock.py:190
msgid "halo.pin2.write_analog(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:191
msgid "halo.pin2.analog_set_frequency(self, frequency) \n"
msgstr ""

#: modes/api/makeblock.py:192
msgid "halo.pin2.is_touched(self) \n"
msgstr ""

#: modes/api/makeblock.py:193
msgid "halo.pin2.set_touchpad_threshold(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:194
msgid "halo.pin2.set_touchpad_sensitivity(self, level) \n"
msgstr ""

#: modes/api/makeblock.py:195
msgid "halo.pin2.get_touchpad_value(self) \n"
msgstr ""

#: modes/api/makeblock.py:196
msgid "halo.pin2.set_pwm_frequency(self, frequency) \n"
msgstr ""

#: modes/api/makeblock.py:197
msgid "halo.pin2.set_pwm_duty(self, duty) \n"
msgstr ""

#: modes/api/makeblock.py:198
msgid "halo.pin2.play_note(self, note, beat = None) \n"
msgstr ""

#: modes/api/makeblock.py:199
msgid "halo.pin2.play_tone(self, frequency, time_s = None) \n"
msgstr ""

#: modes/api/makeblock.py:200
msgid "halo.pin3.write_digital(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:201
msgid "halo.pin3.servo_write(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:202
msgid "halo.pin3.read_analog(self) \n"
msgstr ""

#: modes/api/makeblock.py:203
msgid "halo.pin3.write_analog(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:204
msgid "halo.pin3.analog_set_frequency(self, frequency) \n"
msgstr ""

#: modes/api/makeblock.py:205
msgid "halo.pin3.is_touched(self) \n"
msgstr ""

#: modes/api/makeblock.py:206
msgid "halo.pin3.set_touchpad_threshold(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:207
msgid "halo.pin3.set_touchpad_sensitivity(self, level) \n"
msgstr ""

#: modes/api/makeblock.py:208
msgid "halo.pin3.get_touchpad_value(self) \n"
msgstr ""

#: modes/api/makeblock.py:209
msgid "halo.pin3.set_pwm_frequency(self, frequency) \n"
msgstr ""

#: modes/api/makeblock.py:210
msgid "halo.pin3.set_pwm_duty(self, duty) \n"
msgstr ""

#: modes/api/makeblock.py:211
msgid "halo.pin3.play_note(self, note, beat = None) \n"
msgstr ""

#: modes/api/makeblock.py:212
msgid "halo.pin3.play_tone(self, frequency, time_s = None) \n"
msgstr ""

#: modes/api/makeblock.py:214
msgid ""
"halo.speech_recognition.start(server = SERVER_MICROSOFT, language = "
"LAN_CHINESE, time_s = 5, wait_flag = True) \n"
msgstr ""

#: modes/api/makeblock.py:215
msgid "halo.speech_recognition.set_token(server, token) \n"
msgstr ""

#: modes/api/makeblock.py:216
msgid "halo.speech_recognition.set_account(server, account, password) \n"
msgstr ""

#: modes/api/makeblock.py:217
msgid "halo.speech_recognition.set_token_url(server, url) \n"
msgstr ""

#: modes/api/makeblock.py:218
msgid "halo.speech_recognition.set_recognition_url(server, url) \n"
msgstr ""

#: modes/api/makeblock.py:219
msgid "halo.speech_recognition.set_wait_time(time_s) \n"
msgstr ""

#: modes/api/makeblock.py:220
msgid "halo.speech_recognition.get_all_respond() \n"
msgstr ""

#: modes/api/makeblock.py:221
msgid "halo.speech_recognition.get_error_code() \n"
msgstr ""

#: modes/api/makeblock.py:222
msgid "halo.speech_recognition.get_error_message() \n"
msgstr ""

#: modes/api/makeblock.py:223
msgid "halo.speech_recognition.get_result_code() \n"
msgstr ""

#: modes/api/makeblock.py:224
msgid "halo.speech_recognition.get_sn_code() \n"
msgstr ""

#: modes/api/makeblock.py:226
msgid "halo.touchpad0.is_touched(self) \n"
msgstr ""

#: modes/api/makeblock.py:227
msgid "halo.touchpad0.set_touch_threshold(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:228
msgid "halo.touchpad0.set_touch_sensitivity(self, level) \n"
msgstr ""

#: modes/api/makeblock.py:229
msgid "halo.touchpad0.get_value(self) \n"
msgstr ""

#: modes/api/makeblock.py:230
msgid "halo.touchpad1.is_touched(self) \n"
msgstr ""

#: modes/api/makeblock.py:231
msgid "halo.touchpad1.set_touch_threshold(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:232
msgid "halo.touchpad1.set_touch_sensitivity(self, level) \n"
msgstr ""

#: modes/api/makeblock.py:233
msgid "halo.touchpad1.get_value(self) \n"
msgstr ""

#: modes/api/makeblock.py:234
msgid "halo.touchpad2.is_touched(self) \n"
msgstr ""

#: modes/api/makeblock.py:235
msgid "halo.touchpad2.set_touch_threshold(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:236
msgid "halo.touchpad2.set_touch_sensitivity(self, level) \n"
msgstr ""

#: modes/api/makeblock.py:237
msgid "halo.touchpad2.get_value(self) \n"
msgstr ""

#: modes/api/makeblock.py:238
msgid "halo.touchpad3.is_touched(self) \n"
msgstr ""

#: modes/api/makeblock.py:239
msgid "halo.touchpad3.set_touch_threshold(self, value) \n"
msgstr ""

#: modes/api/makeblock.py:240
msgid "halo.touchpad3.set_touch_sensitivity(self, level) \n"
msgstr ""

#: modes/api/makeblock.py:241
msgid "halo.touchpad3.get_value(self) \n"
msgstr ""

#: modes/api/makeblock.py:243
msgid "halo.upload_mode_message.on_upload_mode_message_come(msg) \n"
msgstr ""

#: modes/api/makeblock.py:244
msgid "halo.upload_mode_message.get_info(msg) \n"
msgstr ""

#: modes/api/makeblock.py:245
msgid "halo.upload_mode_message.get_info_status(msg) \n"
msgstr ""

#: modes/api/makeblock.py:246
msgid "halo.upload_mode_message.broadcast(message, value = ) \n"
msgstr ""

#: modes/api/makeblock.py:248
msgid "halo.vibration_motor.set_strength(self, strength) \n"
msgstr ""

#: modes/api/makeblock.py:249
msgid "halo.vibration_motor.on(self, strength = None) \n"
msgstr ""

#: modes/api/makeblock.py:251
msgid "halo.wifi.is_connected(self) \n"
msgstr ""

#: modes/api/makeblock.py:252
msgid "halo.wifi.set_mode(mode) \n"
msgstr ""

#: modes/api/makeblock.py:253
msgid "halo.wifi.connect(self) \n"
msgstr ""

#: modes/api/makeblock.py:254
msgid "halo.wifi.disconnect(self) \n"
msgstr ""

#: modes/api/makeblock.py:255
msgid "halo.wifi.start(self, ssid, password, mode = wifi_o.WLAN_MODE_STA) \n"
msgstr ""

#: modes/api/makeblock.py:257
msgid "halo.speaker.volume \n"
msgstr ""

#: modes/api/makeblock.py:258
msgid "halo.speaker.tempo \n"
msgstr ""

#: modes/api/makeblock.py:259
msgid "halo.speaker.stop_sounds(self) \n"
msgstr ""

#: modes/api/makeblock.py:260
msgid "halo.speaker.play_melody_until_done(self, file_name) \n"
msgstr ""

#: modes/api/makeblock.py:261
msgid "halo.speaker.play_melody(self, file_name) \n"
msgstr ""

#: modes/api/makeblock.py:262
msgid "halo.speaker.play_tone(self, frequency, time_s = None) \n"
msgstr ""

#: modes/api/makeblock.py:263
msgid "halo.speaker.play_note(self, note, beat = None) \n"
msgstr ""

#: modes/api/makeblock.py:264
msgid "halo.speaker.rest(self, beat) \n"
msgstr ""

#: modes/api/makeblock.py:292
msgid ""
"codey.display.show_image(image, x=0, y=0, time_s=1)\n"
"codey show image at position, for seconds"
msgstr ""

#: modes/api/makeblock.py:293
msgid ""
"codey.display.clear()\n"
"codey clear image"
msgstr ""

#: modes/api/makeblock.py:294
msgid ""
"codey.display.show(text='hello', x=0, y=0, wait=False)\n"
"codey show text at position"
msgstr ""

#: modes/api/makeblock.py:295
msgid ""
"codey.display.set_pixel(x=0, y=0, on=True)\n"
"codey set pixel at position"
msgstr ""

#: modes/api/makeblock.py:296
msgid ""
"codey.display.toggle_pixel(x=0, y=0)\n"
"codey toggle pixel at position"
msgstr ""

#: modes/api/makeblock.py:297
msgid ""
"codey.display.get_pixel(x=0, y=0)\n"
"codey get pixel at position"
msgstr ""

#: modes/api/makeblock.py:298
msgid ""
"codey.led\n"
"codey led module"
msgstr ""

#: modes/api/makeblock.py:299
msgid ""
"codey.led.show(r=255, g=0, b=0, secs=0)\n"
"codey led show rgb color for seconds"
msgstr ""

#: modes/api/makeblock.py:300
msgid ""
"codey.led.set_red(value=255)\n"
"change codey led red color value"
msgstr ""

#: modes/api/makeblock.py:301
msgid ""
"codey.led.set_green(value=255)\n"
"change codey led green color value"
msgstr ""

#: modes/api/makeblock.py:302
msgid ""
"codey.led.set_blue(value=255)\n"
"change codey led blue color value"
msgstr ""

#: modes/api/makeblock.py:303
msgid ""
"codey.led.off()\n"
"turn off codey led"
msgstr ""

#: modes/api/makeblock.py:304
msgid ""
"rocky.color_ir_sensor\n"
"rocky color_ir_sensor module"
msgstr ""

#: modes/api/makeblock.py:305
msgid ""
"rocky.set_led_color(color_name='black')\n"
"set rocky led color"
msgstr ""

#: modes/api/makeblock.py:306
msgid ""
"codey.speaker\n"
"codey speaker module"
msgstr ""

#: modes/api/makeblock.py:307
msgid ""
"codey.speaker.play_melody(wav_name, until_done=False)\n"
"codey speaker play sound"
msgstr ""

#: modes/api/makeblock.py:308
msgid ""
"codey.speaker.stop_sounds()\n"
"codey speaker stop sounds"
msgstr ""

#: modes/api/makeblock.py:309
msgid ""
"codey.speaker.play_note(note=60, beats=0.25)\n"
"codey speaker play note for beats"
msgstr ""

#: modes/api/makeblock.py:310
msgid ""
"codey.speaker.rest(beats=0.25)\n"
"codey speaker rest for beats"
msgstr ""

#: modes/api/makeblock.py:311
msgid ""
"codey.speaker.play_tone(hz=700, beats=0.25)\n"
"codey speaker play tone for beats"
msgstr ""

#: modes/api/makeblock.py:312
msgid ""
"codey.speaker.volume\n"
"codey speaker volume"
msgstr ""

#: modes/api/makeblock.py:313
msgid ""
"rocky.forward(speed=50, time=0, straight = True)\n"
"rocky move forward by power for seconds"
msgstr ""

#: modes/api/makeblock.py:314
msgid ""
"rocky.backward(speed=50, time=0, straight = True)\n"
"rocky move backward by power for seconds"
msgstr ""

#: modes/api/makeblock.py:315
msgid ""
"rocky.turn_left(speed=50, time=0)\n"
"rocky move turn left by power for seconds"
msgstr ""

#: modes/api/makeblock.py:316
msgid ""
"rocky.turn_right(speed=50, time=0)\n"
"rocky move turn right by power for seconds"
msgstr ""

#: modes/api/makeblock.py:317
msgid ""
"rocky.turn_left_by_degree(degree=15)\n"
"rocky turn left by degree until done"
msgstr ""

#: modes/api/makeblock.py:318
msgid ""
"rocky.turn_right_by_degree(degree=15)\n"
"rocky turn right by degree until done"
msgstr ""

#: modes/api/makeblock.py:319
msgid ""
"rocky.drive(left=50, right=50)\n"
"rocky move by left and right power"
msgstr ""

#: modes/api/makeblock.py:320
msgid ""
"rocky.stop()\n"
"rocky stop"
msgstr ""

#: modes/api/makeblock.py:321
msgid ""
"codey.button_a.is_pressed()\n"
"is codey button a pressed"
msgstr ""

#: modes/api/makeblock.py:322
msgid ""
"codey.button_b.is_pressed()\n"
"is codey button a pressed"
msgstr ""

#: modes/api/makeblock.py:323
msgid ""
"codey.button_c.is_pressed()\n"
"is codey button a pressed"
msgstr ""

#: modes/api/makeblock.py:324
msgid ""
"codey.is_rocky_connected()\n"
"is codey connected rocky?"
msgstr ""

#: modes/api/makeblock.py:325
msgid ""
"codey.potentiometer.get_value()\n"
"codey potentiometer value"
msgstr ""

#: modes/api/makeblock.py:326
msgid ""
"codey.sound_sensor.get_loudness()\n"
"codey sound sensor loudness"
msgstr ""

#: modes/api/makeblock.py:327
msgid ""
"codey.light_sensor.get_value()\n"
"codey light sensor value"
msgstr ""

#: modes/api/makeblock.py:328
msgid ""
"codey.battery.get_percentage()\n"
"codey battery percentage"
msgstr ""

#: modes/api/makeblock.py:329
msgid ""
"codey.motion_sensor.is_shaked()\n"
"is codey shaked?"
msgstr ""

#: modes/api/makeblock.py:330
msgid ""
"codey.motion_sensor.get_shake_strength()\n"
"codey shake strength"
msgstr ""

#: modes/api/makeblock.py:331
msgid ""
"codey.motion_sensor\n"
"codey motion sensor module"
msgstr ""

#: modes/api/makeblock.py:332
msgid ""
"codey.motion_sensor.is_tilted_left()\n"
"is codey tilted left?"
msgstr ""

#: modes/api/makeblock.py:333
msgid ""
"codey.motion_sensor.is_tilted_right()\n"
"is codey tilted right?"
msgstr ""

#: modes/api/makeblock.py:334
msgid ""
"codey.motion_sensor.is_ears_up()\n"
"is codey ears up?"
msgstr ""

#: modes/api/makeblock.py:335
msgid ""
"codey.motion_sensor.is_ears_down()\n"
"is codey ears down?"
msgstr ""

#: modes/api/makeblock.py:336
msgid ""
"codey.motion_sensor.is_display_up()\n"
"is codey display up?"
msgstr ""

#: modes/api/makeblock.py:337
msgid ""
"codey.motion_sensor.is_display_down()\n"
"is codey display down?"
msgstr ""

#: modes/api/makeblock.py:338
msgid ""
"codey.motion_sensor.is_upright()\n"
"is codey upright?"
msgstr ""

#: modes/api/makeblock.py:339
msgid ""
"codey.motion_sensor.get_roll()\n"
"codey roll degree"
msgstr ""

#: modes/api/makeblock.py:340
msgid ""
"codey.motion_sensor.get_pitch()\n"
"codey pitch degree"
msgstr ""

#: modes/api/makeblock.py:341
msgid ""
"codey.motion_sensor.get_rotation(${1|'x','y','z'|})\n"
"codey rotation degree"
msgstr ""

#: modes/api/makeblock.py:342
msgid ""
"codey.motion_sensor.reset_rotation(${1|'x','y','z','all'|})\n"
"codey reset rotation"
msgstr ""

#: modes/api/makeblock.py:343
msgid ""
"codey.motion_sensor.get_timer()\n"
"codey timer"
msgstr ""

#: modes/api/makeblock.py:344
msgid ""
"rocky.color_ir_sensor.is_obstacle_ahead()\n"
"is rocky obstacle ahead?"
msgstr ""

#: modes/api/makeblock.py:345
msgid ""
"rocky.color_ir_sensor."
"is_color(${1|'red','green','blue','yellow','cyan','purple','white'|})\n"
"is rocky detected color?"
msgstr ""

#: modes/api/makeblock.py:346
msgid ""
"rocky.color_ir_sensor.get_red()\n"
"rocky detected red color value"
msgstr ""

#: modes/api/makeblock.py:347
msgid ""
"rocky.color_ir_sensor.get_green()\n"
"rocky detected green color value"
msgstr ""

#: modes/api/makeblock.py:348
msgid ""
"rocky.color_ir_sensor.get_blue()\n"
"rocky detected blue color value"
msgstr ""

#: modes/api/makeblock.py:349
msgid ""
"rocky.color_ir_sensor.get_light_strength()\n"
"rocky color sensor ambient light intensity"
msgstr ""

#: modes/api/makeblock.py:350
msgid ""
"rocky.color_ir_sensor.get_reflected_light()\n"
"rocky color sensor reflected light intensity"
msgstr ""

#: modes/api/makeblock.py:351
msgid ""
"rocky.color_ir_sensor.get_reflected_infrared()\n"
"color sensor reflected infrared light intensity"
msgstr ""

#: modes/api/makeblock.py:352
msgid ""
"rocky.color_ir_sensor.get_greyness()\n"
"color sensor grey-scale value"
msgstr ""

#: modes/api/makeblock.py:353
msgid ""
"codey.ir\n"
"codey ir module"
msgstr ""

#: modes/api/makeblock.py:354
msgid ""
"codey.ir.send(msg='A')\n"
"codey ir send message"
msgstr ""

#: modes/api/makeblock.py:355
msgid ""
"codey.ir.receive()\n"
"codey ir received message"
msgstr ""

#: modes/api/makeblock.py:356
msgid ""
"codey.ir.learn(time_s = 3)\n"
"codey ir record home appliances remote signal seconds"
msgstr ""

#: modes/api/makeblock.py:357
msgid ""
"codey.ir.send_learned_result()\n"
"codey ir send learned result message"
msgstr ""

#: modes/api/microbit.py:44
msgid ""
"microbit.panic() \n"
"Put micro:bit in panic() mode and display an unhappy face.\n"
"Press the reset button to exit panic() mode."
msgstr ""

#: modes/api/microbit.py:45
msgid ""
"microbit.sleep(time) \n"
"Put micro:bit to sleep for some milliseconds (1 second = 1000 ms) of time.\n"
"sleep(2000) gives micro:bit a 2 second nap."
msgstr ""

#: modes/api/microbit.py:46
msgid ""
"microbit.running_time() \n"
"Return running_time() in milliseconds since micro:bit's last reset."
msgstr ""

#: modes/api/microbit.py:47
msgid ""
"microbit.temperature() \n"
"Return micro:bit's temperature in degrees Celcius."
msgstr ""

#: modes/api/microbit.py:49
msgid ""
"microbit.accelerometer.get_x() \n"
"Return micro:bit's tilt (X acceleration) in milli-g's."
msgstr ""

#: modes/api/microbit.py:50
msgid ""
"microbit.accelerometer.get_y() \n"
"Return micro:bit's tilt (Y acceleration) in milli-g's."
msgstr ""

#: modes/api/microbit.py:51
msgid ""
"microbit.accelerometer.get_z() \n"
"Return micro:bit's up-down motion (Z acceleration) in milli-g's.\n"
"Z is a positive number when moving up. Moving down, Z is a negative number."
msgstr ""

#: modes/api/microbit.py:52
msgid ""
"microbit.accelerometer.is_gesture(name) \n"
"Return True or False to indicate if the named gesture is currently active.\n"
"MicroPython understands the following gestures: 'up', 'down', 'left', "
"'right',\n"
"'face up', 'face down', 'freefall', '3g', '6g', '8g' and 'shake'."
msgstr ""

#: modes/api/microbit.py:53
msgid ""
"microbit.accelerometer.was_gesture(name) \n"
"Return True or False to indicate if the named gesture was active since the\n"
"last call.\n"
"MicroPython understands the following gestures: 'up', 'down', 'left', "
"'right',\n"
"'face up', 'face down', 'freefall', '3g', '6g', '8g' and 'shake'."
msgstr ""

#: modes/api/microbit.py:54
msgid ""
"microbit.accelerometer.get_gestures() \n"
"Return a list indicating the gesture history. The most recent gesture is "
"last.\n"
"Calling this method also clears the gesture history.\n"
"MicroPython understands the following gestures: 'up', 'down', 'left', "
"'right',\n"
"'face up', 'face down', 'freefall', '3g', '6g', '8g' and 'shake'."
msgstr ""

#: modes/api/microbit.py:55
msgid ""
"microbit.accelerometer.get_values() \n"
"Get the acceleration measurements in all axes at once, as a three-element "
"tuple of integers ordered as X, Y, Z."
msgstr ""

#: modes/api/microbit.py:57
msgid ""
"microbit.button_a.is_pressed() \n"
"If button A is pressed down, is_pressed() is True, else False."
msgstr ""

#: modes/api/microbit.py:58
msgid ""
"microbit.button_a.was_pressed() \n"
"Use was_pressed() to learn if button A was pressed since the last time\n"
"was_pressed() was called. Returns True or False."
msgstr ""

#: modes/api/microbit.py:59
msgid ""
"microbit.button_a.get_presses() \n"
"Use get_presses() to get the running total of button presses, and also\n"
"reset this counter to zero."
msgstr ""

#: modes/api/microbit.py:60
msgid ""
"microbit.button_b.is_pressed() \n"
"If button B is pressed down, is_pressed() is True, else False."
msgstr ""

#: modes/api/microbit.py:61
msgid ""
"microbit.button_b.was_pressed() \n"
"Use was_pressed() to learn if button B was pressed since the last time\n"
"was_pressed() was called. Returns True or False."
msgstr ""

#: modes/api/microbit.py:62
msgid ""
"microbit.button_b.get_presses() \n"
"Use get_presses() to get the running total of button presses, and also\n"
"reset this counter to zero."
msgstr ""

#: modes/api/microbit.py:64
msgid ""
"microbit.compass.is_calibrated() \n"
"If micro:bit's compass is_calibrated() and adjusted for accuracy, return "
"True.\n"
"If compass hasn't been adjusted for accuracy, return False."
msgstr ""

#: modes/api/microbit.py:65
msgid ""
"microbit.compass.calibrate() \n"
"If micro:bit is confused, calibrate() the compass to adjust the its "
"accuracy.\n"
"Will ask you to rotate the device to draw a circle on the display. "
"Afterwards, micro:bit will know which way is north."
msgstr ""

#: modes/api/microbit.py:66
msgid ""
"microbit.compass.clear_calibration() \n"
"Reset micro:bit's compass using clear_calibration() command.\n"
"Run calibrate() to improve accuracy."
msgstr ""

#: modes/api/microbit.py:67
msgid ""
"microbit.compass.get_x() \n"
"Return magnetic field detected along micro:bit's X axis.\n"
"Usually, the compass returns the earth's magnetic field in micro-Tesla "
"units.\n"
"Unless...a strong magnet is nearby!"
msgstr ""

#: modes/api/microbit.py:68
msgid ""
"microbit.compass.get_y() \n"
"Return magnetic field detected along micro:bit's Y axis.\n"
"Usually, the compass returns the earth's magnetic field in micro-Tesla "
"units.\n"
"Unless...a strong magnet is nearby!"
msgstr ""

#: modes/api/microbit.py:69
msgid ""
"microbit.compass.get_z() \n"
"Return magnetic field detected along micro:bit's Z axis.\n"
"Usually, the compass returns the earth's magnetic field in micro-Tesla "
"units.\n"
"Unless...a strong magnet is nearby!"
msgstr ""

#: modes/api/microbit.py:70
msgid ""
"microbit.compass.get_field_strength() \n"
"Return strength of magnetic field around micro:bit."
msgstr ""

#: modes/api/microbit.py:71
msgid ""
"microbit.compass.heading() \n"
"Return a number between 0-360 indicating the device's heading. 0 is north."
msgstr ""

#: modes/api/microbit.py:73
msgid ""
"microbit.display.show(x, delay=400, wait=True, loop=False, clear=False) \n"
"Use show(x) to print the string or image 'x' to the display. If 'x' is a "
"list\n"
"of images they will be animated together.\n"
"Use 'delay' to specify the speed of frame changes in milliseconds.\n"
"If wait is False animation will happen in the background while the program "
"continues.\n"
"If loop is True the animation will repeat forever.\n"
"If clear is True the display will clear at the end of the animation."
msgstr ""

#: modes/api/microbit.py:74
msgid ""
"microbit.display.scroll(string, delay=150, wait=True, loop=False, "
"monospace=False) \n"
"Use scroll(string) to scroll the string across the display.\n"
"Use delay to control how fast the text scrolls.\n"
"If wait is False the text will scroll in the background while the program "
"continues.\n"
"If loop is True the text will repeat forever.\n"
"If monospace is True the characters will always take up 5 pixel-columns."
msgstr ""

#: modes/api/microbit.py:75
msgid ""
"microbit.display.clear() \n"
"Use clear() to clear micro:bit's display."
msgstr ""

#: modes/api/microbit.py:76
msgid ""
"microbit.display.get_pixel(x, y) \n"
"Use get_pixel(x, y) to return the display's brightness at LED pixel (x,y).\n"
"Brightness can be from 0 (LED is off) to 9 (maximum LED brightness)."
msgstr ""

#: modes/api/microbit.py:77
msgid ""
"microbit.display.set_pixel(x, y, b) \n"
"Use set_pixel(x, y, b) to set the display at LED pixel (x,y) to brightness "
"'b'\n"
"which can be set between 0 (off) to 9 (full brightness)."
msgstr ""

#: modes/api/microbit.py:78
msgid ""
"microbit.display.on() \n"
"Use on() to turn on the display."
msgstr ""

#: modes/api/microbit.py:79
msgid ""
"microbit.display.off() \n"
"Use off() to turn off the display."
msgstr ""

#: modes/api/microbit.py:80
msgid ""
"microbit.display.is_on() \n"
"Use is_on() to query if the micro:bit's display is on (True) or off (False)."
msgstr ""

#: modes/api/microbit.py:82
msgid ""
"microbit.pin0.is_touched() \n"
"If pin0 is_touched() on micro:bit, return True. If nothing is touching the\n"
"pin, return False."
msgstr ""

#: modes/api/microbit.py:83
msgid ""
"microbit.pin0.read_digital() \n"
"read_digital() value from pin0. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:84
msgid ""
"microbit.pin0.write_digital(value) \n"
"Set pin0 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:85
msgid ""
"microbit.pin0.read_analog() \n"
"Read the voltage applied to pin0. Return the reading as a number between\n"
"0 (meaning 0v) and 1023 (meaning 3.3v)."
msgstr ""

#: modes/api/microbit.py:86
msgid ""
"microbit.pin0.write_analog(value) \n"
"Set pin0 to output a value between 0 and 1023."
msgstr ""

#: modes/api/microbit.py:87
msgid ""
"microbit.pin0.set_analog_period(period) \n"
"Set the period of the PWM signal output to period milliseconds."
msgstr ""

#: modes/api/microbit.py:88
msgid ""
"microbit.pin0.set_analog_period_microseconds(period) \n"
"Set the period of the PWM signal output to period microseconds."
msgstr ""

#: modes/api/microbit.py:90
msgid ""
"microbit.pin1.is_touched() \n"
"If pin1 is_touched() on micro:bit, return True. If nothing is touching the\n"
"pin, return False."
msgstr ""

#: modes/api/microbit.py:91
msgid ""
"microbit.pin1.read_digital() \n"
"read_digital() value from pin1. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:92
msgid ""
"microbit.pin1.write_digital(value) \n"
"Set pin1 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:93
msgid ""
"microbit.pin1.read_analog() \n"
"Read the voltage applied to pin1. Return the reading as a number between\n"
"0 (meaning 0v) and 1023 (meaning 3.3v)."
msgstr ""

#: modes/api/microbit.py:94
msgid ""
"microbit.pin1.write_analog(value) \n"
"Set pin1 to output a value between 0 and 1023."
msgstr ""

#: modes/api/microbit.py:95
msgid ""
"microbit.pin1.set_analog_period(period) \n"
"Set the period of the PWM signal output to period milliseconds."
msgstr ""

#: modes/api/microbit.py:96
msgid ""
"microbit.pin1.set_analog_period_microseconds(period) \n"
"Set the period of the PWM signal output to period microseconds."
msgstr ""

#: modes/api/microbit.py:98
msgid ""
"microbit.pin2.is_touched() \n"
"If pin2 is_touched() on micro:bit, return True. If nothing is touching the\n"
"pin, return False."
msgstr ""

#: modes/api/microbit.py:99
msgid ""
"microbit.pin2.read_digital() \n"
"read_digital() value from pin2. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:100
msgid ""
"microbit.pin2.write_digital(value) \n"
"Set pin2 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:101
msgid ""
"microbit.pin2.read_analog() \n"
"Read the voltage applied to pin2. Return the reading as a number between\n"
"0 (meaning 0v) and 1023 (meaning 3.3v)."
msgstr ""

#: modes/api/microbit.py:102
msgid ""
"microbit.pin2.write_analog(value) \n"
"Set pin2 to output a value between 0 and 1023."
msgstr ""

#: modes/api/microbit.py:103
msgid ""
"microbit.pin2.set_analog_period(period) \n"
"Set the period of the PWM signal output to period milliseconds."
msgstr ""

#: modes/api/microbit.py:104
msgid ""
"microbit.pin2.set_analog_period_microseconds(period) \n"
"Set the period of the PWM signal output to period microseconds."
msgstr ""

#: modes/api/microbit.py:106
msgid ""
"microbit.pin3.read_digital() \n"
"read_digital() value from pin3. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:107
msgid ""
"microbit.pin2.write_digital(value) \n"
"Set pin3 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:108
msgid ""
"microbit.pin3.read_analog() \n"
"Read the voltage applied to pin3. Return the reading as a number between\n"
"0 (meaning 0v) and 1023 (meaning 3.3v)."
msgstr ""

#: modes/api/microbit.py:109
msgid ""
"microbit.pin3.write_analog(value) \n"
"Set pin3 to output a value between 0 and 1023."
msgstr ""

#: modes/api/microbit.py:110
msgid ""
"microbit.pin3.set_analog_period(period) \n"
"Set the period of the PWM signal output to period milliseconds."
msgstr ""

#: modes/api/microbit.py:111
msgid ""
"microbit.pin3.set_analog_period_microseconds(period) \n"
"Set the period of the PWM signal output to period microseconds."
msgstr ""

#: modes/api/microbit.py:113
msgid ""
"microbit.pin4.read_digital() \n"
"read_digital() value from pin4. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:114
msgid ""
"microbit.pin4.write_digital(value) \n"
"Set pin4 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:115
msgid ""
"microbit.pin4.read_analog() \n"
"Read the voltage applied to pin4. Return the reading as a number between\n"
"0 (meaning 0v) and 1023 (meaning 3.3v)."
msgstr ""

#: modes/api/microbit.py:116
msgid ""
"microbit.pin4.write_analog(value) \n"
"Set pin4 to output a value between 0 and 1023."
msgstr ""

#: modes/api/microbit.py:117
msgid ""
"microbit.pin4.set_analog_period(period) \n"
"Set the period of the PWM signal output to period milliseconds."
msgstr ""

#: modes/api/microbit.py:118
msgid ""
"microbit.pin4.set_analog_period_microseconds(period) \n"
"Set the period of the PWM signal output to period microseconds."
msgstr ""

#: modes/api/microbit.py:120
msgid ""
"microbit.pin5.read_digital() \n"
"read_digital() value from pin5. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:121
msgid ""
"microbit.pin5.write_digital(value) \n"
"Set pin5 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:123
msgid ""
"microbit.pin6.read_digital() \n"
"read_digital() value from pin6. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:124
msgid ""
"microbit.pin6.write_digital(value) \n"
"Set pin6 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:126
msgid ""
"microbit.pin7.read_digital() \n"
"read_digital() value from pin7. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:127
msgid ""
"microbit.pin7.write_digital(value) \n"
"Set pin7 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:129
msgid ""
"microbit.pin8.read_digital() \n"
"read_digital() value from pin8. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:130
msgid ""
"microbit.pin8.write_digital(value) \n"
"Set pin8 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:132
msgid ""
"microbit.pin9.read_digital() \n"
"read_digital() value from pin9. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:133
msgid ""
"microbit.pin9.write_digital(value) \n"
"Set pin9 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:135
msgid ""
"microbit.pin10.read_digital() \n"
"read_digital() value from pin10. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:136
msgid ""
"microbit.pin10.write_digital(value) \n"
"Set pin10 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:137
msgid ""
"microbit.pin10.read_analog() \n"
"Read the voltage applied to pin10. Return the reading as a number between\n"
"0 (meaning 0v) and 1023 (meaning 3.3v)."
msgstr ""

#: modes/api/microbit.py:138
msgid ""
"microbit.pin10.write_analog(value) \n"
"Set pin10 to output a value between 0 and 1023."
msgstr ""

#: modes/api/microbit.py:139
msgid ""
"microbit.pin10.set_analog_period(period) \n"
"Set the period of the PWM signal output to period milliseconds."
msgstr ""

#: modes/api/microbit.py:140
msgid ""
"microbit.pin10.set_analog_period_microseconds(period) \n"
"Set the period of the PWM signal output to period microseconds."
msgstr ""

#: modes/api/microbit.py:142
msgid ""
"microbit.pin11.read_digital() \n"
"read_digital() value from pin11. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:143
msgid ""
"microbit.pin11.write_digital(value) \n"
"Set pin11 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:145
msgid ""
"microbit.pin12.read_digital() \n"
"read_digital() value from pin12. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:146
msgid ""
"microbit.pin12.write_digital(value) \n"
"Set pin12 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:148
msgid ""
"microbit.pin13.read_digital() \n"
"read_digital() value from pin13. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:149
msgid ""
"microbit.pin13.write_digital(value) \n"
"Set pin13 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:151
msgid ""
"microbit.pin14.read_digital() \n"
"read_digital() value from pin14. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:152
msgid ""
"microbit.pin14.write_digital(value) \n"
"Set pin14 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:154
msgid ""
"microbit.pin15.read_digital() \n"
"read_digital() value from pin15. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:155
msgid ""
"microbit.pin15.write_digital(value) \n"
"Set pin15 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:157
msgid ""
"microbit.pin16.read_digital() \n"
"read_digital() value from pin16. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:158
msgid ""
"microbit.pin16.write_digital(value) \n"
"Set pin16 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:160
msgid ""
"microbit.pin19.read_digital() \n"
"read_digital() value from pin19. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:161
msgid ""
"microbit.pin19.write_digital(value) \n"
"Set pin19 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:163
msgid ""
"microbit.pin20.read_digital() \n"
"read_digital() value from pin20. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: modes/api/microbit.py:164
msgid ""
"microbit.pin20.write_digital(value) \n"
"Set pin20 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: modes/api/microbit.py:166
msgid ""
"microbit.i2c.read(address, n, repeat=False) \n"
"Use read(address, n) to read 'n' bytes from the device with the 7-bit "
"address.\n"
"If repeat is True, no stop bit will be sent."
msgstr ""

#: modes/api/microbit.py:167
msgid ""
"microbit.i2c.write(adress, buffer, repeat=False) \n"
"Use write(address, buffer) to write to the 'buffer' of the device at the 7-"
"bit 'address'.\n"
"If repeat is True, no stop bit will be sent."
msgstr ""

#: modes/api/microbit.py:168
msgid ""
"microbit.i2c.init(frequency, scl, sda) \n"
"Use init(frequency, scl, sda) to set the bus frequency and pins."
msgstr ""

#: modes/api/microbit.py:170
msgid ""
"microbit.Image(string) \n"
"Create and use built-in IMAGES to show on the display. Use:\n"
"Image(\n"
"  '09090:'\n"
"  '99999:'\n"
"  '99999:'\n"
"  '09990:'\n"
"  '00900:')\n"
"...to make a new 5x5 heart image. Numbers go from 0 (off) to 9 (brightest). "
"Note\n"
"the colon ':' to set the end of a row."
msgstr ""

#: modes/api/microbit.py:171
msgid ""
"microbit.Image.width() \n"
"Return the width of the image in pixels."
msgstr ""

#: modes/api/microbit.py:172
msgid ""
"microbit.Image.height() \n"
"Return the height of the image in pixels."
msgstr ""

#: modes/api/microbit.py:173
msgid ""
"microbit.Image.get_pixel(x, y) \n"
"Use get_pixel(x, y) to return the image's brightness at LED pixel (x,y).\n"
"Brightness can be from 0 (LED is off) to 9 (maximum LED brightness)."
msgstr ""

#: modes/api/microbit.py:174
msgid ""
"microbit.Image.set_pixel(x, y, b) \n"
"Use set_pixel(x, y, b) to set the LED pixel (x,y) in the image to "
"brightness\n"
"'b' which can be set between 0 (off) to 9 (full brightness)."
msgstr ""

#: modes/api/microbit.py:175
msgid ""
"microbit.Image.shift_left(n) \n"
"Use shift_left(n) to make a copy of the image but moved 'n' pixels to the "
"left."
msgstr ""

#: modes/api/microbit.py:176
msgid ""
"microbit.Image.shift_right(n) \n"
"Use shift_right(n) to make a copy of the image but moved 'n' pixels to\n"
"the right."
msgstr ""

#: modes/api/microbit.py:177
msgid ""
"microbit.Image.shift_up(n) \n"
"Use shift_up(n) to make a copy of the image but moved 'n' pixels up."
msgstr ""

#: modes/api/microbit.py:178
msgid ""
"microbit.Image.shift_down(n) \n"
"Use shift_down(n) to make a copy of the image but moved 'n' pixels down."
msgstr ""

#: modes/api/microbit.py:179
msgid ""
"microbit.Image.copy() \n"
"Use copy() to make a new exact copy of the image."
msgstr ""

#: modes/api/microbit.py:180
msgid ""
"microbit.Image.crop(x1, y1, x2, y2) \n"
"Use crop(x1, y1, x2, y2) to make a cut-out copy of the image where "
"coordinate\n"
"(x1,y1) is the top left corner of the cut-out area and coordinate (x2,y2) is "
"the\n"
"bottom right corner."
msgstr ""

#: modes/api/microbit.py:181
msgid ""
"microbit.Image.invert() \n"
"Use invert() to make a negative copy of the image. Where a pixel was bright "
"or\n"
"on in the original, it is dim or off in the negative copy."
msgstr ""

#: modes/api/microbit.py:182
msgid "microbit.Image.HEART"
msgstr ""

#: modes/api/microbit.py:183
msgid "microbit.Image.HEART_SMALL"
msgstr ""

#: modes/api/microbit.py:184
msgid "microbit.Image.HAPPY"
msgstr ""

#: modes/api/microbit.py:185
msgid "microbit.Image.SMILE"
msgstr ""

#: modes/api/microbit.py:186
msgid "microbit.Image.SAD"
msgstr ""

#: modes/api/microbit.py:187
msgid "microbit.Image.CONFUSED"
msgstr ""

#: modes/api/microbit.py:188
msgid "microbit.Image.ANGRY"
msgstr ""

#: modes/api/microbit.py:189
msgid "microbit.Image.ASLEEP"
msgstr ""

#: modes/api/microbit.py:190
msgid "microbit.Image.SURPRISED"
msgstr ""

#: modes/api/microbit.py:191
msgid "microbit.Image.SILLY"
msgstr ""

#: modes/api/microbit.py:192
msgid "microbit.Image.FABULOUS"
msgstr ""

#: modes/api/microbit.py:193
msgid "microbit.Image.MEH"
msgstr ""

#: modes/api/microbit.py:194
msgid "microbit.Image.YES"
msgstr ""

#: modes/api/microbit.py:195
msgid "microbit.Image.NO"
msgstr ""

#: modes/api/microbit.py:196
msgid "microbit.Image.CLOCK12"
msgstr ""

#: modes/api/microbit.py:197
msgid "microbit.Image.CLOCK11"
msgstr ""

#: modes/api/microbit.py:198
msgid "microbit.Image.CLOCK10"
msgstr ""

#: modes/api/microbit.py:199
msgid "microbit.Image.CLOCK9"
msgstr ""

#: modes/api/microbit.py:200
msgid "microbit.Image.CLOCK8"
msgstr ""

#: modes/api/microbit.py:201
msgid "microbit.Image.CLOCK7"
msgstr ""

#: modes/api/microbit.py:202
msgid "microbit.Image.CLOCK6"
msgstr ""

#: modes/api/microbit.py:203
msgid "microbit.Image.CLOCK5"
msgstr ""

#: modes/api/microbit.py:204
msgid "microbit.Image.CLOCK4"
msgstr ""

#: modes/api/microbit.py:205
msgid "microbit.Image.CLOCK3"
msgstr ""

#: modes/api/microbit.py:206
msgid "microbit.Image.CLOCK2"
msgstr ""

#: modes/api/microbit.py:207
msgid "microbit.Image.CLOCK1"
msgstr ""

#: modes/api/microbit.py:208
msgid "microbit.Image.ARROW_N"
msgstr ""

#: modes/api/microbit.py:209
msgid "microbit.Image.ARROW_NE"
msgstr ""

#: modes/api/microbit.py:210
msgid "microbit.Image.ARROW_E"
msgstr ""

#: modes/api/microbit.py:211
msgid "microbit.Image.ARROW_SE"
msgstr ""

#: modes/api/microbit.py:212
msgid "microbit.Image.ARROW_S"
msgstr ""

#: modes/api/microbit.py:213
msgid "microbit.Image.ARROW_SW"
msgstr ""

#: modes/api/microbit.py:214
msgid "microbit.Image.ARROW_W"
msgstr ""

#: modes/api/microbit.py:215
msgid "microbit.Image.ARROW_NW"
msgstr ""

#: modes/api/microbit.py:216
msgid "microbit.Image.TRIANGLE"
msgstr ""

#: modes/api/microbit.py:217
msgid "microbit.Image.TRIANGLE_LEFT"
msgstr ""

#: modes/api/microbit.py:218
msgid "microbit.Image.CHESSBOARD"
msgstr ""

#: modes/api/microbit.py:219
msgid "microbit.Image.DIAMOND"
msgstr ""

#: modes/api/microbit.py:220
msgid "microbit.Image.DIAMOND_SMALL"
msgstr ""

#: modes/api/microbit.py:221
msgid "microbit.Image.SQUARE"
msgstr ""

#: modes/api/microbit.py:222
msgid "microbit.Image.SQUARE_SMALL"
msgstr ""

#: modes/api/microbit.py:223
msgid "microbit.Image.RABBIT"
msgstr ""

#: modes/api/microbit.py:224
msgid "microbit.Image.COW"
msgstr ""

#: modes/api/microbit.py:225
msgid "microbit.Image.MUSIC_CROTCHET"
msgstr ""

#: modes/api/microbit.py:226
msgid "microbit.Image.MUSIC_QUAVER"
msgstr ""

#: modes/api/microbit.py:227
msgid "microbit.Image.MUSIC_QUAVERS"
msgstr ""

#: modes/api/microbit.py:228
msgid "microbit.Image.PITCHFORK"
msgstr ""

#: modes/api/microbit.py:229
msgid "microbit.Image.XMAS"
msgstr ""

#: modes/api/microbit.py:230
msgid "microbit.Image.PACMAN"
msgstr ""

#: modes/api/microbit.py:231
msgid "microbit.Image.TARGET"
msgstr ""

#: modes/api/microbit.py:232
msgid "microbit.Image.TSHIRT"
msgstr ""

#: modes/api/microbit.py:233
msgid "microbit.Image.ROLLERSKATE"
msgstr ""

#: modes/api/microbit.py:234
msgid "microbit.Image.DUCK"
msgstr ""

#: modes/api/microbit.py:235
msgid "microbit.Image.HOUSE"
msgstr ""

#: modes/api/microbit.py:236
msgid "microbit.Image.TORTOISE"
msgstr ""

#: modes/api/microbit.py:237
msgid "microbit.Image.BUTTERFLY"
msgstr ""

#: modes/api/microbit.py:238
msgid "microbit.Image.STICKFIGURE"
msgstr ""

#: modes/api/microbit.py:239
msgid "microbit.Image.GHOST"
msgstr ""

#: modes/api/microbit.py:240
msgid "microbit.Image.SWORD"
msgstr ""

#: modes/api/microbit.py:241
msgid "microbit.Image.GIRAFFE"
msgstr ""

#: modes/api/microbit.py:242
msgid "microbit.Image.SKULL"
msgstr ""

#: modes/api/microbit.py:243
msgid "microbit.Image.UMBRELLA"
msgstr ""

#: modes/api/microbit.py:244
msgid "microbit.Image.SNAKE"
msgstr ""

#: modes/api/microbit.py:245
msgid "microbit.Image.ALL_CLOCKS"
msgstr ""

#: modes/api/microbit.py:246
msgid "microbit.Image.ALL_ARROWS"
msgstr ""

#: modes/api/microbit.py:248
msgid ""
"microbit.uart.init(baudrate=9600, bits=8, parity=None, stop=1, tx=None, "
"rx=None) \n"
"Use init() to set up communication using the default values. \n"
"Otherwise override the defaults as named arguments."
msgstr ""

#: modes/api/microbit.py:249
msgid ""
"microbit.uart.any() \n"
"If there are incoming characters waiting to be read, any() will return "
"True.\n"
"Otherwise, returns False."
msgstr ""

#: modes/api/microbit.py:250
msgid ""
"microbit.uart.read(n) \n"
"Use read() to read characters.\n"
"Use read(n) to read, at most, 'n' bytes of data."
msgstr ""

#: modes/api/microbit.py:251
msgid ""
"microbit.uart.readall() \n"
"Use readall() to read as much data as possible."
msgstr ""

#: modes/api/microbit.py:252
msgid ""
"microbit.uart.readline() \n"
"Use readline() to read a line that ends with a newline character."
msgstr ""

#: modes/api/microbit.py:253
msgid ""
"microbit.uart.readinto(buf, n) \n"
"Use readinto(buf) to read bytes into the buffer 'buf'.\n"
"Use readinto(buff, n) to read, at most, 'n' number of bytes into 'buf'."
msgstr ""

#: modes/api/microbit.py:254
msgid ""
"microbit.uart.write() \n"
"Use write(buf) to write the bytes in buffer 'buf' to the connected device."
msgstr ""

#: modes/api/microbit.py:256
msgid ""
"microbit.spi.init(baudrate=1000000, bits=8, mode=0, sclk=pin13, mosi=pin15, "
"miso=pin14) \n"
"Set up communication. Override the defaults for baudrate, mode,\n"
"SCLK, MOSI and MISO. The default connections are pin13 for SCLK, pin15 for\n"
"MOSI and pin14 for MISO."
msgstr ""

#: modes/api/microbit.py:257
msgid ""
"microbit.spi.write(buf) \n"
"Use write(buf) to write bytes in buffer 'buf' to the connected device."
msgstr ""

#: modes/api/microbit.py:258
msgid ""
"microbit.spi.read(n) \n"
"Use read(n) to read 'n' bytes of data."
msgstr ""

#: modes/api/microbit.py:259
msgid ""
"microbit.spi.write_readinto(out, in) \n"
"Use write_readinto(out, in) to write the 'out' buffer to the connected "
"device\n"
"and read any response into the 'in' buffer. The length of the buffers "
"should\n"
"be the same. The buffers can be the same object."
msgstr ""

#: modes/api/microbit.py:261
msgid ""
"music.set_tempo(number, bpm) \n"
"Make a beat last a 'number' of ticks long and\n"
"played at 'bpm' beats per minute."
msgstr ""

#: modes/api/microbit.py:262
msgid ""
"music.pitch(freq, length=-1, pin=microbit.pin0, wait=True) \n"
"Make micro:bit play a note at 'freq' frequency for\n"
"'length' milliseconds. E.g. pitch(440, 1000) will play concert 'A' for 1 "
"second.\n"
"If length is a negative number the pitch is played continuously.\n"
"Use the optional pin argument to override the default output for the "
"speaker.\n"
"If wait is False the music will play in the background while the program\n"
"continues."
msgstr ""

#: modes/api/microbit.py:263
msgid ""
"music.play(music, pin=microbit.pin0, wait=True, loop=False) \n"
"Make micro:bit play 'music' list of notes. Try out the built in music to "
"see\n"
"how it works. E.g. music.play(music.PUNCHLINE).\n"
"Use the optional pin argument to override the default output for the "
"speaker.\n"
"If wait is False the music will play in the background while the program\n"
"continues.\n"
"If loop is True, the tune will repeat."
msgstr ""

#: modes/api/microbit.py:264
msgid ""
"music.get_tempo() \n"
"Return the number of ticks in a beat and number of beats per minute."
msgstr ""

#: modes/api/microbit.py:265
msgid ""
"music.stop(pin=microbit.pin0) \n"
"Stops all music playback on the given pin. If no pin is given, pin0 is "
"assumed."
msgstr ""

#: modes/api/microbit.py:266
msgid ""
"music.reset()\n"
"If things go wrong, reset() the music to its default settings."
msgstr ""

#: modes/api/microbit.py:267
msgid "music.DADADADUM"
msgstr ""

#: modes/api/microbit.py:268
msgid "music.ENTERTAINER"
msgstr ""

#: modes/api/microbit.py:269
msgid "music.PRELUDE"
msgstr ""

#: modes/api/microbit.py:270
msgid "music.ODE"
msgstr ""

#: modes/api/microbit.py:271
msgid "music.NYAN"
msgstr ""

#: modes/api/microbit.py:272
msgid "music.RINGTONE"
msgstr ""

#: modes/api/microbit.py:273
msgid "music.FUNK"
msgstr ""

#: modes/api/microbit.py:274
msgid "music.BLUES"
msgstr ""

#: modes/api/microbit.py:275
msgid "music.BIRTHDAY"
msgstr ""

#: modes/api/microbit.py:276
msgid "music.WEDDING"
msgstr ""

#: modes/api/microbit.py:277
msgid "music.FUNERAL"
msgstr ""

#: modes/api/microbit.py:278
msgid "music.PUNCHLINE"
msgstr ""

#: modes/api/microbit.py:279
msgid "music.PYTHON"
msgstr ""

#: modes/api/microbit.py:280
msgid "music.BADDY"
msgstr ""

#: modes/api/microbit.py:281
msgid "music.CHASE"
msgstr ""

#: modes/api/microbit.py:282
msgid "music.BA_DING"
msgstr ""

#: modes/api/microbit.py:283
msgid "music.WAWAWAWAA"
msgstr ""

#: modes/api/microbit.py:284
msgid "music.JUMP_UP"
msgstr ""

#: modes/api/microbit.py:285
msgid "music.JUMP_DOWN"
msgstr ""

#: modes/api/microbit.py:286
msgid "music.POWER_UP"
msgstr ""

#: modes/api/microbit.py:287
msgid "music.POWER_DOWN"
msgstr ""

#: modes/api/microbit.py:289
msgid "antigravity"
msgstr ""

#: modes/api/microbit.py:291
msgid ""
"this.authors() \n"
"Use authors() to reveal the names of the people who created this software."
msgstr ""

#: modes/api/microbit.py:293
msgid ""
"love.badaboom()\n"
"Hear my soul speak:\n"
"The very instant that I saw you, did\n"
"My heart fly to your service."
msgstr ""

#: modes/api/microbit.py:295
msgid ""
"neopixel.NeoPixel(pin, n) \n"
"Create a list representing a strip of 'n' neopixels controlled from the\n"
"specified pin (e.g. microbit.pin0).\n"
"Use the resulting object to change each pixel by position (starting from "
"0).\n"
"Individual pixels are given RGB (red, green, blue) values between 0-255 as "
"a\n"
"tupe. For example, (255, 255, 255) is white:\n"
"\n"
"np = neopixel.NeoPixel(microbit.pin0, 8)\n"
"np[0] = (255, 0, 128)\n"
"np.show()"
msgstr ""

#: modes/api/microbit.py:296
msgid ""
"neopixel.NeoPixel.clear() \n"
"Clear all the pixels."
msgstr ""

#: modes/api/microbit.py:297
msgid ""
"neopixel.NeoPixel.show() \n"
"Show the pixels. Must be called for any updates to become visible."
msgstr ""

#: modes/api/microbit.py:299
msgid ""
"radio.on() \n"
"Turns on the radio. This needs to be called since the radio draws power and\n"
"takes up memory that you may otherwise need."
msgstr ""

#: modes/api/microbit.py:300
msgid ""
"radio.off() \n"
"Turns off the radio, thus saving power and memory."
msgstr ""

#: modes/api/microbit.py:301
msgid ""
"radio.config(length=32, queue=3, channel=7, power=0, address=0x75626974, "
"group=0, data_rate=radio.RATE_1MBIT) \n"
"Configures the various settings relating to the radio. The specified "
"default\n"
"values are sensible.\n"
"'length' is the maximum length, in bytes, of a message. It can be up to 251\n"
"bytes long.\n"
"'queue' is the number of messages to store on the message queue.\n"
"'channel' (0-100) defines the channel to which the radio is tuned.\n"
"'address' is an arbitrary 32-bit address that's used to filter packets.\n"
"'group' is an 8-bit value used with 'address' when filtering packets.\n"
"'data_rate' is the throughput speed. It can be one of: radio.RATE_250KbIT,\n"
"radio.RATE_1MbIT (the default) or radio.2MBIT."
msgstr ""

#: modes/api/microbit.py:302
msgid ""
"radio.reset() \n"
"Reset the settings to their default value."
msgstr ""

#: modes/api/microbit.py:303
msgid ""
"radio.send_bytes(message) \n"
"Sends a message containing bytes."
msgstr ""

#: modes/api/microbit.py:304
msgid ""
"radio.receive_bytes() \n"
"Receive the next incoming message from the message queue. Returns 'None' if\n"
"there are no pending messages. Messages are returned as bytes."
msgstr ""

#: modes/api/microbit.py:305
msgid ""
"radio.send(message) \n"
"Send a message string."
msgstr ""

#: modes/api/microbit.py:306
msgid ""
"radio.receive() \n"
"Receive the next incoming message from the message queue as a string. "
"Returns\n"
"'None' if there are no pending messages."
msgstr ""

#: modes/api/microbit.py:307
msgid "radio.RATE_250KBIT"
msgstr ""

#: modes/api/microbit.py:308
msgid "radio.RATE_1MBIT"
msgstr ""

#: modes/api/microbit.py:309
msgid "radio.RATE_2MBIT"
msgstr ""

#: modes/api/microbit.py:311
msgid ""
"audio.play(source, wait=True, pins=(pin0, pin1)) \n"
"Play the source to completion where 'source' is an iterable, each element "
"of\n"
"which must be an AudioFrame instance."
msgstr ""

#: modes/api/microbit.py:312
msgid ""
"audio.AudioFrame()() \n"
"Represents a list of 32 samples each of which is a signed byte. It takes "
"just\n"
"over 4ms to play a single frame."
msgstr ""

#: modes/api/microbit.py:314
msgid ""
"speech.translate(words) \n"
"Return a string containing the phonemes for the English words in the string\n"
"'words'."
msgstr ""

#: modes/api/microbit.py:315
msgid ""
"speech.say(words, pitch=64, speed=72, mouth=128, throat=128) \n"
"Say the English words in the string 'words'. Override the optional pitch,\n"
"speed, mouth and throat settings to change the tone of voice."
msgstr ""

#: modes/api/microbit.py:316
msgid ""
"speech.pronounce(phonemes, pitch=64, speed=72, mouth=128, throat=128) \n"
"Pronounce the phonemes in the string 'phonemes'. Override the optional "
"pitch,\n"
"speed, mouth and throat settings to change the tone of voice."
msgstr ""

#: modes/api/microbit.py:317
msgid ""
"speech.sing(song, pitch=64, speed=72, mouth=128, throat=128) \n"
"Sing the phonemes in the string 'song'. Add pitch information to a phoneme\n"
"with a hash followed by a number between 1-255 like this: '#112DOWWWWWWWW'.\n"
"Override the optional pitch, speed, mouth and throat settings to change the\n"
"tone of voice."
msgstr ""

#: modes/api/pi.py:23
msgid ""
"gpiozero.AnalogInputDevice(*args, **kwargs) \n"
"Represents an analog input device connected to SPI (serial interface).\n"
"\n"
"Typical analog input devices are `analog to digital converters`_ (ADCs).\n"
"Several classes are provided for specific ADC chips, including\n"
":class:`MCP3004`, :class:`MCP3008`, :class:`MCP3204`, and :class:`MCP3208`.\n"
"\n"
"The following code demonstrates reading the first channel of an MCP3008\n"
"chip attached to the Pi's SPI pins::\n"
"\n"
"    from gpiozero import MCP3008\n"
"\n"
"    pot = MCP3008(0)\n"
"    print(pot.value)\n"
"\n"
"The :attr:`value` attribute is normalized such that its value is always\n"
"between 0.0 and 1.0 (or in special cases, such as differential sampling,\n"
"-1 to +1). Hence, you can use an analog input to control the brightness of\n"
"a :class:`PWMLED` like so::\n"
"\n"
"    from gpiozero import MCP3008, PWMLED\n"
"\n"
"    pot = MCP3008(0)\n"
"    led = PWMLED(17)\n"
"    led.source = pot.values\n"
"\n"
".. _analog to digital converters: https://en.wikipedia.org/wiki/Analog-to-"
"digital_converter"
msgstr ""

#: modes/api/pi.py:24
msgid ""
"gpiozero.AngularServo(*args, **kwargs) \n"
"Extends :class:`Servo` and represents a rotational PWM-controlled servo\n"
"motor which can be set to particular angles (assuming valid minimum and\n"
"maximum angles are provided to the constructor).\n"
"\n"
"Connect a power source (e.g. a battery pack or the 5V pin) to the power\n"
"cable of the servo (this is typically colored red); connect the ground\n"
"cable of the servo (typically colored black or brown) to the negative of\n"
"your battery pack, or a GND pin; connect the final cable (typically colored\n"
"white or orange) to the GPIO pin you wish to use for controlling the servo.\n"
"\n"
"Next, calibrate the angles that the servo can rotate to. In an interactive\n"
"Python session, construct a :class:`Servo` instance. The servo should move\n"
"to its mid-point by default. Set the servo to its minimum value, and\n"
"measure the angle from the mid-point. Set the servo to its maximum value,\n"
"and again measure the angle::\n"
"\n"
"    >>> from gpiozero import Servo\n"
"    >>> s = Servo(17)\n"
"    >>> s.min() # measure the angle\n"
"    >>> s.max() # measure the angle\n"
"\n"
"You should now be able to construct an :class:`AngularServo` instance\n"
"with the correct bounds::\n"
"\n"
"    >>> from gpiozero import AngularServo\n"
"    >>> s = AngularServo(17, min_angle=-42, max_angle=44)\n"
"    >>> s.angle = 0.0\n"
"    >>> s.angle\n"
"    0.0\n"
"    >>> s.angle = 15\n"
"    >>> s.angle\n"
"    15.0\n"
"\n"
".. note::\n"
"\n"
"    You can set *min_angle* greater than *max_angle* if you wish to reverse\n"
"    the sense of the angles (e.g. ``min_angle=45, max_angle=-45``). This\n"
"    can be useful with servos that rotate in the opposite direction to your\n"
"    expectations of minimum and maximum.\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the device is attached to. See :ref:`pin_numbering`\n"
"    for valid pin numbers.\n"
"\n"
":param float initial_angle:\n"
"    Sets the servo's initial angle to the specified value. The default is\n"
"    0. The value specified must be between *min_angle* and *max_angle*\n"
"    inclusive. ``None`` means to start the servo un-controlled (see\n"
"    :attr:`value`).\n"
"\n"
":param float min_angle:\n"
"    Sets the minimum angle that the servo can rotate to. This defaults to\n"
"    -90, but should be set to whatever you measure from your servo during\n"
"    calibration.\n"
"\n"
":param float max_angle:\n"
"    Sets the maximum angle that the servo can rotate to. This defaults to\n"
"    90, but should be set to whatever you measure from your servo during\n"
"    calibration.\n"
"\n"
":param float min_pulse_width:\n"
"    The pulse width corresponding to the servo's minimum position. This\n"
"    defaults to 1ms.\n"
"\n"
":param float max_pulse_width:\n"
"    The pulse width corresponding to the servo's maximum position. This\n"
"    defaults to 2ms.\n"
"\n"
":param float frame_width:\n"
"    The length of time between servo control pulses measured in seconds.\n"
"    This defaults to 20ms which is a common value for servos."
msgstr ""

#: modes/api/pi.py:25
msgid ""
"gpiozero.BadEventHandler() \n"
"Error raised when an event handler with an incompatible prototype is "
"specified"
msgstr ""

#: modes/api/pi.py:26
msgid ""
"gpiozero.BadQueueLen() \n"
"Error raised when non-positive queue length is specified"
msgstr ""

#: modes/api/pi.py:27
msgid ""
"gpiozero.BadWaitTime() \n"
"Error raised when an invalid wait time is specified"
msgstr ""

#: modes/api/pi.py:28
msgid ""
"gpiozero.Button(*args, **kwargs) \n"
"Extends :class:`DigitalInputDevice` and represents a simple push button\n"
"or switch.\n"
"\n"
"Connect one side of the button to a ground pin, and the other to any GPIO\n"
"pin. Alternatively, connect one side of the button to the 3V3 pin, and the\n"
"other to any GPIO pin, then set *pull_up* to ``False`` in the\n"
":class:`Button` constructor.\n"
"\n"
"The following example will print a line of text when the button is pushed::\n"
"\n"
"    from gpiozero import Button\n"
"\n"
"    button = Button(4)\n"
"    button.wait_for_press()\n"
"    print(\"The button was pressed!\")\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the button is attached to. See :ref:`pin_numbering`\n"
"    for valid pin numbers.\n"
"\n"
":param bool pull_up:\n"
"    If ``True`` (the default), the GPIO pin will be pulled high by default.\n"
"    In this case, connect the other side of the button to ground. If\n"
"    ``False``, the GPIO pin will be pulled low by default. In this case,\n"
"    connect the other side of the button to 3V3.\n"
"\n"
":param float bounce_time:\n"
"    If ``None`` (the default), no software bounce compensation will be\n"
"    performed. Otherwise, this is the length of time (in seconds) that the\n"
"    component will ignore changes in state after an initial change.\n"
"\n"
":param float hold_time:\n"
"    The length of time (in seconds) to wait after the button is pushed,\n"
"    until executing the :attr:`when_held` handler. Defaults to ``1``.\n"
"\n"
":param bool hold_repeat:\n"
"    If ``True``, the :attr:`when_held` handler will be repeatedly executed\n"
"    as long as the device remains active, every *hold_time* seconds. If\n"
"    ``False`` (the default) the :attr:`when_held` handler will be only be\n"
"    executed once per hold."
msgstr ""

#: modes/api/pi.py:29
msgid ""
"gpiozero.ButtonBoard(*args, **kwargs) \n"
"Extends :class:`CompositeDevice` and represents a generic button board or\n"
"collection of buttons.\n"
"\n"
":param int \\*pins:\n"
"    Specify the GPIO pins that the buttons of the board are attached to.\n"
"    You can designate as many pins as necessary.\n"
"\n"
":param bool pull_up:\n"
"    If ``True`` (the default), the GPIO pins will be pulled high by\n"
"    default. In this case, connect the other side of the buttons to\n"
"    ground. If ``False``, the GPIO pins will be pulled low by default. In\n"
"    this case, connect the other side of the buttons to 3V3. This\n"
"    parameter can only be specified as a keyword parameter.\n"
"\n"
":param float bounce_time:\n"
"    If ``None`` (the default), no software bounce compensation will be\n"
"    performed. Otherwise, this is the length of time (in seconds) that the\n"
"    buttons will ignore changes in state after an initial change. This\n"
"    parameter can only be specified as a keyword parameter.\n"
"\n"
":param float hold_time:\n"
"    The length of time (in seconds) to wait after any button is pushed,\n"
"    until executing the :attr:`when_held` handler. Defaults to ``1``. This\n"
"    parameter can only be specified as a keyword parameter.\n"
"\n"
":param bool hold_repeat:\n"
"    If ``True``, the :attr:`when_held` handler will be repeatedly executed\n"
"    as long as any buttons remain held, every *hold_time* seconds. If\n"
"    ``False`` (the default) the :attr:`when_held` handler will be only be\n"
"    executed once per hold. This parameter can only be specified as a\n"
"    keyword parameter.\n"
"\n"
":param \\*\\*named_pins:\n"
"    Specify GPIO pins that buttons of the board are attached to,\n"
"    associating each button with a property name. You can designate as\n"
"    many pins as necessary and use any names, provided they're not already\n"
"    in use by something else."
msgstr ""

#: modes/api/pi.py:30
msgid ""
"gpiozero.Buzzer(*args, **kwargs) \n"
"Extends :class:`DigitalOutputDevice` and represents a digital buzzer\n"
"component.\n"
"\n"
"Connect the cathode (negative pin) of the buzzer to a ground pin; connect\n"
"the other side to any GPIO pin.\n"
"\n"
"The following example will sound the buzzer::\n"
"\n"
"    from gpiozero import Buzzer\n"
"\n"
"    bz = Buzzer(3)\n"
"    bz.on()\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the buzzer is attached to. See :ref:`pin_numbering`\n"
"    for valid pin numbers.\n"
"\n"
":param bool active_high:\n"
"    If ``True`` (the default), the buzzer will operate normally with the\n"
"    circuit described above. If ``False`` you should wire the cathode to\n"
"    the GPIO pin, and the anode to a 3V3 pin.\n"
"\n"
":param bool initial_value:\n"
"    If ``False`` (the default), the buzzer will be silent initially.  If\n"
"    ``None``, the buzzer will be left in whatever state the pin is found in\n"
"    when configured for output (warning: this can be on).  If ``True``, the\n"
"    buzzer will be switched on initially."
msgstr ""

#: modes/api/pi.py:31
msgid ""
"gpiozero.CPUTemperature(*args, **kwargs) \n"
"Extends :class:`InternalDevice` to provide a device which is active when\n"
"the CPU temperature exceeds the *threshold* value.\n"
"\n"
"The following example plots the CPU's temperature on an LED bar graph::\n"
"\n"
"    from gpiozero import LEDBarGraph, CPUTemperature\n"
"    from signal import pause\n"
"\n"
"    # Use minimums and maximums that are closer to \"normal\" usage so the\n"
"    # bar graph is a bit more \"lively\"\n"
"    temp = CPUTemperature(min_temp=50, max_temp=90)\n"
"    graph = LEDBarGraph(5, 6, 13, 19, 25, pwm=True)\n"
"    graph.source = temp.values\n"
"    pause()\n"
"\n"
":param str sensor_file:\n"
"    The file from which to read the temperature. This defaults to the\n"
"    sysfs file :file:`/sys/class/thermal/thermal_zone0/temp`. Whatever\n"
"    file is specified is expected to contain a single line containing the\n"
"    temperature in milli-degrees celsius.\n"
"\n"
":param float min_temp:\n"
"    The temperature at which :attr:`value` will read 0.0. This defaults to\n"
"    0.0.\n"
"\n"
":param float max_temp:\n"
"    The temperature at which :attr:`value` will read 1.0. This defaults to\n"
"    100.0.\n"
"\n"
":param float threshold:\n"
"    The temperature above which the device will be considered \"active\".\n"
"    This defaults to 80.0."
msgstr ""

#: modes/api/pi.py:32
msgid ""
"gpiozero.CamJamKitRobot(*args, **kwargs) \n"
"Extends :class:`Robot` for the `CamJam #3 EduKit`_ robot controller.\n"
"\n"
"The CamJam robot controller pins are fixed and therefore there's no need\n"
"to specify them when constructing this class. The following example drives\n"
"the robot forward::\n"
"\n"
"    from gpiozero import CamJamKitRobot\n"
"\n"
"    robot = CamJamKitRobot()\n"
"    robot.forward()\n"
"\n"
".. _CamJam #3 EduKit: http://camjam.me/?page_id=1035"
msgstr ""

#: modes/api/pi.py:33
msgid ""
"gpiozero.CompositeDevice(*args, **kwargs) \n"
"Extends :class:`Device`. Represents a device composed of multiple devices\n"
"like simple HATs, H-bridge motor controllers, robots composed of multiple\n"
"motors, etc.\n"
"\n"
"The constructor accepts subordinate devices as positional or keyword\n"
"arguments.  Positional arguments form unnamed devices accessed via the\n"
":attr:`all` attribute, while keyword arguments are added to the device\n"
"as named (read-only) attributes.\n"
"\n"
":param list _order:\n"
"    If specified, this is the order of named items specified by keyword\n"
"    arguments (to ensure that the :attr:`value` tuple is constructed with a\n"
"    specific order). All keyword arguments *must* be included in the\n"
"    collection. If omitted, an alphabetically sorted order will be selected\n"
"    for keyword arguments."
msgstr ""

#: modes/api/pi.py:34
msgid ""
"gpiozero.CompositeDeviceBadDevice() \n"
"Error raised when a composite device is constructed with an object that "
"doesn't inherit from :class:`Device`"
msgstr ""

#: modes/api/pi.py:35
msgid ""
"gpiozero.CompositeDeviceBadName() \n"
"Error raised when a composite device is constructed with a reserved name"
msgstr ""

#: modes/api/pi.py:36
msgid ""
"gpiozero.CompositeDeviceBadOrder() \n"
"Error raised when a composite device is constructed with an incomplete order"
msgstr ""

#: modes/api/pi.py:37
msgid ""
"gpiozero.CompositeDeviceError() \n"
"Base class for errors specific to the CompositeDevice hierarchy"
msgstr ""

#: modes/api/pi.py:38
msgid ""
"gpiozero.CompositeOutputDevice(*args, **kwargs) \n"
"Extends :class:`CompositeDevice` with :meth:`on`, :meth:`off`, and\n"
":meth:`toggle` methods for controlling subordinate output devices.  Also\n"
"extends :attr:`value` to be writeable.\n"
"\n"
":param list _order:\n"
"    If specified, this is the order of named items specified by keyword\n"
"    arguments (to ensure that the :attr:`value` tuple is constructed with a\n"
"    specific order). All keyword arguments *must* be included in the\n"
"    collection. If omitted, an alphabetically sorted order will be selected\n"
"    for keyword arguments."
msgstr ""

#: modes/api/pi.py:39
msgid ""
"gpiozero.Device(*args, **kwargs) \n"
"Represents a single device of any type; GPIO-based, SPI-based, I2C-based,\n"
"etc. This is the base class of the device hierarchy. It defines the\n"
"basic services applicable to all devices (specifically thhe :attr:"
"`is_active`\n"
"property, the :attr:`value` property, and the :meth:`close` method)."
msgstr ""

#: modes/api/pi.py:40
msgid ""
"gpiozero.DeviceClosed() \n"
"Error raised when an operation is attempted on a closed device"
msgstr ""

#: modes/api/pi.py:41
msgid ""
"gpiozero.DigitalInputDevice(*args, **kwargs) \n"
"Represents a generic input device with typical on/off behaviour.\n"
"\n"
"This class extends :class:`InputDevice` with machinery to fire the active\n"
"and inactive events for devices that operate in a typical digital manner:\n"
"straight forward on / off states with (reasonably) clean transitions\n"
"between the two.\n"
"\n"
":param float bounce_time:\n"
"    Specifies the length of time (in seconds) that the component will\n"
"    ignore changes in state after an initial change. This defaults to\n"
"    ``None`` which indicates that no bounce compensation will be performed."
msgstr ""

#: modes/api/pi.py:42
msgid ""
"gpiozero.DigitalOutputDevice(*args, **kwargs) \n"
"Represents a generic output device with typical on/off behaviour.\n"
"\n"
"This class extends :class:`OutputDevice` with a :meth:`blink` method which\n"
"uses an optional background thread to handle toggling the device state\n"
"without further interaction."
msgstr ""

#: modes/api/pi.py:43
msgid ""
"gpiozero.DistanceSensor(*args, **kwargs) \n"
"Extends :class:`SmoothedInputDevice` and represents an HC-SR04 ultrasonic\n"
"distance sensor, as found in the `CamJam #3 EduKit`_.\n"
"\n"
"The distance sensor requires two GPIO pins: one for the *trigger* (marked\n"
"TRIG on the sensor) and another for the *echo* (marked ECHO on the sensor).\n"
"However, a voltage divider is required to ensure the 5V from the ECHO pin\n"
"doesn't damage the Pi. Wire your sensor according to the following\n"
"instructions:\n"
"\n"
"1. Connect the GND pin of the sensor to a ground pin on the Pi.\n"
"\n"
"2. Connect the TRIG pin of the sensor a GPIO pin.\n"
"\n"
"3. Connect a 330Ω resistor from the ECHO pin of the sensor to a different\n"
"   GPIO pin.\n"
"\n"
"4. Connect a 470Ω resistor from ground to the ECHO GPIO pin. This forms\n"
"   the required voltage divider.\n"
"\n"
"5. Finally, connect the VCC pin of the sensor to a 5V pin on the Pi.\n"
"\n"
"The following code will periodically report the distance measured by the\n"
"sensor in cm assuming the TRIG pin is connected to GPIO17, and the ECHO\n"
"pin to GPIO18::\n"
"\n"
"    from gpiozero import DistanceSensor\n"
"    from time import sleep\n"
"\n"
"    sensor = DistanceSensor(echo=18, trigger=17)\n"
"    while True:\n"
"        print('Distance: ', sensor.distance * 100)\n"
"        sleep(1)\n"
"\n"
":param int echo:\n"
"    The GPIO pin which the ECHO pin is attached to. See\n"
"    :ref:`pin_numbering` for valid pin numbers.\n"
"\n"
":param int trigger:\n"
"    The GPIO pin which the TRIG pin is attached to. See\n"
"    :ref:`pin_numbering` for valid pin numbers.\n"
"\n"
":param int queue_len:\n"
"    The length of the queue used to store values read from the sensor.\n"
"    This defaults to 30.\n"
"\n"
":param float max_distance:\n"
"    The :attr:`value` attribute reports a normalized value between 0 (too\n"
"    close to measure) and 1 (maximum distance). This parameter specifies\n"
"    the maximum distance expected in meters. This defaults to 1.\n"
"\n"
":param float threshold_distance:\n"
"    Defaults to 0.3. This is the distance (in meters) that will trigger the\n"
"    ``in_range`` and ``out_of_range`` events when crossed.\n"
"\n"
":param bool partial:\n"
"    When ``False`` (the default), the object will not return a value for\n"
"    :attr:`~SmoothedInputDevice.is_active` until the internal queue has\n"
"    filled with values.  Only set this to ``True`` if you require values\n"
"    immediately after object construction.\n"
"\n"
".. _CamJam #3 EduKit: http://camjam.me/?page_id=1035"
msgstr ""

#: modes/api/pi.py:44
msgid ""
"gpiozero.Energenie(*args, **kwargs) \n"
"Extends :class:`Device` to represent an `Energenie socket`_ controller.\n"
"\n"
"This class is constructed with a socket number and an optional initial\n"
"state (defaults to ``False``, meaning off). Instances of this class can\n"
"be used to switch peripherals on and off. For example::\n"
"\n"
"    from gpiozero import Energenie\n"
"\n"
"    lamp = Energenie(1)\n"
"    lamp.on()\n"
"\n"
":param int socket:\n"
"    Which socket this instance should control. This is an integer number\n"
"    between 1 and 4.\n"
"\n"
":param bool initial_value:\n"
"    The initial state of the socket. As Energenie sockets provide no\n"
"    means of reading their state, you must provide an initial state for\n"
"    the socket, which will be set upon construction. This defaults to\n"
"    ``False`` which will switch the socket off.\n"
"\n"
".. _Energenie socket: https://energenie4u.co.uk/index.php/catalogue/product/"
"ENER002-2PI"
msgstr ""

#: modes/api/pi.py:45
msgid ""
"gpiozero.EnergenieBadSocket() \n"
"Error raised when an invalid socket number is passed to :class:`Energenie`"
msgstr ""

#: modes/api/pi.py:46
msgid ""
"gpiozero.EnergenieSocketMissing() \n"
"Error raised when socket number is not specified"
msgstr ""

#: modes/api/pi.py:47
msgid ""
"gpiozero.EventsMixin(*args, **kwargs) \n"
"Adds edge-detected :meth:`when_activated` and :meth:`when_deactivated`\n"
"events to a device based on changes to the :attr:`~Device.is_active`\n"
"property common to all devices. Also adds :meth:`wait_for_active` and\n"
":meth:`wait_for_inactive` methods for level-waiting.\n"
"\n"
".. note::\n"
"\n"
"    Note that this mixin provides no means of actually firing its events;\n"
"    call :meth:`_fire_events` in sub-classes when device state changes to\n"
"    trigger the events. This should also be called once at the end of\n"
"    initialization to set initial states."
msgstr ""

#: modes/api/pi.py:48
msgid ""
"gpiozero.FishDish(*args, **kwargs) \n"
"Extends :class:`TrafficLightsBuzzer` for the `Pi Supply FishDish`_: traffic\n"
"light LEDs, a button and a buzzer.\n"
"\n"
"The FishDish pins are fixed and therefore there's no need to specify them\n"
"when constructing this class. The following example waits for the button\n"
"to be pressed on the FishDish, then turns on all the LEDs::\n"
"\n"
"    from gpiozero import FishDish\n"
"\n"
"    fish = FishDish()\n"
"    fish.button.wait_for_press()\n"
"    fish.lights.on()\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances to represent each\n"
"    LED. If ``False`` (the default), construct regular :class:`LED`\n"
"    instances.\n"
"\n"
".. _Pi Supply FishDish: https://www.pi-supply.com/product/fish-dish-"
"raspberry-pi-led-buzzer-board/"
msgstr ""

#: modes/api/pi.py:49
msgid ""
"gpiozero.GPIODevice(*args, **kwargs) \n"
"Extends :class:`Device`. Represents a generic GPIO device and provides\n"
"the services common to all single-pin GPIO devices (like ensuring two\n"
"GPIO devices do no share a :attr:`pin`).\n"
"\n"
":param int pin:\n"
"    The GPIO pin (in BCM numbering) that the device is connected to. If\n"
"    this is ``None``, :exc:`GPIOPinMissing` will be raised. If the pin is\n"
"    already in use by another device, :exc:`GPIOPinInUse` will be raised."
msgstr ""

#: modes/api/pi.py:50
msgid ""
"gpiozero.GPIODeviceClosed() \n"
"Deprecated descendent of :exc:`DeviceClosed`"
msgstr ""

#: modes/api/pi.py:51
msgid ""
"gpiozero.GPIODeviceError() \n"
"Base class for errors specific to the GPIODevice hierarchy"
msgstr ""

#: modes/api/pi.py:52
msgid ""
"gpiozero.GPIOPinInUse() \n"
"Error raised when attempting to use a pin already in use by another device"
msgstr ""

#: modes/api/pi.py:53
msgid ""
"gpiozero.GPIOPinMissing() \n"
"Error raised when a pin number is not specified"
msgstr ""

#: modes/api/pi.py:54
msgid ""
"gpiozero.GPIOZeroError() \n"
"Base class for all exceptions in GPIO Zero"
msgstr ""

#: modes/api/pi.py:55
msgid ""
"gpiozero.GPIOZeroWarning() \n"
"Base class for all warnings in GPIO Zero"
msgstr ""

#: modes/api/pi.py:56
msgid ""
"gpiozero.HoldMixin(*args, **kwargs) \n"
"Extends :class:`EventsMixin` to add the :attr:`when_held` event and the\n"
"machinery to fire that event repeatedly (when :attr:`hold_repeat` is\n"
"``True``) at internals defined by :attr:`hold_time`."
msgstr ""

#: modes/api/pi.py:57
msgid ""
"gpiozero.InputDevice(*args, **kwargs) \n"
"Represents a generic GPIO input device.\n"
"\n"
"This class extends :class:`GPIODevice` to add facilities common to GPIO\n"
"input devices.  The constructor adds the optional *pull_up* parameter to\n"
"specify how the pin should be pulled by the internal resistors. The\n"
":attr:`~GPIODevice.is_active` property is adjusted accordingly so that\n"
"``True`` still means active regardless of the :attr:`pull_up` setting.\n"
"\n"
":param int pin:\n"
"    The GPIO pin (in Broadcom numbering) that the device is connected to.\n"
"    If this is ``None`` a :exc:`GPIODeviceError` will be raised.\n"
"\n"
":param bool pull_up:\n"
"    If ``True``, the pin will be pulled high with an internal resistor. If\n"
"    ``False`` (the default), the pin will be pulled low."
msgstr ""

#: modes/api/pi.py:58
msgid ""
"gpiozero.InputDeviceError() \n"
"Base class for errors specific to the InputDevice hierarchy"
msgstr ""

#: modes/api/pi.py:59
msgid ""
"gpiozero.InternalDevice(*args, **kwargs) \n"
"Extends :class:`Device` to provide a basis for devices which have no\n"
"specific hardware representation. These are effectively pseudo-devices and\n"
"usually represent operating system services like the internal clock, file\n"
"systems or network facilities."
msgstr ""

#: modes/api/pi.py:60
msgid ""
"gpiozero.LED(*args, **kwargs) \n"
"Extends :class:`DigitalOutputDevice` and represents a light emitting diode\n"
"(LED).\n"
"\n"
"Connect the cathode (short leg, flat side) of the LED to a ground pin;\n"
"connect the anode (longer leg) to a limiting resistor; connect the other\n"
"side of the limiting resistor to a GPIO pin (the limiting resistor can be\n"
"placed either side of the LED).\n"
"\n"
"The following example will light the LED::\n"
"\n"
"    from gpiozero import LED\n"
"\n"
"    led = LED(17)\n"
"    led.on()\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the LED is attached to. See :ref:`pin_numbering` for\n"
"    valid pin numbers.\n"
"\n"
":param bool active_high:\n"
"    If ``True`` (the default), the LED will operate normally with the\n"
"    circuit described above. If ``False`` you should wire the cathode to\n"
"    the GPIO pin, and the anode to a 3V3 pin (via a limiting resistor).\n"
"\n"
":param bool initial_value:\n"
"    If ``False`` (the default), the LED will be off initially.  If\n"
"    ``None``, the LED will be left in whatever state the pin is found in\n"
"    when configured for output (warning: this can be on).  If ``True``, the\n"
"    LED will be switched on initially."
msgstr ""

#: modes/api/pi.py:61
msgid ""
"gpiozero.LEDBarGraph(*args, **kwargs) \n"
"Extends :class:`LEDCollection` to control a line of LEDs representing a\n"
"bar graph. Positive values (0 to 1) light the LEDs from first to last.\n"
"Negative values (-1 to 0) light the LEDs from last to first.\n"
"\n"
"The following example demonstrates turning on the first two and last two\n"
"LEDs in a board containing five LEDs attached to GPIOs 2 through 6::\n"
"\n"
"    from gpiozero import LEDBarGraph\n"
"    from time import sleep\n"
"\n"
"    graph = LEDBarGraph(2, 3, 4, 5, 6)\n"
"    graph.value = 2/5  # Light the first two LEDs only\n"
"    sleep(1)\n"
"    graph.value = -2/5 # Light the last two LEDs only\n"
"    sleep(1)\n"
"    graph.off()\n"
"\n"
"As with other output devices, :attr:`source` and :attr:`values` are\n"
"supported::\n"
"\n"
"    from gpiozero import LEDBarGraph, MCP3008\n"
"    from signal import pause\n"
"\n"
"    graph = LEDBarGraph(2, 3, 4, 5, 6, pwm=True)\n"
"    pot = MCP3008(channel=0)\n"
"    graph.source = pot.values\n"
"    pause()\n"
"\n"
":param int \\*pins:\n"
"    Specify the GPIO pins that the LEDs of the bar graph are attached to.\n"
"    You can designate as many pins as necessary.\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances for each pin. If\n"
"    ``False`` (the default), construct regular :class:`LED` instances. This\n"
"    parameter can only be specified as a keyword parameter.\n"
"\n"
":param bool active_high:\n"
"    If ``True`` (the default), the :meth:`on` method will set all the\n"
"    associated pins to HIGH. If ``False``, the :meth:`on` method will set\n"
"    all pins to LOW (the :meth:`off` method always does the opposite). This\n"
"    parameter can only be specified as a keyword parameter.\n"
"\n"
":param float initial_value:\n"
"    The initial :attr:`value` of the graph given as a float between -1 and\n"
"    +1.  Defaults to ``0.0``. This parameter can only be specified as a\n"
"    keyword parameter."
msgstr ""

#: modes/api/pi.py:62
msgid ""
"gpiozero.LEDBoard(*args, **kwargs) \n"
"Extends :class:`LEDCollection` and represents a generic LED board or\n"
"collection of LEDs.\n"
"\n"
"The following example turns on all the LEDs on a board containing 5 LEDs\n"
"attached to GPIO pins 2 through 6::\n"
"\n"
"    from gpiozero import LEDBoard\n"
"\n"
"    leds = LEDBoard(2, 3, 4, 5, 6)\n"
"    leds.on()\n"
"\n"
":param int \\*pins:\n"
"    Specify the GPIO pins that the LEDs of the board are attached to. You\n"
"    can designate as many pins as necessary. You can also specify\n"
"    :class:`LEDBoard` instances to create trees of LEDs.\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances for each pin. If\n"
"    ``False`` (the default), construct regular :class:`LED` instances. This\n"
"    parameter can only be specified as a keyword parameter.\n"
"\n"
":param bool active_high:\n"
"    If ``True`` (the default), the :meth:`on` method will set all the\n"
"    associated pins to HIGH. If ``False``, the :meth:`on` method will set\n"
"    all pins to LOW (the :meth:`off` method always does the opposite). This\n"
"    parameter can only be specified as a keyword parameter.\n"
"\n"
":param bool initial_value:\n"
"    If ``False`` (the default), all LEDs will be off initially. If\n"
"    ``None``, each device will be left in whatever state the pin is found\n"
"    in when configured for output (warning: this can be on). If ``True``,\n"
"    the device will be switched on initially. This parameter can only be\n"
"    specified as a keyword parameter.\n"
"\n"
":param \\*\\*named_pins:\n"
"    Specify GPIO pins that LEDs of the board are attached to, associating\n"
"    each LED with a property name. You can designate as many pins as\n"
"    necessary and use any names, provided they're not already in use by\n"
"    something else. You can also specify :class:`LEDBoard` instances to\n"
"    create trees of LEDs."
msgstr ""

#: modes/api/pi.py:63
msgid ""
"gpiozero.LEDCollection(*args, **kwargs) \n"
"Extends :class:`CompositeOutputDevice`. Abstract base class for\n"
":class:`LEDBoard` and :class:`LEDBarGraph`."
msgstr ""

#: modes/api/pi.py:64
msgid ""
"gpiozero.LedBorg(*args, **kwargs) \n"
"Extends :class:`RGBLED` for the `PiBorg LedBorg`_: an add-on board\n"
"containing a very bright RGB LED.\n"
"\n"
"The LedBorg pins are fixed and therefore there's no need to specify them\n"
"when constructing this class. The following example turns the LedBorg\n"
"purple::\n"
"\n"
"    from gpiozero import LedBorg\n"
"\n"
"    led = LedBorg()\n"
"    led.color = (1, 0, 1)\n"
"\n"
":param tuple initial_value:\n"
"    The initial color for the LedBorg. Defaults to black ``(0, 0, 0)``.\n"
"\n"
":param bool pwm:\n"
"    If ``True`` (the default), construct :class:`PWMLED` instances for\n"
"    each component of the LedBorg. If ``False``, construct regular\n"
"    :class:`LED` instances, which prevents smooth color graduations.\n"
"\n"
".. _PiBorg LedBorg: https://www.piborg.org/ledborg"
msgstr ""

#: modes/api/pi.py:65
msgid ""
"gpiozero.LightSensor(*args, **kwargs) \n"
"Extends :class:`SmoothedInputDevice` and represents a light dependent\n"
"resistor (LDR).\n"
"\n"
"Connect one leg of the LDR to the 3V3 pin; connect one leg of a 1µF\n"
"capacitor to a ground pin; connect the other leg of the LDR and the other\n"
"leg of the capacitor to the same GPIO pin. This class repeatedly discharges\n"
"the capacitor, then times the duration it takes to charge (which will vary\n"
"according to the light falling on the LDR).\n"
"\n"
"The following code will print a line of text when light is detected::\n"
"\n"
"    from gpiozero import LightSensor\n"
"\n"
"    ldr = LightSensor(18)\n"
"    ldr.wait_for_light()\n"
"    print(\"Light detected!\")\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the sensor is attached to. See :ref:`pin_numbering`\n"
"    for valid pin numbers.\n"
"\n"
":param int queue_len:\n"
"    The length of the queue used to store values read from the circuit.\n"
"    This defaults to 5.\n"
"\n"
":param float charge_time_limit:\n"
"    If the capacitor in the circuit takes longer than this length of time\n"
"    to charge, it is assumed to be dark. The default (0.01 seconds) is\n"
"    appropriate for a 1µF capacitor coupled with the LDR from the\n"
"    `CamJam #2 EduKit`_. You may need to adjust this value for different\n"
"    valued capacitors or LDRs.\n"
"\n"
":param float threshold:\n"
"    Defaults to 0.1. When the mean of all values in the internal queue\n"
"    rises above this value, the area will be considered \"light\", and all\n"
"    appropriate events will be fired.\n"
"\n"
":param bool partial:\n"
"    When ``False`` (the default), the object will not return a value for\n"
"    :attr:`~SmoothedInputDevice.is_active` until the internal queue has\n"
"    filled with values.  Only set this to ``True`` if you require values\n"
"    immediately after object construction.\n"
"\n"
".. _CamJam #2 EduKit: http://camjam.me/?page_id=623"
msgstr ""

#: modes/api/pi.py:66
msgid ""
"gpiozero.LineSensor(*args, **kwargs) \n"
"Extends :class:`SmoothedInputDevice` and represents a single pin line "
"sensor\n"
"like the TCRT5000 infra-red proximity sensor found in the `CamJam #3\n"
"EduKit`_.\n"
"\n"
"A typical line sensor has a small circuit board with three pins: VCC, GND,\n"
"and OUT. VCC should be connected to a 3V3 pin, GND to one of the ground\n"
"pins, and finally OUT to the GPIO specified as the value of the *pin*\n"
"parameter in the constructor.\n"
"\n"
"The following code will print a line of text indicating when the sensor\n"
"detects a line, or stops detecting a line::\n"
"\n"
"    from gpiozero import LineSensor\n"
"    from signal import pause\n"
"\n"
"    sensor = LineSensor(4)\n"
"    sensor.when_line = lambda: print('Line detected')\n"
"    sensor.when_no_line = lambda: print('No line detected')\n"
"    pause()\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the sensor is attached to. See :ref:`pin_numbering`\n"
"    for valid pin numbers.\n"
"\n"
":param int queue_len:\n"
"    The length of the queue used to store values read from the sensor. This\n"
"    defaults to 5.\n"
"\n"
":param float sample_rate:\n"
"    The number of values to read from the device (and append to the\n"
"    internal queue) per second. Defaults to 100.\n"
"\n"
":param float threshold:\n"
"    Defaults to 0.5. When the mean of all values in the internal queue\n"
"    rises above this value, the sensor will be considered \"active\" by the\n"
"    :attr:`~SmoothedInputDevice.is_active` property, and all appropriate\n"
"    events will be fired.\n"
"\n"
":param bool partial:\n"
"    When ``False`` (the default), the object will not return a value for\n"
"    :attr:`~SmoothedInputDevice.is_active` until the internal queue has\n"
"    filled with values.  Only set this to ``True`` if you require values\n"
"    immediately after object construction.\n"
"\n"
".. _CamJam #3 EduKit: http://camjam.me/?page_id=1035"
msgstr ""

#: modes/api/pi.py:67
msgid ""
"gpiozero.LocalPin() \n"
"Abstract base class representing pins attached locally to a Pi. This forms\n"
"the base class for local-only pin interfaces (:class:`RPiGPIOPin`,\n"
":class:`RPIOPin`, and :class:`NativePin`)."
msgstr ""

#: modes/api/pi.py:68
msgid ""
"gpiozero.MCP3001(*args, **kwargs) \n"
"The `MCP3001`_ is a 10-bit analog to digital converter with 1 channel\n"
"\n"
".. _MCP3001: http://www.farnell.com/datasheets/630400.pdf"
msgstr ""

#: modes/api/pi.py:69
msgid ""
"gpiozero.MCP3002(*args, **kwargs) \n"
"The `MCP3002`_ is a 10-bit analog to digital converter with 2 channels\n"
"(0-1).\n"
"\n"
".. _MCP3002: http://www.farnell.com/datasheets/1599363.pdf"
msgstr ""

#: modes/api/pi.py:70
msgid ""
"gpiozero.MCP3004(*args, **kwargs) \n"
"The `MCP3004`_ is a 10-bit analog to digital converter with 4 channels\n"
"(0-3).\n"
"\n"
".. _MCP3004: http://www.farnell.com/datasheets/808965.pdf"
msgstr ""

#: modes/api/pi.py:71
msgid ""
"gpiozero.MCP3008(*args, **kwargs) \n"
"The `MCP3008`_ is a 10-bit analog to digital converter with 8 channels\n"
"(0-7).\n"
"\n"
".. _MCP3008: http://www.farnell.com/datasheets/808965.pdf"
msgstr ""

#: modes/api/pi.py:72
msgid ""
"gpiozero.MCP3201(*args, **kwargs) \n"
"The `MCP3201`_ is a 12-bit analog to digital converter with 1 channel\n"
"\n"
".. _MCP3201: http://www.farnell.com/datasheets/1669366.pdf"
msgstr ""

#: modes/api/pi.py:73
msgid ""
"gpiozero.MCP3202(*args, **kwargs) \n"
"The `MCP3202`_ is a 12-bit analog to digital converter with 2 channels\n"
"(0-1).\n"
"\n"
".. _MCP3202: http://www.farnell.com/datasheets/1669376.pdf"
msgstr ""

#: modes/api/pi.py:74
msgid ""
"gpiozero.MCP3204(*args, **kwargs) \n"
"The `MCP3204`_ is a 12-bit analog to digital converter with 4 channels\n"
"(0-3).\n"
"\n"
".. _MCP3204: http://www.farnell.com/datasheets/808967.pdf"
msgstr ""

#: modes/api/pi.py:75
msgid ""
"gpiozero.MCP3208(*args, **kwargs) \n"
"The `MCP3208`_ is a 12-bit analog to digital converter with 8 channels\n"
"(0-7).\n"
"\n"
".. _MCP3208: http://www.farnell.com/datasheets/808967.pdf"
msgstr ""

#: modes/api/pi.py:76
msgid ""
"gpiozero.MCP3301(*args, **kwargs) \n"
"The `MCP3301`_ is a signed 13-bit analog to digital converter.  Please note\n"
"that the MCP3301 always operates in differential mode between its two\n"
"channels and the output value is scaled from -1 to +1.\n"
"\n"
".. _MCP3301: http://www.farnell.com/datasheets/1669397.pdf"
msgstr ""

#: modes/api/pi.py:77
msgid ""
"gpiozero.MCP3302(*args, **kwargs) \n"
"The `MCP3302`_ is a 12/13-bit analog to digital converter with 4 channels\n"
"(0-3). When operated in differential mode, the device outputs a signed\n"
"13-bit value which is scaled from -1 to +1. When operated in single-ended\n"
"mode (the default), the device outputs an unsigned 12-bit value scaled from\n"
"0 to 1.\n"
"\n"
".. _MCP3302: http://www.farnell.com/datasheets/1486116.pdf"
msgstr ""

#: modes/api/pi.py:78
msgid ""
"gpiozero.MCP3304(*args, **kwargs) \n"
"The `MCP3304`_ is a 12/13-bit analog to digital converter with 8 channels\n"
"(0-7). When operated in differential mode, the device outputs a signed\n"
"13-bit value which is scaled from -1 to +1. When operated in single-ended\n"
"mode (the default), the device outputs an unsigned 12-bit value scaled from\n"
"0 to 1.\n"
"\n"
".. _MCP3304: http://www.farnell.com/datasheets/1486116.pdf"
msgstr ""

#: modes/api/pi.py:79
msgid ""
"gpiozero.MotionSensor(*args, **kwargs) \n"
"Extends :class:`SmoothedInputDevice` and represents a passive infra-red\n"
"(PIR) motion sensor like the sort found in the `CamJam #2 EduKit`_.\n"
"\n"
".. _CamJam #2 EduKit: http://camjam.me/?page_id=623\n"
"\n"
"A typical PIR device has a small circuit board with three pins: VCC, OUT,\n"
"and GND. VCC should be connected to a 5V pin, GND to one of the ground\n"
"pins, and finally OUT to the GPIO specified as the value of the *pin*\n"
"parameter in the constructor.\n"
"\n"
"The following code will print a line of text when motion is detected::\n"
"\n"
"    from gpiozero import MotionSensor\n"
"\n"
"    pir = MotionSensor(4)\n"
"    pir.wait_for_motion()\n"
"    print(\"Motion detected!\")\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the sensor is attached to. See :ref:`pin_numbering`\n"
"    for valid pin numbers.\n"
"\n"
":param int queue_len:\n"
"    The length of the queue used to store values read from the sensor. This\n"
"    defaults to 1 which effectively disables the queue. If your motion\n"
"    sensor is particularly \"twitchy\" you may wish to increase this value.\n"
"\n"
":param float sample_rate:\n"
"    The number of values to read from the device (and append to the\n"
"    internal queue) per second. Defaults to 100.\n"
"\n"
":param float threshold:\n"
"    Defaults to 0.5. When the mean of all values in the internal queue\n"
"    rises above this value, the sensor will be considered \"active\" by the\n"
"    :attr:`~SmoothedInputDevice.is_active` property, and all appropriate\n"
"    events will be fired.\n"
"\n"
":param bool partial:\n"
"    When ``False`` (the default), the object will not return a value for\n"
"    :attr:`~SmoothedInputDevice.is_active` until the internal queue has\n"
"    filled with values.  Only set this to ``True`` if you require values\n"
"    immediately after object construction."
msgstr ""

#: modes/api/pi.py:80
msgid ""
"gpiozero.Motor(*args, **kwargs) \n"
"Extends :class:`CompositeDevice` and represents a generic motor\n"
"connected to a bi-directional motor driver circuit (i.e.  an `H-bridge`_).\n"
"\n"
"Attach an `H-bridge`_ motor controller to your Pi; connect a power source\n"
"(e.g. a battery pack or the 5V pin) to the controller; connect the outputs\n"
"of the controller board to the two terminals of the motor; connect the\n"
"inputs of the controller board to two GPIO pins.\n"
"\n"
".. _H-bridge: https://en.wikipedia.org/wiki/H_bridge\n"
"\n"
"The following code will make the motor turn \"forwards\"::\n"
"\n"
"    from gpiozero import Motor\n"
"\n"
"    motor = Motor(17, 18)\n"
"    motor.forward()\n"
"\n"
":param int forward:\n"
"    The GPIO pin that the forward input of the motor driver chip is\n"
"    connected to.\n"
"\n"
":param int backward:\n"
"    The GPIO pin that the backward input of the motor driver chip is\n"
"    connected to.\n"
"\n"
":param bool pwm:\n"
"    If ``True`` (the default), construct :class:`PWMOutputDevice`\n"
"    instances for the motor controller pins, allowing both direction and\n"
"    variable speed control. If ``False``, construct\n"
"    :class:`DigitalOutputDevice` instances, allowing only direction\n"
"    control."
msgstr ""

#: modes/api/pi.py:81
msgid ""
"gpiozero.OutputDevice(*args, **kwargs) \n"
"Represents a generic GPIO output device.\n"
"\n"
"This class extends :class:`GPIODevice` to add facilities common to GPIO\n"
"output devices: an :meth:`on` method to switch the device on, a\n"
"corresponding :meth:`off` method, and a :meth:`toggle` method.\n"
"\n"
":param int pin:\n"
"    The GPIO pin (in BCM numbering) that the device is connected to. If\n"
"    this is ``None`` a :exc:`GPIOPinMissing` will be raised.\n"
"\n"
":param bool active_high:\n"
"    If ``True`` (the default), the :meth:`on` method will set the GPIO to\n"
"    HIGH. If ``False``, the :meth:`on` method will set the GPIO to LOW (the\n"
"    :meth:`off` method always does the opposite).\n"
"\n"
":param bool initial_value:\n"
"    If ``False`` (the default), the device will be off initially.  If\n"
"    ``None``, the device will be left in whatever state the pin is found in\n"
"    when configured for output (warning: this can be on).  If ``True``, the\n"
"    device will be switched on initially."
msgstr ""

#: modes/api/pi.py:82
msgid ""
"gpiozero.OutputDeviceBadValue() \n"
"Error raised when ``value`` is set to an invalid value"
msgstr ""

#: modes/api/pi.py:83
msgid ""
"gpiozero.OutputDeviceError() \n"
"Base class for errors specified to the OutputDevice hierarchy"
msgstr ""

#: modes/api/pi.py:84
msgid ""
"gpiozero.PWMLED(*args, **kwargs) \n"
"Extends :class:`PWMOutputDevice` and represents a light emitting diode\n"
"(LED) with variable brightness.\n"
"\n"
"A typical configuration of such a device is to connect a GPIO pin to the\n"
"anode (long leg) of the LED, and the cathode (short leg) to ground, with\n"
"an optional resistor to prevent the LED from burning out.\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the LED is attached to. See :ref:`pin_numbering` for\n"
"    valid pin numbers.\n"
"\n"
":param bool active_high:\n"
"    If ``True`` (the default), the :meth:`on` method will set the GPIO to\n"
"    HIGH. If ``False``, the :meth:`on` method will set the GPIO to LOW (the\n"
"    :meth:`off` method always does the opposite).\n"
"\n"
":param float initial_value:\n"
"    If ``0`` (the default), the LED will be off initially. Other values\n"
"    between 0 and 1 can be specified as an initial brightness for the LED.\n"
"    Note that ``None`` cannot be specified (unlike the parent class) as\n"
"    there is no way to tell PWM not to alter the state of the pin.\n"
"\n"
":param int frequency:\n"
"    The frequency (in Hz) of pulses emitted to drive the LED. Defaults\n"
"    to 100Hz."
msgstr ""

#: modes/api/pi.py:85
msgid ""
"gpiozero.PWMOutputDevice(*args, **kwargs) \n"
"Generic output device configured for pulse-width modulation (PWM).\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the device is attached to. See :ref:`pin_numbering`\n"
"    for valid pin numbers.\n"
"\n"
":param bool active_high:\n"
"    If ``True`` (the default), the :meth:`on` method will set the GPIO to\n"
"    HIGH. If ``False``, the :meth:`on` method will set the GPIO to LOW (the\n"
"    :meth:`off` method always does the opposite).\n"
"\n"
":param float initial_value:\n"
"    If ``0`` (the default), the device's duty cycle will be 0 initially.\n"
"    Other values between 0 and 1 can be specified as an initial duty cycle.\n"
"    Note that ``None`` cannot be specified (unlike the parent class) as\n"
"    there is no way to tell PWM not to alter the state of the pin.\n"
"\n"
":param int frequency:\n"
"    The frequency (in Hz) of pulses emitted to drive the device. Defaults\n"
"    to 100Hz."
msgstr ""

#: modes/api/pi.py:86
msgid ""
"gpiozero.PiBoardInfo(revision, model, pcb_revision, released, soc, "
"manufacturer, memory, storage, usb, ethernet, wifi, bluetooth, csi, dsi, "
"headers) \n"
"This class is a :func:`~collections.namedtuple` derivative used to\n"
"represent information about a particular model of Raspberry Pi. While it is\n"
"a tuple, it is strongly recommended that you use the following named\n"
"attributes to access the data contained within.\n"
"\n"
".. automethod:: physical_pin\n"
"\n"
".. automethod:: physical_pins\n"
"\n"
".. automethod:: pulled_up\n"
"\n"
".. attribute:: revision\n"
"\n"
"    A string indicating the revision of the Pi. This is unique to each\n"
"    revision and can be considered the \"key\" from which all other\n"
"    attributes are derived. However, in itself the string is fairly\n"
"    meaningless.\n"
"\n"
".. attribute:: model\n"
"\n"
"    A string containing the model of the Pi (for example, \"B\", \"B+\", \"A+"
"\",\n"
"    \"2B\", \"CM\" (for the Compute Module), or \"Zero\").\n"
"\n"
".. attribute:: pcb_revision\n"
"\n"
"    A string containing the PCB revision number which is silk-screened onto\n"
"    the Pi (on some models).\n"
"\n"
"    .. note::\n"
"\n"
"        This is primarily useful to distinguish between the model B\n"
"        revision 1.0 and 2.0 (not to be confused with the model 2B) which\n"
"        had slightly different pinouts on their 26-pin GPIO headers.\n"
"\n"
".. attribute:: released\n"
"\n"
"    A string containing an approximate release date for this revision of\n"
"    the Pi (formatted as yyyyQq, e.g. 2012Q1 means the first quarter of\n"
"    2012).\n"
"\n"
".. attribute:: soc\n"
"\n"
"    A string indicating the SoC (`system on a chip`_) that this revision\n"
"    of the Pi is based upon.\n"
"\n"
".. attribute:: manufacturer\n"
"\n"
"    A string indicating the name of the manufacturer (usually \"Sony\" but "
"a\n"
"    few others exist).\n"
"\n"
".. attribute:: memory\n"
"\n"
"    An integer indicating the amount of memory (in Mb) connected to the\n"
"    SoC.\n"
"\n"
"    .. note::\n"
"\n"
"        This can differ substantially from the amount of RAM available\n"
"        to the operating system as the GPU's memory is shared with the\n"
"        CPU. When the camera module is activated, at least 128Mb of RAM\n"
"        is typically reserved for the GPU.\n"
"\n"
".. attribute:: storage\n"
"\n"
"    A string indicating the type of bootable storage used with this\n"
"    revision of Pi, e.g. \"SD\", \"MicroSD\", or \"eMMC\" (for the Compute\n"
"    Module).\n"
"\n"
".. attribute:: usb\n"
"\n"
"    An integer indicating how many USB ports are physically present on\n"
"    this revision of the Pi.\n"
"\n"
"    .. note::\n"
"\n"
"        This does *not* include the micro-USB port used to power the Pi.\n"
"\n"
".. attribute:: ethernet\n"
"\n"
"    An integer indicating how many Ethernet ports are physically present\n"
"    on this revision of the Pi.\n"
"\n"
".. attribute:: wifi\n"
"\n"
"    A bool indicating whether this revision of the Pi has wifi built-in.\n"
"\n"
".. attribute:: bluetooth\n"
"\n"
"    A bool indicating whether this revision of the Pi has bluetooth\n"
"    built-in.\n"
"\n"
".. attribute:: csi\n"
"\n"
"    An integer indicating the number of CSI (camera) ports available on\n"
"    this revision of the Pi.\n"
"\n"
".. attribute:: dsi\n"
"\n"
"    An integer indicating the number of DSI (display) ports available on\n"
"    this revision of the Pi.\n"
"\n"
".. attribute:: headers\n"
"\n"
"    A dictionary which maps header labels to dictionaries which map\n"
"    physical pin numbers to :class:`PinInfo` tuples. For example, to obtain\n"
"    information about pin 12 on header P1 you would query\n"
"    ``headers['P1'][12]``.\n"
"\n"
".. _system on a chip: https://en.wikipedia.org/wiki/System_on_a_chip"
msgstr ""

#: modes/api/pi.py:87
msgid ""
"gpiozero.PiLiter(*args, **kwargs) \n"
"Extends :class:`LEDBoard` for the `Ciseco Pi-LITEr`_: a strip of 8 very "
"bright\n"
"LEDs.\n"
"\n"
"The Pi-LITEr pins are fixed and therefore there's no need to specify them\n"
"when constructing this class. The following example turns on all the LEDs\n"
"of the Pi-LITEr::\n"
"\n"
"    from gpiozero import PiLiter\n"
"\n"
"    lite = PiLiter()\n"
"    lite.on()\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances for each pin. If\n"
"    ``False`` (the default), construct regular :class:`LED` instances.\n"
"\n"
":param bool initial_value:\n"
"    If ``False`` (the default), all LEDs will be off initially. If\n"
"    ``None``, each device will be left in whatever state the pin is found\n"
"    in when configured for output (warning: this can be on). If ``True``,\n"
"    the device will be switched on initially.\n"
"\n"
".. _Ciseco Pi-LITEr: http://shop.ciseco.co.uk/pi-liter-8-led-strip-for-the-"
"raspberry-pi/"
msgstr ""

#: modes/api/pi.py:88
msgid ""
"gpiozero.PiLiterBarGraph(*args, **kwargs) \n"
"Extends :class:`LEDBarGraph` to treat the `Ciseco Pi-LITEr`_ as an\n"
"8-segment bar graph.\n"
"\n"
"The Pi-LITEr pins are fixed and therefore there's no need to specify them\n"
"when constructing this class. The following example sets the graph value\n"
"to 0.5::\n"
"\n"
"    from gpiozero import PiLiterBarGraph\n"
"\n"
"    graph = PiLiterBarGraph()\n"
"    graph.value = 0.5\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances for each pin. If\n"
"    ``False`` (the default), construct regular :class:`LED` instances.\n"
"\n"
":param float initial_value:\n"
"    The initial :attr:`value` of the graph given as a float between -1 and\n"
"    +1. Defaults to ``0.0``.\n"
"\n"
".. _Ciseco Pi-LITEr: http://shop.ciseco.co.uk/pi-liter-8-led-strip-for-the-"
"raspberry-pi/"
msgstr ""

#: modes/api/pi.py:89
msgid ""
"gpiozero.PiTraffic(*args, **kwargs) \n"
"Extends :class:`TrafficLights` for the `Low Voltage Labs PI-TRAFFIC`_:\n"
"vertical traffic lights board when attached to GPIO pins 9, 10, and 11.\n"
"\n"
"There's no need to specify the pins if the PI-TRAFFIC is connected to the\n"
"default pins (9, 10, 11). The following example turns on the amber LED on\n"
"the PI-TRAFFIC::\n"
"\n"
"    from gpiozero import PiTraffic\n"
"\n"
"    traffic = PiTraffic()\n"
"    traffic.amber.on()\n"
"\n"
"To use the PI-TRAFFIC board when attached to a non-standard set of pins,\n"
"simply use the parent class, :class:`TrafficLights`.\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances to represent each\n"
"    LED. If ``False`` (the default), construct regular :class:`LED`\n"
"    instances.\n"
"\n"
":param bool initial_value:\n"
"    If ``False`` (the default), all LEDs will be off initially. If\n"
"    ``None``, each device will be left in whatever state the pin is found\n"
"    in when configured for output (warning: this can be on). If ``True``,\n"
"    the device will be switched on initially.\n"
"\n"
".. _Low Voltage Labs PI-TRAFFIC: http://lowvoltagelabs.com/products/pi-"
"traffic/"
msgstr ""

#: modes/api/pi.py:90
msgid ""
"gpiozero.Pin() \n"
"Abstract base class representing a GPIO pin or a pin from an IO extender.\n"
"\n"
"Descendents should override property getters and setters to accurately\n"
"represent the capabilities of pins. The following functions *must* be\n"
"overridden:\n"
"\n"
"* :meth:`_get_function`\n"
"* :meth:`_set_function`\n"
"* :meth:`_get_state`\n"
"\n"
"The following functions *may* be overridden if applicable:\n"
"\n"
"* :meth:`close`\n"
"* :meth:`_set_state`\n"
"* :meth:`_get_frequency`\n"
"* :meth:`_set_frequency`\n"
"* :meth:`_get_pull`\n"
"* :meth:`_set_pull`\n"
"* :meth:`_get_bounce`\n"
"* :meth:`_set_bounce`\n"
"* :meth:`_get_edges`\n"
"* :meth:`_set_edges`\n"
"* :meth:`_get_when_changed`\n"
"* :meth:`_set_when_changed`\n"
"* :meth:`pi_info`\n"
"* :meth:`output_with_state`\n"
"* :meth:`input_with_pull`\n"
"\n"
".. warning::\n"
"\n"
"    Descendents must ensure that pin instances representing the same\n"
"    physical hardware are identical, right down to object identity. The\n"
"    framework relies on this to correctly clean up resources at interpreter\n"
"    shutdown."
msgstr ""

#: modes/api/pi.py:91
msgid ""
"gpiozero.PinEdgeDetectUnsupported() \n"
"Error raised when attempting to use edge detection on unsupported pins"
msgstr ""

#: modes/api/pi.py:92
msgid ""
"gpiozero.PinError() \n"
"Base class for errors related to pin implementations"
msgstr ""

#: modes/api/pi.py:93
msgid ""
"gpiozero.PinFixedPull() \n"
"Error raised when attempting to set the pull of a pin with fixed pull-up"
msgstr ""

#: modes/api/pi.py:94
msgid ""
"gpiozero.PinInfo(number, function, pull_up) \n"
"This class is a :func:`~collections.namedtuple` derivative used to\n"
"represent information about a pin present on a GPIO header. The following\n"
"attributes are defined:\n"
"\n"
".. attribute:: number\n"
"\n"
"    An integer containing the physical pin number on the header (starting\n"
"    from 1 in accordance with convention).\n"
"\n"
".. attribute:: function\n"
"\n"
"    A string describing the function of the pin. Some common examples\n"
"    include \"GND\" (for pins connecting to ground), \"3V3\" (for pins "
"which\n"
"    output 3.3 volts), \"GPIO9\" (for GPIO9 in the Broadcom numbering\n"
"    scheme), etc.\n"
"\n"
".. attribute:: pull_up\n"
"\n"
"    A bool indicating whether the pin has a physical pull-up resistor\n"
"    permanently attached (this is usually ``False`` but GPIO2 and GPIO3\n"
"    are *usually* ``True``). This is used internally by gpiozero to raise\n"
"    errors when pull-down is requested on a pin with a physical pull-up\n"
"    resistor."
msgstr ""

#: modes/api/pi.py:95
msgid ""
"gpiozero.PinInvalidEdges() \n"
"Error raised when attempting to assign an invalid edge detection to a pin"
msgstr ""

#: modes/api/pi.py:96
msgid ""
"gpiozero.PinInvalidFunction() \n"
"Error raised when attempting to change the function of a pin to an invalid "
"value"
msgstr ""

#: modes/api/pi.py:97
msgid ""
"gpiozero.PinInvalidPull() \n"
"Error raised when attempting to assign an invalid pull-up to a pin"
msgstr ""

#: modes/api/pi.py:98
msgid ""
"gpiozero.PinInvalidState() \n"
"Error raised when attempting to assign an invalid state to a pin"
msgstr ""

#: modes/api/pi.py:99
msgid ""
"gpiozero.PinMultiplePins() \n"
"Error raised when multiple pins support the requested function"
msgstr ""

#: modes/api/pi.py:100
msgid ""
"gpiozero.PinNoPins() \n"
"Error raised when no pins support the requested function"
msgstr ""

#: modes/api/pi.py:101
msgid ""
"gpiozero.PinNonPhysical() \n"
"Warning raised when a non-physical pin is specified in a constructor"
msgstr ""

#: modes/api/pi.py:102
msgid ""
"gpiozero.PinPWMError() \n"
"Base class for errors related to PWM implementations"
msgstr ""

#: modes/api/pi.py:103
msgid ""
"gpiozero.PinPWMFixedValue() \n"
"Error raised when attempting to initialize PWM on an input pin"
msgstr ""

#: modes/api/pi.py:104
msgid ""
"gpiozero.PinPWMUnsupported() \n"
"Error raised when attempting to activate PWM on unsupported pins"
msgstr ""

#: modes/api/pi.py:105
msgid ""
"gpiozero.PinSetInput() \n"
"Error raised when attempting to set a read-only pin"
msgstr ""

#: modes/api/pi.py:106
msgid ""
"gpiozero.PinUnknownPi() \n"
"Error raised when gpiozero doesn't recognize a revision of the Pi"
msgstr ""

#: modes/api/pi.py:107
msgid ""
"gpiozero.PinWarning() \n"
"Base class for warnings related to pin implementations"
msgstr ""

#: modes/api/pi.py:108
msgid ""
"gpiozero.PingServer(*args, **kwargs) \n"
"Extends :class:`InternalDevice` to provide a device which is active when a\n"
"*host* on the network can be pinged.\n"
"\n"
"The following example lights an LED while a server is reachable (note the\n"
"use of :attr:`~SourceMixin.source_delay` to ensure the server is not\n"
"flooded with pings)::\n"
"\n"
"    from gpiozero import PingServer, LED\n"
"    from signal import pause\n"
"\n"
"    server = PingServer('my-server')\n"
"    led = LED(4)\n"
"    led.source_delay = 1\n"
"    led.source = server.values\n"
"    pause()\n"
"\n"
":param str host:\n"
"    The hostname or IP address to attempt to ping."
msgstr ""

#: modes/api/pi.py:109
msgid ""
"gpiozero.RGBLED(*args, **kwargs) \n"
"Extends :class:`Device` and represents a full color LED component (composed\n"
"of red, green, and blue LEDs).\n"
"\n"
"Connect the common cathode (longest leg) to a ground pin; connect each of\n"
"the other legs (representing the red, green, and blue anodes) to any GPIO\n"
"pins.  You can either use three limiting resistors (one per anode) or a\n"
"single limiting resistor on the cathode.\n"
"\n"
"The following code will make the LED purple::\n"
"\n"
"    from gpiozero import RGBLED\n"
"\n"
"    led = RGBLED(2, 3, 4)\n"
"    led.color = (1, 0, 1)\n"
"\n"
":param int red:\n"
"    The GPIO pin that controls the red component of the RGB LED.\n"
"\n"
":param int green:\n"
"    The GPIO pin that controls the green component of the RGB LED.\n"
"\n"
":param int blue:\n"
"    The GPIO pin that controls the blue component of the RGB LED.\n"
"\n"
":param bool active_high:\n"
"    Set to ``True`` (the default) for common cathode RGB LEDs. If you are\n"
"    using a common anode RGB LED, set this to ``False``.\n"
"\n"
":param tuple initial_value:\n"
"    The initial color for the RGB LED. Defaults to black ``(0, 0, 0)``.\n"
"\n"
":param bool pwm:\n"
"    If ``True`` (the default), construct :class:`PWMLED` instances for\n"
"    each component of the RGBLED. If ``False``, construct regular\n"
"    :class:`LED` instances, which prevents smooth color graduations."
msgstr ""

#: modes/api/pi.py:110
msgid ""
"gpiozero.Robot(*args, **kwargs) \n"
"Extends :class:`CompositeDevice` to represent a generic dual-motor robot.\n"
"\n"
"This class is constructed with two tuples representing the forward and\n"
"backward pins of the left and right controllers respectively. For example,\n"
"if the left motor's controller is connected to GPIOs 4 and 14, while the\n"
"right motor's controller is connected to GPIOs 17 and 18 then the following\n"
"example will drive the robot forward::\n"
"\n"
"    from gpiozero import Robot\n"
"\n"
"    robot = Robot(left=(4, 14), right=(17, 18))\n"
"    robot.forward()\n"
"\n"
":param tuple left:\n"
"    A tuple of two GPIO pins representing the forward and backward inputs\n"
"    of the left motor's controller.\n"
"\n"
":param tuple right:\n"
"    A tuple of two GPIO pins representing the forward and backward inputs\n"
"    of the right motor's controller."
msgstr ""

#: modes/api/pi.py:111
msgid ""
"gpiozero.RyanteckRobot(*args, **kwargs) \n"
"Extends :class:`Robot` for the `Ryanteck MCB`_ robot.\n"
"\n"
"The Ryanteck MCB pins are fixed and therefore there's no need to specify\n"
"them when constructing this class. The following example drives the robot\n"
"forward::\n"
"\n"
"    from gpiozero import RyanteckRobot\n"
"\n"
"    robot = RyanteckRobot()\n"
"    robot.forward()\n"
"\n"
".. _Ryanteck MCB: https://ryanteck.uk/add-ons/6-ryanteck-rpi-motor-"
"controller-board-0635648607160.html"
msgstr ""

#: modes/api/pi.py:112
msgid ""
"gpiozero.SPIBadArgs() \n"
"Error raised when invalid arguments are given while constructing :class:"
"`SPIDevice`"
msgstr ""

#: modes/api/pi.py:113
msgid ""
"gpiozero.SPIDevice(*args, **kwargs) \n"
"Extends :class:`Device`. Represents a device that communicates via the SPI\n"
"protocol.\n"
"\n"
"See :ref:`spi_args` for information on the keyword arguments that can be\n"
"specified with the constructor."
msgstr ""

#: modes/api/pi.py:114
msgid ""
"gpiozero.SPIError() \n"
"Base class for errors related to the SPI implementation"
msgstr ""

#: modes/api/pi.py:115
msgid ""
"gpiozero.SPISoftwareFallback() \n"
"Warning raised when falling back to the software implementation"
msgstr ""

#: modes/api/pi.py:116
msgid ""
"gpiozero.SPIWarning() \n"
"Base class for warnings related to the SPI implementation"
msgstr ""

#: modes/api/pi.py:117
msgid ""
"gpiozero.Servo(*args, **kwargs) \n"
"Extends :class:`CompositeDevice` and represents a PWM-controlled servo\n"
"motor connected to a GPIO pin.\n"
"\n"
"Connect a power source (e.g. a battery pack or the 5V pin) to the power\n"
"cable of the servo (this is typically colored red); connect the ground\n"
"cable of the servo (typically colored black or brown) to the negative of\n"
"your battery pack, or a GND pin; connect the final cable (typically colored\n"
"white or orange) to the GPIO pin you wish to use for controlling the servo.\n"
"\n"
"The following code will make the servo move between its minimum, maximum,\n"
"and mid-point positions with a pause between each::\n"
"\n"
"    from gpiozero import Servo\n"
"    from time import sleep\n"
"\n"
"    servo = Servo(17)\n"
"    while True:\n"
"        servo.min()\n"
"        sleep(1)\n"
"        servo.mid()\n"
"        sleep(1)\n"
"        servo.max()\n"
"        sleep(1)\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the device is attached to. See :ref:`pin_numbering`\n"
"    for valid pin numbers.\n"
"\n"
":param float initial_value:\n"
"    If ``0`` (the default), the device's mid-point will be set\n"
"    initially.  Other values between -1 and +1 can be specified as an\n"
"    initial position. ``None`` means to start the servo un-controlled (see\n"
"    :attr:`value`).\n"
"\n"
":param float min_pulse_width:\n"
"    The pulse width corresponding to the servo's minimum position. This\n"
"    defaults to 1ms.\n"
"\n"
":param float max_pulse_width:\n"
"    The pulse width corresponding to the servo's maximum position. This\n"
"    defaults to 2ms.\n"
"\n"
":param float frame_width:\n"
"    The length of time between servo control pulses measured in seconds.\n"
"    This defaults to 20ms which is a common value for servos."
msgstr ""

#: modes/api/pi.py:118
msgid ""
"gpiozero.SharedMixin() \n"
"This mixin marks a class as \"shared\". In this case, the meta-class\n"
"(GPIOMeta) will use :meth:`_shared_key` to convert the constructor\n"
"arguments to an immutable key, and will check whether any existing\n"
"instances match that key. If they do, they will be returned by the\n"
"constructor instead of a new instance. An internal reference counter is\n"
"used to determine how many times an instance has been \"constructed\" in "
"this\n"
"way.\n"
"\n"
"When :meth:`close` is called, an internal reference counter will be\n"
"decremented and the instance will only close when it reaches zero."
msgstr ""

#: modes/api/pi.py:119
msgid ""
"gpiozero.SmoothedInputDevice(*args, **kwargs) \n"
"Represents a generic input device which takes its value from the mean of a\n"
"queue of historical values.\n"
"\n"
"This class extends :class:`InputDevice` with a queue which is filled by a\n"
"background thread which continually polls the state of the underlying\n"
"device. The mean of the values in the queue is compared to a threshold\n"
"which is used to determine the state of the :attr:`is_active` property.\n"
"\n"
".. note::\n"
"\n"
"    The background queue is not automatically started upon construction.\n"
"    This is to allow descendents to set up additional components before the\n"
"    queue starts reading values. Effectively this is an abstract base\n"
"    class.\n"
"\n"
"This class is intended for use with devices which either exhibit analog\n"
"behaviour (such as the charging time of a capacitor with an LDR), or those\n"
"which exhibit \"twitchy\" behaviour (such as certain motion sensors).\n"
"\n"
":param float threshold:\n"
"    The value above which the device will be considered \"on\".\n"
"\n"
":param int queue_len:\n"
"    The length of the internal queue which is filled by the background\n"
"    thread.\n"
"\n"
":param float sample_wait:\n"
"    The length of time to wait between retrieving the state of the\n"
"    underlying device. Defaults to 0.0 indicating that values are retrieved\n"
"    as fast as possible.\n"
"\n"
":param bool partial:\n"
"    If ``False`` (the default), attempts to read the state of the device\n"
"    (from the :attr:`is_active` property) will block until the queue has\n"
"    filled.  If ``True``, a value will be returned immediately, but be\n"
"    aware that this value is likely to fluctuate excessively."
msgstr ""

#: modes/api/pi.py:120
msgid ""
"gpiozero.SnowPi(*args, **kwargs) \n"
"Extends :class:`LEDBoard` for the `Ryanteck SnowPi`_ board.\n"
"\n"
"The SnowPi pins are fixed and therefore there's no need to specify them\n"
"when constructing this class. The following example turns on the eyes, sets\n"
"the nose pulsing, and the arms blinking::\n"
"\n"
"    from gpiozero import SnowPi\n"
"\n"
"    snowman = SnowPi(pwm=True)\n"
"    snowman.eyes.on()\n"
"    snowman.nose.pulse()\n"
"    snowman.arms.blink()\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances to represent each\n"
"    LED. If ``False`` (the default), construct regular :class:`LED`\n"
"    instances.\n"
"\n"
":param bool initial_value:\n"
"    If ``False`` (the default), all LEDs will be off initially. If\n"
"    ``None``, each device will be left in whatever state the pin is found\n"
"    in when configured for output (warning: this can be on). If ``True``,\n"
"    the device will be switched on initially.\n"
"\n"
".. _Ryanteck SnowPi: https://ryanteck.uk/raspberry-pi/114-snowpi-the-gpio-"
"snowman-for-raspberry-pi-0635648608303.html"
msgstr ""

#: modes/api/pi.py:121
msgid ""
"gpiozero.SourceMixin(*args, **kwargs) \n"
"Adds a :attr:`source` property to the class which, given an iterable, sets\n"
":attr:`value` to each member of that iterable until it is exhausted.  This\n"
"mixin is generally included in novel output devices to allow their state to\n"
"be driven from another device.\n"
"\n"
".. note::\n"
"\n"
"    Use this mixin *first* in the parent class list."
msgstr ""

#: modes/api/pi.py:122
msgid ""
"gpiozero.TimeOfDay(*args, **kwargs) \n"
"Extends :class:`InternalDevice` to provide a device which is active when\n"
"the computer's clock indicates that the current time is between\n"
"*start_time* and *end_time* (inclusive) which are :class:`~datetime.time`\n"
"instances.\n"
"\n"
"The following example turns on a lamp attached to an :class:`Energenie`\n"
"plug between 7 and 8 AM::\n"
"\n"
"    from datetime import time\n"
"    from gpiozero import TimeOfDay, Energenie\n"
"    from signal import pause\n"
"\n"
"    lamp = Energenie(0)\n"
"    morning = TimeOfDay(time(7), time(8))\n"
"    morning.when_activated = lamp.on\n"
"    morning.when_deactivated = lamp.off\n"
"    pause()\n"
"\n"
":param ~datetime.time start_time:\n"
"    The time from which the device will be considered active.\n"
"\n"
":param ~datetime.time end_time:\n"
"    The time after which the device will be considered inactive.\n"
"\n"
":param bool utc:\n"
"    If ``True`` (the default), a naive UTC time will be used for the\n"
"    comparison rather than a local time-zone reading."
msgstr ""

#: modes/api/pi.py:123
msgid ""
"gpiozero.TrafficHat(*args, **kwargs) \n"
"Extends :class:`TrafficLightsBuzzer` for the `Ryanteck Traffic HAT`_: "
"traffic\n"
"light LEDs, a button and a buzzer.\n"
"\n"
"The Traffic HAT pins are fixed and therefore there's no need to specify\n"
"them when constructing this class. The following example waits for the\n"
"button to be pressed on the Traffic HAT, then turns on all the LEDs::\n"
"\n"
"    from gpiozero import TrafficHat\n"
"\n"
"    hat = TrafficHat()\n"
"    hat.button.wait_for_press()\n"
"    hat.lights.on()\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances to represent each\n"
"    LED. If ``False`` (the default), construct regular :class:`LED`\n"
"    instances.\n"
"\n"
".. _Ryanteck Traffic HAT: https://ryanteck.uk/hats/1-"
"traffichat-0635648607122.html"
msgstr ""

#: modes/api/pi.py:124
msgid ""
"gpiozero.TrafficLights(*args, **kwargs) \n"
"Extends :class:`LEDBoard` for devices containing red, yellow, and green\n"
"LEDs.\n"
"\n"
"The following example initializes a device connected to GPIO pins 2, 3,\n"
"and 4, then lights the amber (yellow) LED attached to GPIO 3::\n"
"\n"
"    from gpiozero import TrafficLights\n"
"\n"
"    traffic = TrafficLights(2, 3, 4)\n"
"    traffic.amber.on()\n"
"\n"
":param int red:\n"
"    The GPIO pin that the red LED is attached to.\n"
"\n"
":param int amber:\n"
"    The GPIO pin that the amber LED is attached to.\n"
"\n"
":param int green:\n"
"    The GPIO pin that the green LED is attached to.\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances to represent each\n"
"    LED. If ``False`` (the default), construct regular :class:`LED`\n"
"    instances.\n"
"\n"
":param bool initial_value:\n"
"    If ``False`` (the default), all LEDs will be off initially. If\n"
"    ``None``, each device will be left in whatever state the pin is found\n"
"    in when configured for output (warning: this can be on). If ``True``,\n"
"    the device will be switched on initially.\n"
"\n"
":param int yellow:\n"
"    The GPIO pin that the yellow LED is attached to. This is merely an\n"
"    alias for the ``amber`` parameter - you can't specify both ``amber``\n"
"    and ``yellow``."
msgstr ""

#: modes/api/pi.py:125
msgid ""
"gpiozero.TrafficLightsBuzzer(*args, **kwargs) \n"
"Extends :class:`CompositeOutputDevice` and is a generic class for HATs with\n"
"traffic lights, a button and a buzzer.\n"
"\n"
":param TrafficLights lights:\n"
"    An instance of :class:`TrafficLights` representing the traffic lights\n"
"    of the HAT.\n"
"\n"
":param Buzzer buzzer:\n"
"    An instance of :class:`Buzzer` representing the buzzer on the HAT.\n"
"\n"
":param Button button:\n"
"    An instance of :class:`Button` representing the button on the HAT."
msgstr ""

#: modes/api/pi.py:126
msgid ""
"gpiozero.ValuesMixin() \n"
"Adds a :attr:`values` property to the class which returns an infinite\n"
"generator of readings from the :attr:`value` property. There is rarely a\n"
"need to use this mixin directly as all base classes in GPIO Zero include\n"
"it.\n"
"\n"
".. note::\n"
"\n"
"    Use this mixin *first* in the parent class list."
msgstr ""

#: modes/api/pi.py:127
msgid ""
"gpiozero.pi_info(revision=None) \n"
"Returns a :class:`PiBoardInfo` instance containing information about a\n"
"*revision* of the Raspberry Pi.\n"
"\n"
":param str revision:\n"
"    The revision of the Pi to return information about. If this is omitted\n"
"    or ``None`` (the default), then the library will attempt to determine\n"
"    the model of Pi it is running on and return information about that."
msgstr ""

#: modes/api/pi.py:128
msgid ""
"picamera.Blue() \n"
"Represents the blue component of a :class:`Color` for use in\n"
"transformations.  Instances of this class can be constructed directly with\n"
"a float value, or by querying the :attr:`Color.blue` attribute. Addition,\n"
"subtraction, and multiplication are supported with :class:`Color`\n"
"instances. For example::\n"
"\n"
"    >>> Color(0, 0, 0) + Blue(0.2)\n"
"    <Color \"#000033\">\n"
"    >>> Color.from_hls(0.5, 0.5, 1.0) - Blue(1)\n"
"    <Color \"#00fe00\">\n"
"    >>> Blue(0.9) * Color('white')\n"
"    <Color \"#ffffe5\">"
msgstr ""

#: modes/api/pi.py:129
msgid ""
"picamera.BufferIO(obj) \n"
"A stream which uses a :class:`memoryview` for storage.\n"
"\n"
"This is used internally by picamera for capturing directly to an existing\n"
"object which supports the buffer protocol (like a numpy array). Because the\n"
"underlying storage is fixed in size, the stream also has a fixed size and\n"
"will raise an :exc:`IOError` exception if an attempt is made to write\n"
"beyond the end of the buffer (though seek beyond the end is supported).\n"
"\n"
"Users should never need this class directly."
msgstr ""

#: modes/api/pi.py:130
msgid ""
"picamera.CircularIO(size) \n"
"A thread-safe stream which uses a ring buffer for storage.\n"
"\n"
"CircularIO provides an in-memory stream similar to the :class:`io.BytesIO`\n"
"class. However, unlike :class:`io.BytesIO` its underlying storage is a\n"
"`ring buffer`_ with a fixed maximum size. Once the maximum size is reached,\n"
"writing effectively loops round to the beginning to the ring and starts\n"
"overwriting the oldest content.\n"
"\n"
"The *size* parameter specifies the maximum size of the stream in bytes. The\n"
":meth:`read`, :meth:`tell`, and :meth:`seek` methods all operate\n"
"equivalently to those in :class:`io.BytesIO` whilst :meth:`write` only\n"
"differs in the wrapping behaviour described above. A :meth:`read1` method\n"
"is also provided for efficient reading of the underlying ring buffer in\n"
"write-sized chunks (or less).\n"
"\n"
"A re-entrant threading lock guards all operations, and is accessible for\n"
"external use via the :attr:`lock` attribute.\n"
"\n"
"The performance of the class is geared toward faster writing than reading\n"
"on the assumption that writing will be the common operation and reading the\n"
"rare operation (a reasonable assumption for the camera use-case, but not\n"
"necessarily for more general usage).\n"
"\n"
".. _ring buffer: https://en.wikipedia.org/wiki/Circular_buffer"
msgstr ""

#: modes/api/pi.py:131
msgid ""
"picamera.Color(*args, **kwargs) \n"
"The Color class is a tuple which represents a color as red, green, and\n"
"blue components.\n"
"\n"
"The class has a flexible constructor which allows you to create an instance\n"
"from a variety of color systems including `RGB`_, `Y'UV`_, `Y'IQ`_, `HLS`_,\n"
"and `HSV`_.  There are also explicit constructors for each of these systems\n"
"to allow you to force the use of a system in your code. For example, an\n"
"instance of :class:`Color` can be constructed in any of the following\n"
"ways::\n"
"\n"
"    >>> Color('#f00')\n"
"    <Color \"#ff0000\">\n"
"    >>> Color('green')\n"
"    <Color \"#008000\">\n"
"    >>> Color(0, 0, 1)\n"
"    <Color \"#0000ff\">\n"
"    >>> Color(hue=0, saturation=1, value=0.5)\n"
"    <Color \"#7f0000\">\n"
"    >>> Color(y=0.4, u=-0.05, v=0.615)\n"
"    <Color \"#ff0f4c\">\n"
"\n"
"The specific forms that the default constructor will accept are enumerated\n"
"below:\n"
"\n"
".. tabularcolumns:: |p{40mm}|p{100mm}|\n"
"\n"
"+------------------------------+------------------------------------------+\n"
"| Style                        | Description                              |\n"
"+==============================+==========================================+\n"
"| Single positional parameter  | Equivalent to calling                    |\n"
"|                              | :meth:`Color.from_string`.               |\n"
"+------------------------------+------------------------------------------+\n"
"| Three positional parameters  | Equivalent to calling                    |\n"
"|                              | :meth:`Color.from_rgb` if all three      |\n"
"|                              | parameters are between 0.0 and 1.0, or   |\n"
"|                              | :meth:`Color.from_rgb_bytes` otherwise.  |\n"
"+------------------------------+                                          |\n"
"| Three named parameters:      |                                          |\n"
"| *r*, *g*, *b*                |                                          |\n"
"+------------------------------+                                          |\n"
"| Three named parameters:      |                                          |\n"
"| *red*, *green*, *blue*       |                                          |\n"
"+------------------------------+------------------------------------------+\n"
"| Three named parameters:      | Equivalent to calling                    |\n"
"| *y*, *u*, *v*                | :meth:`Color.from_yuv` if *y* is between |\n"
"|                              | 0.0 and 1.0, *u* is between -0.436 and   |\n"
"|                              | 0.436, and *v* is between -0.615 and     |\n"
"|                              | 0.615, or :meth:`Color.from_yuv_bytes`   |\n"
"|                              | otherwise.                               |\n"
"+------------------------------+------------------------------------------+\n"
"| Three named parameters:      | Equivalent to calling                    |\n"
"| *y*, *i*, *q*                | :meth:`Color.from_yiq`.                  |\n"
"+------------------------------+------------------------------------------+\n"
"| Three named parameters:      | Equivalent to calling                    |\n"
"| *h*, *l*, *s*                | :meth:`Color.from_hls`.                  |\n"
"+------------------------------+                                          |\n"
"| Three named parameters:      |                                          |\n"
"| *hue*, *lightness*,          |                                          |\n"
"| *saturation*                 |                                          |\n"
"+------------------------------+------------------------------------------+\n"
"| Three named parameters:      | Equivalent to calling                    |\n"
"| *h*, *s*, *v*                | :meth:`Color.from_hsv`                   |\n"
"+------------------------------+                                          |\n"
"| Three named parameters:      |                                          |\n"
"| *hue*, *saturation*, *value* |                                          |\n"
"+------------------------------+------------------------------------------+\n"
"| Three named parameters:      | Equivalent to calling                    |\n"
"| *x*, *y*, *z*                | :meth:`Color.from_cie_xyz`               |\n"
"+------------------------------+------------------------------------------+\n"
"| Three named parameters:      | Equivalent to calling                    |\n"
"| *l*, *a*, *b*                | :meth:`Color.from_cie_lab`               |\n"
"+------------------------------+------------------------------------------+\n"
"| Three named parameters:      | Equivalent to calling                    |\n"
"| *l*, *u*, *v*                | :meth:`Color.from_cie_luv`               |\n"
"+------------------------------+------------------------------------------+\n"
"\n"
"If the constructor parameters do not conform to any of the variants in the\n"
"table above, a :exc:`ValueError` will be thrown.\n"
"\n"
"Internally, the color is *always* represented as 3 float values\n"
"corresponding to the red, green, and blue components of the color. These\n"
"values take a value from 0.0 to 1.0 (least to full intensity). The class\n"
"provides several attributes which can be used to convert one color system\n"
"into another::\n"
"\n"
"    >>> Color('#f00').hls\n"
"    (0.0, 0.5, 1.0)\n"
"    >>> Color.from_string('green').hue\n"
"    Hue(deg=120.0)\n"
"    >>> Color.from_rgb_bytes(0, 0, 255).yuv\n"
"    (0.114, 0.435912, -0.099978)\n"
"\n"
"As :class:`Color` derives from tuple, instances are immutable. While this\n"
"provides the advantage that they can be used as keys in a dict, it does\n"
"mean that colors themselves cannot be directly manipulated (e.g. by\n"
"reducing the red component).\n"
"\n"
"However, several auxilliary classes in the module provide the ability to\n"
"perform simple transformations of colors via operators which produce a new\n"
":class:`Color` instance. For example::\n"
"\n"
"    >>> Color('red') - Red(0.5)\n"
"    <Color \"#7f0000\">\n"
"    >>> Color('green') + Red(0.5)\n"
"    <Color \"#7f8000\">\n"
"    >>> Color.from_hls(0.5, 0.5, 1.0)\n"
"    <Color \"#00feff\">\n"
"    >>> Color.from_hls(0.5, 0.5, 1.0) * Lightness(0.8)\n"
"    <Color \"#00cbcc\">\n"
"    >>> (Color.from_hls(0.5, 0.5, 1.0) * Lightness(0.8)).hls\n"
"    (0.5, 0.4, 1.0)\n"
"\n"
"From the last example above one can see that even attributes not directly\n"
"stored by the color (such as lightness) can be manipulated in this fashion.\n"
"In this case a :class:`Color` instance is constructed from HLS (hue,\n"
"lightness, saturation) values with a lightness of 0.5. This is multiplied\n"
"by a :class:`Lightness` instance with a value of 0.8 which constructs a new\n"
":class:`Color` with the same hue and saturation, but a lightness of 0.5 *\n"
"0.8 = 0.4.\n"
"\n"
"If an instance is converted to a string (with :func:`str`) it will return a\n"
"string containing the 7-character HTML code for the color (e.g. \"#ff0000\"\n"
"for red). As can be seen in the examples above, a similar representation is\n"
"returned for :func:`repr`.\n"
"\n"
".. _RGB: https://en.wikipedia.org/wiki/RGB_color_space\n"
".. _Y'UV: https://en.wikipedia.org/wiki/YUV\n"
".. _Y'IQ: https://en.wikipedia.org/wiki/YIQ\n"
".. _HLS: https://en.wikipedia.org/wiki/HSL_and_HSV\n"
".. _HSV: https://en.wikipedia.org/wiki/HSL_and_HSV"
msgstr ""

#: modes/api/pi.py:132
msgid ""
"picamera.Green() \n"
"Represents the green component of a :class:`Color` for use in\n"
"transformations.  Instances of this class can be constructed directly with\n"
"a float value, or by querying the :attr:`Color.green` attribute. Addition,\n"
"subtraction, and multiplication are supported with :class:`Color`\n"
"instances. For example::\n"
"\n"
"    >>> Color(0, 0, 0) + Green(0.1)\n"
"    <Color \"#001900\">\n"
"    >>> Color.from_yuv(1, -0.4, -0.6) - Green(1)\n"
"    <Color \"#50002f\">\n"
"    >>> (Green(0.5) * Color('white')).rgb\n"
"    (Red(1.0), Green(0.5), Blue(1.0))"
msgstr ""

#: modes/api/pi.py:133
msgid ""
"picamera.Hue(n=None, deg=None, rad=None) \n"
"Represents the hue of a :class:`Color` for use in transformations.\n"
"Instances of this class can be constructed directly with a float value in\n"
"the range [0.0, 1.0) representing an angle around the `HSL hue wheel`_. As\n"
"this is a circular mapping, 0.0 and 1.0 effectively mean the same thing,\n"
"i.e.  out of range values will be normalized into the range [0.0, 1.0).\n"
"\n"
"The class can also be constructed with the keyword arguments ``deg`` or\n"
"``rad`` if you wish to specify the hue value in degrees or radians instead,\n"
"respectively. Instances can also be constructed by querying the\n"
":attr:`Color.hue` attribute.\n"
"\n"
"Addition, subtraction, and multiplication are supported with :class:`Color`\n"
"instances. For example::\n"
"\n"
"    >>> Color(1, 0, 0).hls\n"
"    (0.0, 0.5, 1.0)\n"
"    >>> (Color(1, 0, 0) + Hue(deg=180)).hls\n"
"    (0.5, 0.5, 1.0)\n"
"\n"
"Note that whilst multiplication by a :class:`Hue` doesn't make much sense,\n"
"it is still supported. However, the circular nature of a hue value can lead\n"
"to suprising effects. In particular, since 1.0 is equivalent to 0.0 the\n"
"following may be observed::\n"
"\n"
"    >>> (Hue(1.0) * Color.from_hls(0.5, 0.5, 1.0)).hls\n"
"    (0.0, 0.5, 1.0)\n"
"\n"
".. _HSL hue wheel: https://en.wikipedia.org/wiki/Hue"
msgstr ""

#: modes/api/pi.py:134
msgid ""
"picamera.Lightness() \n"
"Represents the lightness of a :class:`Color` for use in transformations.\n"
"Instances of this class can be constructed directly with a float value, or\n"
"by querying the :attr:`Color.lightness` attribute. Addition, subtraction,\n"
"and multiplication are supported with :class:`Color` instances. For\n"
"example::\n"
"\n"
"    >>> Color(0, 0, 0) + Lightness(0.1)\n"
"    <Color \"#191919\">\n"
"    >>> Color.from_rgb_bytes(0x80, 0x80, 0) - Lightness(0.2)\n"
"    <Color \"#191900\">\n"
"    >>> Lightness(0.9) * Color('wheat')\n"
"    <Color \"#f0cd8d\">"
msgstr ""

#: modes/api/pi.py:135
msgid ""
"picamera.PiCamera(camera_num=0, stereo_mode='none', stereo_decimate=False, "
"resolution=None, framerate=None, sensor_mode=0, led_pin=None, "
"clock_mode='reset', framerate_range=None) \n"
"Provides a pure Python interface to the Raspberry Pi's camera module.\n"
"\n"
"Upon construction, this class initializes the camera. The *camera_num*\n"
"parameter (which defaults to 0) selects the camera module that the instance\n"
"will represent. Only the Raspberry Pi compute module currently supports\n"
"more than one camera.\n"
"\n"
"The *sensor_mode*, *resolution*, *framerate*, *framerate_range*, and\n"
"*clock_mode* parameters provide initial values for the :attr:`sensor_mode`,\n"
":attr:`resolution`, :attr:`framerate`, :attr:`framerate_range`, and\n"
":attr:`clock_mode` attributes of the class (these attributes are all\n"
"relatively expensive to set individually, hence setting them all upon\n"
"construction is a speed optimization). Please refer to the attribute\n"
"documentation for more information and default values.\n"
"\n"
"The *stereo_mode* and *stereo_decimate* parameters configure dual cameras\n"
"on a compute module for sterescopic mode. These parameters can only be set\n"
"at construction time; they cannot be altered later without closing the\n"
":class:`PiCamera` instance and recreating it. The *stereo_mode* parameter\n"
"defaults to ``'none'`` (no stereoscopic mode) but can be set to\n"
"``'side-by-side'`` or ``'top-bottom'`` to activate a stereoscopic mode. If\n"
"the *stereo_decimate* parameter is ``True``, the resolution of the two\n"
"cameras will be halved so that the resulting image has the same dimensions\n"
"as if stereoscopic mode were not being used.\n"
"\n"
"The *led_pin* parameter can be used to specify the GPIO pin which should be\n"
"used to control the camera's LED via the :attr:`led` attribute. If this is\n"
"not specified, it should default to the correct value for your Pi platform.\n"
"You should only need to specify this parameter if you are using a custom\n"
"DeviceTree blob (this is only typical on the `Compute Module`_ platform).\n"
"\n"
"No preview or recording is started automatically upon construction.  Use\n"
"the :meth:`capture` method to capture images, the :meth:`start_recording`\n"
"method to begin recording video, or the :meth:`start_preview` method to\n"
"start live display of the camera's input.\n"
"\n"
"Several attributes are provided to adjust the camera's configuration. Some\n"
"of these can be adjusted while a recording is running, like\n"
":attr:`brightness`. Others, like :attr:`resolution`, can only be adjusted\n"
"when the camera is idle.\n"
"\n"
"When you are finished with the camera, you should ensure you call the\n"
":meth:`close` method to release the camera resources::\n"
"\n"
"    camera = PiCamera()\n"
"    try:\n"
"        # do something with the camera\n"
"        pass\n"
"    finally:\n"
"        camera.close()\n"
"\n"
"The class supports the context manager protocol to make this particularly\n"
"easy (upon exiting the :keyword:`with` statement, the :meth:`close` method\n"
"is automatically called)::\n"
"\n"
"    with PiCamera() as camera:\n"
"        # do something with the camera\n"
"        pass\n"
"\n"
".. versionchanged:: 1.8\n"
"    Added *stereo_mode* and *stereo_decimate* parameters.\n"
"\n"
".. versionchanged:: 1.9\n"
"    Added *resolution*, *framerate*, and *sensor_mode* parameters.\n"
"\n"
".. versionchanged:: 1.10\n"
"    Added *led_pin* parameter.\n"
"\n"
".. versionchanged:: 1.11\n"
"    Added *clock_mode* parameter, and permitted setting of resolution as\n"
"    appropriately formatted string.\n"
"\n"
".. versionchanged:: 1.13\n"
"    Added *framerate_range* parameter.\n"
"\n"
".. _Compute Module: https://www.raspberrypi.org/documentation/hardware/"
"computemodule/cmio-camera.md"
msgstr ""

#: modes/api/pi.py:136
msgid ""
"picamera.PiCameraAlphaStripping() \n"
"Raised when picamera does alpha-byte stripping."
msgstr ""

#: modes/api/pi.py:137
msgid ""
"picamera.PiCameraAlreadyRecording() \n"
"Raised when :meth:`~PiCamera.start_recording` or\n"
":meth:`~PiCamera.record_sequence` are called against a port which already\n"
"has an active recording."
msgstr ""

#: modes/api/pi.py:138
msgid ""
"picamera.PiCameraCircularIO(camera, size=None, seconds=None, "
"bitrate=17000000, splitter_port=1) \n"
"A derivative of :class:`CircularIO` which tracks camera frames.\n"
"\n"
"PiCameraCircularIO provides an in-memory stream based on a ring buffer. It\n"
"is a specialization of :class:`CircularIO` which associates video frame\n"
"meta-data with the recorded stream, accessible from the :attr:`frames`\n"
"property.\n"
"\n"
".. warning::\n"
"\n"
"    The class makes a couple of assumptions which will cause the frame\n"
"    meta-data tracking to break if they are not adhered to:\n"
"\n"
"    * the stream is only ever appended to - no writes ever start from\n"
"      the middle of the stream\n"
"\n"
"    * the stream is never truncated (from the right; being ring buffer\n"
"      based, left truncation will occur automatically); the exception\n"
"      to this is the :meth:`clear` method.\n"
"\n"
"The *camera* parameter specifies the :class:`PiCamera` instance that will\n"
"be recording video to the stream. If specified, the *size* parameter\n"
"determines the maximum size of the stream in bytes. If *size* is not\n"
"specified (or ``None``), then *seconds* must be specified instead. This\n"
"provides the maximum length of the stream in seconds, assuming a data rate\n"
"in bits-per-second given by the *bitrate* parameter (which defaults to\n"
"``17000000``, or 17Mbps, which is also the default bitrate used for video\n"
"recording by :class:`PiCamera`).  You cannot specify both *size* and\n"
"*seconds*.\n"
"\n"
"The *splitter_port* parameter specifies the port of the built-in splitter\n"
"that the video encoder will be attached to. This defaults to ``1`` and most\n"
"users will have no need to specify anything different. If you do specify\n"
"something else, ensure it is equal to the *splitter_port* parameter of the\n"
"corresponding call to :meth:`~PiCamera.start_recording`.  For example::\n"
"\n"
"    import picamera\n"
"\n"
"    with picamera.PiCamera() as camera:\n"
"        with picamera.PiCameraCircularIO(camera, splitter_port=2) as "
"stream:\n"
"            camera.start_recording(stream, format='h264', splitter_port=2)\n"
"            camera.wait_recording(10, splitter_port=2)\n"
"            camera.stop_recording(splitter_port=2)\n"
"\n"
".. attribute:: frames\n"
"\n"
"    Returns an iterator over the frame meta-data.\n"
"\n"
"    As the camera records video to the stream, the class captures the\n"
"    meta-data associated with each frame (in the form of a\n"
"    :class:`PiVideoFrame` tuple), discarding meta-data for frames which are\n"
"    no longer fully stored within the underlying ring buffer.  You can use\n"
"    the frame meta-data to locate, for example, the first keyframe present\n"
"    in the stream in order to determine an appropriate range to extract."
msgstr ""

#: modes/api/pi.py:139
msgid ""
"picamera.PiCameraClosed() \n"
"Raised when a method is called on a camera which has already been closed."
msgstr ""

#: modes/api/pi.py:140
msgid ""
"picamera.PiCameraDeprecated() \n"
"Raised when deprecated functionality in picamera is used."
msgstr ""

#: modes/api/pi.py:141
msgid ""
"picamera.PiCameraError() \n"
"Base class for PiCamera errors."
msgstr ""

#: modes/api/pi.py:142
msgid ""
"picamera.PiCameraFallback() \n"
"Raised when picamera has to fallback on old functionality."
msgstr ""

#: modes/api/pi.py:143
msgid ""
"picamera.PiCameraMMALError(status, prefix='') \n"
"Raised when an MMAL operation fails for whatever reason."
msgstr ""

#: modes/api/pi.py:144
msgid ""
"picamera.PiCameraNotRecording() \n"
"Raised when :meth:`~PiCamera.stop_recording` or\n"
":meth:`~PiCamera.split_recording` are called against a port which has no\n"
"recording active."
msgstr ""

#: modes/api/pi.py:145
msgid ""
"picamera.PiCameraPortDisabled(msg) \n"
"Raised when attempting a buffer operation on a disabled port.\n"
"\n"
"This exception is intended for the common use-case of attempting to get\n"
"or send a buffer just when a component is shutting down (e.g. at script\n"
"teardown) and simplifies the trivial response (ignore the error and shut\n"
"down quietly). For example::\n"
"\n"
"    def _callback(self, port, buf):\n"
"        try:\n"
"            buf = self.outputs[0].get_buffer(False)\n"
"        except PiCameraPortDisabled:\n"
"            return True # shutting down\n"
"        # ..."
msgstr ""

#: modes/api/pi.py:146
msgid ""
"picamera.PiCameraResizerEncoding() \n"
"Raised when picamera uses a resizer purely for encoding purposes."
msgstr ""

#: modes/api/pi.py:147
msgid ""
"picamera.PiCameraRuntimeError() \n"
"Raised when an invalid sequence of operations is attempted with a\n"
":class:`PiCamera` object."
msgstr ""

#: modes/api/pi.py:148
msgid ""
"picamera.PiCameraValueError() \n"
"Raised when an invalid value is fed to a :class:`~PiCamera` object."
msgstr ""

#: modes/api/pi.py:149
msgid ""
"picamera.PiCameraWarning() \n"
"Base class for PiCamera warnings."
msgstr ""

#: modes/api/pi.py:150
msgid ""
"picamera.PiCookedMultiImageEncoder(parent, camera_port, input_port, format, "
"resize, **options) \n"
"Encoder for \"cooked\" (encoded) multiple image output.\n"
"\n"
"This encoder descends from :class:`PiMultiImageEncoder` but includes no\n"
"new functionality as video-port based encodes (which is all this class\n"
"is used for) don't support Exif tag output."
msgstr ""

#: modes/api/pi.py:151
msgid ""
"picamera.PiCookedOneImageEncoder(parent, camera_port, input_port, format, "
"resize, **options) \n"
"Encoder for \"cooked\" (encoded) single image output.\n"
"\n"
"This encoder extends :class:`PiOneImageEncoder` to include Exif tags in the\n"
"output."
msgstr ""

#: modes/api/pi.py:152
msgid ""
"picamera.PiCookedVideoEncoder(parent, camera_port, input_port, format, "
"resize, **options) \n"
"Video encoder for encoded recordings.\n"
"\n"
"This class is a derivative of :class:`PiVideoEncoder` and only exists to\n"
"provide naming symmetry with the image encoder classes."
msgstr ""

#: modes/api/pi.py:153
msgid ""
"picamera.PiEncoder(parent, camera_port, input_port, format, resize, "
"**options) \n"
"Base implementation of an MMAL encoder for use by PiCamera.\n"
"\n"
"The *parent* parameter specifies the :class:`PiCamera` instance that has\n"
"constructed the encoder. The *camera_port* parameter provides the MMAL\n"
"camera port that the encoder should enable for capture (this will be the\n"
"still or video port of the camera component). The *input_port* parameter\n"
"specifies the MMAL port that the encoder should connect to its input.\n"
"Sometimes this will be the same as the camera port, but if other components\n"
"are present in the pipeline (e.g. a splitter), it may be different.\n"
"\n"
"The *format* parameter specifies the format that the encoder should\n"
"produce in its output. This is specified as a string and will be one of\n"
"the following for image encoders:\n"
"\n"
"* ``'jpeg'``\n"
"* ``'png'``\n"
"* ``'gif'``\n"
"* ``'bmp'``\n"
"* ``'yuv'``\n"
"* ``'rgb'``\n"
"* ``'rgba'``\n"
"* ``'bgr'``\n"
"* ``'bgra'``\n"
"\n"
"And one of the following for video encoders:\n"
"\n"
"* ``'h264'``\n"
"* ``'mjpeg'``\n"
"\n"
"The *resize* parameter is either ``None`` (indicating no resizing\n"
"should take place), or a ``(width, height)`` tuple specifying the\n"
"resolution that the output of the encoder should be resized to.\n"
"\n"
"Finally, the *options* parameter specifies additional keyword arguments\n"
"that can be used to configure the encoder (e.g. bitrate for videos, or\n"
"quality for images).\n"
"\n"
".. attribute:: camera_port\n"
"\n"
"    The :class:`~mmalobj.MMALVideoPort` that needs to be activated and\n"
"    deactivated in order to start/stop capture. This is not necessarily the\n"
"    port that the encoder component's input port is connected to (for\n"
"    example, in the case of video-port based captures, this will be the\n"
"    camera video port behind the splitter).\n"
"\n"
".. attribute:: encoder\n"
"\n"
"    The :class:`~mmalobj.MMALComponent` representing the encoder, or\n"
"    ``None`` if no encoder component has been created (some encoder classes\n"
"    don't use an actual encoder component, for example\n"
"    :class:`PiRawImageMixin`).\n"
"\n"
".. attribute:: event\n"
"\n"
"    A :class:`threading.Event` instance used to synchronize operations\n"
"    (like start, stop, and split) between the control thread and the\n"
"    callback thread.\n"
"\n"
".. attribute:: exception\n"
"\n"
"    If an exception occurs during the encoder callback, this attribute is\n"
"    used to store the exception until it can be re-raised in the control\n"
"    thread.\n"
"\n"
".. attribute:: format\n"
"\n"
"    The image or video format that the encoder is expected to produce. This\n"
"    is equal to the value of the *format* parameter.\n"
"\n"
".. attribute:: input_port\n"
"\n"
"    The :class:`~mmalobj.MMALVideoPort` that the encoder should be\n"
"    connected to.\n"
"\n"
".. attribute:: output_port\n"
"\n"
"    The :class:`~mmalobj.MMALVideoPort` that produces the encoder's output.\n"
"    In the case no encoder component is created, this should be the\n"
"    camera/component output port responsible for producing data. In other\n"
"    words, this attribute **must** be set on initialization.\n"
"\n"
".. attribute:: outputs\n"
"\n"
"    A mapping of ``key`` to ``(output, opened)`` tuples where ``output``\n"
"    is a file-like object, and ``opened`` is a bool indicating whether or\n"
"    not we opened the output object (and thus whether we are responsible\n"
"    for eventually closing it).\n"
"\n"
".. attribute:: outputs_lock\n"
"\n"
"    A :func:`threading.Lock` instance used to protect access to\n"
"    :attr:`outputs`.\n"
"\n"
".. attribute:: parent\n"
"\n"
"    The :class:`PiCamera` instance that created this PiEncoder instance.\n"
"\n"
".. attribute:: pool\n"
"\n"
"    A pointer to a pool of MMAL buffers.\n"
"\n"
".. attribute:: resizer\n"
"\n"
"    The :class:`~mmalobj.MMALResizer` component, or ``None`` if no resizer\n"
"    component has been created."
msgstr ""

#: modes/api/pi.py:154
msgid ""
"picamera.PiFramerateRange(low, high) \n"
"This class is a :func:`~collections.namedtuple` derivative used to store\n"
"the low and high limits of a range of framerates. It is recommended that\n"
"you access the information stored by this class by attribute rather than\n"
"position (for example: ``camera.framerate_range.low`` rather than\n"
"``camera.framerate_range[0]``).\n"
"\n"
".. attribute:: low\n"
"\n"
"    The lowest framerate that the camera is permitted to use (inclusive).\n"
"    When the :attr:`~picamera.PiCamera.framerate_range` attribute is\n"
"    queried, this value will always be returned as a\n"
"    :class:`~fractions.Fraction`.\n"
"\n"
".. attribute:: high\n"
"\n"
"    The highest framerate that the camera is permitted to use (inclusive).\n"
"    When the :attr:`~picamera.PiCamera.framerate_range` attribute is\n"
"    queried, this value will always be returned as a\n"
"    :class:`~fractions.Fraction`.\n"
"\n"
".. versionadded:: 1.13"
msgstr ""

#: modes/api/pi.py:155
msgid ""
"picamera.PiImageEncoder(parent, camera_port, input_port, format, resize, "
"**options) \n"
"Encoder for image capture.\n"
"\n"
"This derivative of :class:`PiEncoder` extends the :meth:`_create_encoder`\n"
"method to configure the encoder for a variety of encoded image outputs\n"
"(JPEG, PNG, etc.)."
msgstr ""

#: modes/api/pi.py:156
msgid ""
"picamera.PiMultiImageEncoder(parent, camera_port, input_port, format, "
"resize, **options) \n"
"Encoder for multiple image capture.\n"
"\n"
"This class extends :class:`PiImageEncoder` to handle an iterable of outputs\n"
"instead of a single output. The :meth:`~PiEncoder._callback_write` method\n"
"is extended to terminate capture when the iterable is exhausted, while\n"
":meth:`PiEncoder._open_output` is overridden to begin iteration and rely\n"
"on the new :meth:`_next_output` method to advance output to the next item\n"
"in the iterable."
msgstr ""

#: modes/api/pi.py:157
msgid ""
"picamera.PiNullSink(parent, source) \n"
"Implements an :class:`~mmalobj.MMALNullSink` which can be used in place of\n"
"a renderer.\n"
"\n"
"The *parent* parameter specifies the :class:`PiCamera` instance which\n"
"constructed this :class:`~mmalobj.MMALNullSink`. The *source* parameter\n"
"specifies the :class:`~mmalobj.MMALPort` which the null-sink should connect\n"
"to its input.\n"
"\n"
"The null-sink can act as a drop-in replacement for :class:`PiRenderer` in\n"
"most cases, but obviously doesn't implement attributes like ``alpha``,\n"
"``layer``, etc. as it simply dumps any incoming frames. This is also the\n"
"reason that this class doesn't derive from :class:`PiRenderer` like all\n"
"other classes in this module."
msgstr ""

#: modes/api/pi.py:158
msgid ""
"picamera.PiOneImageEncoder(parent, camera_port, input_port, format, resize, "
"**options) \n"
"Encoder for single image capture.\n"
"\n"
"This class simply extends :meth:`~PiEncoder._callback_write` to terminate\n"
"capture at frame end (i.e. after a single frame has been received)."
msgstr ""

#: modes/api/pi.py:159
msgid ""
"picamera.PiOverlayRenderer(parent, source, resolution=None, format=None, "
"layer=0, alpha=255, fullscreen=True, window=None, crop=None, rotation=0, "
"vflip=False, hflip=False) \n"
"Represents an :class:`~mmalobj.MMALRenderer` with a static source for\n"
"overlays.\n"
"\n"
"This class descends from :class:`PiRenderer` and adds a static *source* for\n"
"the :class:`~mmalobj.MMALRenderer`. The *source* must be an object that\n"
"supports the :ref:`buffer protocol <bufferobjects>` in one of the supported\n"
"formats.\n"
"\n"
"The optional *resolution* parameter specifies the size of the *source* as a\n"
"``(width, height)`` tuple. If this is omitted or ``None`` then the\n"
"resolution is assumed to be the same as the parent camera's current\n"
":attr:`~PiCamera.resolution`. The optional *format* parameter specifies the\n"
"encoding of the *source*. This can be one of the unencoded formats:\n"
"``'yuv'``, ``'rgb'``, ``'rgba'``, ``'bgr'``, or ``'bgra'``. If omitted or\n"
"``None``, *format* will be guessed based on the size of *source* (assuming\n"
"3 bytes for `RGB`_, and 4 bytes for `RGBA`_).\n"
"\n"
"The length of *source* must take into account that widths are rounded up to\n"
"the nearest multiple of 32, and heights to the nearest multiple of 16.  For\n"
"example, if *resolution* is ``(1280, 720)``, and *format* is ``'rgb'`` then\n"
"*source* must be a buffer with length 1280 x 720 x 3 bytes, or 2,764,800\n"
"bytes (because 1280 is a multiple of 32, and 720 is a multiple of 16 no\n"
"extra rounding is required).  However, if *resolution* is ``(97, 57)``, and\n"
"*format* is ``'rgb'`` then *source* must be a buffer with length 128 x 64 x\n"
"3 bytes, or 24,576 bytes (pixels beyond column 97 and row 57 in the source\n"
"will be ignored).\n"
"\n"
"The *layer*, *alpha*, *fullscreen*, and *window* parameters are the same\n"
"as in :class:`PiRenderer`.\n"
"\n"
".. _RGB: https://en.wikipedia.org/wiki/RGB\n"
".. _RGBA: https://en.wikipedia.org/wiki/RGBA_color_space\n"
"\n"
".. versionchanged:: 1.13\n"
"    Added *format* parameter"
msgstr ""

#: modes/api/pi.py:160
msgid ""
"picamera.PiPreviewRenderer(parent, source, resolution=None, layer=2, "
"alpha=255, fullscreen=True, window=None, crop=None, rotation=0, vflip=False, "
"hflip=False) \n"
"Represents an :class:`~mmalobj.MMALRenderer` which uses the camera's\n"
"preview as a source.\n"
"\n"
"This class descends from :class:`PiRenderer` and adds an\n"
":class:`~mmalobj.MMALConnection` to connect the renderer to an MMAL port.\n"
"The *source* parameter specifies the :class:`~mmalobj.MMALPort` to connect\n"
"to the renderer.\n"
"\n"
"The *layer*, *alpha*, *fullscreen*, and *window* parameters are the same\n"
"as in :class:`PiRenderer`."
msgstr ""

#: modes/api/pi.py:161
msgid ""
"picamera.PiRawImageMixin(parent, camera_port, input_port, format, resize, "
"**options) \n"
"Mixin class for \"raw\" (unencoded) image capture.\n"
"\n"
"The :meth:`_callback_write` method is overridden to manually calculate when\n"
"to terminate output."
msgstr ""

#: modes/api/pi.py:162
msgid ""
"picamera.PiRawMixin(parent, camera_port, input_port, format, resize, "
"**options) \n"
"Mixin class for \"raw\" (unencoded) output.\n"
"\n"
"This mixin class overrides the initializer of :class:`PiEncoder`, along\n"
"with :meth:`_create_resizer` and :meth:`_create_encoder` to configure the\n"
"pipeline for unencoded output. Specifically, it disables the construction\n"
"of an encoder, and sets the output port to the input port passed to the\n"
"initializer, unless resizing is required (either for actual resizing, or\n"
"for format conversion) in which case the resizer's output is used."
msgstr ""

#: modes/api/pi.py:163
msgid ""
"picamera.PiRawMultiImageEncoder(parent, camera_port, input_port, format, "
"resize, **options) \n"
"Multiple image encoder for unencoded capture.\n"
"\n"
"This class is a derivative of :class:`PiMultiImageEncoder` and the\n"
":class:`PiRawImageMixin` class intended for use with\n"
":meth:`~PiCamera.capture_sequence` when it is called with an unencoded\n"
"image format.\n"
"\n"
".. warning::\n"
"\n"
"    This class creates an inheritance diamond. Take care to determine the\n"
"    MRO of super-class calls."
msgstr ""

#: modes/api/pi.py:164
msgid ""
"picamera.PiRawOneImageEncoder(parent, camera_port, input_port, format, "
"resize, **options) \n"
"Single image encoder for unencoded capture.\n"
"\n"
"This class is a derivative of :class:`PiOneImageEncoder` and the\n"
":class:`PiRawImageMixin` class intended for use with\n"
":meth:`~PiCamera.capture` (et al) when it is called with an unencoded image\n"
"format.\n"
"\n"
".. warning::\n"
"\n"
"    This class creates an inheritance diamond. Take care to determine the\n"
"    MRO of super-class calls."
msgstr ""

#: modes/api/pi.py:165
msgid ""
"picamera.PiRawVideoEncoder(parent, camera_port, input_port, format, resize, "
"**options) \n"
"Video encoder for unencoded recordings.\n"
"\n"
"This class is a derivative of :class:`PiVideoEncoder` and the\n"
":class:`PiRawMixin` class intended for use with\n"
":meth:`~PiCamera.start_recording` when it is called with an unencoded\n"
"format.\n"
"\n"
".. warning::\n"
"\n"
"    This class creates an inheritance diamond. Take care to determine the\n"
"    MRO of super-class calls."
msgstr ""

#: modes/api/pi.py:166
msgid ""
"picamera.PiRenderer(parent, layer=0, alpha=255, fullscreen=True, "
"window=None, crop=None, rotation=0, vflip=False, hflip=False) \n"
"Wraps :class:`~mmalobj.MMALRenderer` for use by PiCamera.\n"
"\n"
"The *parent* parameter specifies the :class:`PiCamera` instance that has\n"
"constructed this renderer. The *layer* parameter specifies the layer that\n"
"the renderer will inhabit. Higher numbered layers obscure lower numbered\n"
"layers (unless they are partially transparent). The initial opacity of the\n"
"renderer is specified by the *alpha* parameter (which defaults to 255,\n"
"meaning completely opaque). The *fullscreen* parameter which defaults to\n"
"``True`` indicates whether the renderer should occupy the entire display.\n"
"Finally, the *window* parameter (which only has meaning when *fullscreen*\n"
"is ``False``) is a four-tuple of ``(x, y, width, height)`` which gives the\n"
"screen coordinates that the renderer should occupy when it isn't\n"
"full-screen.\n"
"\n"
"This base class isn't directly used by :class:`PiCamera`, but the two\n"
"derivatives defined below, :class:`PiOverlayRenderer` and\n"
":class:`PiPreviewRenderer`, are used to produce overlays and the camera\n"
"preview respectively."
msgstr ""

#: modes/api/pi.py:167
msgid ""
"picamera.PiResolution(width, height) \n"
"A :func:`~collections.namedtuple` derivative which represents a resolution\n"
"with a :attr:`width` and :attr:`height`.\n"
"\n"
".. attribute:: width\n"
"\n"
"    The width of the resolution in pixels\n"
"\n"
".. attribute:: height\n"
"\n"
"    The height of the resolution in pixels\n"
"\n"
".. versionadded:: 1.11"
msgstr ""

#: modes/api/pi.py:168
msgid ""
"picamera.PiVideoEncoder(parent, camera_port, input_port, format, resize, "
"**options) \n"
"Encoder for video recording.\n"
"\n"
"This derivative of :class:`PiEncoder` configures itself for H.264 or MJPEG\n"
"encoding.  It also introduces a :meth:`split` method which is used by\n"
":meth:`~PiCamera.split_recording` and :meth:`~PiCamera.record_sequence` to\n"
"redirect future output to a new filename or object. Finally, it also\n"
"extends :meth:`PiEncoder.start` and :meth:`PiEncoder._callback_write` to\n"
"track video frame meta-data, and to permit recording motion data to a\n"
"separate output object."
msgstr ""

#: modes/api/pi.py:169
msgid ""
"picamera.PiVideoFrame(index, frame_type, frame_size, video_size, split_size, "
"timestamp, complete) \n"
"This class is a :func:`~collections.namedtuple` derivative used to store\n"
"information about a video frame. It is recommended that you access the\n"
"information stored by this class by attribute name rather than position\n"
"(for example: ``frame.index`` rather than ``frame[0]``).\n"
"\n"
".. attribute:: index\n"
"\n"
"    Returns the zero-based number of the frame. This is a monotonic counter\n"
"    that is simply incremented every time the camera starts outputting a\n"
"    new frame. As a consequence, this attribute cannot be used to detect\n"
"    dropped frames. Nor does it necessarily represent actual frames; it\n"
"    will be incremented for SPS headers and motion data buffers too.\n"
"\n"
".. attribute:: frame_type\n"
"\n"
"    Returns a constant indicating the kind of data that the frame contains\n"
"    (see :class:`PiVideoFrameType`). Please note that certain frame types\n"
"    contain no image data at all.\n"
"\n"
".. attribute:: frame_size\n"
"\n"
"    Returns the size in bytes of the current frame. If a frame is written\n"
"    in multiple chunks, this value will increment while :attr:`index`\n"
"    remains static. Query :attr:`complete` to determine whether the frame\n"
"    has been completely output yet.\n"
"\n"
".. attribute:: video_size\n"
"\n"
"    Returns the size in bytes of the entire video up to this frame.  Note\n"
"    that this is unlikely to match the size of the actual file/stream\n"
"    written so far. This is because a stream may utilize buffering which\n"
"    will cause the actual amount written (e.g. to disk) to lag behind the\n"
"    value reported by this attribute.\n"
"\n"
".. attribute:: split_size\n"
"\n"
"    Returns the size in bytes of the video recorded since the last call to\n"
"    either :meth:`~PiCamera.start_recording` or\n"
"    :meth:`~PiCamera.split_recording`. For the reasons explained above,\n"
"    this may differ from the size of the actual file/stream written so far.\n"
"\n"
".. attribute:: timestamp\n"
"\n"
"    Returns the presentation timestamp (PTS) of the frame. This represents\n"
"    the point in time that the Pi received the first line of the frame from\n"
"    the camera.\n"
"\n"
"    The timestamp is measured in microseconds (millionths of a second).\n"
"    When the camera's clock mode is ``'reset'`` (the default), the\n"
"    timestamp is relative to the start of the video recording.  When the\n"
"    camera's :attr:`~PiCamera.clock_mode` is ``'raw'``, it is relative to\n"
"    the last system reboot. See :attr:`~PiCamera.timestamp` for more\n"
"    information.\n"
"\n"
"    .. warning::\n"
"\n"
"        Currently, the camera occasionally returns \"time unknown\" values "
"in\n"
"        this field which picamera represents as ``None``. If you are\n"
"        querying this property you will need to check the value is not\n"
"        ``None`` before using it. This happens for SPS header \"frames\",\n"
"        for example.\n"
"\n"
".. attribute:: complete\n"
"\n"
"    Returns a bool indicating whether the current frame is complete or not.\n"
"    If the frame is complete then :attr:`frame_size` will not increment\n"
"    any further, and will reset for the next frame.\n"
"\n"
".. versionchanged:: 1.5\n"
"    Deprecated :attr:`header` and :attr:`keyframe` attributes and added the\n"
"    new :attr:`frame_type` attribute instead.\n"
"\n"
".. versionchanged:: 1.9\n"
"    Added the :attr:`complete` attribute."
msgstr ""

#: modes/api/pi.py:170
msgid ""
"picamera.PiVideoFrameType() \n"
"This class simply defines constants used to represent the type of a frame\n"
"in :attr:`PiVideoFrame.frame_type`. Effectively it is a namespace for an\n"
"enum.\n"
"\n"
".. attribute:: frame\n"
"\n"
"    Indicates a predicted frame (P-frame). This is the most common frame\n"
"    type.\n"
"\n"
".. attribute:: key_frame\n"
"\n"
"    Indicates an intra-frame (I-frame) also known as a key frame.\n"
"\n"
".. attribute:: sps_header\n"
"\n"
"    Indicates an inline SPS/PPS header (rather than picture data) which is\n"
"    typically used as a split point.\n"
"\n"
".. attribute:: motion_data\n"
"\n"
"    Indicates the frame is inline motion vector data, rather than picture\n"
"    data.\n"
"\n"
".. versionadded:: 1.5"
msgstr ""

#: modes/api/pi.py:171
msgid ""
"picamera.Red() \n"
"Represents the red component of a :class:`Color` for use in\n"
"transformations. Instances of this class can be constructed directly with a\n"
"float value, or by querying the :attr:`Color.red` attribute. Addition,\n"
"subtraction, and multiplication are supported with :class:`Color`\n"
"instances. For example::\n"
"\n"
"    >>> Color.from_rgb(0, 0, 0) + Red(0.5)\n"
"    <Color \"#7f0000\">\n"
"    >>> Color('#f00') - Color('#900').red\n"
"    <Color \"#660000\">\n"
"    >>> (Red(0.1) * Color('red')).red\n"
"    Red(0.1)"
msgstr ""

#: modes/api/pi.py:172
msgid ""
"picamera.Saturation() \n"
"Represents the saturation of a :class:`Color` for use in transformations.\n"
"Instances of this class can be constructed directly with a float value, or\n"
"by querying the :attr:`Color.saturation` attribute. Addition, subtraction,\n"
"and multiplication are supported with :class:`Color` instances. For\n"
"example::\n"
"\n"
"    >>> Color(0.9, 0.9, 0.6) + Saturation(0.1)\n"
"    <Color \"#ebeb92\">\n"
"    >>> Color('red') - Saturation(1)\n"
"    <Color \"#7f7f7f\">\n"
"    >>> Saturation(0.5) * Color('wheat')\n"
"    <Color \"#e4d9c3\">"
msgstr ""

#: modes/api/pi.py:173
msgid ""
"picamera.mmal_check(status, prefix='') \n"
"Checks the return status of an mmal call and raises an exception on\n"
"failure.\n"
"\n"
"The *status* parameter is the result of an MMAL call. If *status* is\n"
"anything other than MMAL_SUCCESS, a :exc:`PiCameraMMALError` exception is\n"
"raised. The optional *prefix* parameter specifies a prefix message to place\n"
"at the start of the exception's message to provide some context."
msgstr ""

#: modes/api/pi.py:174
msgid ""
"picamera.str() \n"
"str(object='') -> str\n"
"str(bytes_or_buffer[, encoding[, errors]]) -> str\n"
"\n"
"Create a new string object from the given object. If encoding or\n"
"errors is specified, then the object must expose a data buffer\n"
"that will be decoded using the given encoding and error handler.\n"
"Otherwise, returns the result of object.__str__() (if defined)\n"
"or repr(object).\n"
"encoding defaults to sys.getdefaultencoding().\n"
"errors defaults to 'strict'."
msgstr ""

#: modes/api/pi.py:175
msgid ""
"guizero.App(title='guizero', width=500, height=500, layout='auto', "
"bgcolor=None) \n"
"Toplevel widget of Tk which represents mostly the main window\n"
"of an application. It has an associated Tcl interpreter."
msgstr ""

#: modes/api/pi.py:176
msgid ""
"guizero.Box(master, layout='auto', grid=None, align=None) \n"
"Frame widget which may contain other widgets and can have a 3D border."
msgstr ""

#: modes/api/pi.py:177
msgid ""
"guizero.ButtonGroup(master, options, selected, horizontal=False, "
"command=None, grid=None, align=None) \n"
"Frame widget which may contain other widgets and can have a 3D border."
msgstr ""

#: modes/api/pi.py:178
msgid ""
"guizero.CheckBox(master, text, command=None, grid=None, align=None) \n"
"Checkbutton widget which is either in on- or off-state."
msgstr ""

#: modes/api/pi.py:179
msgid ""
"guizero.Combo(master, options, selected=None, command=None, grid=None, "
"align=None) \n"
"OptionMenu which allows the user to select a value from a menu."
msgstr ""

#: modes/api/pi.py:180
msgid ""
"guizero.MenuBar(master, toplevel, options) \n"
"Menu widget which allows displaying menu bars, pull-down menus and pop-up "
"menus."
msgstr ""

#: modes/api/pi.py:181
msgid ""
"guizero.Picture(master, image, grid=None, align=None) \n"
"Label widget which can display text and bitmaps."
msgstr ""

#: modes/api/pi.py:182
msgid ""
"guizero.PushButton(master, command, args=None, text='Button', icon=None, "
"pady=10, padx=10, grid=None, align=None) \n"
"Button widget."
msgstr ""

#: modes/api/pi.py:183
msgid ""
"guizero.RadioButton(master, text, value, variable, command=None, grid=None, "
"align=None) \n"
"Radiobutton widget which shows only one of several buttons in on-state."
msgstr ""

#: modes/api/pi.py:184
msgid ""
"guizero.Slider(master, start=0, end=100, horizontal=True, command=None, "
"grid=None, align=None) \n"
"Scale widget which can display a numerical scale."
msgstr ""

#: modes/api/pi.py:185
msgid ""
"guizero.Text(master, text='', size=12, color='black', font='Helvetica', "
"grid=None, align=None) \n"
"Label widget which can display text and bitmaps."
msgstr ""

#: modes/api/pi.py:186
msgid ""
"guizero.TextBox(master, text='', width=10, grid=None, align=None) \n"
"Entry widget which allows displaying simple text."
msgstr ""

#: modes/api/pi.py:187
msgid ""
"guizero.Tk(screenName=None, baseName=None, className='Tk', useTk=1, sync=0, "
"use=None) \n"
"Toplevel widget of Tk which represents mostly the main window\n"
"of an application. It has an associated Tcl interpreter."
msgstr ""

#: modes/api/pi.py:188
msgid ""
"guizero.Waffle(master, height=3, width=3, dim=20, pad=5, color='white', "
"dotty=False, remember=False, grid=None, align=None) \n"
"Frame widget which may contain other widgets and can have a 3D border."
msgstr ""

#: modes/api/pi.py:189
msgid ""
"guizero.exit() \n"
"exit([status])\n"
"\n"
"Exit the interpreter by raising SystemExit(status).\n"
"If the status is omitted or None, it defaults to zero (i.e., success).\n"
"If the status is an integer, it will be used as the system exit status.\n"
"If it is another kind of object, it will be printed and the system\n"
"exit status will be one (i.e., failure)."
msgstr ""

#: modes/api/pi.py:190
msgid ""
"networkzero.DifferentThreadError() \n"
"Common base class for all non-exit exceptions."
msgstr ""

#: modes/api/pi.py:191
msgid ""
"networkzero.InvalidAddressError(address, errno=None) \n"
"Common base class for all non-exit exceptions."
msgstr ""

#: modes/api/pi.py:192
msgid ""
"networkzero.NetworkZeroError() \n"
"Common base class for all non-exit exceptions."
msgstr ""

#: modes/api/pi.py:193
msgid ""
"networkzero.SocketAlreadyExistsError() \n"
"Common base class for all non-exit exceptions."
msgstr ""

#: modes/api/pi.py:194
msgid ""
"networkzero.SocketInterruptedError(after_n_seconds) \n"
"Common base class for all non-exit exceptions."
msgstr ""

#: modes/api/pi.py:195
msgid ""
"networkzero.SocketTimedOutError(n_seconds) \n"
"Common base class for all non-exit exceptions."
msgstr ""

#: modes/api/pi.py:196
msgid ""
"networkzero.action_and_params(commandline) \n"
"Treat a command line as an action followed by parameter\n"
"\n"
":param commandline: a string containing at least an action\n"
":returns: action, [param1, param2, ...]"
msgstr ""

#: modes/api/pi.py:197
msgid ""
"networkzero.address(address=None) \n"
"Convert one of a number of inputs into a valid ip:port string.\n"
"\n"
"Elements which are not provided are filled in as follows:\n"
"    \n"
"    * IP Address: the system is asked for the set of IP addresses "
"associated \n"
"      with the machine and the first one is used, preferring those matching\n"
"      `address` if it is a wildcard.\n"
"    * Port number: a random port is selected from the pool of dynamically-"
"available \n"
"      port numbers.\n"
"  \n"
"This means you can pass any of: nothing; a hostname; an IP address; an IP "
"address with wildcards; a port number\n"
"\n"
"If an IP address is supplied but is invalid, an InvalidAddressError\n"
"exception is raised.\n"
"\n"
":param address: (optional) Any of: an IP address, a port number, or both\n"
"\n"
":returns: a valid ip:port string for this machine"
msgstr ""

#: modes/api/pi.py:198
msgid ""
"networkzero.advertise(name, address=None, fail_if_exists=False, ttl_s=20) \n"
"Advertise a name at an address\n"
"\n"
"Start to advertise service `name` at address `address`. If\n"
"the address is not supplied, one is constructed and this is\n"
"returned by the function. ie this is a typical use::\n"
"\n"
"    address = nw0.advertise(\"myservice\")\n"
"    \n"
":param name: any text\n"
":param address: either \"ip:port\" or None\n"
":param fail_if_exists: fail if this name is already registered?\n"
":param ttl_s: the advert will persist for this many seconds other beacons\n"
":returns: the address given or constructed"
msgstr ""

#: modes/api/pi.py:199
msgid ""
"networkzero.bytes_to_string(data) \n"
"Take bytes and return a base64-encoded unicode string equivalent\n"
"\n"
":param data: a bytes object\n"
":returns: base64-encoded unicode object"
msgstr ""

#: modes/api/pi.py:200
msgid ""
"networkzero.discover(name, wait_for_s=60) \n"
"Discover a service by name\n"
"\n"
"Look for an advert to a named service::\n"
"\n"
"    address = nw0.discover(\"myservice\")\n"
"    \n"
":param name: any text\n"
":param wait_for_s: how many seconds to wait before giving up\n"
":returns: the address found or None"
msgstr ""

#: modes/api/pi.py:201
msgid ""
"networkzero.discover_all() \n"
"Produce a list of all known services and their addresses\n"
"\n"
"Ask for all known services as a list of 2-tuples: (name, address)\n"
"This could, eg, be used to form a dictionary of services::\n"
"\n"
"    services = dict(nw0.discover_all())\n"
"    \n"
":returns: a list of 2-tuples [(name, address), ...]"
msgstr ""

#: modes/api/pi.py:202
msgid ""
"networkzero.discover_group(group, separator='/', exclude=None) \n"
"Produce a list of all services and their addresses in a group\n"
"\n"
"A group is an optional form of namespace within the discovery mechanism.\n"
"If an advertised name has the form <group><sep><name> it is deemed to\n"
"belong to <group>. Note that the service's name is still the full\n"
"string <group><sep><name>. The group concept is simply for discovery and\n"
"to assist differentiation, eg, in a classroom group.\n"
"\n"
":param group: the name of a group prefix\n"
":param separator: the separator character [/]\n"
":param exclude: an iterable of names to exclude (or None)\n"
"\n"
":returns: a list of 2-tuples [(name, address), ...]"
msgstr ""

#: modes/api/pi.py:203
msgid ""
"networkzero.networkzero.config() \n"
"Common configuration elements for networkzero"
msgstr ""

#: modes/api/pi.py:204
msgid ""
"networkzero.networkzero.discovery() \n"
"Advertise and collect advertisements of network services\n"
"\n"
"The discovery module offers:\n"
"\n"
"    * A UDP broadcast socket which:\n"
"      \n"
"      - Listens for and keeps track of service adverts from this and other \n"
"        machines & processes\n"
"      - Broadcasts services advertised by this process\n"
"\n"
"    * A ZeroMQ socket which allow any process on this machine to \n"
"      communicate with its broadcast socket\n"
"\n"
"In other words, we have a beacon which listens to instructions\n"
"from processes on this machine while sending out and listening \n"
"to adverts broadcast to/from all machines on the network.\n"
"\n"
"The beacon is started automatically in a daemon thread when the first \n"
"attempt is made to advertise or discover. If another process already \n"
"has a beacon running (ie if this beacon can't bind to its port) this \n"
"beacon thread will shut down with no further action.\n"
"\n"
"The module-level functions to advertise and discover will open a connection\n"
"to a ZeroMQ socket on this machine (which might be hosted by this or by "
"another\n"
"process) and will use this socket to send commands to the beacon thread "
"which\n"
"will update or return its internal list of advertised services.\n"
"\n"
"As an additional convenience, the :func:`advertise` function will, if given "
"no\n"
"specific address, generate a suitable ip:port pair by interrogating the "
"system.\n"
"This functionality is actually in :func:`networkzero.address` (qv)."
msgstr ""

#: modes/api/pi.py:205
msgid ""
"networkzero.send_message_to(address, message=None, "
"wait_for_reply_s=<Forever>) \n"
"Send a message and return the reply\n"
"\n"
":param address: a nw0 address (eg from `nw0.discover`)\n"
":param message: any simple Python object, including text & tuples\n"
":param wait_for_reply_s: how many seconds to wait for a reply [default: "
"forever]\n"
"\n"
":returns: the reply returned from the address or None if out of time"
msgstr ""

#: modes/api/pi.py:206
msgid ""
"networkzero.send_news_to(address, topic, data=None) \n"
"Publish news to all subscribers\n"
"\n"
":param address: a nw0 address, eg from `nw0.advertise`\n"
":param topic: any text object\n"
":param data: any simple Python object including test & tuples [default: "
"empty]"
msgstr ""

#: modes/api/pi.py:207
msgid ""
"networkzero.send_reply_to(address, reply=None) \n"
"Reply to a message previously received\n"
"\n"
":param address: a nw0 address (eg from `nw0.advertise`)\n"
":param reply: any simple Python object, including text & tuples"
msgstr ""

#: modes/api/pi.py:208
msgid ""
"networkzero.string_to_bytes(data) \n"
"Take a base64-encoded unicode string and return the equivalent bytes\n"
"\n"
":param data: a base64-encoded unicode object\n"
":returns: the equivalent bytes"
msgstr ""

#: modes/api/pi.py:209
msgid ""
"networkzero.wait_for_message_from(address, wait_for_s=<Forever>, "
"autoreply=False) \n"
"Wait for a message\n"
"\n"
":param address: a nw0 address (eg from `nw0.advertise`)\n"
":param wait_for_s: how many seconds to wait for a message before giving up "
"[default: forever]\n"
":param autoreply: whether to send an empty reply [default: No]\n"
"\n"
":returns: the message received from another address or None if out of time"
msgstr ""

#: modes/api/pi.py:210
msgid ""
"networkzero.wait_for_news_from(address, prefix='', wait_for_s=<Forever>) \n"
"Wait for news whose topic starts with `prefix`.\n"
"\n"
":param address: a nw0 address, eg from `nw0.discover`\n"
":param prefix: any text object [default: all messages]\n"
":param wait_for_s: how many seconds to wait before giving up [default: "
"forever]\n"
"\n"
":returns: a 2-tuple of (topic, data) or (None, None) if out of time"
msgstr ""

#: modes/api/pygamezero.py:23
msgid ""
"actor.Actor(image, pos=None, anchor=None, **kwargs) \n"
"Rect(left, top, width, height) -> Rect\n"
"Rect((left, top), (width, height)) -> Rect\n"
"Rect(object) -> Rect\n"
"pygame object for storing rectangular coordinates"
msgstr ""

#: modes/api/pygamezero.py:24
msgid ""
"actor.atan2() \n"
"atan2(y, x)\n"
"\n"
"Return the arc tangent (measured in radians) of y/x.\n"
"Unlike atan(y/x), the signs of both x and y are considered."
msgstr ""

#: modes/api/pygamezero.py:25
msgid ""
"actor.cos() \n"
"cos(x)\n"
"\n"
"Return the cosine of x (measured in radians)."
msgstr ""

#: modes/api/pygamezero.py:26
msgid ""
"actor.degrees() \n"
"degrees(x)\n"
"\n"
"Convert angle x from radians to degrees."
msgstr ""

#: modes/api/pygamezero.py:27
msgid ""
"actor.pygame() \n"
"Pygame is a set of Python modules designed for writing games.\n"
"It is written on top of the excellent SDL library. This allows you\n"
"to create fully featured games and multimedia programs in the python\n"
"language. The package is highly portable, with games running on\n"
"Windows, MacOS, OS X, BeOS, FreeBSD, IRIX, and Linux."
msgstr ""

#: modes/api/pygamezero.py:28
msgid ""
"actor.radians() \n"
"radians(x)\n"
"\n"
"Convert angle x from degrees to radians."
msgstr ""

#: modes/api/pygamezero.py:29
msgid ""
"actor.sin() \n"
"sin(x)\n"
"\n"
"Return the sine of x (measured in radians)."
msgstr ""

#: modes/api/pygamezero.py:30
msgid ""
"actor.sqrt() \n"
"sqrt(x)\n"
"\n"
"Return the square root of x."
msgstr ""

#: modes/api/pygamezero.py:31
msgid ""
"actor.transform_anchor(ax, ay, w, h, angle) \n"
"Transform anchor based upon a rotation of a surface of size w x h."
msgstr ""

#: modes/api/pygamezero.py:32
msgid ""
"animation.Animation(object, tween='linear', duration=1, on_finished=None, "
"**targets) \n"
"An animation manager for object attribute animations.\n"
"\n"
"Each keyword argument given to the Animation on creation (except\n"
"\"type\" and \"duration\") will be *tweened* from their current value\n"
"on the object to the target value specified.\n"
"\n"
"If the value is a list or tuple, then each value inside that will\n"
"be tweened.\n"
"\n"
"The update() method is automatically scheduled with the clock for\n"
"the duration of the animation."
msgstr ""

#: modes/api/pygamezero.py:33
msgid ""
"animation.each_tick(callback) \n"
"Schedule a callback to be called every tick.\n"
"\n"
"Unlike the standard scheduler functions, the callable is passed the\n"
"elapsed clock time since the last call (the same value passed to tick)."
msgstr ""

#: modes/api/pygamezero.py:34
msgid ""
"animation.pow() \n"
"pow(x, y)\n"
"\n"
"Return x**y (x to the power of y)."
msgstr ""

#: modes/api/pygamezero.py:35
msgid ""
"animation.sin() \n"
"sin(x)\n"
"\n"
"Return the sine of x (measured in radians)."
msgstr ""

#: modes/api/pygamezero.py:36
msgid ""
"animation.unschedule(callback) \n"
"Unschedule the given callback.\n"
"\n"
"If scheduled multiple times all instances will be unscheduled."
msgstr ""

#: modes/api/pygamezero.py:37
msgid ""
"clock.Clock() \n"
"A clock used for event scheduling.\n"
"\n"
"When tick() is called, all events scheduled for before now will be called\n"
"in order.\n"
"\n"
"tick() would typically be called from the game loop for the default clock.\n"
"\n"
"Additional clocks could be created - for example, a game clock that could\n"
"be suspended in pause screens. Your code must take care of calling tick()\n"
"or not. You could also run the clock at a different rate if desired, by\n"
"scaling dt before passing it to tick()."
msgstr ""

#: modes/api/pygamezero.py:38
msgid ""
"clock.Event(time, cb, repeat=None) \n"
"An event scheduled for a future time.\n"
"\n"
"Events are ordered by their scheduled execution time."
msgstr ""

#: modes/api/pygamezero.py:39
msgid ""
"clock.each_tick(callback) \n"
"Schedule a callback to be called every tick.\n"
"\n"
"Unlike the standard scheduler functions, the callable is passed the\n"
"elapsed clock time since the last call (the same value passed to tick)."
msgstr ""

#: modes/api/pygamezero.py:40
msgid ""
"clock.heapq() \n"
"Heap queue algorithm (a.k.a. priority queue).\n"
"\n"
"Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for\n"
"all k, counting elements from 0.  For the sake of comparison,\n"
"non-existing elements are considered to be infinite.  The interesting\n"
"property of a heap is that a[0] is always its smallest element.\n"
"\n"
"Usage:\n"
"\n"
"heap = []            # creates an empty heap\n"
"heappush(heap, item) # pushes a new item on the heap\n"
"item = heappop(heap) # pops the smallest item from the heap\n"
"item = heap[0]       # smallest item on the heap without popping it\n"
"heapify(x)           # transforms list into a heap, in-place, in linear "
"time\n"
"item = heapreplace(heap, item) # pops and returns smallest item, and adds\n"
"                               # new item; the heap size is unchanged\n"
"\n"
"Our API differs from textbook heap algorithms as follows:\n"
"\n"
"- We use 0-based indexing.  This makes the relationship between the\n"
"  index for a node and the indexes for its children slightly less\n"
"  obvious, but is more suitable since Python uses 0-based indexing.\n"
"\n"
"- Our heappop() method returns the smallest item, not the largest.\n"
"\n"
"These two make it possible to view the heap as a regular Python list\n"
"without surprises: heap[0] is the smallest item, and heap.sort()\n"
"maintains the heap invariant!"
msgstr ""

#: modes/api/pygamezero.py:41
msgid ""
"clock.method() \n"
"method(function, instance)\n"
"\n"
"Create a bound instance method object."
msgstr ""

#: modes/api/pygamezero.py:42
msgid ""
"clock.schedule(callback, delay) \n"
"Schedule callback to be called once, at `delay` seconds from now.\n"
"\n"
":param callback: A parameterless callable to be called.\n"
":param delay: The delay before the call (in clock time / seconds)."
msgstr ""

#: modes/api/pygamezero.py:43
msgid ""
"clock.schedule_interval(callback, delay) \n"
"Schedule callback to be called every `delay` seconds.\n"
"\n"
"The first occurrence will be after `delay` seconds.\n"
"\n"
":param callback: A parameterless callable to be called.\n"
":param delay: The interval in seconds."
msgstr ""

#: modes/api/pygamezero.py:44
msgid ""
"clock.schedule_unique(callback, delay) \n"
"Schedule callback to be called once, at `delay` seconds from now.\n"
"\n"
"If it was already scheduled, postpone its firing.\n"
"\n"
":param callback: A parameterless callable to be called.\n"
":param delay: The delay before the call (in clock time / seconds)."
msgstr ""

#: modes/api/pygamezero.py:45
msgid ""
"clock.tick(dt) \n"
"Update the clock time and fire all scheduled events.\n"
"\n"
":param dt: The elapsed time in seconds."
msgstr ""

#: modes/api/pygamezero.py:46
msgid ""
"clock.total_ordering(cls) \n"
"Class decorator that fills in missing ordering methods"
msgstr ""

#: modes/api/pygamezero.py:47
msgid ""
"clock.unschedule(callback) \n"
"Unschedule the given callback.\n"
"\n"
"If scheduled multiple times all instances will be unscheduled."
msgstr ""

#: modes/api/pygamezero.py:48
msgid ""
"clock.weak_method(method) \n"
"Quick weak method ref in case users aren't using Python 3.4"
msgstr ""

#: modes/api/pygamezero.py:49
msgid ""
"draw.circle(position, radius, (r, g, b)) \n"
"Draw the outline of a circle."
msgstr ""

#: modes/api/pygamezero.py:50
msgid ""
"draw.filled_circle(position, radius, (r, g, b)) \n"
"Draw a filled circle."
msgstr ""

#: modes/api/pygamezero.py:51
msgid ""
"draw.filled_rect(rect, (r, g, b)) \n"
"Draw a filled rectangle. Takes a Rect object. For example, Rect((20, 20), "
"(100, 100))"
msgstr ""

#: modes/api/pygamezero.py:52
msgid ""
"draw.line(start, end, (r, g, b)) \n"
"Draw a line from start to end."
msgstr ""

#: modes/api/pygamezero.py:53
msgid ""
"draw.rect(rect, (r, g, b)) \n"
"Draw the outline of a rectangle. Takes a Rect object. For example, Rect((20, "
"20), (100, 100))"
msgstr ""

#: modes/api/pygamezero.py:54
msgid ""
"draw.text(text, [pos, ]**kwargs) \n"
"Draw text. There’s an extremely rich API for positioning and formatting "
"text; see Pygame Zero Text Formatting for full details."
msgstr ""

#: modes/api/pygamezero.py:55
msgid ""
"draw.textbox(text, rect, **kwargs) \n"
"Draw text, sized to fill the given Rect. There’s an extremely rich API for "
"positioning and formatting text; see Pygame Zero Text Formatting for full "
"details."
msgstr ""

#: modes/api/pygamezero.py:56
msgid ""
"keyboard.Keyboard() \n"
"The current state of the keyboard.\n"
"\n"
"Each attribute represents a key. For example, ::\n"
"\n"
"    keyboard.a\n"
"\n"
"is True if the 'A' key is depressed, and False otherwise."
msgstr ""

#: modes/api/pygamezero.py:57
msgid ""
"keyboard.keys(value, names=None, *, module=None, qualname=None, type=None, "
"start=1) \n"
"An enumeration."
msgstr ""

#: modes/api/pygamezero.py:58
msgid ""
"keyboard.re() \n"
"Support for regular expressions (RE)."
msgstr ""

#: modes/api/pygamezero.py:59
msgid ""
"keyboard.warn() \n"
"Issue a warning, or maybe ignore it or raise an exception."
msgstr ""

#: modes/api/pygamezero.py:60
msgid ""
"music.ResourceLoader(subpath) \n"
"Abstract resource loader.\n"
"\n"
"A resource loader is a singleton; resources are loaded from a named\n"
"subdirectory of the global 'root'. The `.load()` method actually loads\n"
"a resource.\n"
"\n"
"Additionally, attribute access can be used to access and cache resources.\n"
"Dotted paths can be used to traverse directories."
msgstr ""

#: modes/api/pygamezero.py:61
msgid ""
"music.fadeout(seconds) \n"
"Fade out and eventually stop the music playback.\n"
"\n"
":param seconds: The duration in seconds over which the sound will be faded\n"
"                out. For example, to fade out over half a second, call\n"
"                ``music.fadeout(0.5)``."
msgstr ""

#: modes/api/pygamezero.py:62
msgid ""
"music.get_pos() \n"
"get_pos() -> time\n"
"get the music play time"
msgstr ""

#: modes/api/pygamezero.py:63
msgid ""
"music.get_volume() \n"
"get_volume() -> value\n"
"get the music volume"
msgstr ""

#: modes/api/pygamezero.py:64
msgid ""
"music.is_playing(name) \n"
"Return True if the music is playing and not paused."
msgstr ""

#: modes/api/pygamezero.py:65
msgid ""
"music.pause() \n"
"Temporarily stop playback of the music stream.\n"
"\n"
"Call `unpause()` to resume."
msgstr ""

#: modes/api/pygamezero.py:66
msgid ""
"music.pgzero.constants() \n"
"Names for constants returned by Pygame."
msgstr ""

#: modes/api/pygamezero.py:67
msgid ""
"music.play(name) \n"
"Play a music file from the music/ directory.\n"
"\n"
"The music will loop when it finishes playing."
msgstr ""

#: modes/api/pygamezero.py:68
msgid ""
"music.play_once(name) \n"
"Play a music file from the music/ directory."
msgstr ""

#: modes/api/pygamezero.py:69
msgid ""
"music.queue(name) \n"
"Queue a music file to follow the current track.\n"
"\n"
"This will load a music file and queue it. A queued music file will begin as\n"
"soon as the current music naturally ends. If the current music is ever\n"
"stopped or changed, the queued song will be lost."
msgstr ""

#: modes/api/pygamezero.py:70
msgid ""
"music.rewind() \n"
"rewind() -> None\n"
"restart music"
msgstr ""

#: modes/api/pygamezero.py:71
msgid ""
"music.set_pos() \n"
"set_pos(pos) -> None\n"
"set position to play from"
msgstr ""

#: modes/api/pygamezero.py:72
msgid ""
"music.set_volume() \n"
"set_volume(value) -> None\n"
"set the music volume"
msgstr ""

#: modes/api/pygamezero.py:73
msgid ""
"music.stop() \n"
"stop() -> None\n"
"stop the music playback"
msgstr ""

#: modes/api/pygamezero.py:74
msgid ""
"music.unpause() \n"
"Resume playback of the music stream after it has been paused."
msgstr ""

#: modes/api/pygamezero.py:75
msgid ""
"screen.blit(image, (left, top)) \n"
"Draw the image to the screen at the given position. \n"
"blit() accepts either a Surface or a string as its image parameter. If image "
"is a str then the named image will be loaded from the images/ directory."
msgstr ""

#: modes/api/pygamezero.py:76
msgid ""
"screen.clear() \n"
"Reset the screen to black."
msgstr ""

#: modes/api/pygamezero.py:77
msgid ""
"screen.fill((red, green, blue)) \n"
"Fill the screen with a solid color."
msgstr ""

#: modes/api/pygamezero.py:78
msgid ""
"screen.Screen(surface) \n"
"Interface to the screen."
msgstr ""

#: modes/api/pygamezero.py:79
msgid ""
"screen.SurfacePainter(screen) \n"
"Interface to pygame.draw that is bound to a surface."
msgstr ""

#: modes/api/pygamezero.py:80
msgid ""
"screen.pgzero.ptext() \n"
"pygame-text - high-level text rendering with Pygame.\n"
"\n"
"This module is directly copied from\n"
"\n"
"    https://github.com/cosmologicon/pygame-text\n"
"\n"
"at revision c04e59b7382a832e117f0598cdcbc1bb3eb26db5\n"
"and used under CC0."
msgstr ""

#: modes/api/pygamezero.py:81
msgid ""
"screen.pygame() \n"
"Pygame is a set of Python modules designed for writing games.\n"
"It is written on top of the excellent SDL library. This allows you\n"
"to create fully featured games and multimedia programs in the python\n"
"language. The package is highly portable, with games running on\n"
"Windows, MacOS, OS X, BeOS, FreeBSD, IRIX, and Linux."
msgstr ""

#: modes/api/pygamezero.py:82
msgid ""
"screen.round_pos(pos) \n"
"Round a tuple position so it can be used for drawing."
msgstr ""

#: modes/api/python3.py:23
msgid ""
"argparse.Action(option_strings, dest, nargs=None, const=None, default=None, "
"type=None, choices=None, required=False, help=None, metavar=None) \n"
"Information about how to convert command line strings to Python objects.\n"
"\n"
"Action objects are used by an ArgumentParser to represent the information\n"
"needed to parse a single argument from one or more strings from the\n"
"command line. The keyword arguments to the Action constructor are also\n"
"all attributes of Action instances.\n"
"\n"
"Keyword Arguments:\n"
"\n"
"    - option_strings -- A list of command-line option strings which\n"
"        should be associated with this action.\n"
"\n"
"    - dest -- The name of the attribute to hold the created object(s)\n"
"\n"
"    - nargs -- The number of command-line arguments that should be\n"
"        consumed. By default, one argument will be consumed and a single\n"
"        value will be produced.  Other values include:\n"
"            - N (an integer) consumes N arguments (and produces a list)\n"
"            - '?' consumes zero or one arguments\n"
"            - '*' consumes zero or more arguments (and produces a list)\n"
"            - '+' consumes one or more arguments (and produces a list)\n"
"        Note that the difference between the default and nargs=1 is that\n"
"        with the default, a single value will be produced, while with\n"
"        nargs=1, a list containing a single value will be produced.\n"
"\n"
"    - const -- The value to be produced if the option is specified and the\n"
"        option uses an action that takes no values.\n"
"\n"
"    - default -- The value to be produced if the option is not specified.\n"
"\n"
"    - type -- A callable that accepts a single string argument, and\n"
"        returns the converted value.  The standard Python types str, int,\n"
"        float, and complex are useful examples of such callables.  If None,\n"
"        str is used.\n"
"\n"
"    - choices -- A container of values that should be allowed. If not None,\n"
"        after a command-line argument has been converted to the appropriate\n"
"        type, an exception will be raised if it is not a member of this\n"
"        collection.\n"
"\n"
"    - required -- True if the action must always be specified at the\n"
"        command line. This is only meaningful for optional command-line\n"
"        arguments.\n"
"\n"
"    - help -- The help string describing the argument.\n"
"\n"
"    - metavar -- The name to be used for the option's argument with the\n"
"        help string. If None, the 'dest' value will be used as the name."
msgstr ""

#: modes/api/python3.py:24
msgid ""
"argparse.ArgumentDefaultsHelpFormatter(prog, indent_increment=2, "
"max_help_position=24, width=None) \n"
"Help message formatter which adds default values to argument help.\n"
"\n"
"Only the name of this class is considered a public API. All the methods\n"
"provided by the class are considered an implementation detail."
msgstr ""

#: modes/api/python3.py:25
msgid ""
"argparse.ArgumentError(argument, message) \n"
"An error from creating or using an argument (optional or positional).\n"
"\n"
"The string value of this exception is the message, augmented with\n"
"information about the argument that caused it."
msgstr ""

#: modes/api/python3.py:26
msgid ""
"argparse.ArgumentParser(prog=None, usage=None, description=None, "
"epilog=None, parents=[], formatter_class=<class 'argparse.HelpFormatter'>, "
"prefix_chars='-', fromfile_prefix_chars=None, argument_default=None, "
"conflict_handler='error', add_help=True, allow_abbrev=True) \n"
"Object for parsing command line strings into Python objects.\n"
"\n"
"Keyword Arguments:\n"
"    - prog -- The name of the program (default: sys.argv[0])\n"
"    - usage -- A usage message (default: auto-generated from arguments)\n"
"    - description -- A description of what the program does\n"
"    - epilog -- Text following the argument descriptions\n"
"    - parents -- Parsers whose arguments should be copied into this one\n"
"    - formatter_class -- HelpFormatter class for printing help messages\n"
"    - prefix_chars -- Characters that prefix optional arguments\n"
"    - fromfile_prefix_chars -- Characters that prefix files containing\n"
"        additional arguments\n"
"    - argument_default -- The default value for all arguments\n"
"    - conflict_handler -- String indicating how to handle conflicts\n"
"    - add_help -- Add a -h/-help option\n"
"    - allow_abbrev -- Allow long options to be abbreviated unambiguously"
msgstr ""

#: modes/api/python3.py:27
msgid ""
"argparse.ArgumentTypeError() \n"
"An error from trying to convert a command line string to a type."
msgstr ""

#: modes/api/python3.py:28
msgid ""
"argparse.FileType(mode='r', bufsize=-1, encoding=None, errors=None) \n"
"Factory for creating file object types\n"
"\n"
"Instances of FileType are typically passed as type= arguments to the\n"
"ArgumentParser add_argument() method.\n"
"\n"
"Keyword Arguments:\n"
"    - mode -- A string indicating how the file is to be opened. Accepts the\n"
"        same values as the builtin open() function.\n"
"    - bufsize -- The file's desired buffer size. Accepts the same values as\n"
"        the builtin open() function.\n"
"    - encoding -- The file's encoding. Accepts the same values as the\n"
"        builtin open() function.\n"
"    - errors -- A string indicating how encoding and decoding errors are to\n"
"        be handled. Accepts the same value as the builtin open() function."
msgstr ""

#: modes/api/python3.py:29
msgid ""
"argparse.HelpFormatter(prog, indent_increment=2, max_help_position=24, "
"width=None) \n"
"Formatter for generating usage messages and argument help strings.\n"
"\n"
"Only the name of this class is considered a public API. All the methods\n"
"provided by the class are considered an implementation detail."
msgstr ""

#: modes/api/python3.py:30
msgid ""
"argparse.MetavarTypeHelpFormatter(prog, indent_increment=2, "
"max_help_position=24, width=None) \n"
"Help message formatter which uses the argument 'type' as the default\n"
"metavar value (instead of the argument 'dest')\n"
"\n"
"Only the name of this class is considered a public API. All the methods\n"
"provided by the class are considered an implementation detail."
msgstr ""

#: modes/api/python3.py:31
msgid ""
"argparse.Namespace(**kwargs) \n"
"Simple object for storing attributes.\n"
"\n"
"Implements equality by attribute names and values, and provides a simple\n"
"string representation."
msgstr ""

#: modes/api/python3.py:32
msgid ""
"argparse.RawDescriptionHelpFormatter(prog, indent_increment=2, "
"max_help_position=24, width=None) \n"
"Help message formatter which retains any formatting in descriptions.\n"
"\n"
"Only the name of this class is considered a public API. All the methods\n"
"provided by the class are considered an implementation detail."
msgstr ""

#: modes/api/python3.py:33
msgid ""
"argparse.RawTextHelpFormatter(prog, indent_increment=2, "
"max_help_position=24, width=None) \n"
"Help message formatter which retains formatting of all help text.\n"
"\n"
"Only the name of this class is considered a public API. All the methods\n"
"provided by the class are considered an implementation detail."
msgstr ""

#: modes/api/python3.py:34 modes/api/python3.py:35
msgid ""
"array.array() \n"
"array(typecode [, initializer]) -> array\n"
"\n"
"Return a new array whose items are restricted by typecode, and\n"
"initialized from the optional initializer value, which must be a list,\n"
"string or iterable over elements of the appropriate type.\n"
"\n"
"Arrays represent basic values and behave very much like lists, except\n"
"the type of objects stored in them is constrained. The type is specified\n"
"at object creation time by using a type code, which is a single character.\n"
"The following type codes are defined:\n"
"\n"
"    Type code   C Type             Minimum size in bytes \n"
"    'b'         signed integer     1 \n"
"    'B'         unsigned integer   1 \n"
"    'u'         Unicode character  2 (see note) \n"
"    'h'         signed integer     2 \n"
"    'H'         unsigned integer   2 \n"
"    'i'         signed integer     2 \n"
"    'I'         unsigned integer   2 \n"
"    'l'         signed integer     4 \n"
"    'L'         unsigned integer   4 \n"
"    'q'         signed integer     8 (see note) \n"
"    'Q'         unsigned integer   8 (see note) \n"
"    'f'         floating point     4 \n"
"    'd'         floating point     8 \n"
"\n"
"NOTE: The 'u' typecode corresponds to Python's unicode character. On \n"
"narrow builds this is 2-bytes on wide builds this is 4-bytes.\n"
"\n"
"NOTE: The 'q' and 'Q' type codes are only available if the platform \n"
"C compiler used to build Python supports 'long long', or, on Windows, \n"
"'__int64'.\n"
"\n"
"Methods:\n"
"\n"
"append() -- append a new item to the end of the array\n"
"buffer_info() -- return information giving the current memory info\n"
"byteswap() -- byteswap all the items of the array\n"
"count() -- return number of occurrences of an object\n"
"extend() -- extend array by appending multiple elements from an iterable\n"
"fromfile() -- read items from a file object\n"
"fromlist() -- append items from the list\n"
"frombytes() -- append items from the string\n"
"index() -- return index of first occurrence of an object\n"
"insert() -- insert a new item into the array at a provided position\n"
"pop() -- remove and return item (default last)\n"
"remove() -- remove first occurrence of an object\n"
"reverse() -- reverse the order of the items in the array\n"
"tofile() -- write all items to a file object\n"
"tolist() -- return the array converted to an ordinary list\n"
"tobytes() -- return the array converted to a string\n"
"\n"
"Attributes:\n"
"\n"
"typecode -- the typecode character used to create the array\n"
"itemsize -- the length in bytes of one array item"
msgstr ""

#: modes/api/python3.py:36
msgid ""
"base64.a85decode(b, *, foldspaces=False, adobe=False, ignorechars=b' \\t\\n"
"\\r\\x0b') \n"
"Decode the Ascii85 encoded bytes-like object or ASCII string b.\n"
"\n"
"foldspaces is a flag that specifies whether the 'y' short sequence should "
"be\n"
"accepted as shorthand for 4 consecutive spaces (ASCII 0x20). This feature "
"is\n"
"not supported by the \"standard\" Adobe encoding.\n"
"\n"
"adobe controls whether the input sequence is in Adobe Ascii85 format (i.e.\n"
"is framed with <~ and ~>).\n"
"\n"
"ignorechars should be a byte string containing characters to ignore from "
"the\n"
"input. This should only contain whitespace characters, and by default\n"
"contains all whitespace characters in ASCII.\n"
"\n"
"The result is returned as a bytes object."
msgstr ""

#: modes/api/python3.py:37
msgid ""
"base64.a85encode(b, *, foldspaces=False, wrapcol=0, pad=False, "
"adobe=False) \n"
"Encode bytes-like object b using Ascii85 and return a bytes object.\n"
"\n"
"foldspaces is an optional flag that uses the special short sequence 'y'\n"
"instead of 4 consecutive spaces (ASCII 0x20) as supported by 'btoa'. This\n"
"feature is not supported by the \"standard\" Adobe encoding.\n"
"\n"
"wrapcol controls whether the output should have newline (b'\\n') characters\n"
"added to it. If this is non-zero, each output line will be at most this\n"
"many characters long.\n"
"\n"
"pad controls whether the input is padded to a multiple of 4 before\n"
"encoding. Note that the btoa implementation always pads.\n"
"\n"
"adobe controls whether the encoded byte sequence is framed with <~ and ~>,\n"
"which is used by the Adobe implementation."
msgstr ""

#: modes/api/python3.py:38
msgid ""
"base64.b16decode(s, casefold=False) \n"
"Decode the Base16 encoded bytes-like object or ASCII string s.\n"
"\n"
"Optional casefold is a flag specifying whether a lowercase alphabet is\n"
"acceptable as input.  For security purposes, the default is False.\n"
"\n"
"The result is returned as a bytes object.  A binascii.Error is raised if\n"
"s is incorrectly padded or if there are non-alphabet characters present\n"
"in the input."
msgstr ""

#: modes/api/python3.py:39
msgid ""
"base64.b16encode(s) \n"
"Encode the bytes-like object s using Base16 and return a bytes object.\n"
"    "
msgstr ""

#: modes/api/python3.py:40
msgid ""
"base64.b32decode(s, casefold=False, map01=None) \n"
"Decode the Base32 encoded bytes-like object or ASCII string s.\n"
"\n"
"Optional casefold is a flag specifying whether a lowercase alphabet is\n"
"acceptable as input.  For security purposes, the default is False.\n"
"\n"
"RFC 3548 allows for optional mapping of the digit 0 (zero) to the\n"
"letter O (oh), and for optional mapping of the digit 1 (one) to\n"
"either the letter I (eye) or letter L (el).  The optional argument\n"
"map01 when not None, specifies which letter the digit 1 should be\n"
"mapped to (when map01 is not None, the digit 0 is always mapped to\n"
"the letter O).  For security purposes the default is None, so that\n"
"0 and 1 are not allowed in the input.\n"
"\n"
"The result is returned as a bytes object.  A binascii.Error is raised if\n"
"the input is incorrectly padded or if there are non-alphabet\n"
"characters present in the input."
msgstr ""

#: modes/api/python3.py:41
msgid ""
"base64.b32encode(s) \n"
"Encode the bytes-like object s using Base32 and return a bytes object.\n"
"    "
msgstr ""

#: modes/api/python3.py:42
msgid ""
"base64.b64decode(s, altchars=None, validate=False) \n"
"Decode the Base64 encoded bytes-like object or ASCII string s.\n"
"\n"
"Optional altchars must be a bytes-like object or ASCII string of length 2\n"
"which specifies the alternative alphabet used instead of the '+' and '/'\n"
"characters.\n"
"\n"
"The result is returned as a bytes object.  A binascii.Error is raised if\n"
"s is incorrectly padded.\n"
"\n"
"If validate is False (the default), characters that are neither in the\n"
"normal base-64 alphabet nor the alternative alphabet are discarded prior\n"
"to the padding check.  If validate is True, these non-alphabet characters\n"
"in the input result in a binascii.Error."
msgstr ""

#: modes/api/python3.py:43
msgid ""
"base64.b64encode(s, altchars=None) \n"
"Encode the bytes-like object s using Base64 and return a bytes object.\n"
"\n"
"Optional altchars should be a byte string of length 2 which specifies an\n"
"alternative alphabet for the '+' and '/' characters.  This allows an\n"
"application to e.g. generate url or filesystem safe Base64 strings."
msgstr ""

#: modes/api/python3.py:44
msgid ""
"base64.b85decode(b) \n"
"Decode the base85-encoded bytes-like object or ASCII string b\n"
"\n"
"The result is returned as a bytes object."
msgstr ""

#: modes/api/python3.py:45
msgid ""
"base64.b85encode(b, pad=False) \n"
"Encode bytes-like object b in base85 format and return a bytes object.\n"
"\n"
"If pad is true, the input is padded with b'\\0' so its length is a multiple "
"of\n"
"4 bytes before encoding."
msgstr ""

#: modes/api/python3.py:46
msgid ""
"base64.binascii() \n"
"Conversion between binary data and ASCII"
msgstr ""

#: modes/api/python3.py:47
msgid ""
"base64.decode(input, output) \n"
"Decode a file; input and output are binary files."
msgstr ""

#: modes/api/python3.py:48
msgid ""
"base64.decodebytes(s) \n"
"Decode a bytestring of base-64 data into a bytes object."
msgstr ""

#: modes/api/python3.py:49
msgid ""
"base64.decodestring(s) \n"
"Legacy alias of decodebytes()."
msgstr ""

#: modes/api/python3.py:50
msgid ""
"base64.encode(input, output) \n"
"Encode a file; input and output are binary files."
msgstr ""

#: modes/api/python3.py:51
msgid ""
"base64.encodebytes(s) \n"
"Encode a bytestring into a bytes object containing multiple lines\n"
"of base-64 data."
msgstr ""

#: modes/api/python3.py:52
msgid ""
"base64.encodestring(s) \n"
"Legacy alias of encodebytes()."
msgstr ""

#: modes/api/python3.py:53
msgid ""
"base64.main() \n"
"Small main program"
msgstr ""

#: modes/api/python3.py:54
msgid ""
"base64.re() \n"
"Support for regular expressions (RE).\n"
"\n"
"This module provides regular expression matching operations similar to\n"
"those found in Perl.  It supports both 8-bit and Unicode strings; both\n"
"the pattern and the strings being processed can contain null bytes and\n"
"characters outside the US ASCII range.\n"
"\n"
"Regular expressions can contain both special and ordinary characters.\n"
"Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\n"
"regular expressions; they simply match themselves.  You can\n"
"concatenate ordinary characters, so last matches the string 'last'.\n"
"\n"
"The special characters are:\n"
"    \".\"      Matches any character except a newline.\n"
"    \"^\"      Matches the start of the string.\n"
"    \"$\"      Matches the end of the string or just before the newline at\n"
"             the end of the string.\n"
"    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n"
"             Greedy means that it will match as many repetitions as "
"possible.\n"
"    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n"
"    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n"
"    *?,+?,?? Non-greedy versions of the previous three special characters.\n"
"    {m,n}    Matches from m to n repetitions of the preceding RE.\n"
"    {m,n}?   Non-greedy version of the above.\n"
"    \"\\\\\"     Either escapes special characters or signals a special "
"sequence.\n"
"    []       Indicates a set of characters.\n"
"             A \"^\" as the first character indicates a complementing set.\n"
"    \"|\"      A|B, creates an RE that will match either A or B.\n"
"    (...)    Matches the RE inside the parentheses.\n"
"             The contents can be retrieved or matched later in the string.\n"
"    (?aiLmsux) Set the A, I, L, M, S, U, or X flag for the RE (see below).\n"
"    (?:...)  Non-grouping version of regular parentheses.\n"
"    (?P<name>...) The substring matched by the group is accessible by name.\n"
"    (?P=name)     Matches the text matched earlier by the group named name.\n"
"    (?#...)  A comment; ignored.\n"
"    (?=...)  Matches if ... matches next, but doesn't consume the string.\n"
"    (?!...)  Matches if ... doesn't match next.\n"
"    (?<=...) Matches if preceded by ... (must be fixed length).\n"
"    (?<!...) Matches if not preceded by ... (must be fixed length).\n"
"    (?(id/name)yes|no) Matches yes pattern if the group with id/name "
"matched,\n"
"                       the (optional) no pattern otherwise.\n"
"\n"
"The special sequences consist of \"\\\\\" and a character from the list\n"
"below.  If the ordinary character is not on the list, then the\n"
"resulting RE will match the second character.\n"
"    \\number  Matches the contents of the group of the same number.\n"
"    \\A       Matches only at the start of the string.\n"
"    \\Z       Matches only at the end of the string.\n"
"    \\b       Matches the empty string, but only at the start or end of a "
"word.\n"
"    \\B       Matches the empty string, but not at the start or end of a "
"word.\n"
"    \\d       Matches any decimal digit; equivalent to the set [0-9] in\n"
"             bytes patterns or string patterns with the ASCII flag.\n"
"             In string patterns without the ASCII flag, it will match the "
"whole\n"
"             range of Unicode digits.\n"
"    \\D       Matches any non-digit character; equivalent to [^\\d].\n"
"    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f"
"\\v] in\n"
"             bytes patterns or string patterns with the ASCII flag.\n"
"             In string patterns without the ASCII flag, it will match the "
"whole\n"
"             range of Unicode whitespace characters.\n"
"    \\S       Matches any non-whitespace character; equivalent to [^\\s].\n"
"    \\w       Matches any alphanumeric character; equivalent to [a-zA-"
"Z0-9_]\n"
"             in bytes patterns or string patterns with the ASCII flag.\n"
"             In string patterns without the ASCII flag, it will match the\n"
"             range of Unicode alphanumeric characters (letters plus digits\n"
"             plus underscore).\n"
"             With LOCALE, it will match the set [0-9_] plus characters "
"defined\n"
"             as letters for the current locale.\n"
"    \\W       Matches the complement of \\w.\n"
"    \\\\       Matches a literal backslash.\n"
"\n"
"This module exports the following functions:\n"
"    match     Match a regular expression pattern to the beginning of a "
"string.\n"
"    fullmatch Match a regular expression pattern to all of a string.\n"
"    search    Search a string for the presence of a pattern.\n"
"    sub       Substitute occurrences of a pattern found in a string.\n"
"    subn      Same as sub, but also return the number of substitutions "
"made.\n"
"    split     Split a string by the occurrences of a pattern.\n"
"    findall   Find all occurrences of a pattern in a string.\n"
"    finditer  Return an iterator yielding a match object for each match.\n"
"    compile   Compile a pattern into a RegexObject.\n"
"    purge     Clear the regular expression cache.\n"
"    escape    Backslash all non-alphanumerics in a string.\n"
"\n"
"Some of the functions in this module takes flags as optional parameters:\n"
"    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n"
"                   match the corresponding ASCII character categories\n"
"                   (rather than the whole Unicode categories, which is the\n"
"                   default).\n"
"                   For bytes patterns, this flag is the only available\n"
"                   behaviour and needn't be specified.\n"
"    I  IGNORECASE  Perform case-insensitive matching.\n"
"    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current "
"locale.\n"
"    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n"
"                   as well as the string.\n"
"                   \"$\" matches the end of lines (before a newline) as "
"well\n"
"                   as the end of the string.\n"
"    S  DOTALL      \".\" matches any character at all, including the "
"newline.\n"
"    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n"
"    U  UNICODE     For compatibility only. Ignored for string patterns (it\n"
"                   is the default), and forbidden for bytes patterns.\n"
"\n"
"This module also defines an exception 'error'."
msgstr ""

#: modes/api/python3.py:55
msgid ""
"base64.standard_b64decode(s) \n"
"Decode bytes encoded with the standard Base64 alphabet.\n"
"\n"
"Argument s is a bytes-like object or ASCII string to decode.  The result\n"
"is returned as a bytes object.  A binascii.Error is raised if the input\n"
"is incorrectly padded.  Characters that are not in the standard alphabet\n"
"are discarded prior to the padding check."
msgstr ""

#: modes/api/python3.py:56
msgid ""
"base64.standard_b64encode(s) \n"
"Encode bytes-like object s using the standard Base64 alphabet.\n"
"\n"
"The result is returned as a bytes object."
msgstr ""

#: modes/api/python3.py:57
msgid ""
"base64.struct() \n"
"Functions to convert between Python values and C structs.\n"
"Python bytes objects are used to hold the data representing the C struct\n"
"and also as format strings (explained below) to describe the layout of data\n"
"in the C struct.\n"
"\n"
"The optional first format char indicates byte order, size and alignment:\n"
"  @: native order, size & alignment (default)\n"
"  =: native order, std. size & alignment\n"
"  <: little-endian, std. size & alignment\n"
"  >: big-endian, std. size & alignment\n"
"  !: same as >\n"
"\n"
"The remaining chars indicate types of args and must match exactly;\n"
"these can be preceded by a decimal repeat count:\n"
"  x: pad byte (no data); c:char; b:signed byte; B:unsigned byte;\n"
"  ?: _Bool (requires C99; if not available, char is used instead)\n"
"  h:short; H:unsigned short; i:int; I:unsigned int;\n"
"  l:long; L:unsigned long; f:float; d:double; e:half-float.\n"
"Special cases (preceding decimal count indicates length):\n"
"  s:string (array of char); p: pascal string (with count byte).\n"
"Special cases (only available in native format):\n"
"  n:ssize_t; N:size_t;\n"
"  P:an integer type that is wide enough to hold a pointer.\n"
"Special case (not in native mode unless 'long long' in platform C):\n"
"  q:long long; Q:unsigned long long\n"
"Whitespace between formats is ignored.\n"
"\n"
"The variable struct.error is an exception raised on errors."
msgstr ""

#: modes/api/python3.py:58
msgid ""
"base64.urlsafe_b64decode(s) \n"
"Decode bytes using the URL- and filesystem-safe Base64 alphabet.\n"
"\n"
"Argument s is a bytes-like object or ASCII string to decode.  The result\n"
"is returned as a bytes object.  A binascii.Error is raised if the input\n"
"is incorrectly padded.  Characters that are not in the URL-safe base-64\n"
"alphabet, and are not a plus '+' or slash '/', are discarded prior to the\n"
"padding check.\n"
"\n"
"The alphabet uses '-' instead of '+' and '_' instead of '/'."
msgstr ""

#: modes/api/python3.py:59
msgid ""
"base64.urlsafe_b64encode(s) \n"
"Encode bytes using the URL- and filesystem-safe Base64 alphabet.\n"
"\n"
"Argument s is a bytes-like object to encode.  The result is returned as a\n"
"bytes object.  The alphabet uses '-' instead of '+' and '_' instead of\n"
"'/'."
msgstr ""

#: modes/api/python3.py:60
msgid ""
"collections.ByteString() \n"
"This unifies bytes and bytearray.\n"
"\n"
"XXX Should add all their methods."
msgstr ""

#: modes/api/python3.py:61
msgid ""
"collections.ChainMap(*maps) \n"
"A ChainMap groups multiple dicts (or other mappings) together\n"
"to create a single, updateable view.\n"
"\n"
"The underlying mappings are stored in a list.  That list is public and can\n"
"be accessed or updated using the *maps* attribute.  There is no other\n"
"state.\n"
"\n"
"Lookups search the underlying mappings successively until a key is found.\n"
"In contrast, writes, updates, and deletions only operate on the first\n"
"mapping."
msgstr ""

#: modes/api/python3.py:62
msgid ""
"collections.Counter(*args, **kwds) \n"
"Dict subclass for counting hashable items.  Sometimes called a bag\n"
"or multiset.  Elements are stored as dictionary keys and their counts\n"
"are stored as dictionary values.\n"
"\n"
">>> c = Counter('abcdeabcdabcaba')  # count elements from a string\n"
"\n"
">>> c.most_common(3)                # three most common elements\n"
"[('a', 5), ('b', 4), ('c', 3)]\n"
">>> sorted(c)                       # list all unique elements\n"
"['a', 'b', 'c', 'd', 'e']\n"
">>> ''.join(sorted(c.elements()))   # list elements with repetitions\n"
"'aaaaabbbbcccdde'\n"
">>> sum(c.values())                 # total of all counts\n"
"15\n"
"\n"
">>> c['a']                          # count of letter 'a'\n"
"5\n"
">>> for elem in 'shazam':           # update counts from an iterable\n"
"...     c[elem] += 1                # by adding 1 to each element's count\n"
">>> c['a']                          # now there are seven 'a'\n"
"7\n"
">>> del c['b']                      # remove all 'b'\n"
">>> c['b']                          # now there are zero 'b'\n"
"0\n"
"\n"
">>> d = Counter('simsalabim')       # make another counter\n"
">>> c.update(d)                     # add in the second counter\n"
">>> c['a']                          # now there are nine 'a'\n"
"9\n"
"\n"
">>> c.clear()                       # empty the counter\n"
">>> c\n"
"Counter()\n"
"\n"
"Note:  If a count is set to zero or reduced to zero, it will remain\n"
"in the counter until the entry is deleted or the counter is cleared:\n"
"\n"
">>> c = Counter('aaabbc')\n"
">>> c['b'] -= 2                     # reduce the count of 'b' by two\n"
">>> c.most_common()                 # 'b' is still in, but its count is "
"zero\n"
"[('a', 3), ('c', 1), ('b', 0)]"
msgstr ""

#: modes/api/python3.py:63
msgid ""
"collections.ItemsView(mapping) \n"
"A set is a finite, iterable container.\n"
"\n"
"This class provides concrete generic implementations of all\n"
"methods except for __contains__, __iter__ and __len__.\n"
"\n"
"To override the comparisons (presumably for speed, as the\n"
"semantics are fixed), redefine __le__ and __ge__,\n"
"then the other operations will automatically follow suit."
msgstr ""

#: modes/api/python3.py:64
msgid ""
"collections.KeysView(mapping) \n"
"A set is a finite, iterable container.\n"
"\n"
"This class provides concrete generic implementations of all\n"
"methods except for __contains__, __iter__ and __len__.\n"
"\n"
"To override the comparisons (presumably for speed, as the\n"
"semantics are fixed), redefine __le__ and __ge__,\n"
"then the other operations will automatically follow suit."
msgstr ""

#: modes/api/python3.py:65
msgid ""
"collections.MutableSequence() \n"
"All the operations on a read-only sequence.\n"
"\n"
"Concrete subclasses must override __new__ or __init__,\n"
"__getitem__, and __len__."
msgstr ""

#: modes/api/python3.py:66
msgid ""
"collections.MutableSet() \n"
"A mutable set is a finite, iterable container.\n"
"\n"
"This class provides concrete generic implementations of all\n"
"methods except for __contains__, __iter__, __len__,\n"
"add(), and discard().\n"
"\n"
"To override the comparisons (presumably for speed, as the\n"
"semantics are fixed), all you have to do is redefine __le__ and\n"
"then the other operations will automatically follow suit."
msgstr ""

#: modes/api/python3.py:67
msgid ""
"collections.OrderedDict() \n"
"Dictionary that remembers insertion order"
msgstr ""

#: modes/api/python3.py:68
msgid ""
"collections.Sequence() \n"
"All the operations on a read-only sequence.\n"
"\n"
"Concrete subclasses must override __new__ or __init__,\n"
"__getitem__, and __len__."
msgstr ""

#: modes/api/python3.py:69
msgid ""
"collections.Set() \n"
"A set is a finite, iterable container.\n"
"\n"
"This class provides concrete generic implementations of all\n"
"methods except for __contains__, __iter__ and __len__.\n"
"\n"
"To override the comparisons (presumably for speed, as the\n"
"semantics are fixed), redefine __le__ and __ge__,\n"
"then the other operations will automatically follow suit."
msgstr ""

#: modes/api/python3.py:70
msgid ""
"collections.UserList(initlist=None) \n"
"A more or less complete user-defined wrapper around list objects."
msgstr ""

#: modes/api/python3.py:71
msgid ""
"collections.UserString(seq) \n"
"All the operations on a read-only sequence.\n"
"\n"
"Concrete subclasses must override __new__ or __init__,\n"
"__getitem__, and __len__."
msgstr ""

#: modes/api/python3.py:72
msgid ""
"collections.defaultdict() \n"
"defaultdict(default_factory[, ...]) --> dict with default factory\n"
"\n"
"The default factory is called without arguments to produce\n"
"a new value when a key is not present, in __getitem__ only.\n"
"A defaultdict compares equal to a dict with the same items.\n"
"All remaining arguments are treated the same as if they were\n"
"passed to the dict constructor, including keyword arguments."
msgstr ""

#: modes/api/python3.py:73
msgid ""
"collections.deque() \n"
"deque([iterable[, maxlen]]) --> deque object\n"
"\n"
"A list-like sequence optimized for data accesses near its endpoints."
msgstr ""

#: modes/api/python3.py:74
msgid ""
"collections.namedtuple(typename, field_names, *, verbose=False, "
"rename=False, module=None) \n"
"Returns a new subclass of tuple with named fields.\n"
"\n"
">>> Point = namedtuple('Point', ['x', 'y'])\n"
">>> Point.__doc__                   # docstring for the new class\n"
"'Point(x, y)'\n"
">>> p = Point(11, y=22)             # instantiate with positional args or "
"keywords\n"
">>> p[0] + p[1]                     # indexable like a plain tuple\n"
"33\n"
">>> x, y = p                        # unpack like a regular tuple\n"
">>> x, y\n"
"(11, 22)\n"
">>> p.x + p.y                       # fields also accessible by name\n"
"33\n"
">>> d = p._asdict()                 # convert to a dictionary\n"
">>> d['x']\n"
"11\n"
">>> Point(**d)                      # convert from a dictionary\n"
"Point(x=11, y=22)\n"
">>> p._replace(x=100)               # _replace() is like str.replace() but "
"targets named fields\n"
"Point(x=100, y=22)"
msgstr ""

#: modes/api/python3.py:75
msgid ""
"csv.Dialect() \n"
"Describe a CSV dialect.\n"
"\n"
"This must be subclassed (see csv.excel).  Valid attributes are:\n"
"delimiter, quotechar, escapechar, doublequote, skipinitialspace,\n"
"lineterminator, quoting."
msgstr ""

#: modes/api/python3.py:76
msgid ""
"csv.Error() \n"
"Common base class for all non-exit exceptions."
msgstr ""

#: modes/api/python3.py:77
msgid ""
"csv.OrderedDict() \n"
"Dictionary that remembers insertion order"
msgstr ""

#: modes/api/python3.py:78
msgid ""
"csv.Sniffer() \n"
"\"Sniffs\" the format of a CSV file (i.e. delimiter, quotechar)\n"
"Returns a Dialect object."
msgstr ""

#: modes/api/python3.py:79
msgid ""
"csv.StringIO(initial_value='', newline='\\n') \n"
"Text I/O implementation using an in-memory buffer.\n"
"\n"
"The initial_value argument sets the value of object.  The newline\n"
"argument is like the one of TextIOWrapper's constructor."
msgstr ""

#: modes/api/python3.py:80
msgid ""
"csv.excel() \n"
"Describe the usual properties of Excel-generated CSV files."
msgstr ""

#: modes/api/python3.py:81
msgid ""
"csv.excel_tab() \n"
"Describe the usual properties of Excel-generated TAB-delimited files."
msgstr ""

#: modes/api/python3.py:82
msgid ""
"csv.field_size_limit() \n"
"Sets an upper limit on parsed fields.\n"
"    csv.field_size_limit([limit])\n"
"\n"
"Returns old limit. If limit is not given, no new limit is set and\n"
"the old limit is returned"
msgstr ""

#: modes/api/python3.py:83
msgid ""
"csv.get_dialect() \n"
"Return the dialect instance associated with name.\n"
"dialect = csv.get_dialect(name)"
msgstr ""

#: modes/api/python3.py:84
msgid ""
"csv.list_dialects() \n"
"Return a list of all know dialect names.\n"
"names = csv.list_dialects()"
msgstr ""

#: modes/api/python3.py:85
msgid ""
"csv.re() \n"
"Support for regular expressions (RE).\n"
"\n"
"This module provides regular expression matching operations similar to\n"
"those found in Perl.  It supports both 8-bit and Unicode strings; both\n"
"the pattern and the strings being processed can contain null bytes and\n"
"characters outside the US ASCII range.\n"
"\n"
"Regular expressions can contain both special and ordinary characters.\n"
"Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\n"
"regular expressions; they simply match themselves.  You can\n"
"concatenate ordinary characters, so last matches the string 'last'.\n"
"\n"
"The special characters are:\n"
"    \".\"      Matches any character except a newline.\n"
"    \"^\"      Matches the start of the string.\n"
"    \"$\"      Matches the end of the string or just before the newline at\n"
"             the end of the string.\n"
"    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n"
"             Greedy means that it will match as many repetitions as "
"possible.\n"
"    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n"
"    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n"
"    *?,+?,?? Non-greedy versions of the previous three special characters.\n"
"    {m,n}    Matches from m to n repetitions of the preceding RE.\n"
"    {m,n}?   Non-greedy version of the above.\n"
"    \"\\\\\"     Either escapes special characters or signals a special "
"sequence.\n"
"    []       Indicates a set of characters.\n"
"             A \"^\" as the first character indicates a complementing set.\n"
"    \"|\"      A|B, creates an RE that will match either A or B.\n"
"    (...)    Matches the RE inside the parentheses.\n"
"             The contents can be retrieved or matched later in the string.\n"
"    (?aiLmsux) Set the A, I, L, M, S, U, or X flag for the RE (see below).\n"
"    (?:...)  Non-grouping version of regular parentheses.\n"
"    (?P<name>...) The substring matched by the group is accessible by name.\n"
"    (?P=name)     Matches the text matched earlier by the group named name.\n"
"    (?#...)  A comment; ignored.\n"
"    (?=...)  Matches if ... matches next, but doesn't consume the string.\n"
"    (?!...)  Matches if ... doesn't match next.\n"
"    (?<=...) Matches if preceded by ... (must be fixed length).\n"
"    (?<!...) Matches if not preceded by ... (must be fixed length).\n"
"    (?(id/name)yes|no) Matches yes pattern if the group with id/name "
"matched,\n"
"                       the (optional) no pattern otherwise.\n"
"\n"
"The special sequences consist of \"\\\\\" and a character from the list\n"
"below.  If the ordinary character is not on the list, then the\n"
"resulting RE will match the second character.\n"
"    \\number  Matches the contents of the group of the same number.\n"
"    \\A       Matches only at the start of the string.\n"
"    \\Z       Matches only at the end of the string.\n"
"    \\b       Matches the empty string, but only at the start or end of a "
"word.\n"
"    \\B       Matches the empty string, but not at the start or end of a "
"word.\n"
"    \\d       Matches any decimal digit; equivalent to the set [0-9] in\n"
"             bytes patterns or string patterns with the ASCII flag.\n"
"             In string patterns without the ASCII flag, it will match the "
"whole\n"
"             range of Unicode digits.\n"
"    \\D       Matches any non-digit character; equivalent to [^\\d].\n"
"    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f"
"\\v] in\n"
"             bytes patterns or string patterns with the ASCII flag.\n"
"             In string patterns without the ASCII flag, it will match the "
"whole\n"
"             range of Unicode whitespace characters.\n"
"    \\S       Matches any non-whitespace character; equivalent to [^\\s].\n"
"    \\w       Matches any alphanumeric character; equivalent to [a-zA-"
"Z0-9_]\n"
"             in bytes patterns or string patterns with the ASCII flag.\n"
"             In string patterns without the ASCII flag, it will match the\n"
"             range of Unicode alphanumeric characters (letters plus digits\n"
"             plus underscore).\n"
"             With LOCALE, it will match the set [0-9_] plus characters "
"defined\n"
"             as letters for the current locale.\n"
"    \\W       Matches the complement of \\w.\n"
"    \\\\       Matches a literal backslash.\n"
"\n"
"This module exports the following functions:\n"
"    match     Match a regular expression pattern to the beginning of a "
"string.\n"
"    fullmatch Match a regular expression pattern to all of a string.\n"
"    search    Search a string for the presence of a pattern.\n"
"    sub       Substitute occurrences of a pattern found in a string.\n"
"    subn      Same as sub, but also return the number of substitutions "
"made.\n"
"    split     Split a string by the occurrences of a pattern.\n"
"    findall   Find all occurrences of a pattern in a string.\n"
"    finditer  Return an iterator yielding a match object for each match.\n"
"    compile   Compile a pattern into a RegexObject.\n"
"    purge     Clear the regular expression cache.\n"
"    escape    Backslash all non-alphanumerics in a string.\n"
"\n"
"Some of the functions in this module takes flags as optional parameters:\n"
"    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n"
"                   match the corresponding ASCII character categories\n"
"                   (rather than the whole Unicode categories, which is the\n"
"                   default).\n"
"                   For bytes patterns, this flag is the only available\n"
"                   behaviour and needn't be specified.\n"
"    I  IGNORECASE  Perform case-insensitive matching.\n"
"    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current "
"locale.\n"
"    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n"
"                   as well as the string.\n"
"                   \"$\" matches the end of lines (before a newline) as "
"well\n"
"                   as the end of the string.\n"
"    S  DOTALL      \".\" matches any character at all, including the "
"newline.\n"
"    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n"
"    U  UNICODE     For compatibility only. Ignored for string patterns (it\n"
"                   is the default), and forbidden for bytes patterns.\n"
"\n"
"This module also defines an exception 'error'."
msgstr ""

#: modes/api/python3.py:86
msgid ""
"csv.reader() \n"
"csv_reader = reader(iterable [, dialect='excel']\n"
"                        [optional keyword args])\n"
"    for row in csv_reader:\n"
"        process(row)\n"
"\n"
"The \"iterable\" argument can be any object that returns a line\n"
"of input for each iteration, such as a file object or a list.  The\n"
"optional \"dialect\" parameter is discussed below.  The function\n"
"also accepts optional keyword arguments which override settings\n"
"provided by the dialect.\n"
"\n"
"The returned object is an iterator.  Each iteration returns a row\n"
"of the CSV file (which can span multiple input lines)."
msgstr ""

#: modes/api/python3.py:87
msgid ""
"csv.register_dialect() \n"
"Create a mapping from a string name to a dialect class.\n"
"dialect = csv.register_dialect(name[, dialect[, **fmtparams]])"
msgstr ""

#: modes/api/python3.py:88
msgid ""
"csv.unix_dialect() \n"
"Describe the usual properties of Unix-generated CSV files."
msgstr ""

#: modes/api/python3.py:89
msgid ""
"csv.unregister_dialect() \n"
"Delete the name/dialect mapping associated with a string name.\n"
"csv.unregister_dialect(name)"
msgstr ""

#: modes/api/python3.py:90
msgid ""
"csv.writer() \n"
"csv_writer = csv.writer(fileobj [, dialect='excel']\n"
"                            [optional keyword args])\n"
"    for row in sequence:\n"
"        csv_writer.writerow(row)\n"
"\n"
"    [or]\n"
"\n"
"    csv_writer = csv.writer(fileobj [, dialect='excel']\n"
"                            [optional keyword args])\n"
"    csv_writer.writerows(rows)\n"
"\n"
"The \"fileobj\" argument can be any object that supports the file API."
msgstr ""

#: modes/api/python3.py:91 modes/api/python3.py:92
msgid ""
"datetime.date() \n"
"date(year, month, day) --> date object"
msgstr ""

#: modes/api/python3.py:93 modes/api/python3.py:94
msgid ""
"datetime.datetime() \n"
"datetime(year, month, day[, hour[, minute[, second[, microsecond[,"
"tzinfo]]]]])\n"
"\n"
"The year, month and day arguments are required. tzinfo may be None, or an\n"
"instance of a tzinfo subclass. The remaining arguments may be ints."
msgstr ""

#: modes/api/python3.py:95 modes/api/python3.py:96
msgid ""
"datetime.time() \n"
"time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object\n"
"\n"
"All arguments are optional. tzinfo may be None, or an instance of\n"
"a tzinfo subclass. The remaining arguments may be ints."
msgstr ""

#: modes/api/python3.py:97 modes/api/python3.py:98
msgid ""
"datetime.timedelta() \n"
"Difference between two datetime values."
msgstr ""

#: modes/api/python3.py:99 modes/api/python3.py:100
msgid ""
"datetime.timezone() \n"
"Fixed offset from UTC implementation of tzinfo."
msgstr ""

#: modes/api/python3.py:101 modes/api/python3.py:102
msgid ""
"datetime.tzinfo() \n"
"Abstract base class for time zone info objects."
msgstr ""

#: modes/api/python3.py:103
msgid ""
"functools.WeakKeyDictionary(dict=None) \n"
"Mapping class that references keys weakly.\n"
"\n"
"Entries in the dictionary will be discarded when there is no\n"
"longer a strong reference to the key. This can be used to\n"
"associate additional data with an object owned by other parts of\n"
"an application without adding attributes to those objects. This\n"
"can be especially useful with objects that override attribute\n"
"accesses."
msgstr ""

#: modes/api/python3.py:104
msgid ""
"functools.cmp_to_key() \n"
"Convert a cmp= function into a key= function."
msgstr ""

#: modes/api/python3.py:105
msgid ""
"functools.get_cache_token() \n"
"Returns the current ABC cache token.\n"
"\n"
"The token is an opaque object (supporting equality testing) identifying the\n"
"current version of the ABC cache for virtual subclasses. The token changes\n"
"with every call to ``register()`` on any ABC."
msgstr ""

#: modes/api/python3.py:106
msgid ""
"functools.lru_cache(maxsize=128, typed=False) \n"
"Least-recently-used cache decorator.\n"
"\n"
"If *maxsize* is set to None, the LRU features are disabled and the cache\n"
"can grow without bound.\n"
"\n"
"If *typed* is True, arguments of different types will be cached separately.\n"
"For example, f(3.0) and f(3) will be treated as distinct calls with\n"
"distinct results.\n"
"\n"
"Arguments to the cached function must be hashable.\n"
"\n"
"View the cache statistics named tuple (hits, misses, maxsize, currsize)\n"
"with f.cache_info().  Clear the cache and statistics with f.cache_clear().\n"
"Access the underlying function with f.__wrapped__.\n"
"\n"
"See:  http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used"
msgstr ""

#: modes/api/python3.py:107
msgid ""
"functools.namedtuple(typename, field_names, *, verbose=False, rename=False, "
"module=None) \n"
"Returns a new subclass of tuple with named fields.\n"
"\n"
">>> Point = namedtuple('Point', ['x', 'y'])\n"
">>> Point.__doc__                   # docstring for the new class\n"
"'Point(x, y)'\n"
">>> p = Point(11, y=22)             # instantiate with positional args or "
"keywords\n"
">>> p[0] + p[1]                     # indexable like a plain tuple\n"
"33\n"
">>> x, y = p                        # unpack like a regular tuple\n"
">>> x, y\n"
"(11, 22)\n"
">>> p.x + p.y                       # fields also accessible by name\n"
"33\n"
">>> d = p._asdict()                 # convert to a dictionary\n"
">>> d['x']\n"
"11\n"
">>> Point(**d)                      # convert from a dictionary\n"
"Point(x=11, y=22)\n"
">>> p._replace(x=100)               # _replace() is like str.replace() but "
"targets named fields\n"
"Point(x=100, y=22)"
msgstr ""

#: modes/api/python3.py:108
msgid ""
"functools.partial() \n"
"partial(func, *args, **keywords) - new function with partial application\n"
"of the given arguments and keywords."
msgstr ""

#: modes/api/python3.py:109
msgid ""
"functools.partialmethod(func, *args, **keywords) \n"
"Method descriptor with partial application of the given arguments\n"
"and keywords.\n"
"\n"
"Supports wrapping existing descriptors and handles non-descriptor\n"
"callables as instance methods."
msgstr ""

#: modes/api/python3.py:110
msgid ""
"functools.recursive_repr(fillvalue='...') \n"
"Decorator to make a repr function return fillvalue for a recursive call"
msgstr ""

#: modes/api/python3.py:111
msgid ""
"functools.reduce() \n"
"reduce(function, sequence[, initial]) -> value\n"
"\n"
"Apply a function of two arguments cumulatively to the items of a sequence,\n"
"from left to right, so as to reduce the sequence to a single value.\n"
"For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates\n"
"((((1+2)+3)+4)+5).  If initial is present, it is placed before the items\n"
"of the sequence in the calculation, and serves as a default when the\n"
"sequence is empty."
msgstr ""

#: modes/api/python3.py:112
msgid ""
"functools.singledispatch(func) \n"
"Single-dispatch generic function decorator.\n"
"\n"
"Transforms a function into a generic function, which can have different\n"
"behaviours depending upon the type of its first argument. The decorated\n"
"function acts as the default implementation, and additional\n"
"implementations can be registered using the register() attribute of the\n"
"generic function."
msgstr ""

#: modes/api/python3.py:113
msgid ""
"functools.total_ordering(cls) \n"
"Class decorator that fills in missing ordering methods"
msgstr ""

#: modes/api/python3.py:114
msgid ""
"functools.update_wrapper(wrapper, wrapped, assigned='__module__', "
"'__name__', '__qualname__', '__doc__', '__annotations__', "
"updated='__dict__',) \n"
"Update a wrapper function to look like the wrapped function\n"
"\n"
"wrapper is the function to be updated\n"
"wrapped is the original function\n"
"assigned is a tuple naming the attributes assigned directly\n"
"from the wrapped function to the wrapper function (defaults to\n"
"functools.WRAPPER_ASSIGNMENTS)\n"
"updated is a tuple naming the attributes of the wrapper that\n"
"are updated with the corresponding attribute from the wrapped\n"
"function (defaults to functools.WRAPPER_UPDATES)"
msgstr ""

#: modes/api/python3.py:115
msgid ""
"functools.wraps(wrapped, assigned='__module__', '__name__', '__qualname__', "
"'__doc__', '__annotations__', updated='__dict__',) \n"
"Decorator factory to apply update_wrapper() to a wrapper function\n"
"\n"
"Returns a decorator that invokes update_wrapper() with the decorated\n"
"function as the wrapper argument and the arguments to wraps() as the\n"
"remaining arguments. Default arguments are as for update_wrapper().\n"
"This is a convenience function to simplify applying partial() to\n"
"update_wrapper()."
msgstr ""

#: modes/api/python3.py:116
msgid ""
"hashlib.__hash_new(name, data=b'', **kwargs) \n"
"new(name, data=b'') - Return a new hashing object using the named "
"algorithm;\n"
"optionally initialized with data (which must be bytes)."
msgstr ""

#: modes/api/python3.py:117
msgid ""
"hashlib.blake2b() \n"
"Return a new BLAKE2b hash object."
msgstr ""

#: modes/api/python3.py:118
msgid ""
"hashlib.blake2s() \n"
"Return a new BLAKE2s hash object."
msgstr ""

#: modes/api/python3.py:119
msgid ""
"hashlib.openssl_md5() \n"
"Returns a md5 hash object; optionally initialized with a string"
msgstr ""

#: modes/api/python3.py:120
msgid ""
"hashlib.openssl_sha1() \n"
"Returns a sha1 hash object; optionally initialized with a string"
msgstr ""

#: modes/api/python3.py:121
msgid ""
"hashlib.openssl_sha224() \n"
"Returns a sha224 hash object; optionally initialized with a string"
msgstr ""

#: modes/api/python3.py:122
msgid ""
"hashlib.openssl_sha256() \n"
"Returns a sha256 hash object; optionally initialized with a string"
msgstr ""

#: modes/api/python3.py:123
msgid ""
"hashlib.openssl_sha384() \n"
"Returns a sha384 hash object; optionally initialized with a string"
msgstr ""

#: modes/api/python3.py:124
msgid ""
"hashlib.openssl_sha512() \n"
"Returns a sha512 hash object; optionally initialized with a string"
msgstr ""

#: modes/api/python3.py:125
msgid ""
"hashlib.pbkdf2_hmac() \n"
"pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None) -> key\n"
"\n"
"Password based key derivation function 2 (PKCS #5 v2.0) with HMAC as\n"
"pseudorandom function."
msgstr ""

#: modes/api/python3.py:126
msgid ""
"hashlib.sha3_224(string=None) \n"
"Return a new SHA3 hash object with a hashbit length of 28 bytes."
msgstr ""

#: modes/api/python3.py:127
msgid ""
"hashlib.sha3_256() \n"
"sha3_256([string]) -> SHA3 object\n"
"\n"
"Return a new SHA3 hash object with a hashbit length of 32 bytes."
msgstr ""

#: modes/api/python3.py:128
msgid ""
"hashlib.sha3_384() \n"
"sha3_384([string]) -> SHA3 object\n"
"\n"
"Return a new SHA3 hash object with a hashbit length of 48 bytes."
msgstr ""

#: modes/api/python3.py:129
msgid ""
"hashlib.sha3_512() \n"
"sha3_512([string]) -> SHA3 object\n"
"\n"
"Return a new SHA3 hash object with a hashbit length of 64 bytes."
msgstr ""

#: modes/api/python3.py:130
msgid ""
"hashlib.shake_128() \n"
"shake_128([string]) -> SHAKE object\n"
"\n"
"Return a new SHAKE hash object."
msgstr ""

#: modes/api/python3.py:131
msgid ""
"hashlib.shake_256() \n"
"shake_256([string]) -> SHAKE object\n"
"\n"
"Return a new SHAKE hash object."
msgstr ""

#: modes/api/python3.py:132
msgid ""
"itertools.accumulate() \n"
"accumulate(iterable[, func]) --> accumulate object\n"
"\n"
"Return series of accumulated sums (or other binary function results)."
msgstr ""

#: modes/api/python3.py:133
msgid ""
"itertools.chain() \n"
"chain(*iterables) --> chain object\n"
"\n"
"Return a chain object whose .__next__() method returns elements from the\n"
"first iterable until it is exhausted, then elements from the next\n"
"iterable, until all of the iterables are exhausted."
msgstr ""

#: modes/api/python3.py:134
msgid ""
"itertools.combinations() \n"
"combinations(iterable, r) --> combinations object\n"
"\n"
"Return successive r-length combinations of elements in the iterable.\n"
"\n"
"combinations(range(4), 3) --> (0,1,2), (0,1,3), (0,2,3), (1,2,3)"
msgstr ""

#: modes/api/python3.py:135
msgid ""
"itertools.combinations_with_replacement() \n"
"combinations_with_replacement(iterable, r) --> combinations_with_replacement "
"object\n"
"\n"
"Return successive r-length combinations of elements in the iterable\n"
"allowing individual elements to have successive repeats.\n"
"combinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC"
msgstr ""

#: modes/api/python3.py:136
msgid ""
"itertools.compress() \n"
"compress(data, selectors) --> iterator over selected data\n"
"\n"
"Return data elements corresponding to true selector elements.\n"
"Forms a shorter iterator from selected data elements using the\n"
"selectors to choose the data elements."
msgstr ""

#: modes/api/python3.py:137
msgid ""
"itertools.count() \n"
"count(start=0, step=1) --> count object\n"
"\n"
"Return a count object whose .__next__() method returns consecutive values.\n"
"Equivalent to:\n"
"\n"
"    def count(firstval=0, step=1):\n"
"        x = firstval\n"
"        while 1:\n"
"            yield x\n"
"            x += step"
msgstr ""

#: modes/api/python3.py:138
msgid ""
"itertools.cycle() \n"
"cycle(iterable) --> cycle object\n"
"\n"
"Return elements from the iterable until it is exhausted.\n"
"Then repeat the sequence indefinitely."
msgstr ""

#: modes/api/python3.py:139
msgid ""
"itertools.dropwhile() \n"
"dropwhile(predicate, iterable) --> dropwhile object\n"
"\n"
"Drop items from the iterable while predicate(item) is true.\n"
"Afterwards, return every element until the iterable is exhausted."
msgstr ""

#: modes/api/python3.py:140
msgid ""
"itertools.filterfalse() \n"
"filterfalse(function or None, sequence) --> filterfalse object\n"
"\n"
"Return those items of sequence for which function(item) is false.\n"
"If function is None, return the items that are false."
msgstr ""

#: modes/api/python3.py:141
msgid ""
"itertools.groupby() \n"
"groupby(iterable[, keyfunc]) -> create an iterator which returns\n"
"(key, sub-iterator) grouped by each value of key(value)."
msgstr ""

#: modes/api/python3.py:142
msgid ""
"itertools.islice() \n"
"islice(iterable, stop) --> islice object\n"
"islice(iterable, start, stop[, step]) --> islice object\n"
"\n"
"Return an iterator whose next() method returns selected values from an\n"
"iterable.  If start is specified, will skip all preceding elements;\n"
"otherwise, start defaults to zero.  Step defaults to one.  If\n"
"specified as another value, step determines how many values are \n"
"skipped between successive calls.  Works like a slice() on a list\n"
"but returns an iterator."
msgstr ""

#: modes/api/python3.py:143
msgid ""
"itertools.permutations() \n"
"permutations(iterable[, r]) --> permutations object\n"
"\n"
"Return successive r-length permutations of elements in the iterable.\n"
"\n"
"permutations(range(3), 2) --> (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)"
msgstr ""

#: modes/api/python3.py:144
msgid ""
"itertools.product() \n"
"product(*iterables, repeat=1) --> product object\n"
"\n"
"Cartesian product of input iterables.  Equivalent to nested for-loops.\n"
"\n"
"For example, product(A, B) returns the same as:  ((x,y) for x in A for y in "
"B).\n"
"The leftmost iterators are in the outermost for-loop, so the output tuples\n"
"cycle in a manner similar to an odometer (with the rightmost element "
"changing\n"
"on every iteration).\n"
"\n"
"To compute the product of an iterable with itself, specify the number\n"
"of repetitions with the optional repeat keyword argument. For example,\n"
"product(A, repeat=4) means the same as product(A, A, A, A).\n"
"\n"
"product('ab', range(3)) --> ('a',0) ('a',1) ('a',2) ('b',0) ('b',1) ('b',2)\n"
"product((0,1), (0,1), (0,1)) --> (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) ..."
msgstr ""

#: modes/api/python3.py:145
msgid ""
"itertools.repeat() \n"
"repeat(object [,times]) -> create an iterator which returns the object\n"
"for the specified number of times.  If not specified, returns the object\n"
"endlessly."
msgstr ""

#: modes/api/python3.py:146
msgid ""
"itertools.starmap() \n"
"starmap(function, sequence) --> starmap object\n"
"\n"
"Return an iterator whose values are returned from the function evaluated\n"
"with an argument tuple taken from the given sequence."
msgstr ""

#: modes/api/python3.py:147
msgid ""
"itertools.takewhile() \n"
"takewhile(predicate, iterable) --> takewhile object\n"
"\n"
"Return successive entries from an iterable as long as the \n"
"predicate evaluates to true for each entry."
msgstr ""

#: modes/api/python3.py:148
msgid ""
"itertools.tee() \n"
"tee(iterable, n=2) --> tuple of n independent iterators."
msgstr ""

#: modes/api/python3.py:149
msgid ""
"itertools.zip_longest() \n"
"zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> zip_longest object\n"
"\n"
"Return a zip_longest object whose .__next__() method returns a tuple where\n"
"the i-th element comes from the i-th iterable argument.  The .__next__()\n"
"method continues until the longest iterable in the argument sequence\n"
"is exhausted and then it raises StopIteration.  When the shorter iterables\n"
"are exhausted, the fillvalue is substituted in their place.  The fillvalue\n"
"defaults to None or can be specified by a keyword argument."
msgstr ""

#: modes/api/python3.py:150
msgid ""
"json.JSONDecodeError(msg, doc, pos) \n"
"Subclass of ValueError with the following additional properties:\n"
"\n"
"msg: The unformatted error message\n"
"doc: The JSON document being parsed\n"
"pos: The start index of doc where parsing failed\n"
"lineno: The line corresponding to pos\n"
"colno: The column corresponding to pos"
msgstr ""

#: modes/api/python3.py:151
msgid ""
"json.JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None, "
"parse_constant=None, strict=True, object_pairs_hook=None) \n"
"Simple JSON <http://json.org> decoder\n"
"\n"
"Performs the following translations in decoding by default:\n"
"\n"
"+---------------+-------------------+\n"
"| JSON          | Python            |\n"
"+===============+===================+\n"
"| object        | dict              |\n"
"+---------------+-------------------+\n"
"| array         | list              |\n"
"+---------------+-------------------+\n"
"| string        | str               |\n"
"+---------------+-------------------+\n"
"| number (int)  | int               |\n"
"+---------------+-------------------+\n"
"| number (real) | float             |\n"
"+---------------+-------------------+\n"
"| true          | True              |\n"
"+---------------+-------------------+\n"
"| false         | False             |\n"
"+---------------+-------------------+\n"
"| null          | None              |\n"
"+---------------+-------------------+\n"
"\n"
"It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as\n"
"their corresponding ``float`` values, which is outside the JSON spec."
msgstr ""

#: modes/api/python3.py:152
msgid ""
"json.JSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, "
"allow_nan=True, sort_keys=False, indent=None, separators=None, "
"default=None) \n"
"Extensible JSON <http://json.org> encoder for Python data structures.\n"
"\n"
"Supports the following objects and types by default:\n"
"\n"
"+-------------------+---------------+\n"
"| Python            | JSON          |\n"
"+===================+===============+\n"
"| dict              | object        |\n"
"+-------------------+---------------+\n"
"| list, tuple       | array         |\n"
"+-------------------+---------------+\n"
"| str               | string        |\n"
"+-------------------+---------------+\n"
"| int, float        | number        |\n"
"+-------------------+---------------+\n"
"| True              | true          |\n"
"+-------------------+---------------+\n"
"| False             | false         |\n"
"+-------------------+---------------+\n"
"| None              | null          |\n"
"+-------------------+---------------+\n"
"\n"
"To extend this to recognize other objects, subclass and implement a\n"
"``.default()`` method with another method that returns a serializable\n"
"object for ``o`` if possible, otherwise it should call the superclass\n"
"implementation (to raise ``TypeError``)."
msgstr ""

#: modes/api/python3.py:153
msgid ""
"json.codecs() \n"
"codecs -- Python Codec Registry, API and helpers.\n"
"\n"
"\n"
"Written by Marc-Andre Lemburg (mal@lemburg.com).\n"
"\n"
"(c) Copyright CNRI, All Rights Reserved. NO WARRANTY."
msgstr ""

#: modes/api/python3.py:154
msgid ""
"json.dump(obj, fp, *, skipkeys=False, ensure_ascii=True, "
"check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, "
"default=None, sort_keys=False, **kw) \n"
"Serialize ``obj`` as a JSON formatted stream to ``fp`` (a\n"
"``.write()``-supporting file-like object).\n"
"\n"
"If ``skipkeys`` is true then ``dict`` keys that are not basic types\n"
"(``str``, ``int``, ``float``, ``bool``, ``None``) will be skipped\n"
"instead of raising a ``TypeError``.\n"
"\n"
"If ``ensure_ascii`` is false, then the strings written to ``fp`` can\n"
"contain non-ASCII characters if they appear in strings contained in\n"
"``obj``. Otherwise, all such characters are escaped in JSON strings.\n"
"\n"
"If ``check_circular`` is false, then the circular reference check\n"
"for container types will be skipped and a circular reference will\n"
"result in an ``OverflowError`` (or worse).\n"
"\n"
"If ``allow_nan`` is false, then it will be a ``ValueError`` to\n"
"serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``)\n"
"in strict compliance of the JSON specification, instead of using the\n"
"JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).\n"
"\n"
"If ``indent`` is a non-negative integer, then JSON array elements and\n"
"object members will be pretty-printed with that indent level. An indent\n"
"level of 0 will only insert newlines. ``None`` is the most compact\n"
"representation.\n"
"\n"
"If specified, ``separators`` should be an ``(item_separator, "
"key_separator)``\n"
"tuple.  The default is ``(', ', ': ')`` if *indent* is ``None`` and\n"
"``(',', ': ')`` otherwise.  To get the most compact JSON representation,\n"
"you should specify ``(',', ':')`` to eliminate whitespace.\n"
"\n"
"``default(obj)`` is a function that should return a serializable version\n"
"of obj or raise TypeError. The default simply raises TypeError.\n"
"\n"
"If *sort_keys* is true (default: ``False``), then the output of\n"
"dictionaries will be sorted by key.\n"
"\n"
"To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the\n"
"``.default()`` method to serialize additional types), specify it with\n"
"the ``cls`` kwarg; otherwise ``JSONEncoder`` is used."
msgstr ""

#: modes/api/python3.py:155
msgid ""
"json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, "
"allow_nan=True, cls=None, indent=None, separators=None, default=None, "
"sort_keys=False, **kw) \n"
"Serialize ``obj`` to a JSON formatted ``str``.\n"
"\n"
"If ``skipkeys`` is true then ``dict`` keys that are not basic types\n"
"(``str``, ``int``, ``float``, ``bool``, ``None``) will be skipped\n"
"instead of raising a ``TypeError``.\n"
"\n"
"If ``ensure_ascii`` is false, then the return value can contain non-ASCII\n"
"characters if they appear in strings contained in ``obj``. Otherwise, all\n"
"such characters are escaped in JSON strings.\n"
"\n"
"If ``check_circular`` is false, then the circular reference check\n"
"for container types will be skipped and a circular reference will\n"
"result in an ``OverflowError`` (or worse).\n"
"\n"
"If ``allow_nan`` is false, then it will be a ``ValueError`` to\n"
"serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``) in\n"
"strict compliance of the JSON specification, instead of using the\n"
"JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).\n"
"\n"
"If ``indent`` is a non-negative integer, then JSON array elements and\n"
"object members will be pretty-printed with that indent level. An indent\n"
"level of 0 will only insert newlines. ``None`` is the most compact\n"
"representation.\n"
"\n"
"If specified, ``separators`` should be an ``(item_separator, "
"key_separator)``\n"
"tuple.  The default is ``(', ', ': ')`` if *indent* is ``None`` and\n"
"``(',', ': ')`` otherwise.  To get the most compact JSON representation,\n"
"you should specify ``(',', ':')`` to eliminate whitespace.\n"
"\n"
"``default(obj)`` is a function that should return a serializable version\n"
"of obj or raise TypeError. The default simply raises TypeError.\n"
"\n"
"If *sort_keys* is true (default: ``False``), then the output of\n"
"dictionaries will be sorted by key.\n"
"\n"
"To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the\n"
"``.default()`` method to serialize additional types), specify it with\n"
"the ``cls`` kwarg; otherwise ``JSONEncoder`` is used."
msgstr ""

#: modes/api/python3.py:156
msgid ""
"json.json.decoder() \n"
"Implementation of JSONDecoder"
msgstr ""

#: modes/api/python3.py:157
msgid ""
"json.json.encoder() \n"
"Implementation of JSONEncoder"
msgstr ""

#: modes/api/python3.py:158
msgid ""
"json.json.scanner() \n"
"JSON token scanner"
msgstr ""

#: modes/api/python3.py:159
msgid ""
"json.load(fp, *, cls=None, object_hook=None, parse_float=None, "
"parse_int=None, parse_constant=None, object_pairs_hook=None, **kw) \n"
"Deserialize ``fp`` (a ``.read()``-supporting file-like object containing\n"
"a JSON document) to a Python object.\n"
"\n"
"``object_hook`` is an optional function that will be called with the\n"
"result of any object literal decode (a ``dict``). The return value of\n"
"``object_hook`` will be used instead of the ``dict``. This feature\n"
"can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n"
"\n"
"``object_pairs_hook`` is an optional function that will be called with the\n"
"result of any object literal decoded with an ordered list of pairs.  The\n"
"return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n"
"This feature can be used to implement custom decoders that rely on the\n"
"order that the key and value pairs are decoded (for example,\n"
"collections.OrderedDict will remember the order of insertion). If\n"
"``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n"
"\n"
"To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n"
"kwarg; otherwise ``JSONDecoder`` is used."
msgstr ""

#: modes/api/python3.py:160
msgid ""
"json.loads(s, *, encoding=None, cls=None, object_hook=None, "
"parse_float=None, parse_int=None, parse_constant=None, "
"object_pairs_hook=None, **kw) \n"
"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n"
"containing a JSON document) to a Python object.\n"
"\n"
"``object_hook`` is an optional function that will be called with the\n"
"result of any object literal decode (a ``dict``). The return value of\n"
"``object_hook`` will be used instead of the ``dict``. This feature\n"
"can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n"
"\n"
"``object_pairs_hook`` is an optional function that will be called with the\n"
"result of any object literal decoded with an ordered list of pairs.  The\n"
"return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n"
"This feature can be used to implement custom decoders that rely on the\n"
"order that the key and value pairs are decoded (for example,\n"
"collections.OrderedDict will remember the order of insertion). If\n"
"``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n"
"\n"
"``parse_float``, if specified, will be called with the string\n"
"of every JSON float to be decoded. By default this is equivalent to\n"
"float(num_str). This can be used to use another datatype or parser\n"
"for JSON floats (e.g. decimal.Decimal).\n"
"\n"
"``parse_int``, if specified, will be called with the string\n"
"of every JSON int to be decoded. By default this is equivalent to\n"
"int(num_str). This can be used to use another datatype or parser\n"
"for JSON integers (e.g. float).\n"
"\n"
"``parse_constant``, if specified, will be called with one of the\n"
"following strings: -Infinity, Infinity, NaN.\n"
"This can be used to raise an exception if invalid JSON numbers\n"
"are encountered.\n"
"\n"
"To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n"
"kwarg; otherwise ``JSONDecoder`` is used.\n"
"\n"
"The ``encoding`` argument is ignored and deprecated."
msgstr ""

#: modes/api/python3.py:161
msgid ""
"os.OSError() \n"
"Base class for I/O related errors."
msgstr ""

#: modes/api/python3.py:162
msgid ""
"os.PathLike() \n"
"Abstract base class for implementing the file system path protocol."
msgstr ""

#: modes/api/python3.py:163
msgid ""
"os.WCOREDUMP(status, /) \n"
"Return True if the process returning status was dumped to a core file."
msgstr ""

#: modes/api/python3.py:164
msgid ""
"os.WEXITSTATUS(status) \n"
"Return the process return code from status."
msgstr ""

#: modes/api/python3.py:165
msgid ""
"os.WIFCONTINUED(status) \n"
"Return True if a particular process was continued from a job control stop.\n"
"\n"
"Return True if the process returning status was continued from a\n"
"job control stop."
msgstr ""

#: modes/api/python3.py:166
msgid ""
"os.WIFEXITED(status) \n"
"Return True if the process returning status exited via the exit() system "
"call."
msgstr ""

#: modes/api/python3.py:167
msgid ""
"os.WIFSIGNALED(status) \n"
"Return True if the process returning status was terminated by a signal."
msgstr ""

#: modes/api/python3.py:168
msgid ""
"os.WIFSTOPPED(status) \n"
"Return True if the process returning status was stopped."
msgstr ""

#: modes/api/python3.py:169
msgid ""
"os.WSTOPSIG(status) \n"
"Return the signal that stopped the process that provided the status value."
msgstr ""

#: modes/api/python3.py:170
msgid ""
"os.WTERMSIG(status) \n"
"Return the signal that terminated the process that provided the status value."
msgstr ""

#: modes/api/python3.py:171
msgid ""
"os.abc() \n"
"Abstract Base Classes (ABCs) according to PEP 3119."
msgstr ""

#: modes/api/python3.py:172
msgid ""
"os.abort() \n"
"Abort the interpreter immediately.\n"
"\n"
"This function 'dumps core' or otherwise fails in the hardest way possible\n"
"on the hosting operating system.  This function never returns."
msgstr ""

#: modes/api/python3.py:173
msgid ""
"os.access(path, mode, *, dir_fd=None, effective_ids=False, "
"follow_symlinks=True) \n"
"Use the real uid/gid to test for access to a path.\n"
"\n"
"  path\n"
"    Path to be tested; can be string or bytes\n"
"  mode\n"
"    Operating-system mode bitfield.  Can be F_OK to test existence,\n"
"    or the inclusive-OR of R_OK, W_OK, and X_OK.\n"
"  dir_fd\n"
"    If not None, it should be a file descriptor open to a directory,\n"
"    and path should be relative; path will then be relative to that\n"
"    directory.\n"
"  effective_ids\n"
"    If True, access will use the effective uid/gid instead of\n"
"    the real uid/gid.\n"
"  follow_symlinks\n"
"    If False, and the last element of the path is a symbolic link,\n"
"    access will examine the symbolic link itself instead of the file\n"
"    the link points to.\n"
"\n"
"dir_fd, effective_ids, and follow_symlinks may not be implemented\n"
"  on your platform.  If they are unavailable, using them will raise a\n"
"  NotImplementedError.\n"
"\n"
"Note that most operations will use the effective uid/gid, therefore this\n"
"  routine can be used in a suid/sgid environment to test if the invoking "
"user\n"
"  has the specified access to the path."
msgstr ""

#: modes/api/python3.py:174
msgid ""
"os.chdir(path) \n"
"Change the current working directory to the specified path.\n"
"\n"
"path may always be specified as a string.\n"
"On some platforms, path may also be specified as an open file descriptor.\n"
"  If this functionality is unavailable, using it raises an exception."
msgstr ""

#: modes/api/python3.py:175
msgid ""
"os.chmod(path, mode, *, dir_fd=None, follow_symlinks=True) \n"
"Change the access permissions of a file.\n"
"\n"
"  path\n"
"    Path to be modified.  May always be specified as a str or bytes.\n"
"    On some platforms, path may also be specified as an open file "
"descriptor.\n"
"    If this functionality is unavailable, using it raises an exception.\n"
"  mode\n"
"    Operating-system mode bitfield.\n"
"  dir_fd\n"
"    If not None, it should be a file descriptor open to a directory,\n"
"    and path should be relative; path will then be relative to that\n"
"    directory.\n"
"  follow_symlinks\n"
"    If False, and the last element of the path is a symbolic link,\n"
"    chmod will modify the symbolic link itself instead of the file\n"
"    the link points to.\n"
"\n"
"It is an error to use dir_fd or follow_symlinks when specifying path as\n"
"  an open file descriptor.\n"
"dir_fd and follow_symlinks may not be implemented on your platform.\n"
"  If they are unavailable, using them will raise a NotImplementedError."
msgstr ""

#: modes/api/python3.py:176
msgid ""
"os.chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True) \n"
"Change the owner and group id of path to the numeric uid and gid.\\\n"
"\n"
"  path\n"
"    Path to be examined; can be string, bytes, or open-file-descriptor int.\n"
"  dir_fd\n"
"    If not None, it should be a file descriptor open to a directory,\n"
"    and path should be relative; path will then be relative to that\n"
"    directory.\n"
"  follow_symlinks\n"
"    If False, and the last element of the path is a symbolic link,\n"
"    stat will examine the symbolic link itself instead of the file\n"
"    the link points to.\n"
"\n"
"path may always be specified as a string.\n"
"On some platforms, path may also be specified as an open file descriptor.\n"
"  If this functionality is unavailable, using it raises an exception.\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"If follow_symlinks is False, and the last element of the path is a symbolic\n"
"  link, chown will modify the symbolic link itself instead of the file the\n"
"  link points to.\n"
"It is an error to use dir_fd or follow_symlinks when specifying path as\n"
"  an open file descriptor.\n"
"dir_fd and follow_symlinks may not be implemented on your platform.\n"
"  If they are unavailable, using them will raise a NotImplementedError."
msgstr ""

#: modes/api/python3.py:177
msgid ""
"os.chroot(path) \n"
"Change root directory to path."
msgstr ""

#: modes/api/python3.py:178
msgid ""
"os.close(fd) \n"
"Close a file descriptor."
msgstr ""

#: modes/api/python3.py:179
msgid ""
"os.closerange(fd_low, fd_high, /) \n"
"Closes all file descriptors in [fd_low, fd_high), ignoring errors."
msgstr ""

#: modes/api/python3.py:180
msgid ""
"os.confstr(name, /) \n"
"Return a string-valued system configuration variable."
msgstr ""

#: modes/api/python3.py:181
msgid ""
"os.cpu_count() \n"
"Return the number of CPUs in the system; return None if indeterminable.\n"
"\n"
"This number is not equivalent to the number of CPUs the current process can\n"
"use.  The number of usable CPUs can be obtained with\n"
"``len(os.sched_getaffinity(0))``"
msgstr ""

#: modes/api/python3.py:182
msgid ""
"os.ctermid() \n"
"Return the name of the controlling terminal for this process."
msgstr ""

#: modes/api/python3.py:183
msgid ""
"os.device_encoding(fd) \n"
"Return a string describing the encoding of a terminal's file descriptor.\n"
"\n"
"The file descriptor must be attached to a terminal.\n"
"If the device is not a terminal, return None."
msgstr ""

#: modes/api/python3.py:184
msgid ""
"os.dup(fd, /) \n"
"Return a duplicate of a file descriptor."
msgstr ""

#: modes/api/python3.py:185
msgid ""
"os.dup2(fd, fd2, inheritable=True) \n"
"Duplicate file descriptor."
msgstr ""

#: modes/api/python3.py:186
msgid ""
"os.errno() \n"
"This module makes available standard errno system symbols.\n"
"\n"
"The value of each symbol is the corresponding integer value,\n"
"e.g., on most systems, errno.ENOENT equals the integer 2.\n"
"\n"
"The dictionary errno.errorcode maps numeric codes to symbol names,\n"
"e.g., errno.errorcode[2] could be the string 'ENOENT'.\n"
"\n"
"Symbols that are not relevant to the underlying system are not defined.\n"
"\n"
"To map error codes to error messages, use the function os.strerror(),\n"
"e.g. os.strerror(2) could return 'No such file or directory'."
msgstr ""

#: modes/api/python3.py:187
msgid ""
"os.execl(file, *args) \n"
"execl(file, *args)\n"
"\n"
"Execute the executable file with argument list args, replacing the\n"
"current process. "
msgstr ""

#: modes/api/python3.py:188
msgid ""
"os.execle(file, *args) \n"
"execle(file, *args, env)\n"
"\n"
"Execute the executable file with argument list args and\n"
"environment env, replacing the current process. "
msgstr ""

#: modes/api/python3.py:189
msgid ""
"os.execlp(file, *args) \n"
"execlp(file, *args)\n"
"\n"
"Execute the executable file (which is searched for along $PATH)\n"
"with argument list args, replacing the current process. "
msgstr ""

#: modes/api/python3.py:190
msgid ""
"os.execlpe(file, *args) \n"
"execlpe(file, *args, env)\n"
"\n"
"Execute the executable file (which is searched for along $PATH)\n"
"with argument list args and environment env, replacing the current\n"
"process. "
msgstr ""

#: modes/api/python3.py:191
msgid ""
"os.execv(path, argv, /) \n"
"Execute an executable path with arguments, replacing current process.\n"
"\n"
"path\n"
"  Path of executable file.\n"
"argv\n"
"  Tuple or list of strings."
msgstr ""

#: modes/api/python3.py:192
msgid ""
"os.execve(path, argv, env) \n"
"Execute an executable path with arguments, replacing current process.\n"
"\n"
"path\n"
"  Path of executable file.\n"
"argv\n"
"  Tuple or list of strings.\n"
"env\n"
"  Dictionary of strings mapping to strings."
msgstr ""

#: modes/api/python3.py:193
msgid ""
"os.execvp(file, args) \n"
"execvp(file, args)\n"
"\n"
"Execute the executable file (which is searched for along $PATH)\n"
"with argument list args, replacing the current process.\n"
"args may be a list or tuple of strings. "
msgstr ""

#: modes/api/python3.py:194
msgid ""
"os.execvpe(file, args, env) \n"
"execvpe(file, args, env)\n"
"\n"
"Execute the executable file (which is searched for along $PATH)\n"
"with argument list args and environment env , replacing the\n"
"current process.\n"
"args may be a list or tuple of strings. "
msgstr ""

#: modes/api/python3.py:195
msgid ""
"os.fchdir(fd) \n"
"Change to the directory of the given file descriptor.\n"
"\n"
"fd must be opened on a directory, not a file.\n"
"Equivalent to os.chdir(fd)."
msgstr ""

#: modes/api/python3.py:196
msgid ""
"os.fchmod(fd, mode) \n"
"Change the access permissions of the file given by file descriptor fd.\n"
"\n"
"Equivalent to os.chmod(fd, mode)."
msgstr ""

#: modes/api/python3.py:197
msgid ""
"os.fchown(fd, uid, gid) \n"
"Change the owner and group id of the file specified by file descriptor.\n"
"\n"
"Equivalent to os.chown(fd, uid, gid)."
msgstr ""

#: modes/api/python3.py:198
msgid ""
"os.fdatasync(fd) \n"
"Force write of fd to disk without forcing update of metadata."
msgstr ""

#: modes/api/python3.py:199
msgid ""
"os.fork() \n"
"Fork a child process.\n"
"\n"
"Return 0 to child process and PID of child to parent process."
msgstr ""

#: modes/api/python3.py:200
msgid ""
"os.forkpty() \n"
"Fork a new process with a new pseudo-terminal as controlling tty.\n"
"\n"
"Returns a tuple of (pid, master_fd).\n"
"Like fork(), return pid of 0 to the child process,\n"
"and pid of child to the parent process.\n"
"To both, return fd of newly opened pseudo-terminal."
msgstr ""

#: modes/api/python3.py:201
msgid ""
"os.fpathconf(fd, name, /) \n"
"Return the configuration limit name for the file descriptor fd.\n"
"\n"
"If there is no limit, return -1."
msgstr ""

#: modes/api/python3.py:202
msgid ""
"os.fsdecode(filename) \n"
"Decode filename (an os.PathLike, bytes, or str) from the filesystem\n"
"encoding with 'surrogateescape' error handler, return str unchanged. On\n"
"Windows, use 'strict' error handler if the file system encoding is\n"
"'mbcs' (which is the default encoding)."
msgstr ""

#: modes/api/python3.py:203
msgid ""
"os.fsencode(filename) \n"
"Encode filename (an os.PathLike, bytes, or str) to the filesystem\n"
"encoding with 'surrogateescape' error handler, return bytes unchanged.\n"
"On Windows, use 'strict' error handler if the file system encoding is\n"
"'mbcs' (which is the default encoding)."
msgstr ""

#: modes/api/python3.py:204
msgid ""
"os.fspath(path) \n"
"Return the file system path representation of the object.\n"
"\n"
"If the object is str or bytes, then allow it to pass through as-is. If the\n"
"object defines __fspath__(), then return the result of that method. All "
"other\n"
"types raise a TypeError."
msgstr ""

#: modes/api/python3.py:205
msgid ""
"os.fstat(fd) \n"
"Perform a stat system call on the given file descriptor.\n"
"\n"
"Like stat(), but for an open file descriptor.\n"
"Equivalent to os.stat(fd)."
msgstr ""

#: modes/api/python3.py:206
msgid ""
"os.fstatvfs(fd, /) \n"
"Perform an fstatvfs system call on the given fd.\n"
"\n"
"Equivalent to statvfs(fd)."
msgstr ""

#: modes/api/python3.py:207
msgid ""
"os.fsync(fd) \n"
"Force write of fd to disk."
msgstr ""

#: modes/api/python3.py:208
msgid ""
"os.ftruncate(fd, length, /) \n"
"Truncate a file, specified by file descriptor, to a specific length."
msgstr ""

#: modes/api/python3.py:209
msgid ""
"os.fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, "
"dir_fd=None) \n"
"Directory tree generator.\n"
"\n"
"This behaves exactly like walk(), except that it yields a 4-tuple\n"
"\n"
"    dirpath, dirnames, filenames, dirfd\n"
"\n"
"`dirpath`, `dirnames` and `filenames` are identical to walk() output,\n"
"and `dirfd` is a file descriptor referring to the directory `dirpath`.\n"
"\n"
"The advantage of fwalk() over walk() is that it's safe against symlink\n"
"races (when follow_symlinks is False).\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and top should be relative; top will then be relative to that directory.\n"
"  (dir_fd is always supported for fwalk.)\n"
"\n"
"Caution:\n"
"Since fwalk() yields file descriptors, those are only valid until the\n"
"next iteration step, so you should dup() them if you want to keep them\n"
"for a longer period.\n"
"\n"
"Example:\n"
"\n"
"import os\n"
"for root, dirs, files, rootfd in os.fwalk('python/Lib/email'):\n"
"    print(root, \"consumes\", end=\"\")\n"
"    print(sum([os.stat(name, dir_fd=rootfd).st_size for name in files]),\n"
"          end=\"\")\n"
"    print(\"bytes in\", len(files), \"non-directory files\")\n"
"    if 'CVS' in dirs:\n"
"        dirs.remove('CVS')  # don't visit CVS directories"
msgstr ""

#: modes/api/python3.py:210
msgid ""
"os.get_blocking() \n"
"get_blocking(fd) -> bool\n"
"\n"
"Get the blocking mode of the file descriptor:\n"
"False if the O_NONBLOCK flag is set, True if the flag is cleared."
msgstr ""

#: modes/api/python3.py:211
msgid ""
"os.get_exec_path(env=None) \n"
"Returns the sequence of directories that will be searched for the\n"
"named executable (similar to a shell) when launching a process.\n"
"\n"
"*env* must be an environment variable dict or None.  If *env* is None,\n"
"os.environ will be used."
msgstr ""

#: modes/api/python3.py:212
msgid ""
"os.get_inheritable(fd, /) \n"
"Get the close-on-exe flag of the specified file descriptor."
msgstr ""

#: modes/api/python3.py:213
msgid ""
"os.get_terminal_size() \n"
"Return the size of the terminal window as (columns, lines).\n"
"\n"
"The optional argument fd (default standard output) specifies\n"
"which file descriptor should be queried.\n"
"\n"
"If the file descriptor is not connected to a terminal, an OSError\n"
"is thrown.\n"
"\n"
"This function will only be defined if an implementation is\n"
"available for this system.\n"
"\n"
"shutil.get_terminal_size is the high-level function which should \n"
"normally be used, os.get_terminal_size is the low-level implementation."
msgstr ""

#: modes/api/python3.py:214
msgid ""
"os.getcwd() \n"
"Return a unicode string representing the current working directory."
msgstr ""

#: modes/api/python3.py:215
msgid ""
"os.getcwdb() \n"
"Return a bytes string representing the current working directory."
msgstr ""

#: modes/api/python3.py:216
msgid ""
"os.getegid() \n"
"Return the current process's effective group id."
msgstr ""

#: modes/api/python3.py:217
msgid ""
"os.getenv(key, default=None) \n"
"Get an environment variable, return None if it doesn't exist.\n"
"The optional second argument can specify an alternate default.\n"
"key, default and the result are str."
msgstr ""

#: modes/api/python3.py:218
msgid ""
"os.getenvb(key, default=None) \n"
"Get an environment variable, return None if it doesn't exist.\n"
"The optional second argument can specify an alternate default.\n"
"key, default and the result are bytes."
msgstr ""

#: modes/api/python3.py:219
msgid ""
"os.geteuid() \n"
"Return the current process's effective user id."
msgstr ""

#: modes/api/python3.py:220
msgid ""
"os.getgid() \n"
"Return the current process's group id."
msgstr ""

#: modes/api/python3.py:221
msgid ""
"os.getgrouplist() \n"
"getgrouplist(user, group) -> list of groups to which a user belongs\n"
"\n"
"Returns a list of groups to which a user belongs.\n"
"\n"
"    user: username to lookup\n"
"    group: base group id of the user"
msgstr ""

#: modes/api/python3.py:222
msgid ""
"os.getgroups() \n"
"Return list of supplemental group IDs for the process."
msgstr ""

#: modes/api/python3.py:223
msgid ""
"os.getloadavg() \n"
"Return average recent system load information.\n"
"\n"
"Return the number of processes in the system run queue averaged over\n"
"the last 1, 5, and 15 minutes as a tuple of three floats.\n"
"Raises OSError if the load average was unobtainable."
msgstr ""

#: modes/api/python3.py:224
msgid ""
"os.getlogin() \n"
"Return the actual login name."
msgstr ""

#: modes/api/python3.py:225
msgid ""
"os.getpgid(pid) \n"
"Call the system call getpgid(), and return the result."
msgstr ""

#: modes/api/python3.py:226
msgid ""
"os.getpgrp() \n"
"Return the current process group id."
msgstr ""

#: modes/api/python3.py:227
msgid ""
"os.getpid() \n"
"Return the current process id."
msgstr ""

#: modes/api/python3.py:228
msgid ""
"os.getppid() \n"
"Return the parent's process id.\n"
"\n"
"If the parent process has already exited, Windows machines will still\n"
"return its id; others systems will return the id of the 'init' process (1)."
msgstr ""

#: modes/api/python3.py:229
msgid ""
"os.getpriority(which, who) \n"
"Return program scheduling priority."
msgstr ""

#: modes/api/python3.py:230
msgid ""
"os.getrandom(size, flags=0) \n"
"Obtain a series of random bytes."
msgstr ""

#: modes/api/python3.py:231
msgid ""
"os.getresgid() \n"
"Return a tuple of the current process's real, effective, and saved group ids."
msgstr ""

#: modes/api/python3.py:232
msgid ""
"os.getresuid() \n"
"Return a tuple of the current process's real, effective, and saved user ids."
msgstr ""

#: modes/api/python3.py:233
msgid ""
"os.getsid(pid, /) \n"
"Call the system call getsid(pid) and return the result."
msgstr ""

#: modes/api/python3.py:234
msgid ""
"os.getuid() \n"
"Return the current process's user id."
msgstr ""

#: modes/api/python3.py:235
msgid ""
"os.getxattr(path, attribute, *, follow_symlinks=True) \n"
"Return the value of extended attribute attribute on path.\n"
"\n"
"path may be either a string or an open file descriptor.\n"
"If follow_symlinks is False, and the last element of the path is a symbolic\n"
"  link, getxattr will examine the symbolic link itself instead of the file\n"
"  the link points to."
msgstr ""

#: modes/api/python3.py:236
msgid ""
"os.initgroups() \n"
"initgroups(username, gid) -> None\n"
"\n"
"Call the system initgroups() to initialize the group access list with all "
"of\n"
"the groups of which the specified username is a member, plus the specified\n"
"group id."
msgstr ""

#: modes/api/python3.py:237
msgid ""
"os.isatty(fd, /) \n"
"Return True if the fd is connected to a terminal.\n"
"\n"
"Return True if the file descriptor is an open file descriptor\n"
"connected to the slave end of a terminal."
msgstr ""

#: modes/api/python3.py:238
msgid ""
"os.kill(pid, signal, /) \n"
"Kill a process with a signal."
msgstr ""

#: modes/api/python3.py:239
msgid ""
"os.killpg(pgid, signal, /) \n"
"Kill a process group with a signal."
msgstr ""

#: modes/api/python3.py:240
msgid ""
"os.lchown(path, uid, gid) \n"
"Change the owner and group id of path to the numeric uid and gid.\n"
"\n"
"This function will not follow symbolic links.\n"
"Equivalent to os.chown(path, uid, gid, follow_symlinks=False)."
msgstr ""

#: modes/api/python3.py:241
msgid ""
"os.link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, "
"follow_symlinks=True) \n"
"Create a hard link to a file.\n"
"\n"
"If either src_dir_fd or dst_dir_fd is not None, it should be a file\n"
"  descriptor open to a directory, and the respective path string (src or "
"dst)\n"
"  should be relative; the path will then be relative to that directory.\n"
"If follow_symlinks is False, and the last element of src is a symbolic\n"
"  link, link will create a link to the symbolic link itself instead of the\n"
"  file the link points to.\n"
"src_dir_fd, dst_dir_fd, and follow_symlinks may not be implemented on your\n"
"  platform.  If they are unavailable, using them will raise a\n"
"  NotImplementedError."
msgstr ""

#: modes/api/python3.py:242
msgid ""
"os.listdir(path=None) \n"
"Return a list containing the names of the files in the directory.\n"
"\n"
"path can be specified as either str or bytes.  If path is bytes,\n"
"  the filenames returned will also be bytes; in all other circumstances\n"
"  the filenames returned will be str.\n"
"If path is None, uses the path='.'.\n"
"On some platforms, path may also be specified as an open file descriptor;\\\n"
"  the file descriptor must refer to a directory.\n"
"  If this functionality is unavailable, using it raises "
"NotImplementedError.\n"
"\n"
"The list is in arbitrary order.  It does not include the special\n"
"entries '.' and '..' even if they are present in the directory."
msgstr ""

#: modes/api/python3.py:243
msgid ""
"os.listxattr(path=None, *, follow_symlinks=True) \n"
"Return a list of extended attributes on path.\n"
"\n"
"path may be either None, a string, or an open file descriptor.\n"
"if path is None, listxattr will examine the current directory.\n"
"If follow_symlinks is False, and the last element of the path is a symbolic\n"
"  link, listxattr will examine the symbolic link itself instead of the file\n"
"  the link points to."
msgstr ""

#: modes/api/python3.py:244
msgid ""
"os.lockf(fd, command, length, /) \n"
"Apply, test or remove a POSIX lock on an open file descriptor.\n"
"\n"
"fd\n"
"  An open file descriptor.\n"
"command\n"
"  One of F_LOCK, F_TLOCK, F_ULOCK or F_TEST.\n"
"length\n"
"  The number of bytes to lock, starting at the current position."
msgstr ""

#: modes/api/python3.py:245
msgid ""
"os.lseek(fd, position, how, /) \n"
"Set the position of a file descriptor.  Return the new position.\n"
"\n"
"Return the new cursor position in number of bytes\n"
"relative to the beginning of the file."
msgstr ""

#: modes/api/python3.py:246
msgid ""
"os.lstat(path, *, dir_fd=None) \n"
"Perform a stat system call on the given path, without following symbolic "
"links.\n"
"\n"
"Like stat(), but do not follow symbolic links.\n"
"Equivalent to stat(path, follow_symlinks=False)."
msgstr ""

#: modes/api/python3.py:247
msgid ""
"os.major(device, /) \n"
"Extracts a device major number from a raw device number."
msgstr ""

#: modes/api/python3.py:248
msgid ""
"os.makedev(major, minor, /) \n"
"Composes a raw device number from the major and minor device numbers."
msgstr ""

#: modes/api/python3.py:249
msgid ""
"os.makedirs(name, mode=511, exist_ok=False) \n"
"makedirs(name [, mode=0o777][, exist_ok=False])\n"
"\n"
"Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n"
"mkdir, except that any intermediate path segment (not just the rightmost)\n"
"will be created if it does not exist. If the target directory already\n"
"exists, raise an OSError if exist_ok is False. Otherwise no exception is\n"
"raised.  This is recursive."
msgstr ""

#: modes/api/python3.py:250
msgid ""
"os.minor(device, /) \n"
"Extracts a device minor number from a raw device number."
msgstr ""

#: modes/api/python3.py:251
msgid ""
"os.mkdir(path, mode=511, *, dir_fd=None) \n"
"Create a directory.\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError.\n"
"\n"
"The mode argument is ignored on Windows."
msgstr ""

#: modes/api/python3.py:252
msgid ""
"os.mkfifo(path, mode=438, *, dir_fd=None) \n"
"Create a \"fifo\" (a POSIX named pipe).\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError."
msgstr ""

#: modes/api/python3.py:253
msgid ""
"os.mknod(path, mode=384, device=0, *, dir_fd=None) \n"
"Create a node in the file system.\n"
"\n"
"Create a node in the file system (file, device special file or named pipe)\n"
"at path.  mode specifies both the permissions to use and the\n"
"type of node to be created, being combined (bitwise OR) with one of\n"
"S_IFREG, S_IFCHR, S_IFBLK, and S_IFIFO.  If S_IFCHR or S_IFBLK is set on "
"mode,\n"
"device defines the newly created device special file (probably using\n"
"os.makedev()).  Otherwise device is ignored.\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError."
msgstr ""

#: modes/api/python3.py:254
msgid ""
"os.nice(increment, /) \n"
"Add increment to the priority of process and return the new priority."
msgstr ""

#: modes/api/python3.py:255
msgid ""
"os.open(path, flags, mode=511, *, dir_fd=None) \n"
"Open a file for low level IO.  Returns a file descriptor (integer).\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError."
msgstr ""

#: modes/api/python3.py:256
msgid ""
"os.openpty() \n"
"Open a pseudo-terminal.\n"
"\n"
"Return a tuple of (master_fd, slave_fd) containing open file descriptors\n"
"for both the master and slave ends."
msgstr ""

#: modes/api/python3.py:257
msgid ""
"os.path.abspath(path) \n"
"Return an absolute path."
msgstr ""

#: modes/api/python3.py:258
msgid ""
"os.path.basename(p) \n"
"Returns the final component of a pathname"
msgstr ""

#: modes/api/python3.py:259
msgid ""
"os.path.commonpath(paths) \n"
"Given a sequence of path names, returns the longest common sub-path."
msgstr ""

#: modes/api/python3.py:260
msgid ""
"os.path.commonprefix(m) \n"
"Given a list of pathnames, returns the longest common leading component"
msgstr ""

#: modes/api/python3.py:261
msgid ""
"os.path.dirname(p) \n"
"Returns the directory component of a pathname"
msgstr ""

#: modes/api/python3.py:262
msgid ""
"os.path.exists(path) \n"
"Test whether a path exists.  Returns False for broken symbolic links"
msgstr ""

#: modes/api/python3.py:263
msgid ""
"os.path.expanduser(path) \n"
"Expand ~ and ~user constructions.  If user or $HOME is unknown,\n"
"do nothing."
msgstr ""

#: modes/api/python3.py:264
#, python-brace-format
msgid ""
"os.path.expandvars(path) \n"
"Expand shell variables of form $var and ${var}.  Unknown variables\n"
"are left unchanged."
msgstr ""

#: modes/api/python3.py:265
msgid ""
"os.path.genericpath() \n"
"Path operations common to more than one OS\n"
"Do not use directly.  The OS specific modules import the appropriate\n"
"functions from this module themselves."
msgstr ""

#: modes/api/python3.py:266
msgid ""
"os.path.getatime(filename) \n"
"Return the last access time of a file, reported by os.stat()."
msgstr ""

#: modes/api/python3.py:267
msgid ""
"os.path.getctime(filename) \n"
"Return the metadata change time of a file, reported by os.stat()."
msgstr ""

#: modes/api/python3.py:268
msgid ""
"os.path.getmtime(filename) \n"
"Return the last modification time of a file, reported by os.stat()."
msgstr ""

#: modes/api/python3.py:269
msgid ""
"os.path.getsize(filename) \n"
"Return the size of a file, reported by os.stat()."
msgstr ""

#: modes/api/python3.py:270
msgid ""
"os.path.isabs(s) \n"
"Test whether a path is absolute"
msgstr ""

#: modes/api/python3.py:271
msgid ""
"os.path.isdir(s) \n"
"Return true if the pathname refers to an existing directory."
msgstr ""

#: modes/api/python3.py:272
msgid ""
"os.path.isfile(path) \n"
"Test whether a path is a regular file"
msgstr ""

#: modes/api/python3.py:273
msgid ""
"os.path.islink(path) \n"
"Test whether a path is a symbolic link"
msgstr ""

#: modes/api/python3.py:274
msgid ""
"os.path.ismount(path) \n"
"Test whether a path is a mount point"
msgstr ""

#: modes/api/python3.py:275
msgid ""
"os.path.join(a, *p) \n"
"Join two or more pathname components, inserting '/' as needed.\n"
"If any component is an absolute path, all previous path components\n"
"will be discarded.  An empty last part will result in a path that\n"
"ends with a separator."
msgstr ""

#: modes/api/python3.py:276
msgid ""
"os.path.lexists(path) \n"
"Test whether a path exists.  Returns True for broken symbolic links"
msgstr ""

#: modes/api/python3.py:277
msgid ""
"os.path.normcase(s) \n"
"Normalize case of pathname.  Has no effect under Posix"
msgstr ""

#: modes/api/python3.py:278
msgid ""
"os.path.normpath(path) \n"
"Normalize path, eliminating double slashes, etc."
msgstr ""

#: modes/api/python3.py:279
msgid ""
"os.path.os() \n"
"OS routines for NT or Posix depending on what system we're on.\n"
"\n"
"This exports:\n"
"  - all functions from posix or nt, e.g. unlink, stat, etc.\n"
"  - os.path is either posixpath or ntpath\n"
"  - os.name is either 'posix' or 'nt'\n"
"  - os.curdir is a string representing the current directory (always '.')\n"
"  - os.pardir is a string representing the parent directory (always '..')\n"
"  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n"
"  - os.extsep is the extension separator (always '.')\n"
"  - os.altsep is the alternate pathname separator (None or '/')\n"
"  - os.pathsep is the component separator used in $PATH etc\n"
"  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r"
"\\n')\n"
"  - os.defpath is the default search path for executables\n"
"  - os.devnull is the file path of the null device ('/dev/null', etc.)\n"
"\n"
"Programs that import and use 'os' stand a better chance of being\n"
"portable between different platforms.  Of course, they must then\n"
"only use functions that are defined by all platforms (e.g., unlink\n"
"and opendir), and leave all pathname manipulation to os.path\n"
"(e.g., split and join)."
msgstr ""

#: modes/api/python3.py:280
msgid ""
"os.path.realpath(filename) \n"
"Return the canonical path of the specified filename, eliminating any\n"
"symbolic links encountered in the path."
msgstr ""

#: modes/api/python3.py:281
msgid ""
"os.path.relpath(path, start=None) \n"
"Return a relative version of a path"
msgstr ""

#: modes/api/python3.py:282
msgid ""
"os.path.samefile(f1, f2) \n"
"Test whether two pathnames reference the same actual file"
msgstr ""

#: modes/api/python3.py:283
msgid ""
"os.path.sameopenfile(fp1, fp2) \n"
"Test whether two open file objects reference the same file"
msgstr ""

#: modes/api/python3.py:284
msgid ""
"os.path.samestat(s1, s2) \n"
"Test whether two stat buffers reference the same file"
msgstr ""

#: modes/api/python3.py:285
msgid ""
"os.path.split(p) \n"
"Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is\n"
"everything after the final slash.  Either part may be empty."
msgstr ""

#: modes/api/python3.py:286
msgid ""
"os.path.splitdrive(p) \n"
"Split a pathname into drive and path. On Posix, drive is always\n"
"empty."
msgstr ""

#: modes/api/python3.py:287
msgid ""
"os.path.splitext(p) \n"
"Split the extension from a pathname.\n"
"\n"
"Extension is everything from the last dot to the end, ignoring\n"
"leading dots.  Returns \"(root, ext)\"; ext may be empty."
msgstr ""

#: modes/api/python3.py:288
msgid ""
"os.path.stat() \n"
"Constants/functions for interpreting results of os.stat() and os.lstat().\n"
"\n"
"Suggested usage: from stat import *"
msgstr ""

#: modes/api/python3.py:289
msgid ""
"os.path.sys() \n"
"This module provides access to some objects used or maintained by the\n"
"interpreter and to functions that interact strongly with the interpreter.\n"
"\n"
"Dynamic objects:\n"
"\n"
"argv -- command line arguments; argv[0] is the script pathname if known\n"
"path -- module search path; path[0] is the script directory, else ''\n"
"modules -- dictionary of loaded modules\n"
"\n"
"displayhook -- called to show results in an interactive session\n"
"excepthook -- called to handle any uncaught exception other than SystemExit\n"
"  To customize printing in an interactive session or to install a custom\n"
"  top-level exception handler, assign other functions to replace these.\n"
"\n"
"stdin -- standard input file object; used by input()\n"
"stdout -- standard output file object; used by print()\n"
"stderr -- standard error object; used for error messages\n"
"  By assigning other file objects (or objects that behave like files)\n"
"  to these, it is possible to redirect all of the interpreter's I/O.\n"
"\n"
"last_type -- type of last uncaught exception\n"
"last_value -- value of last uncaught exception\n"
"last_traceback -- traceback of last uncaught exception\n"
"  These three are only available in an interactive session after a\n"
"  traceback has been printed.\n"
"\n"
"Static objects:\n"
"\n"
"builtin_module_names -- tuple of module names built into this interpreter\n"
"copyright -- copyright notice pertaining to this interpreter\n"
"exec_prefix -- prefix used to find the machine-specific Python library\n"
"executable -- absolute path of the executable binary of the Python "
"interpreter\n"
"float_info -- a struct sequence with information about the float "
"implementation.\n"
"float_repr_style -- string indicating the style of repr() output for floats\n"
"hash_info -- a struct sequence with information about the hash algorithm.\n"
"hexversion -- version information encoded as a single integer\n"
"implementation -- Python implementation information.\n"
"int_info -- a struct sequence with information about the int "
"implementation.\n"
"maxsize -- the largest supported length of containers.\n"
"maxunicode -- the value of the largest Unicode code point\n"
"platform -- platform identifier\n"
"prefix -- prefix used to find the Python library\n"
"thread_info -- a struct sequence with information about the thread "
"implementation.\n"
"version -- the version of this interpreter as a string\n"
"version_info -- version information as a named tuple\n"
"__stdin__ -- the original stdin; don't touch!\n"
"__stdout__ -- the original stdout; don't touch!\n"
"__stderr__ -- the original stderr; don't touch!\n"
"__displayhook__ -- the original displayhook; don't touch!\n"
"__excepthook__ -- the original excepthook; don't touch!\n"
"\n"
"Functions:\n"
"\n"
"displayhook() -- print an object to the screen, and save it in builtins._\n"
"excepthook() -- print an exception and its traceback to sys.stderr\n"
"exc_info() -- return thread-safe information about the current exception\n"
"exit() -- exit the interpreter by raising SystemExit\n"
"getdlopenflags() -- returns flags to be used for dlopen() calls\n"
"getprofile() -- get the global profiling function\n"
"getrefcount() -- return the reference count for an object (plus one :-)\n"
"getrecursionlimit() -- return the max recursion depth for the interpreter\n"
"getsizeof() -- return the size of an object in bytes\n"
"gettrace() -- get the global debug tracing function\n"
"setcheckinterval() -- control how often the interpreter checks for events\n"
"setdlopenflags() -- set the flags to be used for dlopen() calls\n"
"setprofile() -- set the global profiling function\n"
"setrecursionlimit() -- set the max recursion depth for the interpreter\n"
"settrace() -- set the global debug tracing function"
msgstr ""

#: modes/api/python3.py:290
msgid ""
"os.pathconf(path, name) \n"
"Return the configuration limit name for the file or directory path.\n"
"\n"
"If there is no limit, return -1.\n"
"On some platforms, path may also be specified as an open file descriptor.\n"
"  If this functionality is unavailable, using it raises an exception."
msgstr ""

#: modes/api/python3.py:291
msgid ""
"os.pipe() \n"
"Create a pipe.\n"
"\n"
"Returns a tuple of two file descriptors:\n"
"  (read_fd, write_fd)"
msgstr ""

#: modes/api/python3.py:292
msgid ""
"os.pipe2(flags, /) \n"
"Create a pipe with flags set atomically.\n"
"\n"
"Returns a tuple of two file descriptors:\n"
"  (read_fd, write_fd)\n"
"\n"
"flags can be constructed by ORing together one or more of these values:\n"
"O_NONBLOCK, O_CLOEXEC."
msgstr ""

#: modes/api/python3.py:293
msgid ""
"os.posix_fadvise(fd, offset, length, advice, /) \n"
"Announce an intention to access data in a specific pattern.\n"
"\n"
"Announce an intention to access data in a specific pattern, thus allowing\n"
"the kernel to make optimizations.\n"
"The advice applies to the region of the file specified by fd starting at\n"
"offset and continuing for length bytes.\n"
"advice is one of POSIX_FADV_NORMAL, POSIX_FADV_SEQUENTIAL,\n"
"POSIX_FADV_RANDOM, POSIX_FADV_NOREUSE, POSIX_FADV_WILLNEED, or\n"
"POSIX_FADV_DONTNEED."
msgstr ""

#: modes/api/python3.py:294
msgid ""
"os.posix_fallocate(fd, offset, length, /) \n"
"Ensure a file has allocated at least a particular number of bytes on disk.\n"
"\n"
"Ensure that the file specified by fd encompasses a range of bytes\n"
"starting at offset bytes from the beginning and continuing for length bytes."
msgstr ""

#: modes/api/python3.py:295
msgid ""
"os.posixpath() \n"
"Common operations on Posix pathnames.\n"
"\n"
"Instead of importing this module directly, import os and refer to\n"
"this module as os.path.  The \"os.path\" name is an alias for this\n"
"module on Posix systems; on other systems (e.g. Mac, Windows),\n"
"os.path provides the same operations in a manner specific to that\n"
"platform, and is an alias to another module (e.g. macpath, ntpath).\n"
"\n"
"Some of this can actually be useful on non-Posix systems too, e.g.\n"
"for manipulation of the pathname component of URLs."
msgstr ""

#: modes/api/python3.py:296
msgid ""
"os.pread(fd, length, offset, /) \n"
"Read a number of bytes from a file descriptor starting at a particular "
"offset.\n"
"\n"
"Read length bytes from file descriptor fd, starting at offset bytes from\n"
"the beginning of the file.  The file offset remains unchanged."
msgstr ""

#: modes/api/python3.py:297
msgid ""
"os.putenv(name, value, /) \n"
"Change or add an environment variable."
msgstr ""

#: modes/api/python3.py:298
msgid ""
"os.pwrite(fd, buffer, offset, /) \n"
"Write bytes to a file descriptor starting at a particular offset.\n"
"\n"
"Write buffer to fd, starting at offset bytes from the beginning of\n"
"the file.  Returns the number of bytes writte.  Does not change the\n"
"current file offset."
msgstr ""

#: modes/api/python3.py:299
msgid ""
"os.read(fd, length, /) \n"
"Read from a file descriptor.  Returns a bytes object."
msgstr ""

#: modes/api/python3.py:300
msgid ""
"os.readlink() \n"
"readlink(path, *, dir_fd=None) -> path\n"
"\n"
"Return a string representing the path to which the symbolic link points.\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError."
msgstr ""

#: modes/api/python3.py:301
msgid ""
"os.readv(fd, buffers, /) \n"
"Read from a file descriptor fd into an iterable of buffers.\n"
"\n"
"The buffers should be mutable buffers accepting bytes.\n"
"readv will transfer data into each buffer until it is full\n"
"and then move on to the next buffer in the sequence to hold\n"
"the rest of the data.\n"
"\n"
"readv returns the total number of bytes read,\n"
"which may be less than the total capacity of all the buffers."
msgstr ""

#: modes/api/python3.py:302
msgid ""
"os.remove(path, *, dir_fd=None) \n"
"Remove a file (same as unlink()).\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError."
msgstr ""

#: modes/api/python3.py:303
msgid ""
"os.removedirs(name) \n"
"removedirs(name)\n"
"\n"
"Super-rmdir; remove a leaf directory and all empty intermediate\n"
"ones.  Works like rmdir except that, if the leaf directory is\n"
"successfully removed, directories corresponding to rightmost path\n"
"segments will be pruned away until either the whole path is\n"
"consumed or an error occurs.  Errors during this latter phase are\n"
"ignored -- they generally mean that a directory was not empty."
msgstr ""

#: modes/api/python3.py:304
msgid ""
"os.removexattr(path, attribute, *, follow_symlinks=True) \n"
"Remove extended attribute attribute on path.\n"
"\n"
"path may be either a string or an open file descriptor.\n"
"If follow_symlinks is False, and the last element of the path is a symbolic\n"
"  link, removexattr will modify the symbolic link itself instead of the "
"file\n"
"  the link points to."
msgstr ""

#: modes/api/python3.py:305
msgid ""
"os.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None) \n"
"Rename a file or directory.\n"
"\n"
"If either src_dir_fd or dst_dir_fd is not None, it should be a file\n"
"  descriptor open to a directory, and the respective path string (src or "
"dst)\n"
"  should be relative; the path will then be relative to that directory.\n"
"src_dir_fd and dst_dir_fd, may not be implemented on your platform.\n"
"  If they are unavailable, using them will raise a NotImplementedError."
msgstr ""

#: modes/api/python3.py:306
msgid ""
"os.renames(old, new) \n"
"renames(old, new)\n"
"\n"
"Super-rename; create directories as necessary and delete any left\n"
"empty.  Works like rename, except creation of any intermediate\n"
"directories needed to make the new pathname good is attempted\n"
"first.  After the rename, directories corresponding to rightmost\n"
"path segments of the old name will be pruned until either the\n"
"whole path is consumed or a nonempty directory is found.\n"
"\n"
"Note: this function can fail with the new directory structure made\n"
"if you lack permissions needed to unlink the leaf directory or\n"
"file."
msgstr ""

#: modes/api/python3.py:307
msgid ""
"os.replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None) \n"
"Rename a file or directory, overwriting the destination.\n"
"\n"
"If either src_dir_fd or dst_dir_fd is not None, it should be a file\n"
"  descriptor open to a directory, and the respective path string (src or "
"dst)\n"
"  should be relative; the path will then be relative to that directory.\n"
"src_dir_fd and dst_dir_fd, may not be implemented on your platform.\n"
"  If they are unavailable, using them will raise a NotImplementedError.\""
msgstr ""

#: modes/api/python3.py:308
msgid ""
"os.rmdir(path, *, dir_fd=None) \n"
"Remove a directory.\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError."
msgstr ""

#: modes/api/python3.py:309
msgid ""
"os.scandir() \n"
"scandir(path='.') -> iterator of DirEntry objects for given path"
msgstr ""

#: modes/api/python3.py:310
msgid ""
"os.sched_get_priority_max(policy) \n"
"Get the maximum scheduling priority for policy."
msgstr ""

#: modes/api/python3.py:311
msgid ""
"os.sched_get_priority_min(policy) \n"
"Get the minimum scheduling priority for policy."
msgstr ""

#: modes/api/python3.py:312
msgid ""
"os.sched_getaffinity(pid, /) \n"
"Return the affinity of the process identified by pid (or the current process "
"if zero).\n"
"\n"
"The affinity is returned as a set of CPU identifiers."
msgstr ""

#: modes/api/python3.py:313
msgid ""
"os.sched_getparam(pid, /) \n"
"Returns scheduling parameters for the process identified by pid.\n"
"\n"
"If pid is 0, returns parameters for the calling process.\n"
"Return value is an instance of sched_param."
msgstr ""

#: modes/api/python3.py:314
msgid ""
"os.sched_getscheduler(pid, /) \n"
"Get the scheduling policy for the process identifiedy by pid.\n"
"\n"
"Passing 0 for pid returns the scheduling policy for the calling process."
msgstr ""

#: modes/api/python3.py:315
msgid ""
"os.sched_param(sched_priority) \n"
"Current has only one field: sched_priority\");\n"
"\n"
"sched_priority\n"
"  A scheduling parameter."
msgstr ""

#: modes/api/python3.py:316
msgid ""
"os.sched_rr_get_interval(pid, /) \n"
"Return the round-robin quantum for the process identified by pid, in "
"seconds.\n"
"\n"
"Value returned is a float."
msgstr ""

#: modes/api/python3.py:317
msgid ""
"os.sched_setaffinity(pid, mask, /) \n"
"Set the CPU affinity of the process identified by pid to mask.\n"
"\n"
"mask should be an iterable of integers identifying CPUs."
msgstr ""

#: modes/api/python3.py:318
msgid ""
"os.sched_setparam(pid, param, /) \n"
"Set scheduling parameters for the process identified by pid.\n"
"\n"
"If pid is 0, sets parameters for the calling process.\n"
"param should be an instance of sched_param."
msgstr ""

#: modes/api/python3.py:319
msgid ""
"os.sched_setscheduler(pid, policy, param, /) \n"
"Set the scheduling policy for the process identified by pid.\n"
"\n"
"If pid is 0, the calling process is changed.\n"
"param is an instance of sched_param."
msgstr ""

#: modes/api/python3.py:320
msgid ""
"os.sched_yield() \n"
"Voluntarily relinquish the CPU."
msgstr ""

#: modes/api/python3.py:321
msgid ""
"os.sendfile() \n"
"sendfile(out, in, offset, count) -> byteswritten\n"
"sendfile(out, in, offset, count[, headers][, trailers], flags=0)\n"
"            -> byteswritten\n"
"Copy count bytes from file descriptor in to file descriptor out."
msgstr ""

#: modes/api/python3.py:322
msgid ""
"os.set_blocking() \n"
"set_blocking(fd, blocking)\n"
"\n"
"Set the blocking mode of the specified file descriptor.\n"
"Set the O_NONBLOCK flag if blocking is False,\n"
"clear the O_NONBLOCK flag otherwise."
msgstr ""

#: modes/api/python3.py:323
msgid ""
"os.set_inheritable(fd, inheritable, /) \n"
"Set the inheritable flag of the specified file descriptor."
msgstr ""

#: modes/api/python3.py:324
msgid ""
"os.setegid(egid, /) \n"
"Set the current process's effective group id."
msgstr ""

#: modes/api/python3.py:325
msgid ""
"os.seteuid(euid, /) \n"
"Set the current process's effective user id."
msgstr ""

#: modes/api/python3.py:326
msgid ""
"os.setgid(gid, /) \n"
"Set the current process's group id."
msgstr ""

#: modes/api/python3.py:327
msgid ""
"os.setgroups(groups, /) \n"
"Set the groups of the current process to list."
msgstr ""

#: modes/api/python3.py:328
msgid ""
"os.setpgid(pid, pgrp, /) \n"
"Call the system call setpgid(pid, pgrp)."
msgstr ""

#: modes/api/python3.py:329
msgid ""
"os.setpgrp() \n"
"Make the current process the leader of its process group."
msgstr ""

#: modes/api/python3.py:330
msgid ""
"os.setpriority(which, who, priority) \n"
"Set program scheduling priority."
msgstr ""

#: modes/api/python3.py:331
msgid ""
"os.setregid(rgid, egid, /) \n"
"Set the current process's real and effective group ids."
msgstr ""

#: modes/api/python3.py:332
msgid ""
"os.setresgid(rgid, egid, sgid, /) \n"
"Set the current process's real, effective, and saved group ids."
msgstr ""

#: modes/api/python3.py:333
msgid ""
"os.setresuid(ruid, euid, suid, /) \n"
"Set the current process's real, effective, and saved user ids."
msgstr ""

#: modes/api/python3.py:334
msgid ""
"os.setreuid(ruid, euid, /) \n"
"Set the current process's real and effective user ids."
msgstr ""

#: modes/api/python3.py:335
msgid ""
"os.setsid() \n"
"Call the system call setsid()."
msgstr ""

#: modes/api/python3.py:336
msgid ""
"os.setuid(uid, /) \n"
"Set the current process's user id."
msgstr ""

#: modes/api/python3.py:337
msgid ""
"os.setxattr(path, attribute, value, flags=0, *, follow_symlinks=True) \n"
"Set extended attribute attribute on path to value.\n"
"\n"
"path may be either a string or an open file descriptor.\n"
"If follow_symlinks is False, and the last element of the path is a symbolic\n"
"  link, setxattr will modify the symbolic link itself instead of the file\n"
"  the link points to."
msgstr ""

#: modes/api/python3.py:338
msgid ""
"os.spawnl(mode, file, *args) \n"
"spawnl(mode, file, *args) -> integer\n"
"\n"
"Execute file with arguments from args in a subprocess.\n"
"If mode == P_NOWAIT return the pid of the process.\n"
"If mode == P_WAIT return the process's exit code if it exits normally;\n"
"otherwise return -SIG, where SIG is the signal that killed it. "
msgstr ""

#: modes/api/python3.py:339
msgid ""
"os.spawnle(mode, file, *args) \n"
"spawnle(mode, file, *args, env) -> integer\n"
"\n"
"Execute file with arguments from args in a subprocess with the\n"
"supplied environment.\n"
"If mode == P_NOWAIT return the pid of the process.\n"
"If mode == P_WAIT return the process's exit code if it exits normally;\n"
"otherwise return -SIG, where SIG is the signal that killed it. "
msgstr ""

#: modes/api/python3.py:340
msgid ""
"os.spawnlp(mode, file, *args) \n"
"spawnlp(mode, file, *args) -> integer\n"
"\n"
"Execute file (which is looked for along $PATH) with arguments from\n"
"args in a subprocess with the supplied environment.\n"
"If mode == P_NOWAIT return the pid of the process.\n"
"If mode == P_WAIT return the process's exit code if it exits normally;\n"
"otherwise return -SIG, where SIG is the signal that killed it. "
msgstr ""

#: modes/api/python3.py:341
msgid ""
"os.spawnlpe(mode, file, *args) \n"
"spawnlpe(mode, file, *args, env) -> integer\n"
"\n"
"Execute file (which is looked for along $PATH) with arguments from\n"
"args in a subprocess with the supplied environment.\n"
"If mode == P_NOWAIT return the pid of the process.\n"
"If mode == P_WAIT return the process's exit code if it exits normally;\n"
"otherwise return -SIG, where SIG is the signal that killed it. "
msgstr ""

#: modes/api/python3.py:342
msgid ""
"os.spawnv(mode, file, args) \n"
"spawnv(mode, file, args) -> integer\n"
"\n"
"Execute file with arguments from args in a subprocess.\n"
"If mode == P_NOWAIT return the pid of the process.\n"
"If mode == P_WAIT return the process's exit code if it exits normally;\n"
"otherwise return -SIG, where SIG is the signal that killed it. "
msgstr ""

#: modes/api/python3.py:343
msgid ""
"os.spawnve(mode, file, args, env) \n"
"spawnve(mode, file, args, env) -> integer\n"
"\n"
"Execute file with arguments from args in a subprocess with the\n"
"specified environment.\n"
"If mode == P_NOWAIT return the pid of the process.\n"
"If mode == P_WAIT return the process's exit code if it exits normally;\n"
"otherwise return -SIG, where SIG is the signal that killed it. "
msgstr ""

#: modes/api/python3.py:344
msgid ""
"os.spawnvp(mode, file, args) \n"
"spawnvp(mode, file, args) -> integer\n"
"\n"
"Execute file (which is looked for along $PATH) with arguments from\n"
"args in a subprocess.\n"
"If mode == P_NOWAIT return the pid of the process.\n"
"If mode == P_WAIT return the process's exit code if it exits normally;\n"
"otherwise return -SIG, where SIG is the signal that killed it. "
msgstr ""

#: modes/api/python3.py:345
msgid ""
"os.spawnvpe(mode, file, args, env) \n"
"spawnvpe(mode, file, args, env) -> integer\n"
"\n"
"Execute file (which is looked for along $PATH) with arguments from\n"
"args in a subprocess with the supplied environment.\n"
"If mode == P_NOWAIT return the pid of the process.\n"
"If mode == P_WAIT return the process's exit code if it exits normally;\n"
"otherwise return -SIG, where SIG is the signal that killed it. "
msgstr ""

#: modes/api/python3.py:346
msgid ""
"os.stat() \n"
"Constants/functions for interpreting results of os.stat() and os.lstat().\n"
"\n"
"Suggested usage: from stat import *"
msgstr ""

#: modes/api/python3.py:347
msgid ""
"os.stat(path, *, dir_fd=None, follow_symlinks=True) \n"
"Perform a stat system call on the given path.\n"
"\n"
"  path\n"
"    Path to be examined; can be string, bytes, path-like object or\n"
"    open-file-descriptor int.\n"
"  dir_fd\n"
"    If not None, it should be a file descriptor open to a directory,\n"
"    and path should be a relative string; path will then be relative to\n"
"    that directory.\n"
"  follow_symlinks\n"
"    If False, and the last element of the path is a symbolic link,\n"
"    stat will examine the symbolic link itself instead of the file\n"
"    the link points to.\n"
"\n"
"dir_fd and follow_symlinks may not be implemented\n"
"  on your platform.  If they are unavailable, using them will raise a\n"
"  NotImplementedError.\n"
"\n"
"It's an error to use dir_fd or follow_symlinks when specifying path as\n"
"  an open file descriptor."
msgstr ""

#: modes/api/python3.py:348
msgid ""
"os.stat_float_times() \n"
"stat_float_times([newval]) -> oldval\n"
"\n"
"Determine whether os.[lf]stat represents time stamps as float objects.\n"
"\n"
"If value is True, future calls to stat() return floats; if it is False,\n"
"future calls return ints.\n"
"If value is omitted, return the current setting."
msgstr ""

#: modes/api/python3.py:349
msgid ""
"os.stat_result() \n"
"stat_result: Result from stat, fstat, or lstat.\n"
"\n"
"This object may be accessed either as a tuple of\n"
"  (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)\n"
"or via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.\n"
"\n"
"Posix/windows: If your platform supports st_blksize, st_blocks, st_rdev,\n"
"or st_flags, they are available as attributes only.\n"
"\n"
"See os.stat for more information."
msgstr ""

#: modes/api/python3.py:350
msgid ""
"os.statvfs(path) \n"
"Perform a statvfs system call on the given path.\n"
"\n"
"path may always be specified as a string.\n"
"On some platforms, path may also be specified as an open file descriptor.\n"
"  If this functionality is unavailable, using it raises an exception."
msgstr ""

#: modes/api/python3.py:351
msgid ""
"os.statvfs_result() \n"
"statvfs_result: Result from statvfs or fstatvfs.\n"
"\n"
"This object may be accessed either as a tuple of\n"
"  (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, "
"namemax),\n"
"or via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.\n"
"\n"
"See os.statvfs for more information."
msgstr ""

#: modes/api/python3.py:352
msgid ""
"os.strerror(code, /) \n"
"Translate an error code to a message string."
msgstr ""

#: modes/api/python3.py:353
msgid ""
"os.symlink(src, dst, target_is_directory=False, *, dir_fd=None) \n"
"Create a symbolic link pointing to src named dst.\n"
"\n"
"target_is_directory is required on Windows if the target is to be\n"
"  interpreted as a directory.  (On Windows, symlink requires\n"
"  Windows 6.0 or greater, and raises a NotImplementedError otherwise.)\n"
"  target_is_directory is ignored on non-Windows platforms.\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError."
msgstr ""

#: modes/api/python3.py:354
msgid ""
"os.sync() \n"
"Force write of everything to disk."
msgstr ""

#: modes/api/python3.py:355
msgid ""
"os.sys() \n"
"This module provides access to some objects used or maintained by the\n"
"interpreter and to functions that interact strongly with the interpreter.\n"
"\n"
"Dynamic objects:\n"
"\n"
"argv -- command line arguments; argv[0] is the script pathname if known\n"
"path -- module search path; path[0] is the script directory, else ''\n"
"modules -- dictionary of loaded modules\n"
"\n"
"displayhook -- called to show results in an interactive session\n"
"excepthook -- called to handle any uncaught exception other than SystemExit\n"
"  To customize printing in an interactive session or to install a custom\n"
"  top-level exception handler, assign other functions to replace these.\n"
"\n"
"stdin -- standard input file object; used by input()\n"
"stdout -- standard output file object; used by print()\n"
"stderr -- standard error object; used for error messages\n"
"  By assigning other file objects (or objects that behave like files)\n"
"  to these, it is possible to redirect all of the interpreter's I/O.\n"
"\n"
"last_type -- type of last uncaught exception\n"
"last_value -- value of last uncaught exception\n"
"last_traceback -- traceback of last uncaught exception\n"
"  These three are only available in an interactive session after a\n"
"  traceback has been printed.\n"
"\n"
"Static objects:\n"
"\n"
"builtin_module_names -- tuple of module names built into this interpreter\n"
"copyright -- copyright notice pertaining to this interpreter\n"
"exec_prefix -- prefix used to find the machine-specific Python library\n"
"executable -- absolute path of the executable binary of the Python "
"interpreter\n"
"float_info -- a struct sequence with information about the float "
"implementation.\n"
"float_repr_style -- string indicating the style of repr() output for floats\n"
"hash_info -- a struct sequence with information about the hash algorithm.\n"
"hexversion -- version information encoded as a single integer\n"
"implementation -- Python implementation information.\n"
"int_info -- a struct sequence with information about the int "
"implementation.\n"
"maxsize -- the largest supported length of containers.\n"
"maxunicode -- the value of the largest Unicode code point\n"
"platform -- platform identifier\n"
"prefix -- prefix used to find the Python library\n"
"thread_info -- a struct sequence with information about the thread "
"implementation.\n"
"version -- the version of this interpreter as a string\n"
"version_info -- version information as a named tuple\n"
"__stdin__ -- the original stdin; don't touch!\n"
"__stdout__ -- the original stdout; don't touch!\n"
"__stderr__ -- the original stderr; don't touch!\n"
"__displayhook__ -- the original displayhook; don't touch!\n"
"__excepthook__ -- the original excepthook; don't touch!\n"
"\n"
"Functions:\n"
"\n"
"displayhook() -- print an object to the screen, and save it in builtins._\n"
"excepthook() -- print an exception and its traceback to sys.stderr\n"
"exc_info() -- return thread-safe information about the current exception\n"
"exit() -- exit the interpreter by raising SystemExit\n"
"getdlopenflags() -- returns flags to be used for dlopen() calls\n"
"getprofile() -- get the global profiling function\n"
"getrefcount() -- return the reference count for an object (plus one :-)\n"
"getrecursionlimit() -- return the max recursion depth for the interpreter\n"
"getsizeof() -- return the size of an object in bytes\n"
"gettrace() -- get the global debug tracing function\n"
"setcheckinterval() -- control how often the interpreter checks for events\n"
"setdlopenflags() -- set the flags to be used for dlopen() calls\n"
"setprofile() -- set the global profiling function\n"
"setrecursionlimit() -- set the max recursion depth for the interpreter\n"
"settrace() -- set the global debug tracing function"
msgstr ""

#: modes/api/python3.py:356
msgid ""
"os.sysconf(name, /) \n"
"Return an integer-valued system configuration variable."
msgstr ""

#: modes/api/python3.py:357
msgid ""
"os.system(command) \n"
"Execute the command in a subshell."
msgstr ""

#: modes/api/python3.py:358
msgid ""
"os.tcgetpgrp(fd, /) \n"
"Return the process group associated with the terminal specified by fd."
msgstr ""

#: modes/api/python3.py:359
msgid ""
"os.tcsetpgrp(fd, pgid, /) \n"
"Set the process group associated with the terminal specified by fd."
msgstr ""

#: modes/api/python3.py:360
msgid ""
"os.terminal_size() \n"
"A tuple of (columns, lines) for holding terminal window size"
msgstr ""

#: modes/api/python3.py:361
msgid ""
"os.times() \n"
"Return a collection containing process timing information.\n"
"\n"
"The object returned behaves like a named tuple with these fields:\n"
"  (utime, stime, cutime, cstime, elapsed_time)\n"
"All fields are floating point numbers."
msgstr ""

#: modes/api/python3.py:362
msgid ""
"os.times_result() \n"
"times_result: Result from os.times().\n"
"\n"
"This object may be accessed either as a tuple of\n"
"  (user, system, children_user, children_system, elapsed),\n"
"or via the attributes user, system, children_user, children_system,\n"
"and elapsed.\n"
"\n"
"See os.times for more information."
msgstr ""

#: modes/api/python3.py:363
msgid ""
"os.truncate(path, length) \n"
"Truncate a file, specified by path, to a specific length.\n"
"\n"
"On some platforms, path may also be specified as an open file descriptor.\n"
"  If this functionality is unavailable, using it raises an exception."
msgstr ""

#: modes/api/python3.py:364
msgid ""
"os.ttyname(fd, /) \n"
"Return the name of the terminal device connected to 'fd'.\n"
"\n"
"fd\n"
"  Integer file descriptor handle."
msgstr ""

#: modes/api/python3.py:365
msgid ""
"os.umask(mask, /) \n"
"Set the current numeric umask and return the previous umask."
msgstr ""

#: modes/api/python3.py:366
msgid ""
"os.uname() \n"
"Return an object identifying the current operating system.\n"
"\n"
"The object behaves like a named tuple with the following fields:\n"
"  (sysname, nodename, release, version, machine)"
msgstr ""

#: modes/api/python3.py:367
msgid ""
"os.uname_result() \n"
"uname_result: Result from os.uname().\n"
"\n"
"This object may be accessed either as a tuple of\n"
"  (sysname, nodename, release, version, machine),\n"
"or via the attributes sysname, nodename, release, version, and machine.\n"
"\n"
"See os.uname for more information."
msgstr ""

#: modes/api/python3.py:368
msgid ""
"os.unlink(path, *, dir_fd=None) \n"
"Remove a file (same as remove()).\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError."
msgstr ""

#: modes/api/python3.py:369
msgid ""
"os.unsetenv(name, /) \n"
"Delete an environment variable."
msgstr ""

#: modes/api/python3.py:370
msgid ""
"os.urandom(size, /) \n"
"Return a bytes object containing random bytes suitable for cryptographic use."
msgstr ""

#: modes/api/python3.py:371
msgid ""
"os.utime(path, times=None, *, ns=None, dir_fd=None, follow_symlinks=True) \n"
"Set the access and modified time of path.\n"
"\n"
"path may always be specified as a string.\n"
"On some platforms, path may also be specified as an open file descriptor.\n"
"  If this functionality is unavailable, using it raises an exception.\n"
"\n"
"If times is not None, it must be a tuple (atime, mtime);\n"
"    atime and mtime should be expressed as float seconds since the epoch.\n"
"If ns is specified, it must be a tuple (atime_ns, mtime_ns);\n"
"    atime_ns and mtime_ns should be expressed as integer nanoseconds\n"
"    since the epoch.\n"
"If times is None and ns is unspecified, utime uses the current time.\n"
"Specifying tuples for both times and ns is an error.\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"If follow_symlinks is False, and the last element of the path is a symbolic\n"
"  link, utime will modify the symbolic link itself instead of the file the\n"
"  link points to.\n"
"It is an error to use dir_fd or follow_symlinks when specifying path\n"
"  as an open file descriptor.\n"
"dir_fd and follow_symlinks may not be available on your platform.\n"
"  If they are unavailable, using them will raise a NotImplementedError."
msgstr ""

#: modes/api/python3.py:372
msgid ""
"os.wait() \n"
"Wait for completion of a child process.\n"
"\n"
"Returns a tuple of information about the child process:\n"
"    (pid, status)"
msgstr ""

#: modes/api/python3.py:373
msgid ""
"os.wait3(options) \n"
"Wait for completion of a child process.\n"
"\n"
"Returns a tuple of information about the child process:\n"
"  (pid, status, rusage)"
msgstr ""

#: modes/api/python3.py:374
msgid ""
"os.wait4(pid, options) \n"
"Wait for completion of a specific child process.\n"
"\n"
"Returns a tuple of information about the child process:\n"
"  (pid, status, rusage)"
msgstr ""

#: modes/api/python3.py:375
msgid ""
"os.waitid(idtype, id, options, /) \n"
"Returns the result of waiting for a process or processes.\n"
"\n"
"  idtype\n"
"    Must be one of be P_PID, P_PGID or P_ALL.\n"
"  id\n"
"    The id to wait on.\n"
"  options\n"
"    Constructed from the ORing of one or more of WEXITED, WSTOPPED\n"
"    or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT.\n"
"\n"
"Returns either waitid_result or None if WNOHANG is specified and there are\n"
"no children in a waitable state."
msgstr ""

#: modes/api/python3.py:376
msgid ""
"os.waitid_result() \n"
"waitid_result: Result from waitid.\n"
"\n"
"This object may be accessed either as a tuple of\n"
"  (si_pid, si_uid, si_signo, si_status, si_code),\n"
"or via the attributes si_pid, si_uid, and so on.\n"
"\n"
"See os.waitid for more information."
msgstr ""

#: modes/api/python3.py:377
msgid ""
"os.waitpid(pid, options, /) \n"
"Wait for completion of a given child process.\n"
"\n"
"Returns a tuple of information regarding the child process:\n"
"    (pid, status)\n"
"\n"
"The options argument is ignored on Windows."
msgstr ""

#: modes/api/python3.py:378
msgid ""
"os.walk(top, topdown=True, onerror=None, followlinks=False) \n"
"Directory tree generator.\n"
"\n"
"For each directory in the directory tree rooted at top (including top\n"
"itself, but excluding '.' and '..'), yields a 3-tuple\n"
"\n"
"    dirpath, dirnames, filenames\n"
"\n"
"dirpath is a string, the path to the directory.  dirnames is a list of\n"
"the names of the subdirectories in dirpath (excluding '.' and '..').\n"
"filenames is a list of the names of the non-directory files in dirpath.\n"
"Note that the names in the lists are just names, with no path components.\n"
"To get a full path (which begins with top) to a file or directory in\n"
"dirpath, do os.path.join(dirpath, name).\n"
"\n"
"If optional arg 'topdown' is true or not specified, the triple for a\n"
"directory is generated before the triples for any of its subdirectories\n"
"(directories are generated top down).  If topdown is false, the triple\n"
"for a directory is generated after the triples for all of its\n"
"subdirectories (directories are generated bottom up).\n"
"\n"
"When topdown is true, the caller can modify the dirnames list in-place\n"
"(e.g., via del or slice assignment), and walk will only recurse into the\n"
"subdirectories whose names remain in dirnames; this can be used to prune "
"the\n"
"search, or to impose a specific order of visiting.  Modifying dirnames when\n"
"topdown is false is ineffective, since the directories in dirnames have\n"
"already been generated by the time dirnames itself is generated. No matter\n"
"the value of topdown, the list of subdirectories is retrieved before the\n"
"tuples for the directory and its subdirectories are generated.\n"
"\n"
"By default errors from the os.scandir() call are ignored.  If\n"
"optional arg 'onerror' is specified, it should be a function; it\n"
"will be called with one argument, an OSError instance.  It can\n"
"report the error to continue with the walk, or raise the exception\n"
"to abort the walk.  Note that the filename is available as the\n"
"filename attribute of the exception object.\n"
"\n"
"By default, os.walk does not follow symbolic links to subdirectories on\n"
"systems that support them.  In order to get this functionality, set the\n"
"optional argument 'followlinks' to true.\n"
"\n"
"Caution:  if you pass a relative pathname for top, don't change the\n"
"current working directory between resumptions of walk.  walk never\n"
"changes the current directory, and assumes that the client doesn't\n"
"either.\n"
"\n"
"Example:\n"
"\n"
"import os\n"
"from os.path import join, getsize\n"
"for root, dirs, files in os.walk('python/Lib/email'):\n"
"    print(root, \"consumes\", end=\"\")\n"
"    print(sum([getsize(join(root, name)) for name in files]), end=\"\")\n"
"    print(\"bytes in\", len(files), \"non-directory files\")\n"
"    if 'CVS' in dirs:\n"
"        dirs.remove('CVS')  # don't visit CVS directories"
msgstr ""

#: modes/api/python3.py:379
msgid ""
"os.write(fd, data, /) \n"
"Write a bytes object to a file descriptor."
msgstr ""

#: modes/api/python3.py:380
msgid ""
"os.writev(fd, buffers, /) \n"
"Iterate over buffers, and write the contents of each to a file descriptor.\n"
"\n"
"Returns the total number of bytes written.\n"
"buffers must be a sequence of bytes-like objects."
msgstr ""

#: modes/api/python3.py:381
msgid ""
"random.Random(x=None) \n"
"Random number generator base class used by bound module functions.\n"
"\n"
"Used to instantiate instances of Random to get generators that don't\n"
"share state.\n"
"\n"
"Class Random can also be subclassed if you want to use a different basic\n"
"generator of your own devising: in that case, override the following\n"
"methods:  random(), seed(), getstate(), and setstate().\n"
"Optionally, implement a getrandbits() method so that randrange()\n"
"can cover arbitrarily large ranges."
msgstr ""

#: modes/api/python3.py:382
msgid ""
"random.SystemRandom(x=None) \n"
"Alternate random number generator using sources provided\n"
"by the operating system (such as /dev/urandom on Unix or\n"
"CryptGenRandom on Windows).\n"
"\n"
" Not available on all systems (see os.urandom() for details)."
msgstr ""

#: modes/api/python3.py:383
msgid ""
"random.betavariate(alpha, beta) \n"
"Beta distribution.\n"
"\n"
"Conditions on the parameters are alpha > 0 and beta > 0.\n"
"Returned values range between 0 and 1."
msgstr ""

#: modes/api/python3.py:384
msgid ""
"random.choice(seq) \n"
"Choose a random element from a non-empty sequence."
msgstr ""

#: modes/api/python3.py:385
msgid ""
"random.choices(population, weights=None, *, cum_weights=None, k=1) \n"
"Return a k sized list of population elements chosen with replacement.\n"
"\n"
"If the relative weights or cumulative weights are not specified,\n"
"the selections are made with equal probability."
msgstr ""

#: modes/api/python3.py:386
msgid ""
"random.expovariate(lambd) \n"
"Exponential distribution.\n"
"\n"
"lambd is 1.0 divided by the desired mean.  It should be\n"
"nonzero.  (The parameter would be called \"lambda\", but that is\n"
"a reserved word in Python.)  Returned values range from 0 to\n"
"positive infinity if lambd is positive, and from negative\n"
"infinity to 0 if lambd is negative."
msgstr ""

#: modes/api/python3.py:387
msgid ""
"random.gammavariate(alpha, beta) \n"
"Gamma distribution.  Not the gamma function!\n"
"\n"
"Conditions on the parameters are alpha > 0 and beta > 0.\n"
"\n"
"The probability distribution function is:\n"
"\n"
"            x ** (alpha - 1) * math.exp(-x / beta)\n"
"  pdf(x) =  --------------------------------------\n"
"              math.gamma(alpha) * beta ** alpha"
msgstr ""

#: modes/api/python3.py:388
msgid ""
"random.gauss(mu, sigma) \n"
"Gaussian distribution.\n"
"\n"
"mu is the mean, and sigma is the standard deviation.  This is\n"
"slightly faster than the normalvariate() function.\n"
"\n"
"Not thread-safe without a lock around calls."
msgstr ""

#: modes/api/python3.py:389
msgid ""
"random.getrandbits() \n"
"getrandbits(k) -> x.  Generates an int with k random bits."
msgstr ""

#: modes/api/python3.py:390
msgid ""
"random.getstate() \n"
"Return internal state; can be passed to setstate() later."
msgstr ""

#: modes/api/python3.py:391
msgid ""
"random.lognormvariate(mu, sigma) \n"
"Log normal distribution.\n"
"\n"
"If you take the natural logarithm of this distribution, you'll get a\n"
"normal distribution with mean mu and standard deviation sigma.\n"
"mu can have any value, and sigma must be greater than zero."
msgstr ""

#: modes/api/python3.py:392
msgid ""
"random.normalvariate(mu, sigma) \n"
"Normal distribution.\n"
"\n"
"mu is the mean, and sigma is the standard deviation."
msgstr ""

#: modes/api/python3.py:393
msgid ""
"random.paretovariate(alpha) \n"
"Pareto distribution.  alpha is the shape parameter."
msgstr ""

#: modes/api/python3.py:394
msgid ""
"random.randint(a, b) \n"
"Return random integer in range [a, b], including both end points.\n"
"        "
msgstr ""

#: modes/api/python3.py:395
msgid ""
"random.random() \n"
"random() -> x in the interval [0, 1)."
msgstr ""

#: modes/api/python3.py:396
msgid ""
"random.randrange(start, stop=None, step=1, _int=<class 'int'>) \n"
"Choose a random item from range(start, stop[, step]).\n"
"\n"
"This fixes the problem with randint() which includes the\n"
"endpoint; in Python this is usually not what you want."
msgstr ""

#: modes/api/python3.py:397
msgid ""
"random.sample(population, k) \n"
"Chooses k unique random elements from a population sequence or set.\n"
"\n"
"Returns a new list containing elements from the population while\n"
"leaving the original population unchanged.  The resulting list is\n"
"in selection order so that all sub-slices will also be valid random\n"
"samples.  This allows raffle winners (the sample) to be partitioned\n"
"into grand prize and second place winners (the subslices).\n"
"\n"
"Members of the population need not be hashable or unique.  If the\n"
"population contains repeats, then each occurrence is a possible\n"
"selection in the sample.\n"
"\n"
"To choose a sample in a range of integers, use range as an argument.\n"
"This is especially fast and space efficient for sampling from a\n"
"large population:   sample(range(10000000), 60)"
msgstr ""

#: modes/api/python3.py:398
msgid ""
"random.seed(a=None, version=2) \n"
"Initialize internal state from hashable object.\n"
"\n"
"None or no argument seeds from current time or from an operating\n"
"system specific randomness source if available.\n"
"\n"
"If *a* is an int, all bits are used.\n"
"\n"
"For version 2 (the default), all of the bits are used if *a* is a str,\n"
"bytes, or bytearray.  For version 1 (provided for reproducing random\n"
"sequences from older versions of Python), the algorithm for str and\n"
"bytes generates a narrower range of seeds."
msgstr ""

#: modes/api/python3.py:399
msgid ""
"random.setstate(state) \n"
"Restore internal state from object returned by getstate()."
msgstr ""

#: modes/api/python3.py:400
msgid ""
"random.shuffle(x, random=None) \n"
"Shuffle list x in place, and return None.\n"
"\n"
"Optional argument random is a 0-argument function returning a\n"
"random float in [0.0, 1.0); if it is the default None, the\n"
"standard random.random will be used."
msgstr ""

#: modes/api/python3.py:401
msgid ""
"random.triangular(low=0.0, high=1.0, mode=None) \n"
"Triangular distribution.\n"
"\n"
"Continuous distribution bounded by given lower and upper limits,\n"
"and having a given mode value in-between.\n"
"\n"
"http://en.wikipedia.org/wiki/Triangular_distribution"
msgstr ""

#: modes/api/python3.py:402
msgid ""
"random.uniform(a, b) \n"
"Get a random number in the range [a, b) or [a, b] depending on rounding."
msgstr ""

#: modes/api/python3.py:403
msgid ""
"random.vonmisesvariate(mu, kappa) \n"
"Circular data distribution.\n"
"\n"
"mu is the mean angle, expressed in radians between 0 and 2*pi, and\n"
"kappa is the concentration parameter, which must be greater than or\n"
"equal to zero.  If kappa is equal to zero, this distribution reduces\n"
"to a uniform random angle over the range 0 to 2*pi."
msgstr ""

#: modes/api/python3.py:404
msgid ""
"random.weibullvariate(alpha, beta) \n"
"Weibull distribution.\n"
"\n"
"alpha is the scale parameter and beta is the shape parameter."
msgstr ""

#: modes/api/python3.py:405
msgid ""
"socket.AddressFamily(value, names=None, *, module=None, qualname=None, "
"type=None, start=1) \n"
"An enumeration."
msgstr ""

#: modes/api/python3.py:406
msgid ""
"socket.AddressInfo(value, names=None, *, module=None, qualname=None, "
"type=None, start=1) \n"
"An enumeration."
msgstr ""

#: modes/api/python3.py:407
msgid ""
"socket.CMSG_LEN() \n"
"CMSG_LEN(length) -> control message length\n"
"\n"
"Return the total length, without trailing padding, of an ancillary\n"
"data item with associated data of the given length.  This value can\n"
"often be used as the buffer size for recvmsg() to receive a single\n"
"item of ancillary data, but RFC 3542 requires portable applications to\n"
"use CMSG_SPACE() and thus include space for padding, even when the\n"
"item will be the last in the buffer.  Raises OverflowError if length\n"
"is outside the permissible range of values."
msgstr ""

#: modes/api/python3.py:408
msgid ""
"socket.CMSG_SPACE() \n"
"CMSG_SPACE(length) -> buffer size\n"
"\n"
"Return the buffer size needed for recvmsg() to receive an ancillary\n"
"data item with associated data of the given length, along with any\n"
"trailing padding.  The buffer space needed to receive multiple items\n"
"is the sum of the CMSG_SPACE() values for their associated data\n"
"lengths.  Raises OverflowError if length is outside the permissible\n"
"range of values."
msgstr ""

#: modes/api/python3.py:409
msgid ""
"socket.IntEnum(value, names=None, *, module=None, qualname=None, type=None, "
"start=1) \n"
"Enum where members are also (and must be) ints"
msgstr ""

#: modes/api/python3.py:410
msgid ""
"socket.IntFlag(value, names=None, *, module=None, qualname=None, type=None, "
"start=1) \n"
"Support for integer-based Flags"
msgstr ""

#: modes/api/python3.py:411
msgid ""
"socket.MsgFlag(value, names=None, *, module=None, qualname=None, type=None, "
"start=1) \n"
"An enumeration."
msgstr ""

#: modes/api/python3.py:412
msgid ""
"socket.OSError() \n"
"Base class for I/O related errors."
msgstr ""

#: modes/api/python3.py:413
msgid ""
"socket.SocketIO(sock, mode) \n"
"Raw I/O implementation for stream sockets.\n"
"\n"
"This class supports the makefile() method on sockets.  It provides\n"
"the raw I/O interface on top of a socket object."
msgstr ""

#: modes/api/python3.py:414
msgid ""
"socket.SocketKind(value, names=None, *, module=None, qualname=None, "
"type=None, start=1) \n"
"An enumeration."
msgstr ""

#: modes/api/python3.py:415
msgid ""
"socket.create_connection(address, timeout=<object object at 0x7fcbd4efa180>, "
"source_address=None) \n"
"Connect to *address* and return the socket object.\n"
"\n"
"Convenience function.  Connect to *address* (a 2-tuple ``(host,\n"
"port)``) and return the socket object.  Passing the optional\n"
"*timeout* parameter will set the timeout on the socket instance\n"
"before attempting to connect.  If no *timeout* is supplied, the\n"
"global default timeout setting returned by :func:`getdefaulttimeout`\n"
"is used.  If *source_address* is set it must be a tuple of (host, port)\n"
"for the socket to bind as a source address before making the connection.\n"
"A host of '' or port 0 tells the OS to use the default."
msgstr ""

#: modes/api/python3.py:416
msgid ""
"socket.dup() \n"
"dup(integer) -> integer\n"
"\n"
"Duplicate an integer socket file descriptor.  This is like os.dup(), but "
"for\n"
"sockets; on some platforms os.dup() won't work for socket file descriptors."
msgstr ""

#: modes/api/python3.py:417
msgid ""
"socket.errno() \n"
"This module makes available standard errno system symbols.\n"
"\n"
"The value of each symbol is the corresponding integer value,\n"
"e.g., on most systems, errno.ENOENT equals the integer 2.\n"
"\n"
"The dictionary errno.errorcode maps numeric codes to symbol names,\n"
"e.g., errno.errorcode[2] could be the string 'ENOENT'.\n"
"\n"
"Symbols that are not relevant to the underlying system are not defined.\n"
"\n"
"To map error codes to error messages, use the function os.strerror(),\n"
"e.g. os.strerror(2) could return 'No such file or directory'."
msgstr ""

#: modes/api/python3.py:418
msgid ""
"socket.fromfd(fd, family, type, proto=0) \n"
"fromfd(fd, family, type[, proto]) -> socket object\n"
"\n"
"Create a socket object from a duplicate of the given file\n"
"descriptor.  The remaining arguments are the same as for socket()."
msgstr ""

#: modes/api/python3.py:419
msgid ""
"socket.gaierror() \n"
"Base class for I/O related errors."
msgstr ""

#: modes/api/python3.py:420
msgid ""
"socket.getaddrinfo(host, port, family=0, type=0, proto=0, flags=0) \n"
"Resolve host and port into list of address info entries.\n"
"\n"
"Translate the host/port argument into a sequence of 5-tuples that contain\n"
"all the necessary arguments for creating a socket connected to that "
"service.\n"
"host is a domain name, a string representation of an IPv4/v6 address or\n"
"None. port is a string service name such as 'http', a numeric port number "
"or\n"
"None. By passing None as the value of host and port, you can pass NULL to\n"
"the underlying C API.\n"
"\n"
"The family, type and proto arguments can be optionally specified in order "
"to\n"
"narrow the list of addresses returned. Passing zero as a value for each of\n"
"these arguments selects the full range of results."
msgstr ""

#: modes/api/python3.py:421
msgid ""
"socket.getdefaulttimeout() \n"
"getdefaulttimeout() -> timeout\n"
"\n"
"Returns the default timeout in seconds (float) for new socket objects.\n"
"A value of None indicates that new socket objects have no timeout.\n"
"When the socket module is first imported, the default is None."
msgstr ""

#: modes/api/python3.py:422
msgid ""
"socket.getfqdn(name='') \n"
"Get fully qualified domain name from name.\n"
"\n"
"An empty argument is interpreted as meaning the local host.\n"
"\n"
"First the hostname returned by gethostbyaddr() is checked, then\n"
"possibly existing aliases. In case no FQDN is available, hostname\n"
"from gethostname() is returned."
msgstr ""

#: modes/api/python3.py:423
msgid ""
"socket.gethostbyaddr() \n"
"gethostbyaddr(host) -> (name, aliaslist, addresslist)\n"
"\n"
"Return the true host name, a list of aliases, and a list of IP addresses,\n"
"for a host.  The host argument is a string giving a host name or IP number."
msgstr ""

#: modes/api/python3.py:424
msgid ""
"socket.gethostbyname() \n"
"gethostbyname(host) -> address\n"
"\n"
"Return the IP address (a string of the form '255.255.255.255') for a host."
msgstr ""

#: modes/api/python3.py:425
msgid ""
"socket.gethostbyname_ex() \n"
"gethostbyname_ex(host) -> (name, aliaslist, addresslist)\n"
"\n"
"Return the true host name, a list of aliases, and a list of IP addresses,\n"
"for a host.  The host argument is a string giving a host name or IP number."
msgstr ""

#: modes/api/python3.py:426
msgid ""
"socket.gethostname() \n"
"gethostname() -> string\n"
"\n"
"Return the current host name."
msgstr ""

#: modes/api/python3.py:427
msgid ""
"socket.getnameinfo() \n"
"getnameinfo(sockaddr, flags) --> (host, port)\n"
"\n"
"Get host and port for a sockaddr."
msgstr ""

#: modes/api/python3.py:428
msgid ""
"socket.getprotobyname() \n"
"getprotobyname(name) -> integer\n"
"\n"
"Return the protocol number for the named protocol.  (Rarely used.)"
msgstr ""

#: modes/api/python3.py:429
msgid ""
"socket.getservbyname() \n"
"getservbyname(servicename[, protocolname]) -> integer\n"
"\n"
"Return a port number from a service name and protocol name.\n"
"The optional protocol name, if given, should be 'tcp' or 'udp',\n"
"otherwise any protocol will match."
msgstr ""

#: modes/api/python3.py:430
msgid ""
"socket.getservbyport() \n"
"getservbyport(port[, protocolname]) -> string\n"
"\n"
"Return the service name from a port number and protocol name.\n"
"The optional protocol name, if given, should be 'tcp' or 'udp',\n"
"otherwise any protocol will match."
msgstr ""

#: modes/api/python3.py:431
msgid ""
"socket.herror() \n"
"Base class for I/O related errors."
msgstr ""

#: modes/api/python3.py:432
msgid ""
"socket.htonl() \n"
"htonl(integer) -> integer\n"
"\n"
"Convert a 32-bit integer from host to network byte order."
msgstr ""

#: modes/api/python3.py:433
msgid ""
"socket.htons() \n"
"htons(integer) -> integer\n"
"\n"
"Convert a 16-bit integer from host to network byte order."
msgstr ""

#: modes/api/python3.py:434
msgid ""
"socket.if_indextoname() \n"
"if_indextoname(if_index)\n"
"\n"
"Returns the interface name corresponding to the interface index if_index."
msgstr ""

#: modes/api/python3.py:435
msgid ""
"socket.if_nameindex() \n"
"if_nameindex()\n"
"\n"
"Returns a list of network interface information (index, name) tuples."
msgstr ""

#: modes/api/python3.py:436
msgid ""
"socket.if_nametoindex() \n"
"if_nametoindex(if_name)\n"
"\n"
"Returns the interface index corresponding to the interface name if_name."
msgstr ""

#: modes/api/python3.py:437
msgid ""
"socket.inet_aton() \n"
"inet_aton(string) -> bytes giving packed 32-bit IP representation\n"
"\n"
"Convert an IP address in string format (123.45.67.89) to the 32-bit packed\n"
"binary format used in low-level network functions."
msgstr ""

#: modes/api/python3.py:438
msgid ""
"socket.inet_ntoa() \n"
"inet_ntoa(packed_ip) -> ip_address_string\n"
"\n"
"Convert an IP address from 32-bit packed binary format to string format"
msgstr ""

#: modes/api/python3.py:439
msgid ""
"socket.inet_ntop() \n"
"inet_ntop(af, packed_ip) -> string formatted IP address\n"
"\n"
"Convert a packed IP address of the given family to string format."
msgstr ""

#: modes/api/python3.py:440
msgid ""
"socket.inet_pton() \n"
"inet_pton(af, ip) -> packed IP address string\n"
"\n"
"Convert an IP address from string format to a packed string suitable\n"
"for use with low-level network functions."
msgstr ""

#: modes/api/python3.py:441
msgid ""
"socket.io() \n"
"The io module provides the Python interfaces to stream handling. The\n"
"builtin open function is defined in this module.\n"
"\n"
"At the top of the I/O hierarchy is the abstract base class IOBase. It\n"
"defines the basic interface to a stream. Note, however, that there is no\n"
"separation between reading and writing to streams; implementations are\n"
"allowed to raise an OSError if they do not support a given operation.\n"
"\n"
"Extending IOBase is RawIOBase which deals simply with the reading and\n"
"writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide\n"
"an interface to OS files.\n"
"\n"
"BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its\n"
"subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer\n"
"streams that are readable, writable, and both respectively.\n"
"BufferedRandom provides a buffered interface to random access\n"
"streams. BytesIO is a simple stream of in-memory bytes.\n"
"\n"
"Another IOBase subclass, TextIOBase, deals with the encoding and decoding\n"
"of streams into text. TextIOWrapper, which extends it, is a buffered text\n"
"interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO\n"
"is an in-memory stream for text.\n"
"\n"
"Argument names are not part of the specification, and only the arguments\n"
"of open() are intended to be used as keyword arguments.\n"
"\n"
"data:\n"
"\n"
"DEFAULT_BUFFER_SIZE\n"
"\n"
"   An int containing the default buffer size used by the module's buffered\n"
"   I/O classes. open() uses the file's blksize (as obtained by os.stat) if\n"
"   possible."
msgstr ""

#: modes/api/python3.py:442
msgid ""
"socket.ntohl() \n"
"ntohl(integer) -> integer\n"
"\n"
"Convert a 32-bit integer from network to host byte order."
msgstr ""

#: modes/api/python3.py:443
msgid ""
"socket.ntohs() \n"
"ntohs(integer) -> integer\n"
"\n"
"Convert a 16-bit integer from network to host byte order."
msgstr ""

#: modes/api/python3.py:444
msgid ""
"socket.os() \n"
"OS routines for NT or Posix depending on what system we're on.\n"
"\n"
"This exports:\n"
"  - all functions from posix or nt, e.g. unlink, stat, etc.\n"
"  - os.path is either posixpath or ntpath\n"
"  - os.name is either 'posix' or 'nt'\n"
"  - os.curdir is a string representing the current directory (always '.')\n"
"  - os.pardir is a string representing the parent directory (always '..')\n"
"  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n"
"  - os.extsep is the extension separator (always '.')\n"
"  - os.altsep is the alternate pathname separator (None or '/')\n"
"  - os.pathsep is the component separator used in $PATH etc\n"
"  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r"
"\\n')\n"
"  - os.defpath is the default search path for executables\n"
"  - os.devnull is the file path of the null device ('/dev/null', etc.)\n"
"\n"
"Programs that import and use 'os' stand a better chance of being\n"
"portable between different platforms.  Of course, they must then\n"
"only use functions that are defined by all platforms (e.g., unlink\n"
"and opendir), and leave all pathname manipulation to os.path\n"
"(e.g., split and join)."
msgstr ""

#: modes/api/python3.py:445
msgid ""
"socket.selectors() \n"
"Selectors module.\n"
"\n"
"This module allows high-level and efficient I/O multiplexing, built upon "
"the\n"
"`select` module primitives."
msgstr ""

#: modes/api/python3.py:446
msgid ""
"socket.setdefaulttimeout() \n"
"setdefaulttimeout(timeout)\n"
"\n"
"Set the default timeout in seconds (float) for new socket objects.\n"
"A value of None indicates that new socket objects have no timeout.\n"
"When the socket module is first imported, the default is None."
msgstr ""

#: modes/api/python3.py:447
msgid ""
"socket.sethostname() \n"
"sethostname(name)\n"
"\n"
"Sets the hostname to name."
msgstr ""

#: modes/api/python3.py:448
msgid ""
"socket.socket() \n"
"socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None) -> socket "
"object\n"
"\n"
"Open a socket of the given type.  The family argument specifies the\n"
"address family; it defaults to AF_INET.  The type argument specifies\n"
"whether this is a stream (SOCK_STREAM, this is the default)\n"
"or datagram (SOCK_DGRAM) socket.  The protocol argument defaults to 0,\n"
"specifying the default protocol.  Keyword arguments are accepted.\n"
"The socket is created as non-inheritable.\n"
"\n"
"A socket object represents one endpoint of a network connection.\n"
"\n"
"Methods of socket objects (keyword arguments not allowed):\n"
"\n"
"_accept() -- accept connection, returning new socket fd and client address\n"
"bind(addr) -- bind the socket to a local address\n"
"close() -- close the socket\n"
"connect(addr) -- connect the socket to a remote address\n"
"connect_ex(addr) -- connect, return an error code instead of an exception\n"
"dup() -- return a new socket fd duplicated from fileno()\n"
"fileno() -- return underlying file descriptor\n"
"getpeername() -- return remote address [*]\n"
"getsockname() -- return local address\n"
"getsockopt(level, optname[, buflen]) -- get socket options\n"
"gettimeout() -- return timeout or None\n"
"listen([n]) -- start listening for incoming connections\n"
"recv(buflen[, flags]) -- receive data\n"
"recv_into(buffer[, nbytes[, flags]]) -- receive data (into a buffer)\n"
"recvfrom(buflen[, flags]) -- receive data and sender's address\n"
"recvfrom_into(buffer[, nbytes, [, flags])\n"
"  -- receive data and sender's address (into a buffer)\n"
"sendall(data[, flags]) -- send all data\n"
"send(data[, flags]) -- send data, may not send all of it\n"
"sendto(data[, flags], addr) -- send data to a given address\n"
"setblocking(0 | 1) -- set or clear the blocking I/O flag\n"
"setsockopt(level, optname, value[, optlen]) -- set socket options\n"
"settimeout(None | float) -- set or clear the timeout\n"
"shutdown(how) -- shut down traffic in one or both directions\n"
"if_nameindex() -- return all network interface indices and names\n"
"if_nametoindex(name) -- return the corresponding interface index\n"
"if_indextoname(index) -- return the corresponding interface name\n"
"\n"
" [*] not available on all platforms!"
msgstr ""

#: modes/api/python3.py:449
msgid ""
"socket.socket(family=<AddressFamily.AF_INET: 2>, type=<SocketKind."
"SOCK_STREAM: 1>, proto=0, fileno=None) \n"
"A subclass of _socket.socket adding the makefile() method."
msgstr ""

#: modes/api/python3.py:450
msgid ""
"socket.socketpair(family=None, type=<SocketKind.SOCK_STREAM: 1>, proto=0) \n"
"socketpair([family[, type[, proto]]]) -> (socket object, socket object)\n"
"Create a pair of socket objects from the sockets returned by the platform\n"
"socketpair() function.\n"
"The arguments are the same as for socket() except the default family is "
"AF_UNIX\n"
"if defined on the platform; otherwise, the default is AF_INET."
msgstr ""

#: modes/api/python3.py:451
msgid ""
"socket.sys() \n"
"This module provides access to some objects used or maintained by the\n"
"interpreter and to functions that interact strongly with the interpreter.\n"
"\n"
"Dynamic objects:\n"
"\n"
"argv -- command line arguments; argv[0] is the script pathname if known\n"
"path -- module search path; path[0] is the script directory, else ''\n"
"modules -- dictionary of loaded modules\n"
"\n"
"displayhook -- called to show results in an interactive session\n"
"excepthook -- called to handle any uncaught exception other than SystemExit\n"
"  To customize printing in an interactive session or to install a custom\n"
"  top-level exception handler, assign other functions to replace these.\n"
"\n"
"stdin -- standard input file object; used by input()\n"
"stdout -- standard output file object; used by print()\n"
"stderr -- standard error object; used for error messages\n"
"  By assigning other file objects (or objects that behave like files)\n"
"  to these, it is possible to redirect all of the interpreter's I/O.\n"
"\n"
"last_type -- type of last uncaught exception\n"
"last_value -- value of last uncaught exception\n"
"last_traceback -- traceback of last uncaught exception\n"
"  These three are only available in an interactive session after a\n"
"  traceback has been printed.\n"
"\n"
"Static objects:\n"
"\n"
"builtin_module_names -- tuple of module names built into this interpreter\n"
"copyright -- copyright notice pertaining to this interpreter\n"
"exec_prefix -- prefix used to find the machine-specific Python library\n"
"executable -- absolute path of the executable binary of the Python "
"interpreter\n"
"float_info -- a struct sequence with information about the float "
"implementation.\n"
"float_repr_style -- string indicating the style of repr() output for floats\n"
"hash_info -- a struct sequence with information about the hash algorithm.\n"
"hexversion -- version information encoded as a single integer\n"
"implementation -- Python implementation information.\n"
"int_info -- a struct sequence with information about the int "
"implementation.\n"
"maxsize -- the largest supported length of containers.\n"
"maxunicode -- the value of the largest Unicode code point\n"
"platform -- platform identifier\n"
"prefix -- prefix used to find the Python library\n"
"thread_info -- a struct sequence with information about the thread "
"implementation.\n"
"version -- the version of this interpreter as a string\n"
"version_info -- version information as a named tuple\n"
"__stdin__ -- the original stdin; don't touch!\n"
"__stdout__ -- the original stdout; don't touch!\n"
"__stderr__ -- the original stderr; don't touch!\n"
"__displayhook__ -- the original displayhook; don't touch!\n"
"__excepthook__ -- the original excepthook; don't touch!\n"
"\n"
"Functions:\n"
"\n"
"displayhook() -- print an object to the screen, and save it in builtins._\n"
"excepthook() -- print an exception and its traceback to sys.stderr\n"
"exc_info() -- return thread-safe information about the current exception\n"
"exit() -- exit the interpreter by raising SystemExit\n"
"getdlopenflags() -- returns flags to be used for dlopen() calls\n"
"getprofile() -- get the global profiling function\n"
"getrefcount() -- return the reference count for an object (plus one :-)\n"
"getrecursionlimit() -- return the max recursion depth for the interpreter\n"
"getsizeof() -- return the size of an object in bytes\n"
"gettrace() -- get the global debug tracing function\n"
"setcheckinterval() -- control how often the interpreter checks for events\n"
"setdlopenflags() -- set the flags to be used for dlopen() calls\n"
"setprofile() -- set the global profiling function\n"
"setrecursionlimit() -- set the max recursion depth for the interpreter\n"
"settrace() -- set the global debug tracing function"
msgstr ""

#: modes/api/python3.py:452
msgid ""
"socket.timeout() \n"
"Base class for I/O related errors."
msgstr ""

#: modes/api/python3.py:453
msgid ""
"sys.call_tracing() \n"
"call_tracing(func, args) -> object\n"
"\n"
"Call func(*args), while tracing is enabled.  The tracing state is\n"
"saved, and restored afterwards.  This is intended to be called from\n"
"a debugger from a checkpoint, to recursively debug some other code."
msgstr ""

#: modes/api/python3.py:454
msgid ""
"sys.callstats() \n"
"callstats() -> tuple of integers\n"
"\n"
"Return a tuple of function call statistics, if CALL_PROFILE was defined\n"
"when Python was built.  Otherwise, return None.\n"
"\n"
"When enabled, this function returns detailed, implementation-specific\n"
"details about the number of function calls executed. The return value is\n"
"a 11-tuple where the entries in the tuple are counts of:\n"
"0. all function calls\n"
"1. calls to PyFunction_Type objects\n"
"2. PyFunction calls that do not create an argument tuple\n"
"3. PyFunction calls that do not create an argument tuple\n"
"   and bypass PyEval_EvalCodeEx()\n"
"4. PyMethod calls\n"
"5. PyMethod calls on bound methods\n"
"6. PyType calls\n"
"7. PyCFunction calls\n"
"8. generator calls\n"
"9. All other calls\n"
"10. Number of stack pops performed by call_function()"
msgstr ""

#: modes/api/python3.py:455
msgid ""
"sys.displayhook() \n"
"displayhook(object) -> None\n"
"\n"
"Print an object to sys.stdout and also save it in builtins._"
msgstr ""

#: modes/api/python3.py:456
msgid ""
"sys.exc_info() \n"
"exc_info() -> (type, value, traceback)\n"
"\n"
"Return information about the most recent exception caught by an except\n"
"clause in the current stack frame or in an older stack frame."
msgstr ""

#: modes/api/python3.py:457
msgid ""
"sys.excepthook() \n"
"excepthook(exctype, value, traceback) -> None\n"
"\n"
"Handle an exception by displaying it with a traceback on sys.stderr."
msgstr ""

#: modes/api/python3.py:458
msgid ""
"sys.exit() \n"
"exit([status])\n"
"\n"
"Exit the interpreter by raising SystemExit(status).\n"
"If the status is omitted or None, it defaults to zero (i.e., success).\n"
"If the status is an integer, it will be used as the system exit status.\n"
"If it is another kind of object, it will be printed and the system\n"
"exit status will be one (i.e., failure)."
msgstr ""

#: modes/api/python3.py:459
msgid ""
"sys.get_asyncgen_hooks() \n"
"get_asyncgen_hooks()\n"
"\n"
"Return a namedtuple of installed asynchronous generators hooks (firstiter, "
"finalizer)."
msgstr ""

#: modes/api/python3.py:460
msgid ""
"sys.get_coroutine_wrapper() \n"
"get_coroutine_wrapper()\n"
"\n"
"Return the wrapper for coroutine objects set by sys.set_coroutine_wrapper."
msgstr ""

#: modes/api/python3.py:461
msgid ""
"sys.getallocatedblocks() \n"
"getallocatedblocks() -> integer\n"
"\n"
"Return the number of memory blocks currently allocated, regardless of their\n"
"size."
msgstr ""

#: modes/api/python3.py:462
msgid ""
"sys.getcheckinterval() \n"
"getcheckinterval() -> current check interval; see setcheckinterval()."
msgstr ""

#: modes/api/python3.py:463
msgid ""
"sys.getdefaultencoding() \n"
"getdefaultencoding() -> string\n"
"\n"
"Return the current default string encoding used by the Unicode \n"
"implementation."
msgstr ""

#: modes/api/python3.py:464
msgid ""
"sys.getdlopenflags() \n"
"getdlopenflags() -> int\n"
"\n"
"Return the current value of the flags that are used for dlopen calls.\n"
"The flag constants are defined in the os module."
msgstr ""

#: modes/api/python3.py:465
msgid ""
"sys.getfilesystemencodeerrors() \n"
"getfilesystemencodeerrors() -> string\n"
"\n"
"Return the error mode used to convert Unicode filenames in\n"
"operating system filenames."
msgstr ""

#: modes/api/python3.py:466
msgid ""
"sys.getfilesystemencoding() \n"
"getfilesystemencoding() -> string\n"
"\n"
"Return the encoding used to convert Unicode filenames in\n"
"operating system filenames."
msgstr ""

#: modes/api/python3.py:467
msgid ""
"sys.getprofile() \n"
"getprofile()\n"
"\n"
"Return the profiling function set with sys.setprofile.\n"
"See the profiler chapter in the library manual."
msgstr ""

#: modes/api/python3.py:468
msgid ""
"sys.getrecursionlimit() \n"
"getrecursionlimit()\n"
"\n"
"Return the current value of the recursion limit, the maximum depth\n"
"of the Python interpreter stack.  This limit prevents infinite\n"
"recursion from causing an overflow of the C stack and crashing Python."
msgstr ""

#: modes/api/python3.py:469
msgid ""
"sys.getrefcount() \n"
"getrefcount(object) -> integer\n"
"\n"
"Return the reference count of object.  The count returned is generally\n"
"one higher than you might expect, because it includes the (temporary)\n"
"reference as an argument to getrefcount()."
msgstr ""

#: modes/api/python3.py:470
msgid ""
"sys.getsizeof() \n"
"getsizeof(object, default) -> int\n"
"\n"
"Return the size of object in bytes."
msgstr ""

#: modes/api/python3.py:471
msgid ""
"sys.getswitchinterval() \n"
"getswitchinterval() -> current thread switch interval; see "
"setswitchinterval()."
msgstr ""

#: modes/api/python3.py:472
msgid ""
"sys.gettrace() \n"
"gettrace()\n"
"\n"
"Return the global debug tracing function set with sys.settrace.\n"
"See the debugger chapter in the library manual."
msgstr ""

#: modes/api/python3.py:473
msgid ""
"sys.intern() \n"
"intern(string) -> string\n"
"\n"
"``Intern'' the given string.  This enters the string in the (global)\n"
"table of interned strings whose purpose is to speed up dictionary lookups.\n"
"Return the string itself or the previously interned string object with the\n"
"same value."
msgstr ""

#: modes/api/python3.py:474
msgid ""
"sys.is_finalizing() \n"
"is_finalizing()\n"
"Return True if Python is exiting."
msgstr ""

#: modes/api/python3.py:475
msgid ""
"sys.set_asyncgen_hooks() \n"
"set_asyncgen_hooks(*, firstiter=None, finalizer=None)\n"
"\n"
"Set a finalizer for async generators objects."
msgstr ""

#: modes/api/python3.py:476
msgid ""
"sys.set_coroutine_wrapper() \n"
"set_coroutine_wrapper(wrapper)\n"
"\n"
"Set a wrapper for coroutine objects."
msgstr ""

#: modes/api/python3.py:477
msgid ""
"sys.setcheckinterval() \n"
"setcheckinterval(n)\n"
"\n"
"Tell the Python interpreter to check for asynchronous events every\n"
"n instructions.  This also affects how often thread switches occur."
msgstr ""

#: modes/api/python3.py:478
msgid ""
"sys.setdlopenflags() \n"
"setdlopenflags(n) -> None\n"
"\n"
"Set the flags used by the interpreter for dlopen calls, such as when the\n"
"interpreter loads extension modules.  Among other things, this will enable\n"
"a lazy resolving of symbols when importing a module, if called as\n"
"sys.setdlopenflags(0).  To share symbols across extension modules, call as\n"
"sys.setdlopenflags(os.RTLD_GLOBAL).  Symbolic names for the flag modules\n"
"can be found in the os module (RTLD_xxx constants, e.g. os.RTLD_LAZY)."
msgstr ""

#: modes/api/python3.py:479
msgid ""
"sys.setprofile() \n"
"setprofile(function)\n"
"\n"
"Set the profiling function.  It will be called on each function call\n"
"and return.  See the profiler chapter in the library manual."
msgstr ""

#: modes/api/python3.py:480
msgid ""
"sys.setrecursionlimit() \n"
"setrecursionlimit(n)\n"
"\n"
"Set the maximum depth of the Python interpreter stack to n.  This\n"
"limit prevents infinite recursion from causing an overflow of the C\n"
"stack and crashing Python.  The highest possible limit is platform-\n"
"dependent."
msgstr ""

#: modes/api/python3.py:481
msgid ""
"sys.setswitchinterval() \n"
"setswitchinterval(n)\n"
"\n"
"Set the ideal thread switching delay inside the Python interpreter\n"
"The actual frequency of switching threads can be lower if the\n"
"interpreter executes long sequences of uninterruptible code\n"
"(this is implementation-specific and workload-dependent).\n"
"\n"
"The parameter must represent the desired switching delay in seconds\n"
"A typical value is 0.005 (5 milliseconds)."
msgstr ""

#: modes/api/python3.py:482
msgid ""
"sys.settrace() \n"
"settrace(function)\n"
"\n"
"Set the global debug tracing function.  It will be called on each\n"
"function call.  See the debugger chapter in the library manual."
msgstr ""

#: modes/api/python3.py:483
msgid ""
"time.asctime() \n"
"asctime([tuple]) -> string\n"
"\n"
"Convert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.\n"
"When the time tuple is not present, current time as returned by localtime()\n"
"is used."
msgstr ""

#: modes/api/python3.py:484
msgid ""
"time.clock() \n"
"clock() -> floating point number\n"
"\n"
"Return the CPU time or real time since the start of the process or since\n"
"the first call to clock().  This has as much precision as the system\n"
"records."
msgstr ""

#: modes/api/python3.py:485
msgid ""
"time.clock_getres() \n"
"clock_getres(clk_id) -> floating point number\n"
"\n"
"Return the resolution (precision) of the specified clock clk_id."
msgstr ""

#: modes/api/python3.py:486
msgid ""
"time.clock_gettime() \n"
"clock_gettime(clk_id) -> floating point number\n"
"\n"
"Return the time of the specified clock clk_id."
msgstr ""

#: modes/api/python3.py:487
msgid ""
"time.clock_settime() \n"
"clock_settime(clk_id, time)\n"
"\n"
"Set the time of the specified clock clk_id."
msgstr ""

#: modes/api/python3.py:488
msgid ""
"time.ctime() \n"
"ctime(seconds) -> string\n"
"\n"
"Convert a time in seconds since the Epoch to a string in local time.\n"
"This is equivalent to asctime(localtime(seconds)). When the time tuple is\n"
"not present, current time as returned by localtime() is used."
msgstr ""

#: modes/api/python3.py:489
msgid ""
"time.get_clock_info() \n"
"get_clock_info(name: str) -> dict\n"
"\n"
"Get information of the specified clock."
msgstr ""

#: modes/api/python3.py:490
msgid ""
"time.gmtime() \n"
"gmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min,\n"
"                       tm_sec, tm_wday, tm_yday, tm_isdst)\n"
"\n"
"Convert seconds since the Epoch to a time tuple expressing UTC (a.k.a.\n"
"GMT).  When 'seconds' is not passed in, convert the current time instead.\n"
"\n"
"If the platform supports the tm_gmtoff and tm_zone, they are available as\n"
"attributes only."
msgstr ""

#: modes/api/python3.py:491
msgid ""
"time.localtime() \n"
"localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,\n"
"                          tm_sec,tm_wday,tm_yday,tm_isdst)\n"
"\n"
"Convert seconds since the Epoch to a time tuple expressing local time.\n"
"When 'seconds' is not passed in, convert the current time instead."
msgstr ""

#: modes/api/python3.py:492
msgid ""
"time.mktime() \n"
"mktime(tuple) -> floating point number\n"
"\n"
"Convert a time tuple in local time to seconds since the Epoch.\n"
"Note that mktime(gmtime(0)) will not generally return zero for most\n"
"time zones; instead the returned value will either be equal to that\n"
"of the timezone or altzone attributes on the time module."
msgstr ""

#: modes/api/python3.py:493
msgid ""
"time.monotonic() \n"
"monotonic() -> float\n"
"\n"
"Monotonic clock, cannot go backward."
msgstr ""

#: modes/api/python3.py:494
msgid ""
"time.perf_counter() \n"
"perf_counter() -> float\n"
"\n"
"Performance counter for benchmarking."
msgstr ""

#: modes/api/python3.py:495
msgid ""
"time.process_time() \n"
"process_time() -> float\n"
"\n"
"Process time for profiling: sum of the kernel and user-space CPU time."
msgstr ""

#: modes/api/python3.py:496
msgid ""
"time.sleep() \n"
"sleep(seconds)\n"
"\n"
"Delay execution for a given number of seconds.  The argument may be\n"
"a floating point number for subsecond precision."
msgstr ""

#: modes/api/python3.py:497
msgid ""
"time.strftime() \n"
"strftime(format[, tuple]) -> string\n"
"\n"
"Convert a time tuple to a string according to a format specification.\n"
"See the library reference manual for formatting codes. When the time tuple\n"
"is not present, current time as returned by localtime() is used.\n"
"\n"
"Commonly used format codes:\n"
"\n"
"%Y  Year with century as a decimal number.\n"
"%m  Month as a decimal number [01,12].\n"
"%d  Day of the month as a decimal number [01,31].\n"
"%H  Hour (24-hour clock) as a decimal number [00,23].\n"
"%M  Minute as a decimal number [00,59].\n"
"%S  Second as a decimal number [00,61].\n"
"%z  Time zone offset from UTC.\n"
"%a  Locale's abbreviated weekday name.\n"
"%A  Locale's full weekday name.\n"
"%b  Locale's abbreviated month name.\n"
"%B  Locale's full month name.\n"
"%c  Locale's appropriate date and time representation.\n"
"%I  Hour (12-hour clock) as a decimal number [01,12].\n"
"%p  Locale's equivalent of either AM or PM.\n"
"\n"
"Other codes may be available on your platform.  See documentation for\n"
"the C library strftime function."
msgstr ""

#: modes/api/python3.py:498
msgid ""
"time.strptime() \n"
"strptime(string, format) -> struct_time\n"
"\n"
"Parse a string to a time tuple according to a format specification.\n"
"See the library reference manual for formatting codes (same as\n"
"strftime()).\n"
"\n"
"Commonly used format codes:\n"
"\n"
"%Y  Year with century as a decimal number.\n"
"%m  Month as a decimal number [01,12].\n"
"%d  Day of the month as a decimal number [01,31].\n"
"%H  Hour (24-hour clock) as a decimal number [00,23].\n"
"%M  Minute as a decimal number [00,59].\n"
"%S  Second as a decimal number [00,61].\n"
"%z  Time zone offset from UTC.\n"
"%a  Locale's abbreviated weekday name.\n"
"%A  Locale's full weekday name.\n"
"%b  Locale's abbreviated month name.\n"
"%B  Locale's full month name.\n"
"%c  Locale's appropriate date and time representation.\n"
"%I  Hour (12-hour clock) as a decimal number [01,12].\n"
"%p  Locale's equivalent of either AM or PM.\n"
"\n"
"Other codes may be available on your platform.  See documentation for\n"
"the C library strftime function."
msgstr ""

#: modes/api/python3.py:499
msgid ""
"time.struct_time() \n"
"The time value as returned by gmtime(), localtime(), and strptime(), and\n"
"accepted by asctime(), mktime() and strftime().  May be considered as a\n"
"sequence of 9 integers.\n"
"\n"
"Note that several fields' values are not the same as those defined by\n"
"the C language standard for struct tm.  For example, the value of the\n"
"field tm_year is the actual year, not year - 1900.  See individual\n"
"fields' descriptions for details."
msgstr ""

#: modes/api/python3.py:500
msgid ""
"time.time() \n"
"time() -> floating point number\n"
"\n"
"Return the current time in seconds since the Epoch.\n"
"Fractions of a second may be present if the system clock provides them."
msgstr ""

#: modes/api/python3.py:501
msgid ""
"time.tzset() \n"
"tzset()\n"
"\n"
"Initialize, or reinitialize, the local timezone to the value stored in\n"
"os.environ['TZ']. The TZ environment variable should be specified in\n"
"standard Unix timezone format as documented in the tzset man page\n"
"(eg. 'US/Eastern', 'Europe/Amsterdam'). Unknown timezones will silently\n"
"fall back to UTC. If the TZ environment variable is not set, the local\n"
"timezone is set to the systems best guess of wallclock time.\n"
"Changing the TZ environment variable without calling tzset *may* change\n"
"the local timezone used by methods such as localtime, but this behaviour\n"
"should not be relied on."
msgstr ""

#: modes/api/python3.py:502
msgid ""
"turtle.Canvas(master=None, cnf={}, **kw) \n"
"Canvas widget to display graphical elements like lines or text."
msgstr ""

#: modes/api/python3.py:503 modes/api/python3.py:504
msgid ""
"turtle.RawTurtle(canvas=None, shape='classic', undobuffersize=1000, "
"visible=True) \n"
"Animation part of the RawTurtle.\n"
"Puts RawTurtle upon a TurtleScreen and provides tools for\n"
"its animation."
msgstr ""

#: modes/api/python3.py:505
msgid ""
"turtle.Screen() \n"
"Return the singleton screen object.\n"
"If none exists at the moment, create a new one and return it,\n"
"else return the existing one."
msgstr ""

#: modes/api/python3.py:506
msgid ""
"turtle.ScrolledCanvas(master, width=500, height=350, canvwidth=600, "
"canvheight=500) \n"
"Modeled after the scrolled canvas class from Grayons's Tkinter book.\n"
"\n"
"Used as the default canvas, which pops up automatically when\n"
"using turtle graphics functions or the Turtle class."
msgstr ""

#: modes/api/python3.py:507
msgid ""
"turtle.Shape(type_, data=None) \n"
"Data structure modeling shapes.\n"
"\n"
"attribute _type is one of \"polygon\", \"image\", \"compound\"\n"
"attribute _data is - depending on _type a poygon-tuple,\n"
"an image or a list constructed using the addcomponent method."
msgstr ""

#: modes/api/python3.py:508
msgid ""
"turtle.TNavigator(mode='standard') \n"
"Navigation part of the RawTurtle.\n"
"Implements methods for turtle movement."
msgstr ""

#: modes/api/python3.py:509
msgid ""
"turtle.TPen(resizemode='noresize') \n"
"Drawing part of the RawTurtle.\n"
"Implements drawing properties."
msgstr ""

#: modes/api/python3.py:510
msgid ""
"turtle.Tbuffer(bufsize=10) \n"
"Ring buffer used as undobuffer for RawTurtle objects."
msgstr ""

#: modes/api/python3.py:511
msgid ""
"turtle.Terminator() \n"
"Will be raised in TurtleScreen.update, if _RUNNING becomes False.\n"
"\n"
"This stops execution of a turtle graphics script.\n"
"Main purpose: use in the Demo-Viewer turtle.Demo.py."
msgstr ""

#: modes/api/python3.py:512 modes/api/python3.py:513
msgid ""
"turtle.Turtle(shape='classic', undobuffersize=1000, visible=True) \n"
"RawTurtle auto-creating (scrolled) canvas.\n"
"\n"
"When a Turtle object is created or a function derived from some\n"
"Turtle method is called a TurtleScreen object is automatically created."
msgstr ""

#: modes/api/python3.py:514
msgid ""
"turtle.TurtleGraphicsError() \n"
"Some TurtleGraphics Error\n"
"    "
msgstr ""

#: modes/api/python3.py:515
msgid ""
"turtle.TurtleScreen(cv, mode='standard', colormode=1.0, delay=10) \n"
"Provides screen oriented methods like setbg etc.\n"
"\n"
"Only relies upon the methods of TurtleScreenBase and NOT\n"
"upon components of the underlying graphics toolkit -\n"
"which is Tkinter in this case."
msgstr ""

#: modes/api/python3.py:516
msgid ""
"turtle.TurtleScreenBase(cv) \n"
"Provide the basic graphics functionality.\n"
"Interface between Tkinter and turtle.py.\n"
"\n"
"To port turtle.py to some different graphics toolkit\n"
"a corresponding TurtleScreenBase class has to be implemented."
msgstr ""

#: modes/api/python3.py:517
msgid ""
"turtle.Vec2D(x, y) \n"
"A 2 dimensional vector class, used as a helper class\n"
"for implementing turtle graphics.\n"
"May be useful for turtle graphics programs also.\n"
"Derived from tuple, so a vector is a tuple!\n"
"\n"
"Provides (for a, b vectors, k number):\n"
"   a+b vector addition\n"
"   a-b vector subtraction\n"
"   a*b inner product\n"
"   k*a and a*k multiplication with scalar\n"
"   |a| absolute value of a\n"
"   a.rotate(angle) rotation"
msgstr ""

#: modes/api/python3.py:518
msgid ""
"turtle.addshape(name, shape=None) \n"
"Adds a turtle shape to TurtleScreen's shapelist.\n"
"\n"
"Arguments:\n"
"(1) name is the name of a gif-file and shape is None.\n"
"    Installs the corresponding image shape.\n"
"    !! Image-shapes DO NOT rotate when turning the turtle,\n"
"    !! so they do not display the heading of the turtle!\n"
"(2) name is an arbitrary string and shape is a tuple\n"
"    of pairs of coordinates. Installs the corresponding\n"
"    polygon shape\n"
"(3) name is an arbitrary string and shape is a\n"
"    (compound) Shape object. Installs the corresponding\n"
"    compound shape.\n"
"To use a shape, you have to issue the command shape(shapename).\n"
"\n"
"call: register_shape(\"turtle.gif\")\n"
"--or: register_shape(\"tri\", ((0,0), (10,10), (-10,10)))\n"
"\n"
"Example:\n"
">>> register_shape(\"triangle\", ((5,-3),(0,5),(-5,-3)))"
msgstr ""

#: modes/api/python3.py:519
msgid ""
"turtle.back(distance) \n"
"Move the turtle backward by distance.\n"
"\n"
"Aliases: back | backward | bk\n"
"\n"
"Argument:\n"
"distance -- a number\n"
"\n"
"Move the turtle backward by distance ,opposite to the direction the\n"
"turtle is headed. Do not change the turtle's heading.\n"
"\n"
"Example:\n"
">>> position()\n"
"(0.00, 0.00)\n"
">>> backward(30)\n"
">>> position()\n"
"(-30.00, 0.00)"
msgstr ""

#: modes/api/python3.py:520
msgid ""
"turtle.backward(distance) \n"
"Move the turtle backward by distance.\n"
"\n"
"Aliases: back | backward | bk\n"
"\n"
"Argument:\n"
"distance -- a number\n"
"\n"
"Move the turtle backward by distance ,opposite to the direction the\n"
"turtle is headed. Do not change the turtle's heading.\n"
"\n"
"Example:\n"
">>> position()\n"
"(0.00, 0.00)\n"
">>> backward(30)\n"
">>> position()\n"
"(-30.00, 0.00)"
msgstr ""

#: modes/api/python3.py:521
msgid ""
"turtle.begin_fill() \n"
"Called just before drawing a shape to be filled.\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> color(\"black\", \"red\")\n"
">>> begin_fill()\n"
">>> circle(60)\n"
">>> end_fill()"
msgstr ""

#: modes/api/python3.py:522
msgid ""
"turtle.begin_poly() \n"
"Start recording the vertices of a polygon.\n"
"\n"
"No argument.\n"
"\n"
"Start recording the vertices of a polygon. Current turtle position\n"
"is first point of polygon.\n"
"\n"
"Example:\n"
">>> begin_poly()"
msgstr ""

#: modes/api/python3.py:523
msgid ""
"turtle.bgcolor(*args) \n"
"Set or return backgroundcolor of the TurtleScreen.\n"
"\n"
"Arguments (if given): a color string or three numbers\n"
"in the range 0..colormode or a 3-tuple of such numbers.\n"
"\n"
"Example:\n"
">>> bgcolor(\"orange\")\n"
">>> bgcolor()\n"
"'orange'\n"
">>> bgcolor(0.5,0,0.5)\n"
">>> bgcolor()\n"
"'#800080'"
msgstr ""

#: modes/api/python3.py:524
msgid ""
"turtle.bgpic(picname=None) \n"
"Set background image or return name of current backgroundimage.\n"
"\n"
"Optional argument:\n"
"picname -- a string, name of a gif-file or \"nopic\".\n"
"\n"
"If picname is a filename, set the corresponding image as background.\n"
"If picname is \"nopic\", delete backgroundimage, if present.\n"
"If picname is None, return the filename of the current backgroundimage.\n"
"\n"
"Example:\n"
">>> bgpic()\n"
"'nopic'\n"
">>> bgpic(\"landscape.gif\")\n"
">>> bgpic()\n"
"'landscape.gif'"
msgstr ""

#: modes/api/python3.py:525
msgid ""
"turtle.bk(distance) \n"
"Move the turtle backward by distance.\n"
"\n"
"Aliases: back | backward | bk\n"
"\n"
"Argument:\n"
"distance -- a number\n"
"\n"
"Move the turtle backward by distance ,opposite to the direction the\n"
"turtle is headed. Do not change the turtle's heading.\n"
"\n"
"Example:\n"
">>> position()\n"
"(0.00, 0.00)\n"
">>> backward(30)\n"
">>> position()\n"
"(-30.00, 0.00)"
msgstr ""

#: modes/api/python3.py:526
msgid ""
"turtle.bye() \n"
"Shut the turtlegraphics window.\n"
"\n"
"Example:\n"
">>> bye()"
msgstr ""

#: modes/api/python3.py:527
msgid ""
"turtle.circle(radius, extent=None, steps=None) \n"
"Draw a circle with given radius.\n"
"\n"
"Arguments:\n"
"radius -- a number\n"
"extent (optional) -- a number\n"
"steps (optional) -- an integer\n"
"\n"
"Draw a circle with given radius. The center is radius units left\n"
"of the turtle; extent - an angle - determines which part of the\n"
"circle is drawn. If extent is not given, draw the entire circle.\n"
"If extent is not a full circle, one endpoint of the arc is the\n"
"current pen position. Draw the arc in counterclockwise direction\n"
"if radius is positive, otherwise in clockwise direction. Finally\n"
"the direction of the turtle is changed by the amount of extent.\n"
"\n"
"As the circle is approximated by an inscribed regular polygon,\n"
"steps determines the number of steps to use. If not given,\n"
"it will be calculated automatically. Maybe used to draw regular\n"
"polygons.\n"
"\n"
"call: circle(radius)                  # full circle\n"
"--or: circle(radius, extent)          # arc\n"
"--or: circle(radius, extent, steps)\n"
"--or: circle(radius, steps=6)         # 6-sided polygon\n"
"\n"
"Example:\n"
">>> circle(50)\n"
">>> circle(120, 180)  # semicircle"
msgstr ""

#: modes/api/python3.py:528
msgid ""
"turtle.clear() \n"
"Delete the turtle's drawings from the screen. Do not move \n"
"\n"
"No arguments.\n"
"\n"
"Delete the turtle's drawings from the screen. Do not move \n"
"State and position of the turtle as well as drawings of other\n"
"turtles are not affected.\n"
"\n"
"Examples:\n"
">>> clear()"
msgstr ""

#: modes/api/python3.py:529
msgid ""
"turtle.clearscreen() \n"
"Delete all drawings and all turtles from the TurtleScreen.\n"
"\n"
"No argument.\n"
"\n"
"Reset empty TurtleScreen to its initial state: white background,\n"
"no backgroundimage, no eventbindings and tracing on.\n"
"\n"
"Example:\n"
">>> clear()\n"
"\n"
"Note: this method is not available as function."
msgstr ""

#: modes/api/python3.py:530
msgid ""
"turtle.clearstamp(stampid) \n"
"Delete stamp with given stampid\n"
"\n"
"Argument:\n"
"stampid - an integer, must be return value of previous stamp() call.\n"
"\n"
"Example:\n"
">>> color(\"blue\")\n"
">>> astamp = stamp()\n"
">>> fd(50)\n"
">>> clearstamp(astamp)"
msgstr ""

#: modes/api/python3.py:531
msgid ""
"turtle.clearstamps(n=None) \n"
"Delete all or first/last n of turtle's stamps.\n"
"\n"
"Optional argument:\n"
"n -- an integer\n"
"\n"
"If n is None, delete all of pen's stamps,\n"
"else if n > 0 delete first n stamps\n"
"else if n < 0 delete last n stamps.\n"
"\n"
"Example:\n"
">>> for i in range(8):\n"
"...     stamp(); fd(30)\n"
"...\n"
">>> clearstamps(2)\n"
">>> clearstamps(-2)\n"
">>> clearstamps()"
msgstr ""

#: modes/api/python3.py:532
msgid ""
"turtle.clone() \n"
"Create and return a clone of the \n"
"\n"
"No argument.\n"
"\n"
"Create and return a clone of the turtle with same position, heading\n"
"and turtle properties.\n"
"\n"
"Example (for a Turtle instance named mick):\n"
"mick = Turtle()\n"
"joe = mick.clone()"
msgstr ""

#: modes/api/python3.py:533
msgid ""
"turtle.color(*args) \n"
"Return or set the pencolor and fillcolor.\n"
"\n"
"Arguments:\n"
"Several input formats are allowed.\n"
"They use 0, 1, 2, or 3 arguments as follows:\n"
"\n"
"color()\n"
"    Return the current pencolor and the current fillcolor\n"
"    as a pair of color specification strings as are returned\n"
"    by pencolor and fillcolor.\n"
"color(colorstring), color((r,g,b)), color(r,g,b)\n"
"    inputs as in pencolor, set both, fillcolor and pencolor,\n"
"    to the given value.\n"
"color(colorstring1, colorstring2),\n"
"color((r1,g1,b1), (r2,g2,b2))\n"
"    equivalent to pencolor(colorstring1) and fillcolor(colorstring2)\n"
"    and analogously, if the other input format is used.\n"
"\n"
"If turtleshape is a polygon, outline and interior of that polygon\n"
"is drawn with the newly set colors.\n"
"For mor info see: pencolor, fillcolor\n"
"\n"
"Example:\n"
">>> color('red', 'green')\n"
">>> color()\n"
"('red', 'green')\n"
">>> colormode(255)\n"
">>> color((40, 80, 120), (160, 200, 240))\n"
">>> color()\n"
"('#285078', '#a0c8f0')"
msgstr ""

#: modes/api/python3.py:534
msgid ""
"turtle.colormode(cmode=None) \n"
"Return the colormode or set it to 1.0 or 255.\n"
"\n"
"Optional argument:\n"
"cmode -- one of the values 1.0 or 255\n"
"\n"
"r, g, b values of colortriples have to be in range 0..cmode.\n"
"\n"
"Example:\n"
">>> colormode()\n"
"1.0\n"
">>> colormode(255)\n"
">>> pencolor(240,160,80)"
msgstr ""

#: modes/api/python3.py:535
msgid ""
"turtle.config_dict(filename) \n"
"Convert content of config-file into dictionary."
msgstr ""

#: modes/api/python3.py:536
msgid ""
"turtle.deepcopy(x, memo=None, _nil=[]) \n"
"Deep copy operation on arbitrary Python objects.\n"
"\n"
"See the module's __doc__ string for more info."
msgstr ""

#: modes/api/python3.py:537
msgid ""
"turtle.degrees(fullcircle=360.0) \n"
"Set angle measurement units to degrees.\n"
"\n"
"Optional argument:\n"
"fullcircle -  a number\n"
"\n"
"Set angle measurement units, i. e. set number\n"
"of 'degrees' for a full circle. Dafault value is\n"
"360 degrees.\n"
"\n"
"Example:\n"
">>> left(90)\n"
">>> heading()\n"
"90\n"
"\n"
"Change angle measurement unit to grad (also known as gon,\n"
"grade, or gradian and equals 1/100-th of the right angle.)\n"
">>> degrees(400.0)\n"
">>> heading()\n"
"100"
msgstr ""

#: modes/api/python3.py:538
msgid ""
"turtle.delay(delay=None) \n"
"Return or set the drawing delay in milliseconds.\n"
"\n"
"Optional argument:\n"
"delay -- positive integer\n"
"\n"
"Example:\n"
">>> delay(15)\n"
">>> delay()\n"
"15"
msgstr ""

#: modes/api/python3.py:539
msgid ""
"turtle.distance(x, y=None) \n"
"Return the distance from the turtle to (x,y) in turtle step units.\n"
"\n"
"Arguments:\n"
"x -- a number   or  a pair/vector of numbers   or   a turtle instance\n"
"y -- a number       None                            None\n"
"\n"
"call: distance(x, y)         # two coordinates\n"
"--or: distance((x, y))       # a pair (tuple) of coordinates\n"
"--or: distance(vec)          # e.g. as returned by pos()\n"
"--or: distance(mypen)        # where mypen is another turtle\n"
"\n"
"Example:\n"
">>> pos()\n"
"(0.00, 0.00)\n"
">>> distance(30,40)\n"
"50.0\n"
">>> pen = Turtle()\n"
">>> pen.forward(77)\n"
">>> distance(pen)\n"
"77.0"
msgstr ""

#: modes/api/python3.py:540
msgid ""
"turtle.dot(size=None, *color) \n"
"Draw a dot with diameter size, using color.\n"
"\n"
"Optional arguments:\n"
"size -- an integer >= 1 (if given)\n"
"color -- a colorstring or a numeric color tuple\n"
"\n"
"Draw a circular dot with diameter size, using color.\n"
"If size is not given, the maximum of pensize+4 and 2*pensize is used.\n"
"\n"
"Example:\n"
">>> dot()\n"
">>> fd(50); dot(20, \"blue\"); fd(50)"
msgstr ""

#: modes/api/python3.py:541
msgid ""
"turtle.down() \n"
"Pull the pen down -- drawing when moving.\n"
"\n"
"Aliases: pendown | pd | down\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> pendown()"
msgstr ""

#: modes/api/python3.py:542
msgid ""
"turtle.end_fill() \n"
"Fill the shape drawn after the call begin_fill().\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> color(\"black\", \"red\")\n"
">>> begin_fill()\n"
">>> circle(60)\n"
">>> end_fill()"
msgstr ""

#: modes/api/python3.py:543
msgid ""
"turtle.end_poly() \n"
"Stop recording the vertices of a polygon.\n"
"\n"
"No argument.\n"
"\n"
"Stop recording the vertices of a polygon. Current turtle position is\n"
"last point of polygon. This will be connected with the first point.\n"
"\n"
"Example:\n"
">>> end_poly()"
msgstr ""

#: modes/api/python3.py:544
msgid ""
"turtle.exitonclick() \n"
"Go into mainloop until the mouse is clicked.\n"
"\n"
"No arguments.\n"
"\n"
"Bind bye() method to mouseclick on TurtleScreen.\n"
"If \"using_IDLE\" - value in configuration dictionary is False\n"
"(default value), enter mainloop.\n"
"If IDLE with -n switch (no subprocess) is used, this value should be\n"
"set to True in turtle.cfg. In this case IDLE's mainloop\n"
"is active also for the client script.\n"
"\n"
"This is a method of the Screen-class and not available for\n"
"TurtleScreen instances.\n"
"\n"
"Example:\n"
">>> exitonclick()"
msgstr ""

#: modes/api/python3.py:545
msgid ""
"turtle.fd(distance) \n"
"Move the turtle forward by the specified distance.\n"
"\n"
"Aliases: forward | fd\n"
"\n"
"Argument:\n"
"distance -- a number (integer or float)\n"
"\n"
"Move the turtle forward by the specified distance, in the direction\n"
"the turtle is headed.\n"
"\n"
"Example:\n"
">>> position()\n"
"(0.00, 0.00)\n"
">>> forward(25)\n"
">>> position()\n"
"(25.00,0.00)\n"
">>> forward(-75)\n"
">>> position()\n"
"(-50.00,0.00)"
msgstr ""

#: modes/api/python3.py:546
msgid ""
"turtle.fillcolor(*args) \n"
"Return or set the fillcolor.\n"
"\n"
"Arguments:\n"
"Four input formats are allowed:\n"
"  - fillcolor()\n"
"    Return the current fillcolor as color specification string,\n"
"    possibly in hex-number format (see example).\n"
"    May be used as input to another color/pencolor/fillcolor call.\n"
"  - fillcolor(colorstring)\n"
"    s is a Tk color specification string, such as \"red\" or \"yellow\"\n"
"  - fillcolor((r, g, b))\n"
"    *a tuple* of r, g, and b, which represent, an RGB color,\n"
"    and each of r, g, and b are in the range 0..colormode,\n"
"    where colormode is either 1.0 or 255\n"
"  - fillcolor(r, g, b)\n"
"    r, g, and b represent an RGB color, and each of r, g, and b\n"
"    are in the range 0..colormode\n"
"\n"
"If turtleshape is a polygon, the interior of that polygon is drawn\n"
"with the newly set fillcolor.\n"
"\n"
"Example:\n"
">>> fillcolor('violet')\n"
">>> col = pencolor()\n"
">>> fillcolor(col)\n"
">>> fillcolor(0, .5, 0)"
msgstr ""

#: modes/api/python3.py:547
msgid ""
"turtle.filling() \n"
"Return fillstate (True if filling, False else).\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> begin_fill()\n"
">>> if filling():\n"
"...     pensize(5)\n"
"... else:\n"
"...     pensize(3)"
msgstr ""

#: modes/api/python3.py:548
msgid ""
"turtle.forward(distance) \n"
"Move the turtle forward by the specified distance.\n"
"\n"
"Aliases: forward | fd\n"
"\n"
"Argument:\n"
"distance -- a number (integer or float)\n"
"\n"
"Move the turtle forward by the specified distance, in the direction\n"
"the turtle is headed.\n"
"\n"
"Example:\n"
">>> position()\n"
"(0.00, 0.00)\n"
">>> forward(25)\n"
">>> position()\n"
"(25.00,0.00)\n"
">>> forward(-75)\n"
">>> position()\n"
"(-50.00,0.00)"
msgstr ""

#: modes/api/python3.py:549
msgid ""
"turtle.get_poly() \n"
"Return the lastly recorded polygon.\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> p = get_poly()\n"
">>> register_shape(\"myFavouriteShape\", p)"
msgstr ""

#: modes/api/python3.py:550
msgid ""
"turtle.get_shapepoly() \n"
"Return the current shape polygon as tuple of coordinate pairs.\n"
"\n"
"No argument.\n"
"\n"
"Examples:\n"
">>> shape(\"square\")\n"
">>> shapetransform(4, -1, 0, 2)\n"
">>> get_shapepoly()\n"
"((50, -20), (30, 20), (-50, 20), (-30, -20))"
msgstr ""

#: modes/api/python3.py:551
msgid ""
"turtle.getcanvas() \n"
"Return the Canvas of this TurtleScreen.\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> cv = getcanvas()\n"
">>> cv\n"
"<turtle.ScrolledCanvas instance at 0x010742D8>"
msgstr ""

#: modes/api/python3.py:552
msgid ""
"turtle.getmethparlist(ob) \n"
"Get strings describing the arguments for the given object\n"
"\n"
"Returns a pair of strings representing function parameter lists\n"
"including parenthesis.  The first string is suitable for use in\n"
"function definition and the second is suitable for use in function\n"
"call.  The \"self\" parameter is not included."
msgstr ""

#: modes/api/python3.py:553
msgid ""
"turtle.getpen() \n"
"Return the Turtleobject itself.\n"
"\n"
"No argument.\n"
"\n"
"Only reasonable use: as a function to return the 'anonymous turtle':\n"
"\n"
"Example:\n"
">>> pet = getturtle()\n"
">>> pet.fd(50)\n"
">>> pet\n"
"<Turtle object at 0x0187D810>\n"
">>> turtles()\n"
"[<Turtle object at 0x0187D810>]"
msgstr ""

#: modes/api/python3.py:554
msgid ""
"turtle.getscreen() \n"
"Return the TurtleScreen object, the turtle is drawing  on.\n"
"\n"
"No argument.\n"
"\n"
"Return the TurtleScreen object, the turtle is drawing  on.\n"
"So TurtleScreen-methods can be called for that object.\n"
"\n"
"Example:\n"
">>> ts = getscreen()\n"
">>> ts\n"
"<TurtleScreen object at 0x0106B770>\n"
">>> ts.bgcolor(\"pink\")"
msgstr ""

#: modes/api/python3.py:555
msgid ""
"turtle.getshapes() \n"
"Return a list of names of all currently available turtle shapes.\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> getshapes()\n"
"['arrow', 'blank', 'circle', ... , 'turtle']"
msgstr ""

#: modes/api/python3.py:556
msgid ""
"turtle.getturtle() \n"
"Return the Turtleobject itself.\n"
"\n"
"No argument.\n"
"\n"
"Only reasonable use: as a function to return the 'anonymous turtle':\n"
"\n"
"Example:\n"
">>> pet = getturtle()\n"
">>> pet.fd(50)\n"
">>> pet\n"
"<Turtle object at 0x0187D810>\n"
">>> turtles()\n"
"[<Turtle object at 0x0187D810>]"
msgstr ""

#: modes/api/python3.py:557
msgid ""
"turtle.goto(x, y=None) \n"
"Move turtle to an absolute position.\n"
"\n"
"Aliases: setpos | setposition | goto:\n"
"\n"
"Arguments:\n"
"x -- a number      or     a pair/vector of numbers\n"
"y -- a number             None\n"
"\n"
"call: goto(x, y)         # two coordinates\n"
"--or: goto((x, y))       # a pair (tuple) of coordinates\n"
"--or: goto(vec)          # e.g. as returned by pos()\n"
"\n"
"Move turtle to an absolute position. If the pen is down,\n"
"a line will be drawn. The turtle's orientation does not change.\n"
"\n"
"Example:\n"
">>> tp = pos()\n"
">>> tp\n"
"(0.00, 0.00)\n"
">>> setpos(60,30)\n"
">>> pos()\n"
"(60.00,30.00)\n"
">>> setpos((20,80))\n"
">>> pos()\n"
"(20.00,80.00)\n"
">>> setpos(tp)\n"
">>> pos()\n"
"(0.00,0.00)"
msgstr ""

#: modes/api/python3.py:558
msgid ""
"turtle.heading() \n"
"Return the turtle's current heading.\n"
"\n"
"No arguments.\n"
"\n"
"Example:\n"
">>> left(67)\n"
">>> heading()\n"
"67.0"
msgstr ""

#: modes/api/python3.py:559
msgid ""
"turtle.hideturtle() \n"
"Makes the turtle invisible.\n"
"\n"
"Aliases: hideturtle | ht\n"
"\n"
"No argument.\n"
"\n"
"It's a good idea to do this while you're in the\n"
"middle of a complicated drawing, because hiding\n"
"the turtle speeds up the drawing observably.\n"
"\n"
"Example:\n"
">>> hideturtle()"
msgstr ""

#: modes/api/python3.py:560
msgid ""
"turtle.home() \n"
"Move turtle to the origin - coordinates (0,0).\n"
"\n"
"No arguments.\n"
"\n"
"Move turtle to the origin - coordinates (0,0) and set its\n"
"heading to its start-orientation (which depends on mode).\n"
"\n"
"Example:\n"
">>> home()"
msgstr ""

#: modes/api/python3.py:561
msgid ""
"turtle.ht() \n"
"Makes the turtle invisible.\n"
"\n"
"Aliases: hideturtle | ht\n"
"\n"
"No argument.\n"
"\n"
"It's a good idea to do this while you're in the\n"
"middle of a complicated drawing, because hiding\n"
"the turtle speeds up the drawing observably.\n"
"\n"
"Example:\n"
">>> hideturtle()"
msgstr ""

#: modes/api/python3.py:562
msgid ""
"turtle.inspect() \n"
"Get useful information from live Python objects.\n"
"\n"
"This module encapsulates the interface provided by the internal special\n"
"attributes (co_*, im_*, tb_*, etc.) in a friendlier fashion.\n"
"It also provides some help for examining source code and class layout.\n"
"\n"
"Here are some of the useful functions provided by this module:\n"
"\n"
"    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),\n"
"        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),\n"
"        isroutine() - check object types\n"
"    getmembers() - get members of an object that satisfy a given condition\n"
"\n"
"    getfile(), getsourcefile(), getsource() - find an object's source code\n"
"    getdoc(), getcomments() - get documentation on an object\n"
"    getmodule() - determine the module that an object came from\n"
"    getclasstree() - arrange classes so as to represent their hierarchy\n"
"\n"
"    getargvalues(), getcallargs() - get info about function arguments\n"
"    getfullargspec() - same, with support for Python 3 features\n"
"    formatargspec(), formatargvalues() - format an argument spec\n"
"    getouterframes(), getinnerframes() - get info about frames\n"
"    currentframe() - get the current stack frame\n"
"    stack(), trace() - get info about frames on the stack or in a traceback\n"
"\n"
"    signature() - get a Signature object for the callable"
msgstr ""

#: modes/api/python3.py:563
msgid ""
"turtle.isdown() \n"
"Return True if pen is down, False if it's up.\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> penup()\n"
">>> isdown()\n"
"False\n"
">>> pendown()\n"
">>> isdown()\n"
"True"
msgstr ""

#: modes/api/python3.py:564
msgid ""
"turtle.isfile(path) \n"
"Test whether a path is a regular file"
msgstr ""

#: modes/api/python3.py:565
msgid ""
"turtle.isvisible() \n"
"Return True if the Turtle is shown, False if it's hidden.\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> hideturtle()\n"
">>> print isvisible():\n"
"False"
msgstr ""

#: modes/api/python3.py:566
msgid ""
"turtle.join(a, *p) \n"
"Join two or more pathname components, inserting '/' as needed.\n"
"If any component is an absolute path, all previous path components\n"
"will be discarded.  An empty last part will result in a path that\n"
"ends with a separator."
msgstr ""

#: modes/api/python3.py:567
msgid ""
"turtle.left(angle) \n"
"Turn turtle left by angle units.\n"
"\n"
"Aliases: left | lt\n"
"\n"
"Argument:\n"
"angle -- a number (integer or float)\n"
"\n"
"Turn turtle left by angle units. (Units are by default degrees,\n"
"but can be set via the degrees() and radians() functions.)\n"
"Angle orientation depends on mode. (See this.)\n"
"\n"
"Example:\n"
">>> heading()\n"
"22.0\n"
">>> left(45)\n"
">>> heading()\n"
"67.0"
msgstr ""

#: modes/api/python3.py:568
msgid ""
"turtle.listen(xdummy=None, ydummy=None) \n"
"Set focus on TurtleScreen (in order to collect key-events)\n"
"\n"
"No arguments.\n"
"Dummy arguments are provided in order\n"
"to be able to pass listen to the onclick method.\n"
"\n"
"Example:\n"
">>> listen()"
msgstr ""

#: modes/api/python3.py:569
msgid ""
"turtle.lt(angle) \n"
"Turn turtle left by angle units.\n"
"\n"
"Aliases: left | lt\n"
"\n"
"Argument:\n"
"angle -- a number (integer or float)\n"
"\n"
"Turn turtle left by angle units. (Units are by default degrees,\n"
"but can be set via the degrees() and radians() functions.)\n"
"Angle orientation depends on mode. (See this.)\n"
"\n"
"Example:\n"
">>> heading()\n"
"22.0\n"
">>> left(45)\n"
">>> heading()\n"
"67.0"
msgstr ""

#: modes/api/python3.py:570 modes/api/python3.py:571
msgid ""
"turtle.mainloop() \n"
"Starts event loop - calling Tkinter's mainloop function.\n"
"\n"
"No argument.\n"
"\n"
"Must be last statement in a turtle graphics program.\n"
"Must NOT be used if a script is run from within IDLE in -n mode\n"
"(No subprocess) - for interactive use of turtle graphics.\n"
"\n"
"Example:\n"
">>> mainloop()"
msgstr ""

#: modes/api/python3.py:572
msgid ""
"turtle.math() \n"
"This module is always available.  It provides access to the\n"
"mathematical functions defined by the C standard."
msgstr ""

#: modes/api/python3.py:573
msgid ""
"turtle.mode(mode=None) \n"
"Set turtle-mode ('standard', 'logo' or 'world') and perform reset.\n"
"\n"
"Optional argument:\n"
"mode -- one of the strings 'standard', 'logo' or 'world'\n"
"\n"
"Mode 'standard' is compatible with turtle.py.\n"
"Mode 'logo' is compatible with most Logo-Turtle-Graphics.\n"
"Mode 'world' uses userdefined 'worldcoordinates'. *Attention*: in\n"
"this mode angles appear distorted if x/y unit-ratio doesn't equal 1.\n"
"If mode is not given, return the current mode.\n"
"\n"
"     Mode      Initial turtle heading     positive angles\n"
" ------------|-------------------------|-------------------\n"
"  'standard'    to the right (east)       counterclockwise\n"
"    'logo'        upward    (north)         clockwise\n"
"\n"
"Examples:\n"
">>> mode('logo')   # resets turtle heading to north\n"
">>> mode()\n"
"'logo'"
msgstr ""

#: modes/api/python3.py:574
msgid ""
"turtle.numinput(title, prompt, default=None, minval=None, maxval=None) \n"
"Pop up a dialog window for input of a number.\n"
"\n"
"Arguments: title is the title of the dialog window,\n"
"prompt is a text mostly describing what numerical information to input.\n"
"default: default value\n"
"minval: minimum value for imput\n"
"maxval: maximum value for input\n"
"\n"
"The number input must be in the range minval .. maxval if these are\n"
"given. If not, a hint is issued and the dialog remains open for\n"
"correction. Return the number input.\n"
"If the dialog is canceled,  return None.\n"
"\n"
"Example:\n"
">>> numinput(\"Poker\", \"Your stakes:\", 1000, minval=10, maxval=10000)"
msgstr ""

#: modes/api/python3.py:575
msgid ""
"turtle.onclick(fun, btn=1, add=None) \n"
"Bind fun to mouse-click event on this turtle on canvas.\n"
"\n"
"Arguments:\n"
"fun --  a function with two arguments, to which will be assigned\n"
"        the coordinates of the clicked point on the canvas.\n"
"num --  number of the mouse-button defaults to 1 (left mouse button).\n"
"add --  True or False. If True, new binding will be added, otherwise\n"
"        it will replace a former binding.\n"
"\n"
"Example for the anonymous turtle, i. e. the procedural way:\n"
"\n"
">>> def turn(x, y):\n"
"...     left(360)\n"
"...\n"
">>> onclick(turn)  # Now clicking into the turtle will turn it.\n"
">>> onclick(None)  # event-binding will be removed"
msgstr ""

#: modes/api/python3.py:576
msgid ""
"turtle.ondrag(fun, btn=1, add=None) \n"
"Bind fun to mouse-move event on this turtle on canvas.\n"
"\n"
"Arguments:\n"
"fun -- a function with two arguments, to which will be assigned\n"
"       the coordinates of the clicked point on the canvas.\n"
"num -- number of the mouse-button defaults to 1 (left mouse button).\n"
"\n"
"Every sequence of mouse-move-events on a turtle is preceded by a\n"
"mouse-click event on that \n"
"\n"
"Example:\n"
">>> ondrag(goto)\n"
"\n"
"Subsequently clicking and dragging a Turtle will move it\n"
"across the screen thereby producing handdrawings (if pen is\n"
"down)."
msgstr ""

#: modes/api/python3.py:577
msgid ""
"turtle.onkey(fun, key) \n"
"Bind fun to key-release event of key.\n"
"\n"
"Arguments:\n"
"fun -- a function with no arguments\n"
"key -- a string: key (e.g. \"a\") or key-symbol (e.g. \"space\")\n"
"\n"
"In order to be able to register key-events, TurtleScreen\n"
"must have focus. (See method listen.)\n"
"\n"
"Example:\n"
"\n"
">>> def f():\n"
"...     fd(50)\n"
"...     lt(60)\n"
"...\n"
">>> onkey(f, \"Up\")\n"
">>> listen()\n"
"\n"
"Subsequently the turtle can be moved by repeatedly pressing\n"
"the up-arrow key, consequently drawing a hexagon"
msgstr ""

#: modes/api/python3.py:578
msgid ""
"turtle.onkeypress(fun, key=None) \n"
"Bind fun to key-press event of key if key is given,\n"
"or to any key-press-event if no key is given.\n"
"\n"
"Arguments:\n"
"fun -- a function with no arguments\n"
"key -- a string: key (e.g. \"a\") or key-symbol (e.g. \"space\")\n"
"\n"
"In order to be able to register key-events, TurtleScreen\n"
"must have focus. (See method listen.)\n"
"\n"
"Example (for a TurtleScreen instance named screen\n"
"and a Turtle instance named turtle):\n"
"\n"
">>> def f():\n"
"...     fd(50)\n"
"...     lt(60)\n"
"...\n"
">>> onkeypress(f, \"Up\")\n"
">>> listen()\n"
"\n"
"Subsequently the turtle can be moved by repeatedly pressing\n"
"the up-arrow key, or by keeping pressed the up-arrow key.\n"
"consequently drawing a hexagon."
msgstr ""

#: modes/api/python3.py:579
msgid ""
"turtle.onkeyrelease(fun, key) \n"
"Bind fun to key-release event of key.\n"
"\n"
"Arguments:\n"
"fun -- a function with no arguments\n"
"key -- a string: key (e.g. \"a\") or key-symbol (e.g. \"space\")\n"
"\n"
"In order to be able to register key-events, TurtleScreen\n"
"must have focus. (See method listen.)\n"
"\n"
"Example:\n"
"\n"
">>> def f():\n"
"...     fd(50)\n"
"...     lt(60)\n"
"...\n"
">>> onkey(f, \"Up\")\n"
">>> listen()\n"
"\n"
"Subsequently the turtle can be moved by repeatedly pressing\n"
"the up-arrow key, consequently drawing a hexagon"
msgstr ""

#: modes/api/python3.py:580
msgid ""
"turtle.onrelease(fun, btn=1, add=None) \n"
"Bind fun to mouse-button-release event on this turtle on canvas.\n"
"\n"
"Arguments:\n"
"fun -- a function with two arguments, to which will be assigned\n"
"        the coordinates of the clicked point on the canvas.\n"
"num --  number of the mouse-button defaults to 1 (left mouse button).\n"
"\n"
"Example (for a MyTurtle instance named joe):\n"
">>> class MyTurtle(Turtle):\n"
"...     def glow(self,x,y):\n"
"...             self.fillcolor(\"red\")\n"
"...     def unglow(self,x,y):\n"
"...             self.fillcolor(\"\")\n"
"...\n"
">>> joe = MyTurtle()\n"
">>> joe.onclick(joe.glow)\n"
">>> joe.onrelease(joe.unglow)\n"
"\n"
"Clicking on joe turns fillcolor red, unclicking turns it to\n"
"transparent."
msgstr ""

#: modes/api/python3.py:581
msgid ""
"turtle.onscreenclick(fun, btn=1, add=None) \n"
"Bind fun to mouse-click event on canvas.\n"
"\n"
"Arguments:\n"
"fun -- a function with two arguments, the coordinates of the\n"
"       clicked point on the canvas.\n"
"num -- the number of the mouse-button, defaults to 1\n"
"\n"
"Example (for a TurtleScreen instance named screen)\n"
"\n"
">>> onclick(goto)\n"
">>> # Subsequently clicking into the TurtleScreen will\n"
">>> # make the turtle move to the clicked point.\n"
">>> onclick(None)"
msgstr ""

#: modes/api/python3.py:582
msgid ""
"turtle.ontimer(fun, t=0) \n"
"Install a timer, which calls fun after t milliseconds.\n"
"\n"
"Arguments:\n"
"fun -- a function with no arguments.\n"
"t -- a number >= 0\n"
"\n"
"Example:\n"
"\n"
">>> running = True\n"
">>> def f():\n"
"...     if running:\n"
"...             fd(50)\n"
"...             lt(60)\n"
"...             ontimer(f, 250)\n"
"...\n"
">>> f()   # makes the turtle marching around\n"
">>> running = False"
msgstr ""

#: modes/api/python3.py:583
msgid ""
"turtle.pd() \n"
"Pull the pen down -- drawing when moving.\n"
"\n"
"Aliases: pendown | pd | down\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> pendown()"
msgstr ""

#: modes/api/python3.py:584
msgid ""
"turtle.pen(pen=None, **pendict) \n"
"Return or set the pen's attributes.\n"
"\n"
"Arguments:\n"
"    pen -- a dictionary with some or all of the below listed keys.\n"
"    **pendict -- one or more keyword-arguments with the below\n"
"                 listed keys as keywords.\n"
"\n"
"Return or set the pen's attributes in a 'pen-dictionary'\n"
"with the following key/value pairs:\n"
"   \"shown\"      :   True/False\n"
"   \"pendown\"    :   True/False\n"
"   \"pencolor\"   :   color-string or color-tuple\n"
"   \"fillcolor\"  :   color-string or color-tuple\n"
"   \"pensize\"    :   positive number\n"
"   \"speed\"      :   number in range 0..10\n"
"   \"resizemode\" :   \"auto\" or \"user\" or \"noresize\"\n"
"   \"stretchfactor\": (positive number, positive number)\n"
"   \"shearfactor\":   number\n"
"   \"outline\"    :   positive number\n"
"   \"tilt\"       :   number\n"
"\n"
"This dictionary can be used as argument for a subsequent\n"
"pen()-call to restore the former pen-state. Moreover one\n"
"or more of these attributes can be provided as keyword-arguments.\n"
"This can be used to set several pen attributes in one statement.\n"
"\n"
"\n"
"Examples:\n"
">>> pen(fillcolor=\"black\", pencolor=\"red\", pensize=10)\n"
">>> pen()\n"
"{'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,\n"
"'pencolor': 'red', 'pendown': True, 'fillcolor': 'black',\n"
"'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}\n"
">>> penstate=pen()\n"
">>> color(\"yellow\",\"\")\n"
">>> penup()\n"
">>> pen()\n"
"{'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,\n"
"'pencolor': 'yellow', 'pendown': False, 'fillcolor': '',\n"
"'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}\n"
">>> p.pen(penstate, fillcolor=\"green\")\n"
">>> p.pen()\n"
"{'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,\n"
"'pencolor': 'red', 'pendown': True, 'fillcolor': 'green',\n"
"'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}"
msgstr ""

#: modes/api/python3.py:585
msgid ""
"turtle.pencolor(*args) \n"
"Return or set the pencolor.\n"
"\n"
"Arguments:\n"
"Four input formats are allowed:\n"
"  - pencolor()\n"
"    Return the current pencolor as color specification string,\n"
"    possibly in hex-number format (see example).\n"
"    May be used as input to another color/pencolor/fillcolor call.\n"
"  - pencolor(colorstring)\n"
"    s is a Tk color specification string, such as \"red\" or \"yellow\"\n"
"  - pencolor((r, g, b))\n"
"    *a tuple* of r, g, and b, which represent, an RGB color,\n"
"    and each of r, g, and b are in the range 0..colormode,\n"
"    where colormode is either 1.0 or 255\n"
"  - pencolor(r, g, b)\n"
"    r, g, and b represent an RGB color, and each of r, g, and b\n"
"    are in the range 0..colormode\n"
"\n"
"If turtleshape is a polygon, the outline of that polygon is drawn\n"
"with the newly set pencolor.\n"
"\n"
"Example:\n"
">>> pencolor('brown')\n"
">>> tup = (0.2, 0.8, 0.55)\n"
">>> pencolor(tup)\n"
">>> pencolor()\n"
"'#33cc8c'"
msgstr ""

#: modes/api/python3.py:586
msgid ""
"turtle.pendown() \n"
"Pull the pen down -- drawing when moving.\n"
"\n"
"Aliases: pendown | pd | down\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> pendown()"
msgstr ""

#: modes/api/python3.py:587
msgid ""
"turtle.pensize(width=None) \n"
"Set or return the line thickness.\n"
"\n"
"Aliases:  pensize | width\n"
"\n"
"Argument:\n"
"width -- positive number\n"
"\n"
"Set the line thickness to width or return it. If resizemode is set\n"
"to \"auto\" and turtleshape is a polygon, that polygon is drawn with\n"
"the same line thickness. If no argument is given, current pensize\n"
"is returned.\n"
"\n"
"Example:\n"
">>> pensize()\n"
"1\n"
">>> pensize(10)   # from here on lines of width 10 are drawn"
msgstr ""

#: modes/api/python3.py:588
msgid ""
"turtle.penup() \n"
"Pull the pen up -- no drawing when moving.\n"
"\n"
"Aliases: penup | pu | up\n"
"\n"
"No argument\n"
"\n"
"Example:\n"
">>> penup()"
msgstr ""

#: modes/api/python3.py:589
msgid ""
"turtle.pos() \n"
"Return the turtle's current location (x,y), as a Vec2D-vector.\n"
"\n"
"Aliases: pos | position\n"
"\n"
"No arguments.\n"
"\n"
"Example:\n"
">>> pos()\n"
"(0.00, 240.00)"
msgstr ""

#: modes/api/python3.py:590
msgid ""
"turtle.position() \n"
"Return the turtle's current location (x,y), as a Vec2D-vector.\n"
"\n"
"Aliases: pos | position\n"
"\n"
"No arguments.\n"
"\n"
"Example:\n"
">>> pos()\n"
"(0.00, 240.00)"
msgstr ""

#: modes/api/python3.py:591
msgid ""
"turtle.pu() \n"
"Pull the pen up -- no drawing when moving.\n"
"\n"
"Aliases: penup | pu | up\n"
"\n"
"No argument\n"
"\n"
"Example:\n"
">>> penup()"
msgstr ""

#: modes/api/python3.py:592
msgid ""
"turtle.radians() \n"
"Set the angle measurement units to radians.\n"
"\n"
"No arguments.\n"
"\n"
"Example:\n"
">>> heading()\n"
"90\n"
">>> radians()\n"
">>> heading()\n"
"1.5707963267948966"
msgstr ""

#: modes/api/python3.py:593
msgid ""
"turtle.read_docstrings(lang) \n"
"Read in docstrings from lang-specific docstring dictionary.\n"
"\n"
"Transfer docstrings, translated to lang, from a dictionary-file\n"
"to the methods of classes Screen and Turtle and - in revised form -\n"
"to the corresponding functions."
msgstr ""

#: modes/api/python3.py:594
msgid ""
"turtle.readconfig(cfgdict) \n"
"Read config-files, change configuration-dict accordingly.\n"
"\n"
"If there is a turtle.cfg file in the current working directory,\n"
"read it from there. If this contains an importconfig-value,\n"
"say 'myway', construct filename turtle_mayway.cfg else use\n"
"turtle.cfg and read it from the import-directory, where\n"
"turtle.py is located.\n"
"Update configuration dictionary first according to config-file,\n"
"in the import directory, then according to config-file in the\n"
"current working directory.\n"
"If no config-file is found, the default configuration is used."
msgstr ""

#: modes/api/python3.py:595
msgid ""
"turtle.register_shape(name, shape=None) \n"
"Adds a turtle shape to TurtleScreen's shapelist.\n"
"\n"
"Arguments:\n"
"(1) name is the name of a gif-file and shape is None.\n"
"    Installs the corresponding image shape.\n"
"    !! Image-shapes DO NOT rotate when turning the turtle,\n"
"    !! so they do not display the heading of the turtle!\n"
"(2) name is an arbitrary string and shape is a tuple\n"
"    of pairs of coordinates. Installs the corresponding\n"
"    polygon shape\n"
"(3) name is an arbitrary string and shape is a\n"
"    (compound) Shape object. Installs the corresponding\n"
"    compound shape.\n"
"To use a shape, you have to issue the command shape(shapename).\n"
"\n"
"call: register_shape(\"turtle.gif\")\n"
"--or: register_shape(\"tri\", ((0,0), (10,10), (-10,10)))\n"
"\n"
"Example:\n"
">>> register_shape(\"triangle\", ((5,-3),(0,5),(-5,-3)))"
msgstr ""

#: modes/api/python3.py:596
msgid ""
"turtle.reset() \n"
"Delete the turtle's drawings and restore its default values.\n"
"\n"
"No argument.\n"
"\n"
"Delete the turtle's drawings from the screen, re-center the turtle\n"
"and set variables to the default values.\n"
"\n"
"Example:\n"
">>> position()\n"
"(0.00,-22.00)\n"
">>> heading()\n"
"100.0\n"
">>> reset()\n"
">>> position()\n"
"(0.00,0.00)\n"
">>> heading()\n"
"0.0"
msgstr ""

#: modes/api/python3.py:597
msgid ""
"turtle.resetscreen() \n"
"Reset all Turtles on the Screen to their initial state.\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> reset()"
msgstr ""

#: modes/api/python3.py:598
msgid ""
"turtle.resizemode(rmode=None) \n"
"Set resizemode to one of the values: \"auto\", \"user\", \"noresize\".\n"
"\n"
"(Optional) Argument:\n"
"rmode -- one of the strings \"auto\", \"user\", \"noresize\"\n"
"\n"
"Different resizemodes have the following effects:\n"
"  - \"auto\" adapts the appearance of the turtle\n"
"           corresponding to the value of pensize.\n"
"  - \"user\" adapts the appearance of the turtle according to the\n"
"           values of stretchfactor and outlinewidth (outline),\n"
"           which are set by shapesize()\n"
"  - \"noresize\" no adaption of the turtle's appearance takes place.\n"
"If no argument is given, return current resizemode.\n"
"resizemode(\"user\") is called by a call of shapesize with arguments.\n"
"\n"
"\n"
"Examples:\n"
">>> resizemode(\"noresize\")\n"
">>> resizemode()\n"
"'noresize'"
msgstr ""

#: modes/api/python3.py:599
msgid ""
"turtle.right(angle) \n"
"Turn turtle right by angle units.\n"
"\n"
"Aliases: right | rt\n"
"\n"
"Argument:\n"
"angle -- a number (integer or float)\n"
"\n"
"Turn turtle right by angle units. (Units are by default degrees,\n"
"but can be set via the degrees() and radians() functions.)\n"
"Angle orientation depends on mode. (See this.)\n"
"\n"
"Example:\n"
">>> heading()\n"
"22.0\n"
">>> right(45)\n"
">>> heading()\n"
"337.0"
msgstr ""

#: modes/api/python3.py:600
msgid ""
"turtle.rt(angle) \n"
"Turn turtle right by angle units.\n"
"\n"
"Aliases: right | rt\n"
"\n"
"Argument:\n"
"angle -- a number (integer or float)\n"
"\n"
"Turn turtle right by angle units. (Units are by default degrees,\n"
"but can be set via the degrees() and radians() functions.)\n"
"Angle orientation depends on mode. (See this.)\n"
"\n"
"Example:\n"
">>> heading()\n"
"22.0\n"
">>> right(45)\n"
">>> heading()\n"
"337.0"
msgstr ""

#: modes/api/python3.py:601
msgid ""
"turtle.screensize(canvwidth=None, canvheight=None, bg=None) \n"
"Resize the canvas the turtles are drawing on.\n"
"\n"
"Optional arguments:\n"
"canvwidth -- positive integer, new width of canvas in pixels\n"
"canvheight --  positive integer, new height of canvas in pixels\n"
"bg -- colorstring or color-tuple, new backgroundcolor\n"
"If no arguments are given, return current (canvaswidth, canvasheight)\n"
"\n"
"Do not alter the drawing window. To observe hidden parts of\n"
"the canvas use the scrollbars. (Can make visible those parts\n"
"of a drawing, which were outside the canvas before!)\n"
"\n"
"Example (for a Turtle instance named turtle):\n"
">>> turtle.screensize(2000,1500)\n"
">>> # e.g. to search for an erroneously escaped turtle ;-)"
msgstr ""

#: modes/api/python3.py:602
msgid ""
"turtle.seth(to_angle) \n"
"Set the orientation of the turtle to to_angle.\n"
"\n"
"Aliases:  setheading | seth\n"
"\n"
"Argument:\n"
"to_angle -- a number (integer or float)\n"
"\n"
"Set the orientation of the turtle to to_angle.\n"
"Here are some common directions in degrees:\n"
"\n"
" standard - mode:          logo-mode:\n"
"-------------------|--------------------\n"
"   0 - east                0 - north\n"
"  90 - north              90 - east\n"
" 180 - west              180 - south\n"
" 270 - south             270 - west\n"
"\n"
"Example:\n"
">>> setheading(90)\n"
">>> heading()\n"
"90"
msgstr ""

#: modes/api/python3.py:603
msgid ""
"turtle.setheading(to_angle) \n"
"Set the orientation of the turtle to to_angle.\n"
"\n"
"Aliases:  setheading | seth\n"
"\n"
"Argument:\n"
"to_angle -- a number (integer or float)\n"
"\n"
"Set the orientation of the turtle to to_angle.\n"
"Here are some common directions in degrees:\n"
"\n"
" standard - mode:          logo-mode:\n"
"-------------------|--------------------\n"
"   0 - east                0 - north\n"
"  90 - north              90 - east\n"
" 180 - west              180 - south\n"
" 270 - south             270 - west\n"
"\n"
"Example:\n"
">>> setheading(90)\n"
">>> heading()\n"
"90"
msgstr ""

#: modes/api/python3.py:604
msgid ""
"turtle.setpos(x, y=None) \n"
"Move turtle to an absolute position.\n"
"\n"
"Aliases: setpos | setposition | goto:\n"
"\n"
"Arguments:\n"
"x -- a number      or     a pair/vector of numbers\n"
"y -- a number             None\n"
"\n"
"call: goto(x, y)         # two coordinates\n"
"--or: goto((x, y))       # a pair (tuple) of coordinates\n"
"--or: goto(vec)          # e.g. as returned by pos()\n"
"\n"
"Move turtle to an absolute position. If the pen is down,\n"
"a line will be drawn. The turtle's orientation does not change.\n"
"\n"
"Example:\n"
">>> tp = pos()\n"
">>> tp\n"
"(0.00, 0.00)\n"
">>> setpos(60,30)\n"
">>> pos()\n"
"(60.00,30.00)\n"
">>> setpos((20,80))\n"
">>> pos()\n"
"(20.00,80.00)\n"
">>> setpos(tp)\n"
">>> pos()\n"
"(0.00,0.00)"
msgstr ""

#: modes/api/python3.py:605
msgid ""
"turtle.setposition(x, y=None) \n"
"Move turtle to an absolute position.\n"
"\n"
"Aliases: setpos | setposition | goto:\n"
"\n"
"Arguments:\n"
"x -- a number      or     a pair/vector of numbers\n"
"y -- a number             None\n"
"\n"
"call: goto(x, y)         # two coordinates\n"
"--or: goto((x, y))       # a pair (tuple) of coordinates\n"
"--or: goto(vec)          # e.g. as returned by pos()\n"
"\n"
"Move turtle to an absolute position. If the pen is down,\n"
"a line will be drawn. The turtle's orientation does not change.\n"
"\n"
"Example:\n"
">>> tp = pos()\n"
">>> tp\n"
"(0.00, 0.00)\n"
">>> setpos(60,30)\n"
">>> pos()\n"
"(60.00,30.00)\n"
">>> setpos((20,80))\n"
">>> pos()\n"
"(20.00,80.00)\n"
">>> setpos(tp)\n"
">>> pos()\n"
"(0.00,0.00)"
msgstr ""

#: modes/api/python3.py:606
msgid ""
"turtle.settiltangle(angle) \n"
"Rotate the turtleshape to point in the specified direction\n"
"\n"
"Argument: angle -- number\n"
"\n"
"Rotate the turtleshape to point in the direction specified by angle,\n"
"regardless of its current tilt-angle. DO NOT change the turtle's\n"
"heading (direction of movement).\n"
"\n"
"\n"
"Examples:\n"
">>> shape(\"circle\")\n"
">>> shapesize(5,2)\n"
">>> settiltangle(45)\n"
">>> stamp()\n"
">>> fd(50)\n"
">>> settiltangle(-45)\n"
">>> stamp()\n"
">>> fd(50)"
msgstr ""

#: modes/api/python3.py:607
msgid ""
"turtle.setundobuffer(size) \n"
"Set or disable undobuffer.\n"
"\n"
"Argument:\n"
"size -- an integer or None\n"
"\n"
"If size is an integer an empty undobuffer of given size is installed.\n"
"Size gives the maximum number of turtle-actions that can be undone\n"
"by the undo() function.\n"
"If size is None, no undobuffer is present.\n"
"\n"
"Example:\n"
">>> setundobuffer(42)"
msgstr ""

#: modes/api/python3.py:608
#, python-format
msgid ""
"turtle.setup(width=0.5, height=0.75, startx=None, starty=None) \n"
"Set the size and position of the main window.\n"
"\n"
"Arguments:\n"
"width: as integer a size in pixels, as float a fraction of the \n"
"  Default is 50% of \n"
"height: as integer the height in pixels, as float a fraction of the\n"
"   Default is 75% of \n"
"startx: if positive, starting position in pixels from the left\n"
"  edge of the screen, if negative from the right edge\n"
"  Default, startx=None is to center window horizontally.\n"
"starty: if positive, starting position in pixels from the top\n"
"  edge of the screen, if negative from the bottom edge\n"
"  Default, starty=None is to center window vertically.\n"
"\n"
"Examples:\n"
">>> setup (width=200, height=200, startx=0, starty=0)\n"
"\n"
"sets window to 200x200 pixels, in upper left of screen\n"
"\n"
">>> setup(width=.75, height=0.5, startx=None, starty=None)\n"
"\n"
"sets window to 75% of screen by 50% of screen and centers"
msgstr ""

#: modes/api/python3.py:609
msgid ""
"turtle.setworldcoordinates(llx, lly, urx, ury) \n"
"Set up a user defined coordinate-system.\n"
"\n"
"Arguments:\n"
"llx -- a number, x-coordinate of lower left corner of canvas\n"
"lly -- a number, y-coordinate of lower left corner of canvas\n"
"urx -- a number, x-coordinate of upper right corner of canvas\n"
"ury -- a number, y-coordinate of upper right corner of canvas\n"
"\n"
"Set up user coodinat-system and switch to mode 'world' if necessary.\n"
"This performs a reset. If mode 'world' is already active,\n"
"all drawings are redrawn according to the new coordinates.\n"
"\n"
"But ATTENTION: in user-defined coordinatesystems angles may appear\n"
"distorted. (see Screen.mode())\n"
"\n"
"Example:\n"
">>> setworldcoordinates(-10,-0.5,50,1.5)\n"
">>> for _ in range(36):\n"
"...     left(10)\n"
"...     forward(0.5)"
msgstr ""

#: modes/api/python3.py:610
msgid ""
"turtle.setx(x) \n"
"Set the turtle's first coordinate to x\n"
"\n"
"Argument:\n"
"x -- a number (integer or float)\n"
"\n"
"Set the turtle's first coordinate to x, leave second coordinate\n"
"unchanged.\n"
"\n"
"Example:\n"
">>> position()\n"
"(0.00, 240.00)\n"
">>> setx(10)\n"
">>> position()\n"
"(10.00, 240.00)"
msgstr ""

#: modes/api/python3.py:611
msgid ""
"turtle.sety(y) \n"
"Set the turtle's second coordinate to y\n"
"\n"
"Argument:\n"
"y -- a number (integer or float)\n"
"\n"
"Set the turtle's first coordinate to x, second coordinate remains\n"
"unchanged.\n"
"\n"
"Example:\n"
">>> position()\n"
"(0.00, 40.00)\n"
">>> sety(-10)\n"
">>> position()\n"
"(0.00, -10.00)"
msgstr ""

#: modes/api/python3.py:612
msgid ""
"turtle.shape(name=None) \n"
"Set turtle shape to shape with given name / return current shapename.\n"
"\n"
"Optional argument:\n"
"name -- a string, which is a valid shapename\n"
"\n"
"Set turtle shape to shape with given name or, if name is not given,\n"
"return name of current shape.\n"
"Shape with name must exist in the TurtleScreen's shape dictionary.\n"
"Initially there are the following polygon shapes:\n"
"'arrow', 'turtle', 'circle', 'square', 'triangle', 'classic'.\n"
"To learn about how to deal with shapes see Screen-method register_shape.\n"
"\n"
"Example:\n"
">>> shape()\n"
"'arrow'\n"
">>> shape(\"turtle\")\n"
">>> shape()\n"
"'turtle'"
msgstr ""

#: modes/api/python3.py:613
msgid ""
"turtle.shapesize(stretch_wid=None, stretch_len=None, outline=None) \n"
"Set/return turtle's stretchfactors/outline. Set resizemode to \"user\".\n"
"\n"
"Optional arguments:\n"
"   stretch_wid : positive number\n"
"   stretch_len : positive number\n"
"   outline  : positive number\n"
"\n"
"Return or set the pen's attributes x/y-stretchfactors and/or outline.\n"
"Set resizemode to \"user\".\n"
"If and only if resizemode is set to \"user\", the turtle will be displayed\n"
"stretched according to its stretchfactors:\n"
"stretch_wid is stretchfactor perpendicular to orientation\n"
"stretch_len is stretchfactor in direction of turtles orientation.\n"
"outline determines the width of the shapes's outline.\n"
"\n"
"Examples:\n"
">>> resizemode(\"user\")\n"
">>> shapesize(5, 5, 12)\n"
">>> shapesize(outline=8)"
msgstr ""

#: modes/api/python3.py:614
msgid ""
"turtle.shapetransform(t11=None, t12=None, t21=None, t22=None) \n"
"Set or return the current transformation matrix of the turtle shape.\n"
"\n"
"Optional arguments: t11, t12, t21, t22 -- numbers.\n"
"\n"
"If none of the matrix elements are given, return the transformation\n"
"matrix.\n"
"Otherwise set the given elements and transform the turtleshape\n"
"according to the matrix consisting of first row t11, t12 and\n"
"second row t21, 22.\n"
"Modify stretchfactor, shearfactor and tiltangle according to the\n"
"given matrix.\n"
"\n"
"Examples:\n"
">>> shape(\"square\")\n"
">>> shapesize(4,2)\n"
">>> shearfactor(-0.5)\n"
">>> shapetransform()\n"
"(4.0, -1.0, -0.0, 2.0)"
msgstr ""

#: modes/api/python3.py:615
msgid ""
"turtle.shearfactor(shear=None) \n"
"Set or return the current shearfactor.\n"
"\n"
"Optional argument: shear -- number, tangent of the shear angle\n"
"\n"
"Shear the turtleshape according to the given shearfactor shear,\n"
"which is the tangent of the shear angle. DO NOT change the\n"
"turtle's heading (direction of movement).\n"
"If shear is not given: return the current shearfactor, i. e. the\n"
"tangent of the shear angle, by which lines parallel to the\n"
"heading of the turtle are sheared.\n"
"\n"
"Examples:\n"
">>> shape(\"circle\")\n"
">>> shapesize(5,2)\n"
">>> shearfactor(0.5)\n"
">>> shearfactor()\n"
">>> 0.5"
msgstr ""

#: modes/api/python3.py:616
msgid ""
"turtle.showturtle() \n"
"Makes the turtle visible.\n"
"\n"
"Aliases: showturtle | st\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> hideturtle()\n"
">>> showturtle()"
msgstr ""

#: modes/api/python3.py:617
msgid ""
"turtle.speed(speed=None) \n"
"Return or set the turtle's speed.\n"
"\n"
"Optional argument:\n"
"speed -- an integer in the range 0..10 or a speedstring (see below)\n"
"\n"
"Set the turtle's speed to an integer value in the range 0 .. 10.\n"
"If no argument is given: return current speed.\n"
"\n"
"If input is a number greater than 10 or smaller than 0.5,\n"
"speed is set to 0.\n"
"Speedstrings  are mapped to speedvalues in the following way:\n"
"    'fastest' :  0\n"
"    'fast'    :  10\n"
"    'normal'  :  6\n"
"    'slow'    :  3\n"
"    'slowest' :  1\n"
"speeds from 1 to 10 enforce increasingly faster animation of\n"
"line drawing and turtle turning.\n"
"\n"
"Attention:\n"
"speed = 0 : *no* animation takes place. forward/back makes turtle jump\n"
"and likewise left/right make the turtle turn instantly.\n"
"\n"
"Example:\n"
">>> speed(3)"
msgstr ""

#: modes/api/python3.py:618
msgid ""
"turtle.split(p) \n"
"Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is\n"
"everything after the final slash.  Either part may be empty."
msgstr ""

#: modes/api/python3.py:619
msgid ""
"turtle.st() \n"
"Makes the turtle visible.\n"
"\n"
"Aliases: showturtle | st\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> hideturtle()\n"
">>> showturtle()"
msgstr ""

#: modes/api/python3.py:620
msgid ""
"turtle.stamp() \n"
"Stamp a copy of the turtleshape onto the canvas and return its id.\n"
"\n"
"No argument.\n"
"\n"
"Stamp a copy of the turtle shape onto the canvas at the current\n"
"turtle position. Return a stamp_id for that stamp, which can be\n"
"used to delete it by calling clearstamp(stamp_id).\n"
"\n"
"Example:\n"
">>> color(\"blue\")\n"
">>> stamp()\n"
"13\n"
">>> fd(50)"
msgstr ""

#: modes/api/python3.py:621
msgid ""
"turtle.sys() \n"
"This module provides access to some objects used or maintained by the\n"
"interpreter and to functions that interact strongly with the interpreter.\n"
"\n"
"Dynamic objects:\n"
"\n"
"argv -- command line arguments; argv[0] is the script pathname if known\n"
"path -- module search path; path[0] is the script directory, else ''\n"
"modules -- dictionary of loaded modules\n"
"\n"
"displayhook -- called to show results in an interactive session\n"
"excepthook -- called to handle any uncaught exception other than SystemExit\n"
"  To customize printing in an interactive session or to install a custom\n"
"  top-level exception handler, assign other functions to replace these.\n"
"\n"
"stdin -- standard input file object; used by input()\n"
"stdout -- standard output file object; used by print()\n"
"stderr -- standard error object; used for error messages\n"
"  By assigning other file objects (or objects that behave like files)\n"
"  to these, it is possible to redirect all of the interpreter's I/O.\n"
"\n"
"last_type -- type of last uncaught exception\n"
"last_value -- value of last uncaught exception\n"
"last_traceback -- traceback of last uncaught exception\n"
"  These three are only available in an interactive session after a\n"
"  traceback has been printed.\n"
"\n"
"Static objects:\n"
"\n"
"builtin_module_names -- tuple of module names built into this interpreter\n"
"copyright -- copyright notice pertaining to this interpreter\n"
"exec_prefix -- prefix used to find the machine-specific Python library\n"
"executable -- absolute path of the executable binary of the Python "
"interpreter\n"
"float_info -- a struct sequence with information about the float "
"implementation.\n"
"float_repr_style -- string indicating the style of repr() output for floats\n"
"hash_info -- a struct sequence with information about the hash algorithm.\n"
"hexversion -- version information encoded as a single integer\n"
"implementation -- Python implementation information.\n"
"int_info -- a struct sequence with information about the int "
"implementation.\n"
"maxsize -- the largest supported length of containers.\n"
"maxunicode -- the value of the largest Unicode code point\n"
"platform -- platform identifier\n"
"prefix -- prefix used to find the Python library\n"
"thread_info -- a struct sequence with information about the thread "
"implementation.\n"
"version -- the version of this interpreter as a string\n"
"version_info -- version information as a named tuple\n"
"__stdin__ -- the original stdin; don't touch!\n"
"__stdout__ -- the original stdout; don't touch!\n"
"__stderr__ -- the original stderr; don't touch!\n"
"__displayhook__ -- the original displayhook; don't touch!\n"
"__excepthook__ -- the original excepthook; don't touch!\n"
"\n"
"Functions:\n"
"\n"
"displayhook() -- print an object to the screen, and save it in builtins._\n"
"excepthook() -- print an exception and its traceback to sys.stderr\n"
"exc_info() -- return thread-safe information about the current exception\n"
"exit() -- exit the interpreter by raising SystemExit\n"
"getdlopenflags() -- returns flags to be used for dlopen() calls\n"
"getprofile() -- get the global profiling function\n"
"getrefcount() -- return the reference count for an object (plus one :-)\n"
"getrecursionlimit() -- return the max recursion depth for the interpreter\n"
"getsizeof() -- return the size of an object in bytes\n"
"gettrace() -- get the global debug tracing function\n"
"setcheckinterval() -- control how often the interpreter checks for events\n"
"setdlopenflags() -- set the flags to be used for dlopen() calls\n"
"setprofile() -- set the global profiling function\n"
"setrecursionlimit() -- set the max recursion depth for the interpreter\n"
"settrace() -- set the global debug tracing function"
msgstr ""

#: modes/api/python3.py:622
msgid ""
"turtle.textinput(title, prompt) \n"
"Pop up a dialog window for input of a string.\n"
"\n"
"Arguments: title is the title of the dialog window,\n"
"prompt is a text mostly describing what information to input.\n"
"\n"
"Return the string input\n"
"If the dialog is canceled, return None.\n"
"\n"
"Example:\n"
">>> textinput(\"NIM\", \"Name of first player:\")"
msgstr ""

#: modes/api/python3.py:623
msgid ""
"turtle.tilt(angle) \n"
"Rotate the turtleshape by angle.\n"
"\n"
"Argument:\n"
"angle - a number\n"
"\n"
"Rotate the turtleshape by angle from its current tilt-angle,\n"
"but do NOT change the turtle's heading (direction of movement).\n"
"\n"
"Examples:\n"
">>> shape(\"circle\")\n"
">>> shapesize(5,2)\n"
">>> tilt(30)\n"
">>> fd(50)\n"
">>> tilt(30)\n"
">>> fd(50)"
msgstr ""

#: modes/api/python3.py:624
msgid ""
"turtle.tiltangle(angle=None) \n"
"Set or return the current tilt-angle.\n"
"\n"
"Optional argument: angle -- number\n"
"\n"
"Rotate the turtleshape to point in the direction specified by angle,\n"
"regardless of its current tilt-angle. DO NOT change the turtle's\n"
"heading (direction of movement).\n"
"If angle is not given: return the current tilt-angle, i. e. the angle\n"
"between the orientation of the turtleshape and the heading of the\n"
"turtle (its direction of movement).\n"
"\n"
"Deprecated since Python 3.1\n"
"\n"
"Examples:\n"
">>> shape(\"circle\")\n"
">>> shapesize(5,2)\n"
">>> tilt(45)\n"
">>> tiltangle()"
msgstr ""

#: modes/api/python3.py:625
msgid ""
"turtle.time() \n"
"This module provides various functions to manipulate time values.\n"
"\n"
"There are two standard representations of time.  One is the number\n"
"of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer\n"
"or a floating point number (to represent fractions of seconds).\n"
"The Epoch is system-defined; on Unix, it is generally January 1st, 1970.\n"
"The actual value can be retrieved by calling gmtime(0).\n"
"\n"
"The other representation is a tuple of 9 integers giving local time.\n"
"The tuple items are:\n"
"  year (including century, e.g. 1998)\n"
"  month (1-12)\n"
"  day (1-31)\n"
"  hours (0-23)\n"
"  minutes (0-59)\n"
"  seconds (0-59)\n"
"  weekday (0-6, Monday is 0)\n"
"  Julian day (day in the year, 1-366)\n"
"  DST (Daylight Savings Time) flag (-1, 0 or 1)\n"
"If the DST flag is 0, the time is given in the regular time zone;\n"
"if it is 1, the time is given in the DST time zone;\n"
"if it is -1, mktime() should guess based on the date and time.\n"
"\n"
"Variables:\n"
"\n"
"timezone -- difference in seconds between UTC and local standard time\n"
"altzone -- difference in  seconds between UTC and local DST time\n"
"daylight -- whether local time should reflect DST\n"
"tzname -- tuple of (standard time zone name, DST time zone name)\n"
"\n"
"Functions:\n"
"\n"
"time() -- return current time in seconds since the Epoch as a float\n"
"clock() -- return CPU time since process start as a float\n"
"sleep() -- delay for a number of seconds given as a float\n"
"gmtime() -- convert seconds since Epoch to UTC tuple\n"
"localtime() -- convert seconds since Epoch to local time tuple\n"
"asctime() -- convert time tuple to string\n"
"ctime() -- convert time in seconds to string\n"
"mktime() -- convert local time tuple to seconds since Epoch\n"
"strftime() -- convert time tuple to string according to format "
"specification\n"
"strptime() -- parse string to time tuple according to format specification\n"
"tzset() -- change the local timezone"
msgstr ""

#: modes/api/python3.py:626
msgid ""
"turtle.title(titlestring) \n"
"Set title of turtle-window\n"
"\n"
"Argument:\n"
"titlestring -- a string, to appear in the titlebar of the\n"
"               turtle graphics window.\n"
"\n"
"This is a method of Screen-class. Not available for TurtleScreen-\n"
"objects.\n"
"\n"
"Example:\n"
">>> title(\"Welcome to the turtle-zoo!\")"
msgstr ""

#: modes/api/python3.py:627
msgid ""
"turtle.tkinter() \n"
"Wrapper functions for Tcl/Tk.\n"
"\n"
"Tkinter provides classes which allow the display, positioning and\n"
"control of widgets. Toplevel widgets are Tk and Toplevel. Other\n"
"widgets are Frame, Label, Entry, Text, Canvas, Button, Radiobutton,\n"
"Checkbutton, Scale, Listbox, Scrollbar, OptionMenu, Spinbox\n"
"LabelFrame and PanedWindow.\n"
"\n"
"Properties of the widgets are specified with keyword arguments.\n"
"Keyword arguments have the same name as the corresponding resource\n"
"under Tk.\n"
"\n"
"Widgets are positioned with one of the geometry managers Place, Pack\n"
"or Grid. These managers can be called with methods place, pack, grid\n"
"available in every Widget.\n"
"\n"
"Actions are bound to events by resources (e.g. keyword argument\n"
"command) or with the method bind.\n"
"\n"
"Example (Hello, World):\n"
"import tkinter\n"
"from tkinter.constants import *\n"
"tk = tkinter.Tk()\n"
"frame = tkinter.Frame(tk, relief=RIDGE, borderwidth=2)\n"
"frame.pack(fill=BOTH,expand=1)\n"
"label = tkinter.Label(frame, text=\"Hello, World\")\n"
"label.pack(fill=X, expand=1)\n"
"button = tkinter.Button(frame,text=\"Exit\",command=tk.destroy)\n"
"button.pack(side=BOTTOM)\n"
"tk.mainloop()"
msgstr ""

#: modes/api/python3.py:628
msgid ""
"turtle.tkinter.simpledialog() \n"
"This modules handles dialog boxes.\n"
"\n"
"It contains the following public symbols:\n"
"\n"
"SimpleDialog -- A simple but flexible modal dialog box\n"
"\n"
"Dialog -- a base class for dialogs\n"
"\n"
"askinteger -- get an integer from the user\n"
"\n"
"askfloat -- get a float from the user\n"
"\n"
"askstring -- get a string from the user"
msgstr ""

#: modes/api/python3.py:629
msgid ""
"turtle.towards(x, y=None) \n"
"Return the angle of the line from the turtle's position to (x, y).\n"
"\n"
"Arguments:\n"
"x -- a number   or  a pair/vector of numbers   or   a turtle instance\n"
"y -- a number       None                            None\n"
"\n"
"call: distance(x, y)         # two coordinates\n"
"--or: distance((x, y))       # a pair (tuple) of coordinates\n"
"--or: distance(vec)          # e.g. as returned by pos()\n"
"--or: distance(mypen)        # where mypen is another turtle\n"
"\n"
"Return the angle, between the line from turtle-position to position\n"
"specified by x, y and the turtle's start orientation. (Depends on\n"
"modes - \"standard\" or \"logo\")\n"
"\n"
"Example:\n"
">>> pos()\n"
"(10.00, 10.00)\n"
">>> towards(0,0)\n"
"225.0"
msgstr ""

#: modes/api/python3.py:630
msgid ""
"turtle.tracer(n=None, delay=None) \n"
"Turns turtle animation on/off and set delay for update drawings.\n"
"\n"
"Optional arguments:\n"
"n -- nonnegative  integer\n"
"delay -- nonnegative  integer\n"
"\n"
"If n is given, only each n-th regular screen update is really performed.\n"
"(Can be used to accelerate the drawing of complex graphics.)\n"
"Second arguments sets delay value (see RawTurtle.delay())\n"
"\n"
"Example:\n"
">>> tracer(8, 25)\n"
">>> dist = 2\n"
">>> for i in range(200):\n"
"...     fd(dist)\n"
"...     rt(90)\n"
"...     dist += 2"
msgstr ""

#: modes/api/python3.py:631
msgid ""
"turtle.turtles() \n"
"Return the list of turtles on the \n"
"\n"
"Example:\n"
">>> turtles()\n"
"[<turtle.Turtle object at 0x00E11FB0>]"
msgstr ""

#: modes/api/python3.py:632
msgid ""
"turtle.turtlesize(stretch_wid=None, stretch_len=None, outline=None) \n"
"Set/return turtle's stretchfactors/outline. Set resizemode to \"user\".\n"
"\n"
"Optional arguments:\n"
"   stretch_wid : positive number\n"
"   stretch_len : positive number\n"
"   outline  : positive number\n"
"\n"
"Return or set the pen's attributes x/y-stretchfactors and/or outline.\n"
"Set resizemode to \"user\".\n"
"If and only if resizemode is set to \"user\", the turtle will be displayed\n"
"stretched according to its stretchfactors:\n"
"stretch_wid is stretchfactor perpendicular to orientation\n"
"stretch_len is stretchfactor in direction of turtles orientation.\n"
"outline determines the width of the shapes's outline.\n"
"\n"
"Examples:\n"
">>> resizemode(\"user\")\n"
">>> shapesize(5, 5, 12)\n"
">>> shapesize(outline=8)"
msgstr ""

#: modes/api/python3.py:633
msgid ""
"turtle.types() \n"
"Define names for built-in types that aren't directly accessible as a builtin."
msgstr ""

#: modes/api/python3.py:634
msgid ""
"turtle.undo() \n"
"undo (repeatedly) the last turtle action.\n"
"\n"
"No argument.\n"
"\n"
"undo (repeatedly) the last turtle action.\n"
"Number of available undo actions is determined by the size of\n"
"the undobuffer.\n"
"\n"
"Example:\n"
">>> for i in range(4):\n"
"...     fd(50); lt(80)\n"
"...\n"
">>> for i in range(8):\n"
"...     undo()\n"
"..."
msgstr ""

#: modes/api/python3.py:635
msgid ""
"turtle.undobufferentries() \n"
"Return count of entries in the undobuffer.\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> while undobufferentries():\n"
"...     undo()"
msgstr ""

#: modes/api/python3.py:636
msgid ""
"turtle.up() \n"
"Pull the pen up -- no drawing when moving.\n"
"\n"
"Aliases: penup | pu | up\n"
"\n"
"No argument\n"
"\n"
"Example:\n"
">>> penup()"
msgstr ""

#: modes/api/python3.py:637
msgid ""
"turtle.update() \n"
"Perform a TurtleScreen update.\n"
"        "
msgstr ""

#: modes/api/python3.py:638
msgid ""
"turtle.width(width=None) \n"
"Set or return the line thickness.\n"
"\n"
"Aliases:  pensize | width\n"
"\n"
"Argument:\n"
"width -- positive number\n"
"\n"
"Set the line thickness to width or return it. If resizemode is set\n"
"to \"auto\" and turtleshape is a polygon, that polygon is drawn with\n"
"the same line thickness. If no argument is given, current pensize\n"
"is returned.\n"
"\n"
"Example:\n"
">>> pensize()\n"
"1\n"
">>> pensize(10)   # from here on lines of width 10 are drawn"
msgstr ""

#: modes/api/python3.py:639
msgid ""
"turtle.window_height() \n"
"Return the height of the turtle window.\n"
"\n"
"Example:\n"
">>> window_height()\n"
"480"
msgstr ""

#: modes/api/python3.py:640
msgid ""
"turtle.window_width() \n"
"Return the width of the turtle window.\n"
"\n"
"Example:\n"
">>> window_width()\n"
"640"
msgstr ""

#: modes/api/python3.py:641
msgid ""
"turtle.write(arg, move=False, align='left', font='Arial', 8, 'normal') \n"
"Write text at the current turtle position.\n"
"\n"
"Arguments:\n"
"arg -- info, which is to be written to the TurtleScreen\n"
"move (optional) -- True/False\n"
"align (optional) -- one of the strings \"left\", \"center\" or right\"\n"
"font (optional) -- a triple (fontname, fontsize, fonttype)\n"
"\n"
"Write text - the string representation of arg - at the current\n"
"turtle position according to align (\"left\", \"center\" or right\")\n"
"and with the given font.\n"
"If move is True, the pen is moved to the bottom-right corner\n"
"of the text. By default, move is False.\n"
"\n"
"Example:\n"
">>> write('Home = ', True, align=\"center\")\n"
">>> write((0,0), True)"
msgstr ""

#: modes/api/python3.py:642
msgid ""
"turtle.write_docstringdict(filename='turtle_docstringdict') \n"
"Create and write docstring-dictionary to file.\n"
"\n"
"Optional argument:\n"
"filename -- a string, used as filename\n"
"            default value is turtle_docstringdict\n"
"\n"
"Has to be called explicitly, (not used by the turtle-graphics classes)\n"
"The docstring dictionary will be written to the Python script <filname>.py\n"
"It is intended to serve as a template for translation of the docstrings\n"
"into different languages."
msgstr ""

#: modes/api/python3.py:643
msgid ""
"turtle.xcor() \n"
"Return the turtle's x coordinate.\n"
"\n"
"No arguments.\n"
"\n"
"Example:\n"
">>> reset()\n"
">>> left(60)\n"
">>> forward(100)\n"
">>> print xcor()\n"
"50.0"
msgstr ""

#: modes/api/python3.py:644
msgid ""
"turtle.ycor() \n"
"Return the turtle's y coordinate\n"
"---\n"
"No arguments.\n"
"\n"
"Example:\n"
">>> reset()\n"
">>> left(60)\n"
">>> forward(100)\n"
">>> print ycor()\n"
"86.6025403784"
msgstr ""

#: modes/api/python3.py:645
msgid ""
"uuid.UUID(hex=None, bytes=None, bytes_le=None, fields=None, int=None, "
"version=None) \n"
"Instances of the UUID class represent UUIDs as specified in RFC 4122.\n"
"UUID objects are immutable, hashable, and usable as dictionary keys.\n"
"Converting a UUID to a string with str() yields something in the form\n"
"'12345678-1234-1234-1234-123456789abc'.  The UUID constructor accepts\n"
"five possible forms: a similar string of hexadecimal digits, or a tuple\n"
"of six integer fields (with 32-bit, 16-bit, 16-bit, 8-bit, 8-bit, and\n"
"48-bit values respectively) as an argument named 'fields', or a string\n"
"of 16 bytes (with all the integer fields in big-endian order) as an\n"
"argument named 'bytes', or a string of 16 bytes (with the first three\n"
"fields in little-endian order) as an argument named 'bytes_le', or a\n"
"single 128-bit integer as an argument named 'int'.\n"
"\n"
"UUIDs have these read-only attributes:\n"
"\n"
"    bytes       the UUID as a 16-byte string (containing the six\n"
"                integer fields in big-endian byte order)\n"
"\n"
"    bytes_le    the UUID as a 16-byte string (with time_low, time_mid,\n"
"                and time_hi_version in little-endian byte order)\n"
"\n"
"    fields      a tuple of the six integer fields of the UUID,\n"
"                which are also available as six individual attributes\n"
"                and two derived attributes:\n"
"\n"
"        time_low                the first 32 bits of the UUID\n"
"        time_mid                the next 16 bits of the UUID\n"
"        time_hi_version         the next 16 bits of the UUID\n"
"        clock_seq_hi_variant    the next 8 bits of the UUID\n"
"        clock_seq_low           the next 8 bits of the UUID\n"
"        node                    the last 48 bits of the UUID\n"
"\n"
"        time                    the 60-bit timestamp\n"
"        clock_seq               the 14-bit sequence number\n"
"\n"
"    hex         the UUID as a 32-character hexadecimal string\n"
"\n"
"    int         the UUID as a 128-bit integer\n"
"\n"
"    urn         the UUID as a URN as specified in RFC 4122\n"
"\n"
"    variant     the UUID variant (one of the constants RESERVED_NCS,\n"
"                RFC_4122, RESERVED_MICROSOFT, or RESERVED_FUTURE)\n"
"\n"
"    version     the UUID version number (1 through 5, meaningful only\n"
"                when the variant is RFC_4122)"
msgstr ""

#: modes/api/python3.py:646
msgid ""
"uuid.bytes() \n"
"bytes(iterable_of_ints) -> bytes\n"
"bytes(string, encoding[, errors]) -> bytes\n"
"bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\n"
"bytes(int) -> bytes object of size given by the parameter initialized with "
"null bytes\n"
"bytes() -> empty bytes object\n"
"\n"
"Construct an immutable array of bytes from:\n"
"  - an iterable yielding integers in range(256)\n"
"  - a text string encoded using the specified encoding\n"
"  - any object implementing the buffer API.\n"
"  - an integer"
msgstr ""

#: modes/api/python3.py:647
msgid ""
"uuid.ctypes() \n"
"create and manipulate C data types in Python"
msgstr ""

#: modes/api/python3.py:648
msgid ""
"uuid.getnode() \n"
"Get the hardware address as a 48-bit positive integer.\n"
"\n"
"The first time this runs, it may launch a separate program, which could\n"
"be quite slow.  If all attempts to obtain the hardware address fail, we\n"
"choose a random 48-bit number with its eighth bit set to 1 as recommended\n"
"in RFC 4122."
msgstr ""

#: modes/api/python3.py:649
msgid ""
"uuid.int() \n"
"int(x=0) -> integer\n"
"int(x, base=10) -> integer\n"
"\n"
"Convert a number or string to an integer, or return 0 if no arguments\n"
"are given.  If x is a number, return x.__int__().  For floating point\n"
"numbers, this truncates towards zero.\n"
"\n"
"If x is not a number or if base is given, then x must be a string,\n"
"bytes, or bytearray instance representing an integer literal in the\n"
"given base.  The literal can be preceded by '+' or '-' and be surrounded\n"
"by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n"
"Base 0 means to interpret the base from the string as an integer literal.\n"
">>> int('0b100', base=0)\n"
"4"
msgstr ""

#: modes/api/python3.py:650
msgid ""
"uuid.os() \n"
"OS routines for NT or Posix depending on what system we're on.\n"
"\n"
"This exports:\n"
"  - all functions from posix or nt, e.g. unlink, stat, etc.\n"
"  - os.path is either posixpath or ntpath\n"
"  - os.name is either 'posix' or 'nt'\n"
"  - os.curdir is a string representing the current directory (always '.')\n"
"  - os.pardir is a string representing the parent directory (always '..')\n"
"  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n"
"  - os.extsep is the extension separator (always '.')\n"
"  - os.altsep is the alternate pathname separator (None or '/')\n"
"  - os.pathsep is the component separator used in $PATH etc\n"
"  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r"
"\\n')\n"
"  - os.defpath is the default search path for executables\n"
"  - os.devnull is the file path of the null device ('/dev/null', etc.)\n"
"\n"
"Programs that import and use 'os' stand a better chance of being\n"
"portable between different platforms.  Of course, they must then\n"
"only use functions that are defined by all platforms (e.g., unlink\n"
"and opendir), and leave all pathname manipulation to os.path\n"
"(e.g., split and join)."
msgstr ""

#: modes/api/python3.py:651
msgid ""
"uuid.sys() \n"
"This module provides access to some objects used or maintained by the\n"
"interpreter and to functions that interact strongly with the interpreter.\n"
"\n"
"Dynamic objects:\n"
"\n"
"argv -- command line arguments; argv[0] is the script pathname if known\n"
"path -- module search path; path[0] is the script directory, else ''\n"
"modules -- dictionary of loaded modules\n"
"\n"
"displayhook -- called to show results in an interactive session\n"
"excepthook -- called to handle any uncaught exception other than SystemExit\n"
"  To customize printing in an interactive session or to install a custom\n"
"  top-level exception handler, assign other functions to replace these.\n"
"\n"
"stdin -- standard input file object; used by input()\n"
"stdout -- standard output file object; used by print()\n"
"stderr -- standard error object; used for error messages\n"
"  By assigning other file objects (or objects that behave like files)\n"
"  to these, it is possible to redirect all of the interpreter's I/O.\n"
"\n"
"last_type -- type of last uncaught exception\n"
"last_value -- value of last uncaught exception\n"
"last_traceback -- traceback of last uncaught exception\n"
"  These three are only available in an interactive session after a\n"
"  traceback has been printed.\n"
"\n"
"Static objects:\n"
"\n"
"builtin_module_names -- tuple of module names built into this interpreter\n"
"copyright -- copyright notice pertaining to this interpreter\n"
"exec_prefix -- prefix used to find the machine-specific Python library\n"
"executable -- absolute path of the executable binary of the Python "
"interpreter\n"
"float_info -- a struct sequence with information about the float "
"implementation.\n"
"float_repr_style -- string indicating the style of repr() output for floats\n"
"hash_info -- a struct sequence with information about the hash algorithm.\n"
"hexversion -- version information encoded as a single integer\n"
"implementation -- Python implementation information.\n"
"int_info -- a struct sequence with information about the int "
"implementation.\n"
"maxsize -- the largest supported length of containers.\n"
"maxunicode -- the value of the largest Unicode code point\n"
"platform -- platform identifier\n"
"prefix -- prefix used to find the Python library\n"
"thread_info -- a struct sequence with information about the thread "
"implementation.\n"
"version -- the version of this interpreter as a string\n"
"version_info -- version information as a named tuple\n"
"__stdin__ -- the original stdin; don't touch!\n"
"__stdout__ -- the original stdout; don't touch!\n"
"__stderr__ -- the original stderr; don't touch!\n"
"__displayhook__ -- the original displayhook; don't touch!\n"
"__excepthook__ -- the original excepthook; don't touch!\n"
"\n"
"Functions:\n"
"\n"
"displayhook() -- print an object to the screen, and save it in builtins._\n"
"excepthook() -- print an exception and its traceback to sys.stderr\n"
"exc_info() -- return thread-safe information about the current exception\n"
"exit() -- exit the interpreter by raising SystemExit\n"
"getdlopenflags() -- returns flags to be used for dlopen() calls\n"
"getprofile() -- get the global profiling function\n"
"getrefcount() -- return the reference count for an object (plus one :-)\n"
"getrecursionlimit() -- return the max recursion depth for the interpreter\n"
"getsizeof() -- return the size of an object in bytes\n"
"gettrace() -- get the global debug tracing function\n"
"setcheckinterval() -- control how often the interpreter checks for events\n"
"setdlopenflags() -- set the flags to be used for dlopen() calls\n"
"setprofile() -- set the global profiling function\n"
"setrecursionlimit() -- set the max recursion depth for the interpreter\n"
"settrace() -- set the global debug tracing function"
msgstr ""

#: modes/api/python3.py:652
msgid ""
"uuid.uuid1(node=None, clock_seq=None) \n"
"Generate a UUID from a host ID, sequence number, and the current time.\n"
"If 'node' is not given, getnode() is used to obtain the hardware\n"
"address.  If 'clock_seq' is given, it is used as the sequence number;\n"
"otherwise a random 14-bit sequence number is chosen."
msgstr ""

#: modes/api/python3.py:653
msgid ""
"uuid.uuid3(namespace, name) \n"
"Generate a UUID from the MD5 hash of a namespace UUID and a name."
msgstr ""

#: modes/api/python3.py:654
msgid ""
"uuid.uuid4() \n"
"Generate a random UUID."
msgstr ""

#: modes/api/python3.py:655
msgid ""
"uuid.uuid5(namespace, name) \n"
"Generate a UUID from the SHA-1 hash of a namespace UUID and a name."
msgstr ""

#: modes/api/shared.py:24
msgid ""
"find(sub, start, end) \n"
"Return the lowest index in the string where substring 'sub' is found. The "
"optional\n"
"'start' and 'end' arguments specify the slice of string to use.\n"
"Returns -1 if 'sub' cannot be found."
msgstr ""

#: modes/api/shared.py:25
msgid ""
"rfind(sub, start, end) \n"
"Return the highest index in the string where substring 'sub' is found. The "
"optional\n"
"'start' and 'end' arguments specify the slice of string to use.\n"
"Returns -1 if 'sub' cannot be found."
msgstr ""

#: modes/api/shared.py:26
msgid ""
"index(sub, start, end) \n"
"Return the lowest index in the string where substring 'sub' is found. The "
"optional\n"
"'start' and 'end' arguments specify the slice of string to use.\n"
"Raises a ValueError if 'sub' cannot be found."
msgstr ""

#: modes/api/shared.py:27
msgid ""
"rindex(sub, start, end) \n"
"Return the highest index in the string where substring 'sub' is found. The "
"optional\n"
"'start' and 'end' arguments specify the slice of string to use.\n"
"Raises a ValueError if 'sub' cannot be found."
msgstr ""

#: modes/api/shared.py:28
msgid ""
"join(iterable) \n"
"Return a string which is the concatenation of the strings in 'iterable'.\n"
"The separator between elements is the string providing this method."
msgstr ""

#: modes/api/shared.py:29
msgid ""
"split(sep=None, maxsplit=-1) \n"
"Return a list of the words in a string, using 'sep' as the delimiter "
"string.\n"
"If 'sep' is not provided, the splitting algorithm uses whitespace.\n"
"If the optional 'maxsplit' is provided, splitting will occur 'maxsplit' "
"times."
msgstr ""

#: modes/api/shared.py:30
msgid ""
"rsplit(sep=None, maxsplit=-1) \n"
"Return a list of the words in a string, using 'sep' as the delimiter "
"string.\n"
"If 'sep' is not provided, the splitting algorithm uses whitespace.\n"
"If the optional 'maxsplit' is provided, splitting will only occur "
"'maxsplit'\n"
"times from the right."
msgstr ""

#: modes/api/shared.py:31
msgid ""
"startswith(prefix) \n"
"Returns True if the string starts with 'prefix'."
msgstr ""

#: modes/api/shared.py:32
msgid ""
"endswith(suffix) \n"
"Returns True if the string ends with 'suffix'."
msgstr ""

#: modes/api/shared.py:33
msgid ""
"strip(chars) \n"
"Return a copy of the string with the leading and trailing characters "
"removed.\n"
"The chars argument is a string specifying the set of characters to be "
"removed.\n"
"If omitted or None, the chars argument defaults to removing whitespace.\n"
"The chars argument is not a prefix or suffix; rather, all combinations of "
"its values are stripped"
msgstr ""

#: modes/api/shared.py:34
msgid ""
"lstrip(chars) \n"
"Return a copy of the string with leading characters removed. The chars "
"argument\n"
"is a string specifying the set of characters to be removed.\n"
"If omitted or None, the chars argument defaults to removing whitespace.\n"
"The chars argument is not a prefix; rather, all combinations of its values "
"are\n"
"stripped"
msgstr ""

#: modes/api/shared.py:35
msgid ""
"rstrip(chars) \n"
"Return a copy of the string with trailing characters removed. The chars "
"argument\n"
"is a string specifying the set of characters to be removed.\n"
"If omitted or None, the chars argument defaults to removing whitespace.\n"
"The chars argument is not a suffix; rather, all combinations of its values "
"are\n"
"stripped"
msgstr ""

#: modes/api/shared.py:36
msgid ""
"format(*args, **kwargs) \n"
"Perform a string formatting operation. The string on which this method is "
"called\n"
"can contain literal text or replacement fields delimited by braces {}. Each\n"
"replacement field contains either the numeric index of a positional "
"argument,\n"
"or the name of a keyword argument.\n"
"Returns a copy of the string where each replacement field is replaced with "
"the\n"
"string value of the corresponding argument."
msgstr ""

#: modes/api/shared.py:37
msgid ""
"replace(old, new) \n"
"Return a copy of the string with all othe occurrences of 'old' replaced with "
"'new'."
msgstr ""

#: modes/api/shared.py:38
msgid ""
"count(sub, start, end) \n"
"Return the number of non-overlapping occurrences of substring 'sub'.\n"
"Optional arguments 'start' and 'end' specify the slice of the string to use. "
msgstr ""

#: modes/api/shared.py:39
msgid ""
"partition(sep) \n"
"Split the string at the first occurrence of 'sep', and return a 3-tuple "
"containing\n"
"the part before the separator, the separator itself, and the part after the "
"separator.\n"
"If the separator is not found, return a 3-tuple containing the string "
"itself,\n"
"followed by two empty strings."
msgstr ""

#: modes/api/shared.py:40
msgid ""
"rpartition(sep) \n"
"Split the string at the last occurrence of 'sep', and return a 3-tuple "
"containing\n"
"the part before the separator, the separator itself, and the part after the "
"separator.\n"
"If the separator is not found, return a 3-tuple containing two empty "
"strings,\n"
"followed by the string itself."
msgstr ""

#: modes/api/shared.py:41
msgid ""
"lower() \n"
"Return a copy of the string with all the cased characters converted to "
"lowercase."
msgstr ""

#: modes/api/shared.py:42
msgid ""
"upper() \n"
"Return a copy of the string with all the cased characters converted to "
"uppercase."
msgstr ""

#: modes/api/shared.py:43
msgid ""
"isspace() \n"
"Return True if there are only whitespace characters in the string and thers "
"is\n"
"at least one character."
msgstr ""

#: modes/api/shared.py:44
msgid ""
"isalpha() \n"
"Return True if all the characters in the string are alphabetic and there is\n"
"at least one character."
msgstr ""

#: modes/api/shared.py:45
msgid ""
"isdigit() \n"
"Return True if all characters in the string are digits and there is\n"
"at least one character."
msgstr ""

#: modes/api/shared.py:46
msgid ""
"isupper() \n"
"Return True if all characters in the string are uppercase and there is\n"
"at least one character."
msgstr ""

#: modes/api/shared.py:47
msgid ""
"islower() \n"
"Return True if all characters in the string are lowercase and there is\n"
"at least one character."
msgstr ""

#: modes/api/shared.py:49
msgid ""
"abs(x) \n"
"Return the absolute value of the number 'x'."
msgstr ""

#: modes/api/shared.py:50
msgid ""
"all(iterable) \n"
"Return True if all elements of iterable are true (or iterable is empty)."
msgstr ""

#: modes/api/shared.py:51
msgid ""
"any(iterable) \n"
"Return True if any element of iterable is true. If iterable is empty, return "
"False."
msgstr ""

#: modes/api/shared.py:52
msgid ""
"bin(x) \n"
"Convert an integer (whole) number into a binary string."
msgstr ""

#: modes/api/shared.py:53
msgid ""
"bool(x) \n"
"Return a Boolean value, i.e. one of True or False. The argument 'x' is used "
"to\n"
"generate the resulting truth value."
msgstr ""

#: modes/api/shared.py:54
msgid ""
"bytearray(seq) \n"
"Return a new array of bytes specified by the sequence 'seq' of integers."
msgstr ""

#: modes/api/shared.py:55
msgid ""
"bytes(seq) \n"
"Return a new 'bytes' object - an immutable sequence of 'seq' integers."
msgstr ""

#: modes/api/shared.py:56
msgid ""
"callable(object) \n"
"Return True if the 'object' appears to be callable. Otherwise return False."
msgstr ""

#: modes/api/shared.py:57
msgid ""
"chr(i) \n"
"Return a string representing a character whose Unicode code point is the "
"integer 'i'."
msgstr ""

#: modes/api/shared.py:58
msgid ""
"classmethod(function) \n"
"Return a class method for a function. Usually used as a decorator:\n"
"\n"
"class C:\n"
"  @classmethod\n"
"  def func(cls): ..."
msgstr ""

#: modes/api/shared.py:59
msgid ""
"dict(): \n"
"Create a new dictionary object."
msgstr ""

#: modes/api/shared.py:60
msgid ""
"dir(object) \n"
"Return a list of names in the scope of 'object'. If no object is supplied,\n"
"returns a ist of names in the current local scope."
msgstr ""

#: modes/api/shared.py:61
msgid ""
"divmod(a, b) \n"
"Take two (non complex) numbers and return a pair of numbers consisting of "
"the quotient and remainder. For example, divmod(5, 4) results in (1, 1). "
"That is, what's is 5 divided by 4? It's 1 remainder 1."
msgstr ""

#: modes/api/shared.py:62
msgid ""
"enumerate(iterable, start=0) \n"
"Return an enumerate object from an iterable object.\n"
"Each iteration of the resulting object returns a tuple containing a count "
"and the value. For example:\n"
"\n"
"seasons = ['Spring', 'Summer', 'Autumn', 'Winter']\n"
"list(enumerate(seasons))\n"
"[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]"
msgstr ""

#: modes/api/shared.py:63
msgid ""
"eval(expression, globals=None, locals=None) \n"
"The 'expression' string containing a Python expression is parsed and "
"evaluated given\n"
"the context specified by 'globals' and 'locals' which must be dictionary "
"objects."
msgstr ""

#: modes/api/shared.py:64
msgid ""
"exec(object, globals, locals) \n"
"This function supports dynamic execution of Python code. The 'object' must "
"be\n"
"a string containing Python code that can be parsed and evaluated. If "
"`globals` and\n"
"`locals` are emitted the code is executed in the local scope. Otherwise, "
"both\n"
"'globals' and 'locals' must be dictionary objects."
msgstr ""

#: modes/api/shared.py:65
msgid ""
"filter(function, iterable) \n"
"Construct an iterator from those elements of 'iterable' for which 'function' "
"returns True."
msgstr ""

#: modes/api/shared.py:66
msgid ""
"float(x) \n"
"Return a floating point number constructed from a number or string 'x'."
msgstr ""

#: modes/api/shared.py:67
msgid ""
"frozenset(iterable) \n"
"Return a new frozenset object, optionally with elements taken from "
"'iterable'."
msgstr ""

#: modes/api/shared.py:68
msgid ""
"getattr(object, name, default) \n"
"Return the value fo the named attribute of 'object'. 'name' must be a "
"string.\n"
"Optionally return 'default' if 'name' is not an attribute of 'object'."
msgstr ""

#: modes/api/shared.py:69
msgid ""
"globals() \n"
"Return a dictionary representing the current global symbol table.\n"
"I.e. named objects that are currently in the global scope."
msgstr ""

#: modes/api/shared.py:70
msgid ""
"hasattr(object, name) \n"
"Returns True if the 'object' has an attribute called 'name'. 'name' must be "
"a string."
msgstr ""

#: modes/api/shared.py:71
msgid ""
"hash(object) \n"
"Return a hash value of the object (if it has one). Hash values are integers."
msgstr ""

#: modes/api/shared.py:72
msgid ""
"help(object) \n"
"Invoke the built-in help system (intended for interactive use in the REPL."
msgstr ""

#: modes/api/shared.py:73
msgid ""
"hex(x) \n"
"Convert an integer 'x' to a lowercase hexadevimal string prefixed with '0x'. "
"For example, hex(255) returns '0xff'."
msgstr ""

#: modes/api/shared.py:74
msgid ""
"id(object) \n"
"Return the identity of an object. This is an integer that is guaranteed to "
"be unique."
msgstr ""

#: modes/api/shared.py:75
msgid ""
"int(x, base=10) \n"
"Return an integer constructed from a number or string 'x'. The optional "
"'base' (indicating the base of the number) defaults to 10."
msgstr ""

#: modes/api/shared.py:76
msgid ""
"isinstance(object, classinfo) \n"
"Return True if the 'object' is an instance of 'classinfo'."
msgstr ""

#: modes/api/shared.py:77
msgid ""
"issubclass(class, classinfo) \n"
"Return True if the 'class' is a subclass (direct, indirect or virtual) of "
"'classinfo'."
msgstr ""

#: modes/api/shared.py:78
msgid ""
"iter(object) \n"
"Return an iterator object for the 'object' (that must support the iteration "
"protocol."
msgstr ""

#: modes/api/shared.py:79
msgid ""
"len(object) \n"
"Return the length (the number of items) in an 'object'."
msgstr ""

#: modes/api/shared.py:80
msgid ""
"list(iterable) \n"
"Return a list, optionally based upon the members of 'iterable'."
msgstr ""

#: modes/api/shared.py:81
msgid ""
"locals() \n"
"Return a dictionary representing the current local symbol table. I.e. named "
"objects\n"
"that are currently in the local scope."
msgstr ""

#: modes/api/shared.py:82
msgid ""
"map(function, iterable) \n"
"Return an iterator that applies 'function' to every item of 'iterable', "
"yielding the results."
msgstr ""

#: modes/api/shared.py:83
msgid ""
"max(items) \n"
"Return the largest item in 'items', which can be either an iterable or two "
"or more arguments."
msgstr ""

#: modes/api/shared.py:84
msgid ""
"min(items) \n"
"Return the smallest item in 'items', which can be either an iterable or two "
"or more arguments."
msgstr ""

#: modes/api/shared.py:85
msgid ""
"next(iterator) \n"
"Retrieve the next item from the iterator."
msgstr ""

#: modes/api/shared.py:86
msgid ""
"object() \n"
"Return a new featureless object."
msgstr ""

#: modes/api/shared.py:87
msgid ""
"oct(x) \n"
"Convert an integer number to an octal (base 8) string."
msgstr ""

#: modes/api/shared.py:88
msgid ""
"open(file, mode='rt') \n"
"Open 'file' and return a corresponding file object. The 'mode' is an "
"optional\n"
"string that specifies how the file is opened:\n"
"'r' - open for reading\n"
"'w' - open for writing\n"
"'b' - binary mode\n"
"'t' - text mode."
msgstr ""

#: modes/api/shared.py:89
msgid ""
"ord(c) \n"
"Given a string representing one Unicode character, return an integer "
"representing the Unicode code point of that character."
msgstr ""

#: modes/api/shared.py:90
msgid ""
"pow(x, y, z) \n"
"Return 'x' to the power of 'y'. If the optional 'z' is given, return 'x' to "
"the power of 'y' modulo 'z' (giving the remainder)."
msgstr ""

#: modes/api/shared.py:91
msgid ""
"print(*objects, sep=' ', end='\\n') \n"
"Print objects, separated by 'sep' and followed by 'end'.\n"
"All non-keyword arguments are converted to strings."
msgstr ""

#: modes/api/shared.py:92
msgid ""
"range(start, stop, step) \n"
"Return an immutable sequence containing items between 'start' and 'stop' "
"with 'step' difference between them."
msgstr ""

#: modes/api/shared.py:93
msgid ""
"repr(object) \n"
"Return a string containing a printable representation of an 'object'."
msgstr ""

#: modes/api/shared.py:94
msgid ""
"reversed(seq) \n"
"Return a reverse iterator of the sequence 'seq'."
msgstr ""

#: modes/api/shared.py:95
msgid ""
"round(number, ndigits) \n"
"Return the floating point 'number' rounded to the (optional) 'ndigits'.\n"
"If 'ndigits' is omitted, round to the nearest whole number."
msgstr ""

#: modes/api/shared.py:96
msgid ""
"set(iterable) \n"
"Return a new set object, optionally containing elements taken from iterable."
msgstr ""

#: modes/api/shared.py:97
msgid ""
"setattr(object, name, value) \n"
"Set the 'value' to the attribute called 'name' on object 'object'. 'name' "
"must be a string."
msgstr ""

#: modes/api/shared.py:98
msgid ""
"sorted(iterable, key, reverse) \n"
"Return a new sorted list from the items in iterable. The optional 'key' "
"specifies\n"
"a function used for comparison and the optional 'reverse' is a boolean "
"indicating the comparison should be reversed."
msgstr ""

#: modes/api/shared.py:99
msgid ""
"staticmethod(function) \n"
"Returns a static method for a function. Usually used as a decorator:\n"
"\n"
"class C:\n"
"  @staticmethod\n"
"def func(): ..."
msgstr ""

#: modes/api/shared.py:100
msgid ""
"str(object) \n"
"Return a string version of 'object'."
msgstr ""

#: modes/api/shared.py:101
msgid ""
"sum(iterable, start=0) \n"
"Sums 'start' and items of an iterable from left to right and returns the "
"total."
msgstr ""

#: modes/api/shared.py:102
msgid ""
"super(type, object-or-type) \n"
"Return a proxy object that delegates method calls to a parent or sibling "
"class\n"
"of 'type'. This is useful for accessing inherited methods that have been\n"
"overridden in a class."
msgstr ""

#: modes/api/shared.py:103
msgid ""
"tuple(iterable) \n"
"Return an immutable sequence based upon the items in 'iterable'."
msgstr ""

#: modes/api/shared.py:104
msgid ""
"type(object) \n"
"Return the type of an object (i.e. what sort of thing it is)."
msgstr ""

#: modes/api/shared.py:105
msgid ""
"zip(*iterables) \n"
"Make an iterator that aggregates elements from each of the passed in "
"iterables.\n"
"For example:\n"
"x = [1, 2, 3]\n"
"y = [4, 5, 6]\n"
"list(zip(x, y))\n"
"[(1, 4), (2, 5), (3, 6)]"
msgstr ""

#: modes/base.py:188
msgid "Data Flood Detected!"
msgstr "检测到数据泛滥！"

#: modes/base.py:189
msgid ""
"The plotter is flooded with data which will make Mu unresponsive and freeze. "
"As a safeguard, the plotter has been stopped.\n"
"\n"
"Flooding is when chunks of data of more than 1024 bytes are repeatedly sent "
"to the plotter.\n"
"\n"
"To fix this, make sure your code prints small tuples of data between calls "
"to 'sleep' for a very short period of time."
msgstr ""
"绘图器已经数据泛滥，这将使 Mu 无响应并卡死。作为一种保护措施，绘图器已经停"
"止。\n"
"\n"
"泛滥是指不停的发送超过 1024 字节的大量数据到绘图器。\n"
"\n"
"要解决此问题，请确保您的代码在打印小的元组(tuple)数据的间隔中，调用非常短时间"
"的“sleep”函数。"

#: modes/base.py:285 modes/base.py:324
msgid ""
"Click on the device's reset button, wait a few seconds and then try again."
msgstr "按一下设备的重置(reset)按钮，等待几秒钟，然后重试。"

#: modes/base.py:291 modes/base.py:330
msgid "Could not find an attached device."
msgstr "找不到已连接的设备。"

#: modes/base.py:292
msgid ""
"Please make sure the device is plugged into this computer.\n"
"\n"
"It must have a version of MicroPython (or CircuitPython) flashed onto it "
"before the REPL will work.\n"
"\n"
"Finally, press the device's reset button and wait a few seconds before "
"trying again."
msgstr ""
"请确保已将设备插入这台电脑。\n"
"\n"
"在 REPL 工作之前，设备必须有一个 MicroPython 或 CircuitPython 版本的固件已经"
"刷入。\n"
"\n"
"最后，按一下设备的重置(reset)按钮并等待几秒钟后再重试。"

#: modes/base.py:331
msgid ""
"Please make sure the device is plugged into this computer.\n"
"\n"
"It must have a version of MicroPython (or CircuitPython) flashed onto it "
"before the Plotter will work.\n"
"\n"
"Finally, press the device's reset button and wait a few seconds before "
"trying again."
msgstr ""
"请确保已将设备插入这台电脑。\n"
"\n"
"在绘图器工作之前，设备必须有一个 MicroPython 或 CircuitPython 版本的固件已经"
"刷入。\n"
"\n"
"最后，按一下设备的重置(reset)按钮并等待几秒钟后再重试。"

#: modes/debugger.py:35
msgid "Graphical Debugger"
msgstr "图形化调试器"

#: modes/debugger.py:36
msgid "Debug your Python 3 code."
msgstr "调试你的 Python 3 代码。"

#: modes/debugger.py:50 modes/pygamezero.py:108 modes/python3.py:170
msgid "Stop"
msgstr "停止"

#: modes/debugger.py:51
msgid "Stop the running code."
msgstr "停止运行代码。"

#: modes/debugger.py:57
msgid "Continue"
msgstr "继续"

#: modes/debugger.py:58
msgid "Continue to run your Python script."
msgstr "继续运行你的 Python 脚本。"

#: modes/debugger.py:64
msgid "Step Over"
msgstr "步进"

#: modes/debugger.py:65
msgid "Step over a line of code."
msgstr "步进一行代码。"

#: modes/debugger.py:71
msgid "Step In"
msgstr "步入"

#: modes/debugger.py:72
msgid "Step into a function."
msgstr "步入一个函数。"

#: modes/debugger.py:78
msgid "Step Out"
msgstr "步出"

#: modes/debugger.py:79
msgid "Step out of a function."
msgstr "步出一个函数。"

#: modes/debugger.py:153
msgid "Your script has finished running."
msgstr "您的脚本已完成运行。"

#: modes/debugger.py:221
msgid ""
"Unable to connect to the Python debugger.\n"
"\n"
msgstr ""
"无法连接到 Python 调试器。\n"
"\n"

#: modes/debugger.py:305
msgid "Debugger info: {}"
msgstr "调试器信息：{}"

#: modes/debugger.py:311
msgid "Debugger warning: {}"
msgstr "调试器警告：{}"

#: modes/debugger.py:318
msgid "Debugger error: {}"
msgstr "调试器错误：{}"

#: modes/esp.py:33
msgid "ESP MicroPython"
msgstr ""

#: modes/esp.py:34
msgid "Write MicroPython on ESP8266/ESP32 boards."
msgstr "在ESP8266/ESP32板子上运行MicroPython"

#: modes/esp.py:56 modes/python3.py:117 modes/python3.py:162
msgid "Run"
msgstr "运行"

#: modes/esp.py:57
msgid "Run your code directly on the ESP8266/ESP32 via the REPL."
msgstr "通过REPL直接在ESP8266/ESP32上运行程序"

#: modes/esp.py:64 modes/microbit.py:114
msgid "Files"
msgstr "文件"

#: modes/esp.py:65
#, fuzzy
#| msgid "Access the file system on the micro:bit."
msgid "Access the file system on ESP8266/ESP32."
msgstr "访问 micro:bit 上的文件系统。"

#: modes/esp.py:71 modes/microbit.py:121 modes/python3.py:131
msgid "REPL"
msgstr "REPL"

#: modes/esp.py:72
#, fuzzy
#| msgid "Use the REPL to live-code on the micro:bit."
msgid "Use the REPL to live-code on the ESP8266/ESP32."
msgstr "使用 REPL 在 micro:bit 上实时编写代码。"

#: modes/esp.py:106 modes/microbit.py:470
msgid "REPL and file system cannot work at the same time."
msgstr "REPL和文件系统不能同时工作。"

#: modes/esp.py:107 modes/microbit.py:471
msgid ""
"The REPL and file system both use the same USB serial connection. Only one "
"can be active at any time. Toggle the file system off and try again."
msgstr ""
"REPL和文件系统都使用相同的USB串口通讯。任何时候只能使用其中一个功能。请关闭文"
"件系统，然后重试。"

#: modes/esp.py:124 modes/microbit.py:488
msgid "The plotter and file system cannot work at the same time."
msgstr "绘图器和文件系统无法同时工作。"

#: modes/esp.py:126 modes/microbit.py:490
msgid ""
"The plotter and file system both use the same USB serial connection. Only "
"one can be active at any time. Toggle the file system off and try again."
msgstr ""
"绘图器和文件系统都使用相同的USB串口通讯。任何时候只能使用其中一个功能。请关闭"
"文件系统，然后重试。"

#: modes/esp.py:152
msgid "Cannot run anything without any active editor tabs."
msgstr ""

#: modes/esp.py:153
msgid ""
"Running transfers the content of the current tab onto the device. It seems "
"like you don't have  any tabs open."
msgstr ""

#: modes/esp.py:170 modes/microbit.py:502
msgid "File system cannot work at the same time as the REPL or plotter."
msgstr "文件系统无法与REPL或绘图器同时工作。"

#: modes/esp.py:172 modes/microbit.py:504
msgid ""
"The file system and the REPL and plotter use the same USB serial connection. "
"Toggle the REPL and plotter off and try again."
msgstr ""
"文件系统、REPL、绘图器使用相同的USB串口通讯。 请关闭REPL和绘图器，然后重试。"

#: modes/esp.py:197
#, fuzzy
#| msgid "Could not find an attached device."
msgid "Could not find an attached ESP8266/ESP32."
msgstr "找不到已连接的设备。"

#: modes/esp.py:198 modes/microbit.py:527
msgid ""
"Please make sure the device is plugged into this computer.\n"
"\n"
"The device must have MicroPython flashed onto it before the file system will "
"work.\n"
"\n"
"Finally, press the device's reset button and wait a few seconds before "
"trying again."
msgstr ""
"请确保已将设备插入此计算机。\n"
"\n"
"在文件系统工作之前，设备必须已输入MicroPython。\n"
"\n"
"最后，按设备的重置(reset)按钮并等待几秒钟后再重试。"

#: modes/esp.py:214
msgid "ESP board"
msgstr ""

#: modes/makeblock.py:241
msgid "Send file block time out!"
msgstr "数据传输超时"

#: modes/makeblock.py:248
msgid "Complete file transfer!"
msgstr "上传完成"

#: modes/makeblock.py:300
msgid "Makeblock MicroPython"
msgstr ""

#: modes/makeblock.py:301
msgid "Use MicroPython on Makeblock's HaloCode, Codey Rocky and more."
msgstr "用MicroPython给Makeblock的程小奔、光环板等编程"

#: modes/makeblock.py:324 modes/microbit.py:107
msgid "Flash"
msgstr "刷入"

#: modes/makeblock.py:325
#, fuzzy
#| msgid "Flash your code onto the micro:bit."
msgid "Flash your code onto the Makeblock devices."
msgstr "将代码刷入到 micro:bit 上。"

#: modes/makeblock.py:349
msgid "Could not find an attached Makeblock Device"
msgstr "找不到已连接的Makeblock设备"

#: modes/makeblock.py:350
msgid ""
"Please attach your Makeblock device (Codey Rocky or HaloCode) with USB Cable"
msgstr "请用USB线连接程小奔、光环板等Makeblock设备"

#: modes/microbit.py:83
msgid "BBC micro:bit"
msgstr "BBC micro:bit"

#: modes/microbit.py:84
msgid "Write MicroPython for the BBC micro:bit."
msgstr "为 BBC micro:bit 编写 MicroPython 。"

#: modes/microbit.py:108
msgid "Flash your code onto the micro:bit."
msgstr "将代码刷入到 micro:bit 上。"

#: modes/microbit.py:115
msgid "Access the file system on the micro:bit."
msgstr "访问 micro:bit 上的文件系统。"

#: modes/microbit.py:122
msgid "Use the REPL to live-code on the micro:bit."
msgstr "使用 REPL 在 micro:bit 上实时编写代码。"

#: modes/microbit.py:172
msgid "Unable to flash \"{}\""
msgstr "无法刷入“{}”"

#: modes/microbit.py:182
msgid "Problem with script"
msgstr "脚本问题"

#: modes/microbit.py:183
msgid "{} [{}:{}]"
msgstr "{} [{}:{}]"

#: modes/microbit.py:193
msgid "Our minifier tried but your script is too long!"
msgstr "我们的简化器尝试过了，但你的脚本实在太长！"

#: modes/microbit.py:198
msgid "Your script is too long and the minifier isn't available"
msgstr "您的脚本太长，简化器不可用"

#: modes/microbit.py:203
msgid "Your script is too long!"
msgstr "你的脚本太长了！"

#: modes/microbit.py:283
msgid "Flashing \"{}\" onto the micro:bit."
msgstr "正在将“{}”刷入到 micro:bit 。"

#: modes/microbit.py:285
msgid " Runtime: {}"
msgstr " 运行时：{}"

#: modes/microbit.py:331
msgid "Unsupported BBC micro:bit."
msgstr "不支持的 BBC micro:bit 。"

#: modes/microbit.py:332
msgid ""
"Your device is newer than this version of Mu. Please update Mu to the latest "
"version to support this device.\n"
"\n"
"https://codewith.mu/"
msgstr ""
"您的设备比此版本的 Mu 更新。 请将 Mu 更新到最新版本以支持此设备。\n"
"\n"
"https://codewith.mu/"

#: modes/microbit.py:389 modes/microbit.py:526
msgid "Could not find an attached BBC micro:bit."
msgstr "找不到已连接的 BBC micro:bit 。"

#: modes/microbit.py:390
msgid ""
"Please ensure you leave enough time for the BBC micro:bit to be attached and "
"configured correctly by your computer. This may take several seconds. "
"Alternatively, try removing and re-attaching the device or saving your work "
"and restarting Mu if the device remains unfound."
msgstr ""
"请确保您留出了足够的时间让您的计算机正确连接和配置 BBC micro:bit 设备。这可能"
"需要几秒钟的时间。 或者您可以尝试保存文件并重新连接设备，如果仍未发现设备，您"
"还可以尝试重新启动 Mu 。"

#: modes/microbit.py:404
msgid "Finished flashing."
msgstr "刷入完成。"

#: modes/microbit.py:439
msgid "Copied code onto micro:bit."
msgstr "已将代码复制到 micro:bit 。"

#: modes/microbit.py:448
msgid "There was a problem flashing the micro:bit."
msgstr "刷入程序到 micro:bit 时出现了一个问题。"

#: modes/microbit.py:449
msgid ""
"Please do not disconnect the device until flashing has completed. Please "
"check the logs for more information."
msgstr "在刷入完成之前，请不要断开设备。 请查看日志以获取更多信息。"

#: modes/microbit.py:543
#, fuzzy
#| msgid "BBC micro:bit"
msgid "micro:bit"
msgstr "BBC micro:bit"

#: modes/pygamezero.py:34
msgid "Pygame Zero"
msgstr "Pygame Zero"

#: modes/pygamezero.py:35
msgid "Make games with Pygame Zero."
msgstr "用 Pygame Zero 做游戏。"

#: modes/pygamezero.py:50 modes/pygamezero.py:100
msgid "Play"
msgstr "开始"

#: modes/pygamezero.py:51 modes/pygamezero.py:101
msgid "Play your Pygame Zero game."
msgstr "开始你的 Pygame Zero 游戏。"

#: modes/pygamezero.py:57
msgid "Images"
msgstr "图片"

#: modes/pygamezero.py:58
msgid "Show the images used by Pygame Zero."
msgstr "显示 Pygame Zero 使用的图片。"

#: modes/pygamezero.py:64
msgid "Fonts"
msgstr "字体"

#: modes/pygamezero.py:65
msgid "Show the fonts used by Pygame Zero."
msgstr "显示 Pygame Zero 使用的字体。"

#: modes/pygamezero.py:71
msgid "Sounds"
msgstr "音效"

#: modes/pygamezero.py:72
msgid "Show the sounds used by Pygame Zero."
msgstr "显示 Pygame Zero 使用的音效。"

#: modes/pygamezero.py:78
msgid "Music"
msgstr "音乐"

#: modes/pygamezero.py:79
msgid "Show the music used by Pygame Zero."
msgstr "显示 Pygame Zero 使用的音乐。"

#: modes/pygamezero.py:109
msgid "Stop your Pygame Zero game."
msgstr "停止你的 Pygame Zero 游戏。"

#: modes/python3.py:101
msgid "Python 3"
msgstr "Python 3"

#: modes/python3.py:102
msgid "Create code using standard Python 3."
msgstr "使用标准 Python 3 编写代码。"

#: modes/python3.py:118 modes/python3.py:163
msgid "Run your Python script."
msgstr "运行你的 Python 脚本。"

#: modes/python3.py:124
msgid "Debug"
msgstr "调试"

#: modes/python3.py:125
msgid "Debug your Python script."
msgstr "调试你的 Python 脚本。"

#: modes/python3.py:132
msgid "Use the REPL for live coding."
msgstr "用 REPL 进行实时编程。"

#: modes/python3.py:141
msgid "Plot data from your script or the REPL."
msgstr "从你的脚本或 REPL 的绘制数据。"

#: modes/python3.py:171
msgid "Stop your Python script."
msgstr "停止你的 Python 脚本。"

#: modes/python3.py:231
msgid "Starting iPython REPL."
msgstr "正在启动 iPython REPL 。"

#: modes/python3.py:235
msgid "Stopping iPython REPL (this may take a short amount of time)."
msgstr "正在停止 iPython REPL （可能需要一点点时间）。"

#: modes/python3.py:321
msgid "REPL started."
msgstr "REPL 已启动。"

#: modes/python3.py:330
msgid "REPL stopped."
msgstr "REPL 已停止。"

#~ msgid "Logging to {}"
#~ msgstr "记录日志到 {}"

#~ msgid "Debugger requires a Python script filename to run."
#~ msgstr "调试器需要一个Python脚本才能运行。"

#~ msgid "Files on your micro:bit:"
#~ msgstr "在 micro:bit 上的文件："
