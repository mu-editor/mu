# Mu-Chinese
# Contributee:
#    管宁川John <guan.ningchuan@gmail.com>
#    Tairraos <xiaole.tao@gmail.com>
msgid ""
msgstr ""
"Project-Id-Version: \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-31 14:53+0800\n"
"PO-Revision-Date: 2020-01-02 10:19+0800\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Last-Translator: Tairraos <xiaole.tao@gmail.com>\n"
"Language-Team: TronCool (https://github.com/TronCool)\n"
"X-Generator: Poedit 2.2.4\n"

#: mu/debugger/client.py:119
msgid ""
"Connection timed out. Is your machine slow or busy? Free up some of the "
"machine's resources and try again."
msgstr ""
"连接超时。是你的电脑运行太慢还是运行的东西太多？尝试清理内存或CPU占用再试一次"
"吧。"

#: mu/debugger/client.py:133
msgid ""
"Could not find localhost.\n"
"Ensure you have '127.0.0.1 localhost' in your /etc/hosts file."
msgstr ""
"找不到 localhost。\n"
"请确认你的 /etc/hosts 文件里有这一段：“127.0.0.1 localhost”。"

#: mu/interface/dialogs.py:70
msgid "Select Mode"
msgstr "选择模式"

#: mu/interface/dialogs.py:74
msgid ""
"Please select the desired mode then click \"OK\". Otherwise, click \"Cancel"
"\"."
msgstr "请选择所需模式，然后单击“确定”。否则，请单击“取消”。"

#: mu/interface/dialogs.py:95
msgid ""
"Change mode at any time by clicking the \"Mode\" button containing Mu's logo."
msgstr "通过点击有Mu图标的“模式”按钮来随时更改模式。"

#: mu/interface/dialogs.py:134
msgid ""
"When reporting a bug, copy and paste the content of the following log file."
msgstr "反馈 bug 时，复制并粘贴以下日志文件的内容。"

#: mu/interface/dialogs.py:158
msgid ""
"The environment variables shown below will be set each time you run a Python "
"3 script.\n"
"\n"
"Each separate enviroment variable should be on a new line and of the form:\n"
"NAME=VALUE"
msgstr ""
"每次运行 Python 3 脚本时都会设置下面的环境变量。\n"
"\n"
"每行一个单独的环境变量: \n"
"名称=值"

#: mu/interface/dialogs.py:183
msgid "Minify Python code before flashing?"
msgstr "在刷入之前缩小 Python 代码？"

#: mu/interface/dialogs.py:188
msgid ""
"Override the built-in MicroPython runtime with the following hex file (empty "
"means use the default):"
msgstr "使用下面的hex文件重写内置的 MicroPython 运行环境（留空使用默认文件）："

#: mu/interface/dialogs.py:239 mu/interface/main.py:1231
msgid "Mu Administration"
msgstr "Mu 管理"

#: mu/interface/dialogs.py:253
msgid "Current Log"
msgstr "当前日志"

#: mu/interface/dialogs.py:256
msgid "Python3 Environment"
msgstr "Python3 环境变量"

#: mu/interface/dialogs.py:262
msgid "BBC micro:bit Settings"
msgstr "BBC micro:bit 设置"

#: mu/interface/dialogs.py:295
msgid "Find / Replace"
msgstr "查找 / 替换"

#: mu/interface/dialogs.py:299
msgid "Find:"
msgstr "查找："

#: mu/interface/dialogs.py:306
msgid "Replace (optional):"
msgstr "替换（可选）:"

#: mu/interface/dialogs.py:312
msgid "Replace all?"
msgstr "全部替换？"

#: mu/interface/editor.py:297 mu/logic.py:1161
msgid "untitled"
msgstr "无标题"

#: mu/interface/main.py:100
msgid "Mode"
msgstr "模式"

#: mu/interface/main.py:101
msgid "Change Mu's mode of behaviour."
msgstr "改变Mu的运行模式。"

#: mu/interface/main.py:106
msgid "New"
msgstr "新建"

#: mu/interface/main.py:107
msgid "Create a new Python script."
msgstr "创建一个新的 Python 脚本。"

#: mu/interface/main.py:111
msgid "Load"
msgstr "加载"

#: mu/interface/main.py:112
msgid "Load a Python script."
msgstr "加载一个 Python 脚本。"

#: mu/interface/main.py:116
msgid "Save"
msgstr "保存"

#: mu/interface/main.py:117
msgid "Save the current Python script."
msgstr "保存当前 Python 脚本。"

#: mu/interface/main.py:131
msgid "Zoom-in"
msgstr "放大"

#: mu/interface/main.py:132
msgid "Zoom in (to make the text bigger)."
msgstr "放大编辑器文本。"

#: mu/interface/main.py:136
msgid "Zoom-out"
msgstr "缩小"

#: mu/interface/main.py:137
msgid "Zoom out (to make the text smaller)."
msgstr "缩小编辑器文本。"

#: mu/interface/main.py:141
msgid "Theme"
msgstr "主题"

#: mu/interface/main.py:143
msgid "Toggle theme between day, night or high contrast."
msgstr "切换日间、夜间或者高对比度的主题。"

#: mu/interface/main.py:149
msgid "Check"
msgstr "检查"

#: mu/interface/main.py:150
msgid "Check your code for mistakes."
msgstr "检查代码中的错误。"

#: mu/interface/main.py:160
msgid "Help"
msgstr "帮助"

#: mu/interface/main.py:161
msgid "Show help about Mu in a browser."
msgstr "在浏览器中显示关于Mu的帮助内容。"

#: mu/interface/main.py:165
msgid "Quit"
msgstr "退出"

#: mu/interface/main.py:165
msgid "Quit Mu."
msgstr "退出 Mu。"

#: mu/interface/main.py:305
msgid "Mu {}"
msgstr "Mu {}"

#: mu/interface/main.py:537
msgid "Cannot connect to device on port {}"
msgstr "无法在 {} 端口上连接设备"

#: mu/interface/main.py:618
msgid "Python3 data tuple"
msgstr "Python3 数据元组"

#: mu/interface/main.py:630
msgid "Python3 (Jupyter)"
msgstr "Python3（Jupyter）"

#: mu/interface/main.py:637
msgid "{} REPL"
msgstr "{} REPL"

#: mu/interface/main.py:655
msgid "{} Plotter"
msgstr "{} 绘图器"

#: mu/interface/main.py:706
msgid "Running: {}"
msgstr "运行脚本：{}"

#: mu/interface/main.py:738
msgid "Debug Inspector"
msgstr "调试检查器"

#: mu/interface/main.py:757
msgid "Name"
msgstr "名称"

#: mu/interface/main.py:757
msgid "Value"
msgstr "值"

#: mu/interface/main.py:778
msgid "(A list of {} items.)"
msgstr "（ {} 项的列表(list)。）"

#: mu/interface/main.py:796
msgid "(A dict of {} items.)"
msgstr "（ {} 项的字典(dict)。）"

#: mu/interface/main.py:963
msgid "Mu"
msgstr "Mu"

#: mu/interface/main.py:1224
msgid "Mu's current mode of behaviour."
msgstr "Mu 当前的运行模式。"

#: mu/interface/panes.py:377
msgid "File already exists; overwrite it?"
msgstr "文件已存在，是否覆盖？"

#: mu/interface/panes.py:378
msgid "File already exists"
msgstr "文件已存在"

#: mu/interface/panes.py:411
msgid "Copying '{}' to micro:bit."
msgstr "正在将“{}”复制到 micro:bit。"

#: mu/interface/panes.py:420
msgid "'{}' successfully copied to micro:bit."
msgstr "“{}”已成功的复制到了 micro:bit。"

#: mu/interface/panes.py:426
msgid "Delete (cannot be undone)"
msgstr "删除（无法撤销）"

#: mu/interface/panes.py:432
msgid "Deleting '{}' from micro:bit."
msgstr "正在从 micro:bit 中删除“{}”。"

#: mu/interface/panes.py:441
msgid "'{}' successfully deleted from micro:bit."
msgstr "已成功从 micro:bit 中删除“{}”。"

#: mu/interface/panes.py:476
msgid "Getting '{}' from micro:bit. Copying to '{}'."
msgstr "正在将“{}”复制到 micro:bit。"

#: mu/interface/panes.py:487
msgid "Successfully copied '{}' from the micro:bit to your computer."
msgstr "已成功从 micro:bit 中，复制“{}”到你的电脑上。"

#: mu/interface/panes.py:500
msgid "Open in Mu"
msgstr "在 Mu 中打开"

#: mu/interface/panes.py:502
msgid "Open"
msgstr "打开"

#: mu/interface/panes.py:508
msgid "Opening '{}'"
msgstr "正在打开“{}”"

#: mu/interface/panes.py:550
msgid "Files on your computer:"
msgstr "在电脑上的文件："

#: mu/logic.py:94
msgid "Hello, World!"
msgstr "你好，世界！"

#: mu/logic.py:96
msgid ""
"This editor is free software written in Python. You can modify it, add "
"features or fix bugs if you like."
msgstr ""
"这个编辑器是用 Python 编写的免费软件。 您可以根据需要修改，添加功能或修复错"
"误。"

#: mu/logic.py:99
msgid "This editor is called Mu (you say it 'mew' or 'moo')."
msgstr "这个编辑器名为 Mu，你可以读作“谬(miu)”或“沐(mu)”。"

#: mu/logic.py:100
msgid "Google, Facebook, NASA, Pixar, Disney and many more use Python."
msgstr "谷歌、Facebook、NASA、皮克斯、迪士尼等等都在使用Python。"

#: mu/logic.py:102
msgid ""
"Programming is a form of magic. Learn to cast the right spells with code and "
"you'll be a wizard."
msgstr "编程是一种魔法。 学习使用代码施放正确的法术，你将成为一名魔法师。"

#: mu/logic.py:106
msgid ""
"REPL stands for read, evaluate, print, loop. It's a fun way to talk to your "
"computer! :-)"
msgstr ""
"REPL 代表“读取(Read)-求值(Evaluate)-打印(Print)”的循环(Loop)。 这是与您的计算"
"机交谈的一个有趣方式！:-)"

#: mu/logic.py:109
msgid "Be brave, break things, learn and have fun!"
msgstr "要勇敢的打破一切，快乐的学习和玩耍！"

#: mu/logic.py:110
msgid "Make your software both useful AND fun. Empower your users."
msgstr "让你的软件既有用又有趣。 为你的用户赋能。"

#: mu/logic.py:111
msgid "For the Zen of Python: import this"
msgstr "了解 Python 之禅：import this"

#: mu/logic.py:112
msgid "Diversity promotes creativity."
msgstr "多样性促进创造力。"

#: mu/logic.py:113
msgid "An open mind, spirit of adventure and respect for diversity are key."
msgstr "开阔思路、冒险精神及尊重是多样性的关键。"

#: mu/logic.py:115
msgid ""
"Don't worry if it doesn't work. Learn the lesson, fix it and try again! :-)"
msgstr "如果它不起作用，别担心。 看看教程，修复它，然后再试一次！:-)"

#: mu/logic.py:118
msgid "Coding is collaboration."
msgstr "编程需要合作。"

#: mu/logic.py:119
msgid "Compliment and amplify the good things with code."
msgstr "使用代码来赞美和放大美好的东西。"

#: mu/logic.py:121
msgid ""
"In theory, theory and practice are the same. In practice, they're not. ;-)"
msgstr "理论上来说，理论和实践都是一样的。 在实践中，并不是。;-)"

#: mu/logic.py:124
msgid "Debugging is twice as hard as writing the code in the first place."
msgstr "在开始的时候，调试代码比写代码要难两倍。"

#: mu/logic.py:125
msgid "It's fun to program."
msgstr "编程是个有趣的事情。"

#: mu/logic.py:126
msgid "Programming has more to do with problem solving than writing code."
msgstr "编程更多地是为了解决问题，而不是单纯的写代码。"

#: mu/logic.py:127
msgid "Start with your users' needs."
msgstr "从你的用户需求出发。"

#: mu/logic.py:128
msgid "Try to see things from your users' point of view."
msgstr "尝试从用户的角度看问题。"

#: mu/logic.py:129
msgid "Put yourself in your users' shoes."
msgstr "让自己站在用户的位置上。"

#: mu/logic.py:131
msgid ""
"Explaining a programming problem to a friend often reveals the solution. :-)"
msgstr "与朋友讨论编程中遇到的问题，通常会获得新的解决方案。:-)"

#: mu/logic.py:134
msgid "If you don't know, ask. Nobody to ask? Just look it up."
msgstr "如果你不知道，就提问吧。找不到人问的话，就自己查查看吧。"

#: mu/logic.py:135
msgid "Complexity is the enemy. KISS - keep it simple, stupid!"
msgstr "复杂是敌人。 KISS - keep it simple, stupid!（保持简单和纯粹！）"

#: mu/logic.py:136
msgid "Beautiful is better than ugly."
msgstr "优美胜于丑陋。"

#: mu/logic.py:137
msgid "Explicit is better than implicit."
msgstr "显式胜于隐式。"

#: mu/logic.py:138
msgid "Simple is better than complex. Complex is better than complicated."
msgstr "简单胜于复杂。复杂胜于难懂。"

#: mu/logic.py:139
msgid "Flat is better than nested."
msgstr "扁平胜于嵌套。"

#: mu/logic.py:140
msgid "Sparse is better than dense."
msgstr "分散胜于密集。"

#: mu/logic.py:141
msgid "Readability counts."
msgstr "可读性应当被重视。"

#: mu/logic.py:143
msgid ""
"Special cases aren't special enough to break the rules. Although "
"practicality beats purity."
msgstr "尽管实用性会打败纯粹性，特例也不能凌驾于规则之上。"

#: mu/logic.py:146
msgid "Errors should never pass silently. Unless explicitly silenced."
msgstr "除非明确地使其沉默，错误永远不应该默默地溜走。"

#: mu/logic.py:147
msgid "In the face of ambiguity, refuse the temptation to guess."
msgstr "面对不明确的定义，拒绝猜测的诱惑。"

#: mu/logic.py:148
msgid "There should be one-- and preferably only one --obvious way to do it."
msgstr "只用一种方法，最好只有一种方法来做一件事。"

#: mu/logic.py:150
msgid ""
"Now is better than never. Although never is often better than *right* now."
msgstr "做比不做好，但立马去做有时还不如不做。"

#: mu/logic.py:153
msgid "If the implementation is hard to explain, it's a bad idea."
msgstr "如果写的代码很难清楚表述的话，那就是个糟糕想法。"

#: mu/logic.py:154
msgid "If the implementation is easy to explain, it may be a good idea."
msgstr "如果写的代码很容易清楚表述的话，那很有可能是个好想法。"

#: mu/logic.py:155
msgid "Namespaces are one honking great idea -- let's do more of those!"
msgstr "命名空间是个绝妙的想法，让我们多多地使用它们吧！"

#: mu/logic.py:156
msgid "Mu was created by Nicholas H.Tollervey."
msgstr "Mu 由 Nicholas H.Tollervey 创造。"

#: mu/logic.py:157
msgid "To understand what recursion is, you must first understand recursion."
msgstr "要理解递归是什么，你必须先了解递归。"

#: mu/logic.py:159
msgid ""
"Algorithm: a word used by programmers when they don't want to explain what "
"they did."
msgstr "算法：程序员在不想解释他们所做的事情时使用的一个词。"

#: mu/logic.py:162
msgid "Programmers count from zero."
msgstr "程序员们都从0开始计数。"

#: mu/logic.py:163
msgid "Simplicity is the ultimate sophistication."
msgstr "简单是终极的复杂。"

#: mu/logic.py:164
msgid "A good programmer is humble."
msgstr "一个优秀的程序员很谦虚。"

#: mu/logic.py:165
msgid "A good programmer is playful."
msgstr "一个优秀的程序员很有趣。"

#: mu/logic.py:166
msgid "A good programmer learns to learn."
msgstr "一个优秀的程序员会学习如何学习。"

#: mu/logic.py:167
msgid "A good programmer thinks beyond the obvious."
msgstr "一个优秀的程序员思考不止于表面的问题。"

#: mu/logic.py:168
msgid "A good programmer promotes simplicity."
msgstr "一个优秀的程序员崇尚简单。"

#: mu/logic.py:169
msgid "A good programmer avoids complexity."
msgstr "一个优秀的程序员会避免复杂。"

#: mu/logic.py:170
msgid "A good programmer is patient."
msgstr "一个优秀的程序员很有耐心。"

#: mu/logic.py:171
msgid "A good programmer asks questions."
msgstr "一个优秀的程序员善于提问。"

#: mu/logic.py:172
msgid "A good programmer is willing to say, 'I don't know'."
msgstr "一个优秀的程序员愿意说：“我不懂”。"

#: mu/logic.py:173
msgid "Wisest are they that know they know nothing."
msgstr "最聪明的是他们知道他们什么都不知道。"

#: mu/logic.py:539
msgid " above this line"
msgstr " 在这行之上"

#: mu/logic.py:585
msgid ""
"Syntax error. Python cannot understand this line. Check for missing "
"characters!"
msgstr "语法错误。 Python 无法理解这一行。 检查缺少的字符！"

#: mu/modes/base.py:103
msgid "# Write your code here :-)"
msgstr "# 在这里写上你的代码 :-)"

#: mu/logic.py:850
#, python-brace-format
msgid ""
"The file contains characters Mu expects to be encoded as {0} or as the "
"computer's default encoding {1}, but which are encoded in some other way.\n"
"\n"
"If this file was saved in another application, re-save the file via the "
"'Save as' option and set the encoding to {0}"
msgstr ""
"文件的编码有问题，该文件所包含字符应为 Mu 的默认编码{0}或计算机的默认编码"
"{1}。\n"
"\n"
"如果此文件是通过另外一个应用程序保存，请通过“另存为”选项重新保存文件，并将编"
"码设置为{0}"

#: mu/logic.py:877
msgid "The file \"{}\" is already open."
msgstr "文件“{}”已经打开。"

#: mu/logic.py:889
msgid "Mu cannot read the characters in {}"
msgstr "Mu 无法读取 {} 中的字符"

#: mu/logic.py:915
msgid "Mu was not able to open this file"
msgstr "Mu 无法打开此文件"

#: mu/logic.py:917
msgid ""
"Currently Mu only works with Python source files or hex files created with "
"embedded MicroPython code."
msgstr ""
"目前，Mu 仅适用于使用嵌入式 MicroPython 代码创建的 Python 源文件或 hex 文件。"

#: mu/logic.py:924
msgid "Could not load {}"
msgstr "无法加载 {}"

#: mu/logic.py:927
msgid ""
"Does this file exist?\n"
"If it does, do you have permission to read it?\n"
"\n"
"Please check and try again."
msgstr ""
"这个文件存在吗？\n"
"如果存在，你有读取权限吗？\n"
"\n"
"请检查并重试。"

#: mu/logic.py:934
msgid "Is this a {} file?"
msgstr "这是一个 {} 文件吗？"

#: mu/logic.py:936
msgid ""
"It looks like this could be a {} file.\n"
"\n"
"Would you like to change Mu to the {}mode?"
msgstr ""
"看起来这可能是一个{}文件。\n"
"\n"
"你想将 Mu 改为{}模式吗？"

#: mu/logic.py:1048
msgid "Could not save file (disk problem)"
msgstr "无法保存文件（磁盘问题）"

#: mu/logic.py:1050
msgid ""
"Error saving file to disk. Ensure you have permission to write the file and "
"sufficient disk space."
msgstr "将文件保存到磁盘时出错。 确保你有写入文件的权限和足够的磁盘空间。"

#: mu/logic.py:1055
msgid "Could not save file (encoding problem)"
msgstr "无法保存文件（编码问题）"

#: mu/logic.py:1058
msgid ""
"Unable to convert all the characters. If you have an encoding line at the "
"top of the file, remove it and try again."
msgstr "无法转换所有字符。 如果文件顶部有编码行，请将其删除并重试。"

#: mu/logic.py:1068
msgid "Saved file: {}"
msgstr "已保存文件：{}"

#: mu/logic.py:1097 mu/logic.py:1517
msgid "You cannot use the filename \"{}\""
msgstr "你不能使用文件名“{}”"

#: mu/logic.py:1101
msgid ""
"This name is already used by another part of Python. If you use this name, "
"things are likely to break. Please try again with a different filename."
msgstr ""
"这个名字已被 Python 的另一部分使用。如果你使用这个名字，可能会出问题。请使用"
"其他文件名重试。"

#: mu/logic.py:1177
msgid "Good job! No problems found."
msgstr "干得漂亮！ 没有发现问题。"

#: mu/logic.py:1178
msgid "Hurrah! Checker turned up no problems."
msgstr "诶嘿！检查结果显示，没有问题。"

#: mu/logic.py:1179
msgid "Nice one! Zero problems detected."
msgstr "棒！ 检测到0个问题。"

#: mu/logic.py:1180
msgid "Well done! No problems here."
msgstr "做得好！ 这里没问题。"

#: mu/logic.py:1181
msgid "Awesome! Zero problems found."
msgstr "真棒！没发现问题。"

#: mu/logic.py:1209
msgid ""
"There is un-saved work, exiting the application will cause you to lose it."
msgstr "你有还没有保存的代码，如果现在退出程序的话将不会保存。"

#: mu/logic.py:1286
msgid "Could not find MicroPython runtime."
msgstr "找不到 MicroPython 运行时。"

#: mu/logic.py:1288
msgid ""
"The micro:bit runtime you specified ('{}') does not exist. Please try again."
msgstr "您指定的 micro:bit 运行时（’{}’）不存在。请再试一次。"

#: mu/logic.py:1396
msgid "Changed to {} mode."
msgstr "已更改为 {} 模式。"

#: mu/logic.py:1444
msgid "Detected new {} device."
msgstr "检测到新的 {} 设备。"

#: mu/logic.py:1458
msgid "Would you like to change Mu to the {} mode?"
msgstr "你想将 Mu 改为 {} 模式吗？"

#: mu/logic.py:1496
msgid "Cannot Set Breakpoint."
msgstr "无法设置断点。"

#: mu/logic.py:1498
msgid ""
"Lines that are comments or some multi-line statements cannot have "
"breakpoints."
msgstr "作为单行或多行注释语句不能设置断点。"

#: mu/logic.py:1521
msgid ""
"This name is already used by another part of Python. If you use that name, "
"things are likely to break. Please try again with a different filename."
msgstr ""
"这个名字已被 Python 的另一部分使用。如果你使用这个名字，可能会出问题。请使用"
"其他文件名重试。"

#: mu/logic.py:1542
msgid "Could not rename file."
msgstr "无法重命名文件。"

#: mu/logic.py:1544
msgid "A file of that name is already open in Mu."
msgstr "该名称的文件已在 Mu 中打开。"

#: mu/logic.py:1575
msgid "Replaced \"{}\" with \"{}\"."
msgstr "已将“{}”替换为“{}”。"

#: mu/logic.py:1580
msgid "Replaced {} matches of \"{}\" with \"{}\"."
msgstr "已将{}个“{}”的匹配项替换为“{}”。"

#: mu/logic.py:1585 mu/logic.py:1592
msgid "Could not find \"{}\"."
msgstr "找不到 ”{}”。"

#: mu/logic.py:1590
msgid "Highlighting matches for \"{}\"."
msgstr "高亮显示“{}”的匹配项。"

#: mu/logic.py:1595
msgid "You must provide something to find."
msgstr "你需要提供需要查找的内容。"

#: mu/logic.py:1597
msgid "Please try again, this time with something in the find box."
msgstr "请在查找框中输入内容，然后重试。"

#: mu/modes/circuitpython.py:84
msgid "Serial"
msgstr "串口"

#: mu/modes/circuitpython.py:85
msgid "Open a serial connection to your device."
msgstr "打开与设备的串口连接。"

#: mu/modes/circuitpython.py:94 mu/modes/esp.py:87 mu/modes/microbit.py:135
#: mu/modes/python3.py:145
msgid "Plotter"
msgstr "绘图器"

#: mu/modes/circuitpython.py:95 mu/modes/esp.py:88 mu/modes/microbit.py:136
msgid "Plot incoming REPL data."
msgstr "绘制由 REPL 传入的数据。"

#: mu/modes/api/adafruit.py:24
msgid ""
"_stage.Layer(width, height, graphic, palette, grid) \n"
"Keep internal information about a layer of graphics (either a\n"
"Grid or a Sprite) in a format suitable for fast rendering\n"
"with the render() function.\n"
"\n"
"\n"
"Parameters:\n"
"width (int) -- The width of the grid in tiles, or 1 for sprites.\n"
"height (int) -- The height of the grid in tiles, or 1 for sprites.\n"
"graphic (bytearray) -- The graphic data of the tiles.\n"
"palette (bytearray) -- The color palette to be used.\n"
"grid (bytearray) -- The contents of the grid map."
msgstr ""

#: mu/modes/api/adafruit.py:26
msgid "_stage.Layer.frame(frame, rotation) \n"
msgstr ""

#: mu/modes/api/adafruit.py:27
msgid "_stage.Layer.move(x, y) \n"
msgstr ""

#: mu/modes/api/adafruit.py:29
msgid ""
"_stage.Text(width, height, font, palette, chars) \n"
"Keep internal information about a text of text\n"
"in a format suitable for fast rendering\n"
"with the render() function.\n"
"\n"
"\n"
"Parameters:\n"
"width (int) -- The width of the grid in tiles, or 1 for sprites.\n"
"height (int) -- The height of the grid in tiles, or 1 for sprites.\n"
"font (bytearray) -- The font data of the characters.\n"
"palette (bytearray) -- The color palette to be used.\n"
"chars (bytearray) -- The contents of the character grid."
msgstr ""

#: mu/modes/api/adafruit.py:31
msgid "_stage.Text.move(x, y) \n"
msgstr ""

#: mu/modes/api/adafruit.py:33
msgid ""
"_stage.render(x0, y0, x1, y1, layers, buffer, spi) \n"
"Render and send to the display a fragment of the screen.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"x0 (int) -- Left edge of the fragment.\n"
"y0 (int) -- Top edge of the fragment.\n"
"x1 (int) -- Right edge of the fragment.\n"
"y1 (int) -- Bottom edge of the fragment.\n"
"layers (list) -- A list of the Layer objects.\n"
"buffer (bytearray) -- A buffer to use for rendering.\n"
"spi (SPI) -- The SPI bus to use.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Note that this function only sends the raw pixel data. Setting up\n"
"the display for receiving it and handling the chip-select and\n"
"data-command pins has to be done outside of it.\n"
"There are also no sanity checks, outside of the basic overflow\n"
"checking. The caller is responsible for making the passed parameters\n"
"valid.\n"
"This function is intended for internal use in the stage library\n"
"and all the necessary checks are performed there.\n"
msgstr ""

#: mu/modes/api/adafruit.py:36 mu/modes/api/adafruit.py:39
msgid ""
"analogio.AnalogIn(pin) \n"
"Use the AnalogIn on the given pin. The reference voltage varies by\n"
"platform so use reference_voltage to read the configured setting.\n"
"\n"
"\n"
"Parameters:pin (Pin) -- the pin to read from"
msgstr ""
"analogio.AnalogIn(pin) \n"
"对指定针脚使用AnalogIn 读取数值. 需要参考平台电压变化，\n"
"所以请使用reference_voltage读取预设值。\n"
"\n"
"\n"
"Parameters:pin (Pin) — 需要读取的针脚"

#: mu/modes/api/adafruit.py:42 mu/modes/api/adafruit.py:45
msgid ""
"analogio.AnalogIn.deinit() \n"
"Turn off the AnalogIn and release the pin for other use.\n"
msgstr ""

#: mu/modes/api/adafruit.py:48
msgid ""
"analogio.AnalogIn.reference_voltage() \n"
"The maximum voltage measurable. Also known as the reference voltage.\n"
"\n"
"\n"
"\n"
"\n"
"Returns:the reference voltage\n"
"\n"
"Return type:float\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:51
msgid ""
"analogio.AnalogIn.reference_voltage() \n"
"The maximum voltage measurable (also known as the reference voltage) as a\n"
"float in Volts.\n"
msgstr ""

#: mu/modes/api/adafruit.py:54
msgid ""
"analogio.AnalogIn.value() \n"
"Read the value on the analog pin and return it.  The returned value\n"
"will be between 0 and 65535 inclusive (16-bit). Even if the underlying\n"
"analog to digital converter (ADC) is lower resolution, the result will\n"
"be scaled to be 16-bit.\n"
"\n"
"\n"
"\n"
"\n"
"Returns:the data read\n"
"\n"
"Return type:int\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:57
msgid ""
"analogio.AnalogIn.value() \n"
"The value on the analog pin between 0 and 65535 inclusive (16-bit). (read-"
"only)\n"
"Even if the underlying analog to digital converter (ADC) is lower\n"
"resolution, the value is 16-bit.\n"
msgstr ""

#: mu/modes/api/adafruit.py:60 mu/modes/api/adafruit.py:63
msgid ""
"analogio.AnalogOut(pin) \n"
"Use the AnalogOut on the given pin.\n"
"\n"
"\n"
"Parameters:pin (Pin) -- the pin to output to"
msgstr ""

#: mu/modes/api/adafruit.py:66 mu/modes/api/adafruit.py:69
msgid ""
"analogio.AnalogOut.deinit() \n"
"Turn off the AnalogOut and release the pin for other use.\n"
msgstr ""

#: mu/modes/api/adafruit.py:72
msgid ""
"analogio.AnalogOut.value() \n"
"The value on the analog pin.  The value must be between 0 and 65535\n"
"inclusive (16-bit). Even if the underlying digital to analog converter\n"
"is lower resolution, the input must be scaled to be 16-bit.\n"
"\n"
"\n"
"\n"
"\n"
"Returns:the last value written\n"
"\n"
"Return type:int\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:75
msgid ""
"analogio.AnalogOut.value() \n"
"The value on the analog pin between 0 and 65535 inclusive (16-bit). (write-"
"only)\n"
"Even if the underlying digital to analog converter (DAC) is lower\n"
"resolution, the value is 16-bit.\n"
msgstr ""

#: mu/modes/api/adafruit.py:78
msgid ""
"audiobusio.I2SOut(bit_clock, word_select, data, *, left_justified) \n"
"Create a I2SOut object associated with the given pins.\n"
"\n"
"\n"
"Parameters:\n"
"bit_clock (Pin) -- The bit clock (or serial clock) pin\n"
"word_select (Pin) -- The word select (or left/right clock) pin\n"
"data (Pin) -- The data pin\n"
"left_justified (bool) -- True when data bits are aligned with the word "
"select clock. False\n"
"when they are shifted by one to match classic I2S protocol."
msgstr ""

#: mu/modes/api/adafruit.py:81
msgid ""
"audiobusio.I2SOut.deinit() \n"
"Deinitialises the I2SOut and releases any hardware resources for reuse.\n"
msgstr ""

#: mu/modes/api/adafruit.py:84
msgid ""
"audiobusio.I2SOut.paused() \n"
"True when playback is paused. (read-only)\n"
msgstr ""

#: mu/modes/api/adafruit.py:87
msgid ""
"audiobusio.I2SOut.playing() \n"
"True when the audio sample is being output. (read-only)\n"
msgstr ""

#: mu/modes/api/adafruit.py:90
msgid ""
"audiobusio.PDMIn(clock_pin, data_pin, *, frequency=8000, bit_depth=8, "
"mono=True, oversample=64) \n"
"Create a PDMIn object associated with the given pins. This allows you to\n"
"record audio signals from the given pins. Individual ports may put further\n"
"restrictions on the recording parameters.\n"
"\n"
"\n"
"Parameters:\n"
"clock_pin (Pin) -- The pin to output the clock to\n"
"data_pin (Pin) -- The pin to read the data from\n"
"frequency (int) -- Target frequency of the resulting samples. Check "
"frequency for real value.\n"
"bit_depth (int) -- Final number of bits per sample. Must be divisible by 8\n"
"mono (bool) -- True when capturing a single channel of audio, captures two "
"channels otherwise\n"
"oversample (int) -- Number of single bit samples to decimate into a final "
"sample. Must be divisible by 8"
msgstr ""

#: mu/modes/api/adafruit.py:93
msgid ""
"audiobusio.PDMIn(clock_pin, data_pin, *, sample_rate=16000, bit_depth=8, "
"mono=True, oversample=64, startup_delay=0.11) \n"
"Create a PDMIn object associated with the given pins. This allows you to\n"
"record audio signals from the given pins. Individual ports may put further\n"
"restrictions on the recording parameters. The overall sample rate is\n"
"determined by sample_rate x oversample, and the total must be 1MHz or\n"
"higher, so sample_rate must be a minimum of 16000.\n"
"\n"
"\n"
"Parameters:\n"
"clock_pin (Pin) -- The pin to output the clock to\n"
"data_pin (Pin) -- The pin to read the data from\n"
"sample_rate (int) -- Target sample_rate of the resulting samples. Check "
"sample_rate for actual value.\n"
"Minimum sample_rate is about 16000 Hz.\n"
"bit_depth (int) -- Final number of bits per sample. Must be divisible by 8\n"
"mono (bool) -- True when capturing a single channel of audio, captures two "
"channels otherwise\n"
"oversample (int) -- Number of single bit samples to decimate into a final "
"sample. Must be divisible by 8\n"
"startup_delay (float) -- seconds to wait after starting microphone clock\n"
"to allow microphone to turn on. Most require only 0.01s; some require 0.1s. "
"Longer is safer.\n"
"Must be in range 0.0-1.0 seconds."
msgstr ""

#: mu/modes/api/adafruit.py:96
msgid ""
"audiobusio.PDMIn.deinit() \n"
"Deinitialises the PWMOut and releases any hardware resources for reuse.\n"
msgstr ""

#: mu/modes/api/adafruit.py:99
msgid ""
"audiobusio.PDMIn.deinit() \n"
"Deinitialises the PDMIn and releases any hardware resources for reuse.\n"
msgstr ""

#: mu/modes/api/adafruit.py:102
msgid ""
"audiobusio.PDMIn.frequency() \n"
"The actual frequency of the recording. This may not match the constructed\n"
"frequency due to internal clock limitations.\n"
msgstr ""

#: mu/modes/api/adafruit.py:105
msgid ""
"audiobusio.PDMIn.sample_rate() \n"
"The actual sample_rate of the recording. This may not match the constructed\n"
"sample rate due to internal clock limitations.\n"
msgstr ""

#: mu/modes/api/adafruit.py:108
msgid ""
"audioio.AudioOut(pin, sample_source) \n"
"Create a AudioOut object associated with the given pin. This allows you to\n"
"play audio signals out on the given pin. Sample_source must be a bytes-like "
"object.\n"
"\n"
"The sample itself should consist of 16 bit samples and be mono.\n"
"Microcontrollers with a lower output resolution will use the highest order\n"
"bits to output. For example, the SAMD21 has a 10 bit DAC that ignores the\n"
"lowest 6 bits when playing 16 bit samples.\n"
"\n"
"\n"
"Parameters:\n"
"pin (Pin) -- The pin to output to\n"
"sample_source (bytes-like) -- The source of the sample"
msgstr ""

#: mu/modes/api/adafruit.py:111
msgid ""
"audioio.AudioOut(left_channel, right_channel=None) \n"
"Create a AudioOut object associated with the given pin(s). This allows you "
"to\n"
"play audio signals out on the given pin(s).\n"
"\n"
"\n"
"Parameters:\n"
"left_channel (Pin) -- The pin to output the left channel to\n"
"right_channel (Pin) -- The pin to output the right channel to"
msgstr ""

#: mu/modes/api/adafruit.py:114
msgid ""
"audioio.AudioOut.deinit() \n"
"Deinitialises the PWMOut and releases any hardware resources for reuse.\n"
msgstr ""

#: mu/modes/api/adafruit.py:117
msgid ""
"audioio.AudioOut.deinit() \n"
"Deinitialises the AudioOut and releases any hardware resources for reuse.\n"
msgstr ""

#: mu/modes/api/adafruit.py:120
msgid ""
"audioio.AudioOut.frequency() \n"
"32 bit value that dictates how quickly samples are loaded into the DAC\n"
"in Hertz (cycles per second). When the sample is looped, this can change\n"
"the pitch output without changing the underlying sample.\n"
msgstr ""

#: mu/modes/api/adafruit.py:123
msgid ""
"audioio.AudioOut.paused() \n"
"True when playback is paused. (read-only)\n"
msgstr ""

#: mu/modes/api/adafruit.py:126
msgid ""
"audioio.AudioOut.playing() \n"
"True when the audio sample is being output.\n"
msgstr ""

#: mu/modes/api/adafruit.py:129
msgid ""
"audioio.AudioOut.playing() \n"
"True when an audio sample is being output even if paused. (read-only)\n"
msgstr ""

#: mu/modes/api/adafruit.py:132
msgid ""
"audioio.RawSample(buffer, *, channel_count=1, sample_rate=8000) \n"
"Create a RawSample based on the given buffer of signed values. If "
"channel_count is more than\n"
"1 then each channel’s samples should alternate. In other words, for a two "
"channel buffer, the\n"
"first sample will be for channel 1, the second sample will be for channel "
"two, the third for\n"
"channel 1 and so on.\n"
"\n"
"\n"
"Parameters:\n"
"buffer (array) -- An array.array with samples\n"
"channel_count (int) -- The number of channels in the buffer\n"
"sample_rate (int) -- The desired playback sample rate"
msgstr ""

#: mu/modes/api/adafruit.py:135
msgid ""
"audioio.RawSample.deinit() \n"
"Deinitialises the AudioOut and releases any hardware resources for reuse.\n"
msgstr ""

#: mu/modes/api/adafruit.py:138
msgid ""
"audioio.RawSample.sample_rate() \n"
"32 bit value that dictates how quickly samples are played in Hertz (cycles "
"per second).\n"
"When the sample is looped, this can change the pitch output without changing "
"the underlying\n"
"sample. This will not change the sample rate of any active playback. Call "
"play again to\n"
"change it.\n"
msgstr ""

#: mu/modes/api/adafruit.py:141
msgid ""
"audioio.WaveFile(filename) \n"
"Load a .wav file for playback with audioio.AudioOut or audiobusio.I2SOut.\n"
"\n"
"\n"
"Parameters:file (bytes-like) -- Already opened wave file"
msgstr ""

#: mu/modes/api/adafruit.py:144
msgid ""
"audioio.WaveFile.deinit() \n"
"Deinitialises the WaveFile and releases all memory resources for reuse.\n"
msgstr ""

#: mu/modes/api/adafruit.py:147
msgid ""
"audioio.WaveFile.sample_rate() \n"
"32 bit value that dictates how quickly samples are loaded into the DAC\n"
"in Hertz (cycles per second). When the sample is looped, this can change\n"
"the pitch output without changing the underlying sample.\n"
msgstr ""

#: mu/modes/api/adafruit.py:150
msgid ""
"bitbangio.I2C(scl, sda, *, frequency=400000) \n"
"I2C is a two-wire protocol for communicating between devices.  At the\n"
"physical level it consists of 2 wires: SCL and SDA, the clock and data\n"
"lines respectively.\n"
"\n"
"\n"
"Parameters:\n"
"scl (Pin) -- The clock pin\n"
"sda (Pin) -- The data pin\n"
"frequency (int) -- The clock frequency of the bus"
msgstr ""

#: mu/modes/api/adafruit.py:153
msgid ""
"bitbangio.I2C(scl, sda, *, frequency=400000) \n"
"I2C is a two-wire protocol for communicating between devices.  At the\n"
"physical level it consists of 2 wires: SCL and SDA, the clock and data\n"
"lines respectively.\n"
"\n"
"\n"
"Parameters:\n"
"scl (Pin) -- The clock pin\n"
"sda (Pin) -- The data pin\n"
"frequency (int) -- The clock frequency of the bus\n"
"timeout (int) -- The maximum clock stretching timeout in microseconds"
msgstr ""

#: mu/modes/api/adafruit.py:156 mu/modes/api/adafruit.py:159
msgid ""
"bitbangio.I2C.deinit() \n"
"Releases control of the underlying hardware so other classes can use it.\n"
msgstr ""

#: mu/modes/api/adafruit.py:162 mu/modes/api/adafruit.py:165
msgid ""
"bitbangio.OneWire(pin) \n"
"Create a OneWire object associated with the given pin. The object\n"
"implements the lowest level timing-sensitive bits of the protocol.\n"
"\n"
"\n"
"Parameters:pin (Pin) -- Pin to read pulses from."
msgstr ""

#: mu/modes/api/adafruit.py:168 mu/modes/api/adafruit.py:171
msgid ""
"bitbangio.OneWire.deinit() \n"
"Deinitialize the OneWire bus and release any hardware resources for reuse.\n"
msgstr ""

#: mu/modes/api/adafruit.py:174 mu/modes/api/adafruit.py:177
msgid ""
"bitbangio.SPI(clock, MOSI=None, MISO=None) \n"
"\n"
"Parameters:\n"
"clock (Pin) -- the pin to use for the clock.\n"
"MOSI (Pin) -- the Master Out Slave In pin.\n"
"MISO (Pin) -- the Master In Slave Out pin."
msgstr ""

#: mu/modes/api/adafruit.py:179 mu/modes/api/adafruit.py:180
msgid ""
"bitbangio.SPI.deinit() \n"
"Turn off the SPI bus.\n"
msgstr ""

#: mu/modes/api/adafruit.py:182
msgid ""
"busio.I2C(scl, sda, *, frequency=400000) \n"
"I2C is a two-wire protocol for communicating between devices.  At the\n"
"physical level it consists of 2 wires: SCL and SDA, the clock and data\n"
"lines respectively.\n"
"\n"
"\n"
"Parameters:\n"
"scl (Pin) -- The clock pin\n"
"sda (Pin) -- The data pin\n"
"frequency (int) -- The clock frequency in Hertz"
msgstr ""

#: mu/modes/api/adafruit.py:185
msgid ""
"busio.I2C(scl, sda, *, frequency=400000) \n"
"I2C is a two-wire protocol for communicating between devices.  At the\n"
"physical level it consists of 2 wires: SCL and SDA, the clock and data\n"
"lines respectively.\n"
"\n"
"\n"
"Parameters:\n"
"scl (Pin) -- The clock pin\n"
"sda (Pin) -- The data pin\n"
"frequency (int) -- The clock frequency in Hertz\n"
"timeout (int) -- The maximum clock stretching timeut - only for bitbang"
msgstr ""

#: mu/modes/api/adafruit.py:188 mu/modes/api/adafruit.py:191
msgid ""
"busio.I2C.deinit() \n"
"Releases control of the underlying hardware so other classes can use it.\n"
msgstr ""

#: mu/modes/api/adafruit.py:194 mu/modes/api/adafruit.py:197
msgid ""
"busio.OneWire(pin) \n"
"Create a OneWire object associated with the given pin. The object\n"
"implements the lowest level timing-sensitive bits of the protocol.\n"
"\n"
"\n"
"Parameters:pin (Pin) -- Pin connected to the OneWire bus"
msgstr ""

#: mu/modes/api/adafruit.py:200 mu/modes/api/adafruit.py:203
msgid ""
"busio.OneWire.deinit() \n"
"Deinitialize the OneWire bus and release any hardware resources for reuse.\n"
msgstr ""

#: mu/modes/api/adafruit.py:206 mu/modes/api/adafruit.py:209
msgid ""
"busio.SPI(clock, MOSI=None, MISO=None) \n"
"\n"
"Parameters:\n"
"clock (Pin) -- the pin to use for the clock.\n"
"MOSI (Pin) -- the Master Out Slave In pin.\n"
"MISO (Pin) -- the Master In Slave Out pin."
msgstr ""

#: mu/modes/api/adafruit.py:211 mu/modes/api/adafruit.py:212
msgid ""
"busio.SPI.deinit() \n"
"Turn off the SPI bus.\n"
msgstr ""

#: mu/modes/api/adafruit.py:214
msgid ""
"busio.SPI.frequency() \n"
"The actual SPI bus frequency. This may not match the frequency requested\n"
"due to internal limitations.\n"
msgstr ""

#: mu/modes/api/adafruit.py:217
msgid ""
"busio.UART(tx, rx, *, baudrate=9600, bits=8, parity=None, stop=1, "
"timeout=1000, receiver_buffer_size=64) \n"
"A common bidirectional serial protocol that uses an an agreed upon speed\n"
"rather than a shared clock line.\n"
"\n"
"\n"
"Parameters:\n"
"tx (Pin) -- the pin to transmit with\n"
"rx (Pin) -- the pin to receive on\n"
"baudrate (int) -- the transmit and receive speed"
msgstr ""

#: mu/modes/api/adafruit.py:220
msgid ""
"busio.UART(tx, rx, *, baudrate=9600, bits=8, parity=None, stop=1, "
"timeout=1000, receiver_buffer_size=64) \n"
"A common bidirectional serial protocol that uses an an agreed upon speed\n"
"rather than a shared clock line.\n"
"\n"
"\n"
"Parameters:\n"
"tx (Pin) -- the pin to transmit with, or None if this UART is receive-only.\n"
"rx (Pin) -- the pin to receive on, or None if this UART is transmit-only.\n"
"baudrate (int) -- the transmit and receive speed."
msgstr ""

#: mu/modes/api/adafruit.py:223 mu/modes/api/adafruit.py:226
msgid ""
"busio.UART.Parity() \n"
"Enum-like class to define the parity used to verify correct data transfer.\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:228 mu/modes/api/adafruit.py:229
msgid ""
"busio.UART.Parity.EVEN() \n"
"Total number of ones should be even.\n"
msgstr ""

#: mu/modes/api/adafruit.py:230 mu/modes/api/adafruit.py:231
msgid ""
"busio.UART.Parity.ODD() \n"
"Total number of ones should be odd.\n"
msgstr ""

#: mu/modes/api/adafruit.py:232
msgid ""
"busio.UART.baudrate() \n"
"The current baudrate.\n"
msgstr ""

#: mu/modes/api/adafruit.py:234 mu/modes/api/adafruit.py:237
msgid ""
"busio.UART.deinit() \n"
"Deinitialises the UART and releases any hardware resources for reuse.\n"
msgstr ""

#: mu/modes/api/adafruit.py:240 mu/modes/api/adafruit.py:243
msgid ""
"digitalio.DigitalInOut(pin) \n"
"Create a new DigitalInOut object associated with the pin. Defaults to input\n"
"with no pull. Use switch_to_input() and\n"
"switch_to_output() to change the direction.\n"
"\n"
"\n"
"Parameters:pin (Pin) -- The pin to control"
msgstr ""

#: mu/modes/api/adafruit.py:246 mu/modes/api/adafruit.py:249
msgid ""
"digitalio.DigitalInOut.Direction() \n"
"Enum-like class to define which direction the digital values are\n"
"going.\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:251 mu/modes/api/adafruit.py:252
msgid ""
"digitalio.DigitalInOut.Direction.INPUT() \n"
"Read digital data in\n"
msgstr ""

#: mu/modes/api/adafruit.py:253 mu/modes/api/adafruit.py:254
msgid ""
"digitalio.DigitalInOut.Direction.OUTPUT() \n"
"Write digital data out\n"
msgstr ""

#: mu/modes/api/adafruit.py:256 mu/modes/api/adafruit.py:259
msgid ""
"digitalio.DigitalInOut.deinit() \n"
"Turn off the DigitalInOut and release the pin for other use.\n"
msgstr ""

#: mu/modes/api/adafruit.py:262 mu/modes/api/adafruit.py:265
msgid ""
"digitalio.DigitalInOut.direction() \n"
"The direction of the pin.\n"
"Setting this will use the defaults from the corresponding\n"
"switch_to_input() or switch_to_output() method. If\n"
"you want to set pull, value or drive mode prior to switching, then use\n"
"those methods instead.\n"
msgstr ""

#: mu/modes/api/adafruit.py:268
msgid ""
"digitalio.DigitalInOut.drive_mode() \n"
"Get or set the pin drive mode.\n"
msgstr ""

#: mu/modes/api/adafruit.py:271
msgid ""
"digitalio.DigitalInOut.drive_mode() \n"
"The pin drive mode. One of:\n"
"\n"
"digitalio.DriveMode.PUSH_PULL\n"
"digitalio.DriveMode.OPEN_DRAIN\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:274
msgid ""
"digitalio.DigitalInOut.pull() \n"
"Get or set the pin pull. Values may be digitalio.Pull.UP,\n"
"digitalio.Pull.DOWN or None.\n"
"\n"
"\n"
"\n"
"\n"
"Raises:AttributeError -- if the direction is ~`digitalio.Direction.OUTPUT`.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:277
msgid ""
"digitalio.DigitalInOut.pull() \n"
"The pin pull direction. One of:\n"
"\n"
"digitalio.Pull.UP\n"
"digitalio.Pull.DOWN\n"
"None\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Raises:AttributeError -- if direction is OUTPUT.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:280 mu/modes/api/adafruit.py:283
msgid ""
"digitalio.DigitalInOut.value() \n"
"The digital logic level of the pin.\n"
msgstr ""

#: mu/modes/api/adafruit.py:286 mu/modes/api/adafruit.py:289
msgid ""
"digitalio.DriveMode() \n"
"Enum-like class to define the drive mode used when outputting\n"
"digital values.\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:292 mu/modes/api/adafruit.py:295
msgid ""
"digitalio.DriveMode.OPEN_DRAIN() \n"
"Output low digital values but go into high z for digital high. This is\n"
"useful for i2c and other protocols that share a digital line.\n"
msgstr ""

#: mu/modes/api/adafruit.py:298 mu/modes/api/adafruit.py:301
msgid ""
"digitalio.DriveMode.PUSH_PULL() \n"
"Output both high and low digital values\n"
msgstr ""

#: mu/modes/api/adafruit.py:304 mu/modes/api/adafruit.py:307
msgid ""
"digitalio.Pull() \n"
"Enum-like class to define the pull value, if any, used while reading\n"
"digital values in.\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:310 mu/modes/api/adafruit.py:313
msgid ""
"digitalio.Pull.DOWN() \n"
"When the input line isn’t being driven the pull down can pull the\n"
"state of the line low so it reads as false.\n"
msgstr ""

#: mu/modes/api/adafruit.py:316 mu/modes/api/adafruit.py:319
msgid ""
"digitalio.Pull.UP() \n"
"When the input line isn’t being driven the pull up can pull the state\n"
"of the line high so it reads as true.\n"
msgstr ""

#: mu/modes/api/adafruit.py:322
msgid ""
"gamepad.GamePad(b1, b2, b3, b4, b5, b6, b7, b8) \n"
"Initializes button scanning routines.\n"
"\n"
"The b1-b8 parameters are DigitalInOut objects, which\n"
"immediately get switched to input with a pull-up, and then scanned\n"
"regularly for button presses. The order is the same as the order of\n"
"bits returned by the get_pressed function. You can re-initialize\n"
"it with different keys, then the new object will replace the previous\n"
"one.\n"
"\n"
"The basic feature required here is the ability to poll the keys at\n"
"regular intervals (so that de-bouncing is consistent) and fast enough\n"
"(so that we don’t miss short button presses) while at the same time\n"
"letting the user code run normally, call blocking functions and wait\n"
"on delays.\n"
"\n"
"They button presses are accumulated, until the get_pressed method\n"
"is called, at which point the button state is cleared, and the new\n"
"button presses start to be recorded.\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:324
msgid ""
"gamepad.GamePad.deinit() \n"
"Disable button scanning.\n"
msgstr ""

#: mu/modes/api/adafruit.py:326
msgid ""
"gamepad.GamePad.get_pressed() \n"
"Get the status of buttons pressed since the last call and clear it.\n"
"Returns an 8-bit number, with bits that correspond to buttons,\n"
"which have been pressed (or held down) since the last call to this\n"
"function set to 1, and the remaining bits set to 0. Then it clears\n"
"the button state, so that new button presses (or buttons that are\n"
"held down) can be recorded for the next call.\n"
msgstr ""

#: mu/modes/api/adafruit.py:328
msgid ""
"math.acos(x) \n"
"Return the inverse cosine of x.\n"
msgstr ""

#: mu/modes/api/adafruit.py:329
msgid ""
"math.asin(x) \n"
"Return the inverse sine of x.\n"
msgstr ""

#: mu/modes/api/adafruit.py:330
msgid ""
"math.atan(x) \n"
"Return the inverse tangent of x.\n"
msgstr ""

#: mu/modes/api/adafruit.py:332
msgid ""
"math.atan2(y, x) \n"
"Return the principal value of the inverse tangent of y/x.\n"
msgstr ""

#: mu/modes/api/adafruit.py:335
msgid ""
"math.ceil(x) \n"
"Return an integer, being x rounded towards positive infinity.\n"
msgstr ""

#: mu/modes/api/adafruit.py:337
msgid ""
"math.copysign(x, y) \n"
"Return x with the sign of y.\n"
msgstr ""

#: mu/modes/api/adafruit.py:338
msgid ""
"math.cos(x) \n"
"Return the cosine of x.\n"
msgstr ""

#: mu/modes/api/adafruit.py:339
msgid ""
"math.degrees(x) \n"
"Return radians x converted to degrees.\n"
msgstr ""

#: mu/modes/api/adafruit.py:340
msgid ""
"math.exp(x) \n"
"Return the exponential of x.\n"
msgstr ""

#: mu/modes/api/adafruit.py:341
msgid ""
"math.fabs(x) \n"
"Return the absolute value of x.\n"
msgstr ""

#: mu/modes/api/adafruit.py:343
msgid ""
"math.floor(x) \n"
"Return an integer, being x rounded towards negative infinity.\n"
msgstr ""

#: mu/modes/api/adafruit.py:345
msgid ""
"math.fmod(x, y) \n"
"Return the remainder of x/y.\n"
msgstr ""

#: mu/modes/api/adafruit.py:347
msgid ""
"math.frexp(x) \n"
"Decomposes a floating-point number into its mantissa and exponent.\n"
"The returned value is the tuple (m, e) such that x == m * 2**e\n"
"exactly.  If x == 0 then the function returns (0.0, 0), otherwise\n"
"the relation 0.5 <= abs(m) < 1 holds.\n"
msgstr ""

#: mu/modes/api/adafruit.py:349
msgid ""
"math.isfinite(x) \n"
"Return True if x is finite.\n"
msgstr ""

#: mu/modes/api/adafruit.py:350
msgid ""
"math.isinf(x) \n"
"Return True if x is infinite.\n"
msgstr ""

#: mu/modes/api/adafruit.py:351
msgid ""
"math.isnan(x) \n"
"Return True if x is not-a-number\n"
msgstr ""

#: mu/modes/api/adafruit.py:352
msgid ""
"math.ldexp(x, exp) \n"
"Return x * (2**exp).\n"
msgstr ""

#: mu/modes/api/adafruit.py:354
msgid ""
"math.modf(x) \n"
"Return a tuple of two floats, being the fractional and integral parts of\n"
"x.  Both return values have the same sign as x.\n"
msgstr ""

#: mu/modes/api/adafruit.py:356
msgid ""
"math.pow(x, y) \n"
"Returns x to the power of y.\n"
msgstr ""

#: mu/modes/api/adafruit.py:357
msgid ""
"math.radians(x) \n"
"Return degrees x converted to radians.\n"
msgstr ""

#: mu/modes/api/adafruit.py:358
msgid ""
"math.sin(x) \n"
"Return the sine of x.\n"
msgstr ""

#: mu/modes/api/adafruit.py:359
msgid ""
"math.sqrt(x) \n"
"Returns the square root of x.\n"
msgstr ""

#: mu/modes/api/adafruit.py:360
msgid ""
"math.tan(x) \n"
"Return the tangent of x.\n"
msgstr ""

#: mu/modes/api/adafruit.py:361
msgid ""
"math.trunc(x) \n"
"Return an integer, being x rounded towards 0.\n"
msgstr ""

#: mu/modes/api/adafruit.py:363 mu/modes/api/adafruit.py:366
msgid ""
"microcontroller.Pin() \n"
"Identifies an IO pin on the microcontroller. They are fixed by the\n"
"hardware so they cannot be constructed on demand. Instead, use\n"
"board or microcontroller.pin to reference the desired pin.\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:368
msgid "microcontroller.Processor() \n"
msgstr ""

#: mu/modes/api/adafruit.py:370
msgid ""
"microcontroller.Processor() \n"
"You cannot create an instance of microcontroller.Processor.\n"
"Use microcontroller.cpu to access the sole instance available.\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:373
msgid ""
"microcontroller.Processor.frequency() \n"
"The CPU operating frequency as an int, in Hertz. (read-only)\n"
msgstr ""

#: mu/modes/api/adafruit.py:376
msgid ""
"microcontroller.Processor.temperature() \n"
"The on-chip temperature, in Celsius, as a float. (read-only)\n"
"Is None if the temperature is not available.\n"
msgstr ""

#: mu/modes/api/adafruit.py:379
msgid ""
"microcontroller.Processor.uid() \n"
"The unique id (aka serial number) of the chip as a bytearray. (read-only)\n"
msgstr ""

#: mu/modes/api/adafruit.py:382
msgid ""
"microcontroller.RunMode() \n"
"Enum-like class to define the run mode of the microcontroller and\n"
"CircuitPython.\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:384
msgid ""
"microcontroller.RunMode.BOOTLOADER() \n"
"Run the bootloader.\n"
msgstr ""

#: mu/modes/api/adafruit.py:385
msgid ""
"microcontroller.RunMode.NORMAL() \n"
"Run CircuitPython as normal.\n"
msgstr ""

#: mu/modes/api/adafruit.py:387
msgid ""
"microcontroller.RunMode.SAFE_MODE() \n"
"Run CircuitPython in safe mode. User code will not be run and the\n"
"file system will be writeable over USB.\n"
msgstr ""

#: mu/modes/api/adafruit.py:390 mu/modes/api/adafruit.py:393
msgid ""
"multiterminal.clear_secondary_terminal() \n"
"Clears the secondary terminal.\n"
msgstr ""

#: mu/modes/api/adafruit.py:396 mu/modes/api/adafruit.py:399
msgid ""
"multiterminal.get_secondary_terminal() \n"
"Returns the current secondary terminal.\n"
msgstr ""

#: mu/modes/api/adafruit.py:402 mu/modes/api/adafruit.py:405
msgid ""
"multiterminal.schedule_secondary_terminal_read(socket) \n"
"In cases where the underlying OS is doing task scheduling, this notifies\n"
"the OS when more data is available on the socket to read. This is useful\n"
"as a callback for lwip sockets.\n"
msgstr ""

#: mu/modes/api/adafruit.py:408 mu/modes/api/adafruit.py:411
msgid ""
"multiterminal.set_secondary_terminal(stream) \n"
"Read additional input from the given stream and write out back to it.\n"
"This doesn’t replace the core stream (usually UART or native USB) but is\n"
"mixed in instead.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:stream (stream) -- secondary stream\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:414 mu/modes/api/adafruit.py:417
msgid ""
"nvm.ByteArray() \n"
"Not currently dynamically supported. Access the sole instance through "
"microcontroller.nvm.\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:419 mu/modes/api/adafruit.py:420
msgid ""
"os.chdir(path) \n"
"Change current directory.\n"
msgstr ""

#: mu/modes/api/adafruit.py:421 mu/modes/api/adafruit.py:422
msgid ""
"os.getcwd() \n"
"Get the current directory.\n"
msgstr ""

#: mu/modes/api/adafruit.py:424 mu/modes/api/adafruit.py:427
msgid ""
"os.listdir(dir) \n"
"With no argument, list the current directory.  Otherwise list the given "
"directory.\n"
msgstr ""

#: mu/modes/api/adafruit.py:429 mu/modes/api/adafruit.py:430
msgid ""
"os.mkdir(path) \n"
"Create a new directory.\n"
msgstr ""

#: mu/modes/api/adafruit.py:431 mu/modes/api/adafruit.py:432
msgid ""
"os.remove(path) \n"
"Remove a file.\n"
msgstr ""

#: mu/modes/api/adafruit.py:433 mu/modes/api/adafruit.py:434
msgid ""
"os.rename(old_path, new_path) \n"
"Rename a file.\n"
msgstr ""

#: mu/modes/api/adafruit.py:435 mu/modes/api/adafruit.py:436
msgid ""
"os.rmdir(path) \n"
"Remove a directory.\n"
msgstr ""

#: mu/modes/api/adafruit.py:437 mu/modes/api/adafruit.py:438
msgid ""
"os.stat(path) \n"
"Get the status of a file or directory.\n"
msgstr ""

#: mu/modes/api/adafruit.py:440 mu/modes/api/adafruit.py:443
msgid ""
"os.statvfs(path) \n"
"Get the status of a fileystem.\n"
"Returns a tuple with the filesystem information in the following order:\n"
"\n"
"\n"
"f_bsize -- file system block size\n"
"f_frsize -- fragment size\n"
"f_blocks -- size of fs in f_frsize units\n"
"f_bfree -- number of free blocks\n"
"f_bavail -- number of free blocks for unpriviliged users\n"
"f_files -- number of inodes\n"
"f_ffree -- number of free inodes\n"
"f_favail -- number of free inodes for unpriviliged users\n"
"f_flag -- mount flags\n"
"f_namemax -- maximum filename length\n"
"\n"
"\n"
"Parameters related to inodes: f_files, f_ffree, f_avail\n"
"and the f_flags parameter may return 0 as they can be unavailable\n"
"in a port-specific implementation.\n"
msgstr ""

#: mu/modes/api/adafruit.py:445 mu/modes/api/adafruit.py:446
msgid ""
"os.sync() \n"
"Sync all filesystems.\n"
msgstr ""

#: mu/modes/api/adafruit.py:448 mu/modes/api/adafruit.py:451
msgid ""
"os.uname() \n"
"Returns a named tuple of operating specific and CircuitPython port\n"
"specific information.\n"
msgstr ""

#: mu/modes/api/adafruit.py:454 mu/modes/api/adafruit.py:457
msgid ""
"os.urandom(size) \n"
"Returns a string of size random bytes based on a hardware True Random\n"
"Number Generator. When not available, it will raise a NotImplementedError.\n"
msgstr ""

#: mu/modes/api/adafruit.py:460 mu/modes/api/adafruit.py:463
msgid ""
"pulseio.PWMOut(pin, *, duty_cycle=0, frequency=500, "
"variable_frequency=False) \n"
"Create a PWM object associated with the given pin. This allows you to\n"
"write PWM signals out on the given pin. Frequency is fixed after init\n"
"unless variable_frequency is True.\n"
"\n"
"\n"
"Parameters:\n"
"pin (Pin) -- The pin to output to\n"
"duty_cycle (int) -- The fraction of each pulse which is high. 16-bit\n"
"frequency (int) -- The target frequency in Hertz (32-bit)\n"
"variable_frequency (bool) -- True if the frequency will change over time"
msgstr ""

#: mu/modes/api/adafruit.py:466 mu/modes/api/adafruit.py:469
msgid ""
"pulseio.PWMOut.deinit() \n"
"Deinitialises the PWMOut and releases any hardware resources for reuse.\n"
msgstr ""

#: mu/modes/api/adafruit.py:472 mu/modes/api/adafruit.py:475
msgid ""
"pulseio.PWMOut.duty_cycle() \n"
"16 bit value that dictates how much of one cycle is high (1) versus low\n"
"(0). 0xffff will always be high, 0 will always be low and 0x7fff will\n"
"be half high and then half low.\n"
msgstr ""

#: mu/modes/api/adafruit.py:478 mu/modes/api/adafruit.py:481
msgid ""
"pulseio.PWMOut.frequency() \n"
"32 bit value that dictates the PWM frequency in Hertz (cycles per\n"
"second). Only writeable when constructed with variable_frequency=True.\n"
msgstr ""

#: mu/modes/api/adafruit.py:484 mu/modes/api/adafruit.py:487
msgid ""
"pulseio.PulseIn(pin, maxlen=2, *, idle_state=False) \n"
"Create a PulseIn object associated with the given pin. The object acts as\n"
"a read-only sequence of pulse lengths with a given max length. When it is\n"
"active, new pulse lengths are added to the end of the list. When there is\n"
"no more room (len() == maxlen) the oldest pulse length is removed to\n"
"make room.\n"
"\n"
"\n"
"Parameters:\n"
"pin (Pin) -- Pin to read pulses from.\n"
"maxlen (int) -- Maximum number of pulse durations to store at once\n"
"idle_state (bool) -- Idle state of the pin. At start and after resume\n"
"the first recorded pulse will the opposite state from idle."
msgstr ""

#: mu/modes/api/adafruit.py:490 mu/modes/api/adafruit.py:493
msgid ""
"pulseio.PulseIn.deinit() \n"
"Deinitialises the PulseIn and releases any hardware resources for reuse.\n"
msgstr ""

#: mu/modes/api/adafruit.py:496
msgid ""
"pulseio.PulseIn.maxlen() \n"
"Returns the maximum length of the PulseIn. When len() is equal to maxlen,\n"
"it is unclear which pulses are active and which are idle.\n"
msgstr ""

#: mu/modes/api/adafruit.py:499
msgid ""
"pulseio.PulseIn.maxlen() \n"
"The maximum length of the PulseIn. When len() is equal to maxlen,\n"
"it is unclear which pulses are active and which are idle.\n"
msgstr ""

#: mu/modes/api/adafruit.py:502
msgid ""
"pulseio.PulseIn.paused() \n"
"True when pulse capture is paused as a result of pause() or an error during "
"capture\n"
"such as a signal that is too fast.\n"
msgstr ""

#: mu/modes/api/adafruit.py:505 mu/modes/api/adafruit.py:508
msgid ""
"pulseio.PulseOut(carrier) \n"
"Create a PulseOut object associated with the given PWM out experience.\n"
"\n"
"\n"
"Parameters:carrier (PWMOut) -- PWMOut that is set to output on the desired "
"pin."
msgstr ""

#: mu/modes/api/adafruit.py:511 mu/modes/api/adafruit.py:514
msgid ""
"pulseio.PulseOut.deinit() \n"
"Deinitialises the PulseOut and releases any hardware resources for reuse.\n"
msgstr ""

#: mu/modes/api/adafruit.py:517 mu/modes/api/adafruit.py:520
msgid ""
"random.choice(seq) \n"
"Returns a randomly selected element from the given sequence. Raises\n"
"IndexError when the sequence is empty.\n"
msgstr ""

#: mu/modes/api/adafruit.py:522 mu/modes/api/adafruit.py:523
msgid ""
"random.getrandbits(k) \n"
"Returns an integer with k random bits.\n"
msgstr ""

#: mu/modes/api/adafruit.py:525 mu/modes/api/adafruit.py:528
msgid ""
"random.randint(a, b) \n"
"Returns a randomly selected integer between a and b inclusive. Equivalent\n"
"to randrange(a, b + 1, 1)\n"
msgstr ""

#: mu/modes/api/adafruit.py:530 mu/modes/api/adafruit.py:531
msgid ""
"random.random() \n"
"Returns a random float between 0 and 1.0.\n"
msgstr ""

#: mu/modes/api/adafruit.py:533 mu/modes/api/adafruit.py:536
msgid ""
"random.randrange(stop) \n"
"Returns a randomly selected integer from range(start, stop, step).\n"
msgstr ""

#: mu/modes/api/adafruit.py:539 mu/modes/api/adafruit.py:542
msgid ""
"random.seed(seed) \n"
"Sets the starting seed of the random  number generation. Further calls to\n"
"random will return deterministic results afterwards.\n"
msgstr ""

#: mu/modes/api/adafruit.py:545 mu/modes/api/adafruit.py:548
msgid ""
"random.uniform(a, b) \n"
"Returns a random float between a and b. It may or may not be inclusive\n"
"depending on float rounding.\n"
msgstr ""

#: mu/modes/api/adafruit.py:551
msgid ""
"rotaryio.IncrementalEncoder(pin_a, pin_b) \n"
"Create an IncrementalEncoder object associated with the given pins. It "
"tracks the positional\n"
"state of an incremental rotary encoder (also known as a quadrature encoder.) "
"Position is\n"
"relative to the position when the object is contructed.\n"
"\n"
"\n"
"Parameters:\n"
"pin_a (Pin) -- First pin to read pulses from.\n"
"pin_b (Pin) -- Second pin to read pulses from."
msgstr ""

#: mu/modes/api/adafruit.py:554
msgid ""
"rotaryio.IncrementalEncoder.deinit() \n"
"Deinitializes the IncrementalEncoder and releases any hardware resources for "
"reuse.\n"
msgstr ""

#: mu/modes/api/adafruit.py:557
msgid ""
"rotaryio.IncrementalEncoder.position() \n"
"The current position in terms of pulses. The number of pulses per rotation "
"is defined by the\n"
"specific hardware.\n"
msgstr ""

#: mu/modes/api/adafruit.py:560
msgid ""
"rtc.RTC() \n"
"This class represents the onboard Real Time Clock. It is a singleton and "
"will always return the same instance.\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:563
msgid ""
"rtc.RTC.calibration() \n"
"The RTC calibration value.\n"
"A positive value speeds up the clock and a negative value slows it down.\n"
"Range and value is hardware specific, but one step is often approx. 1 ppm.\n"
msgstr ""

#: mu/modes/api/adafruit.py:565
msgid ""
"rtc.RTC.datetime() \n"
"The date and time of the RTC.\n"
msgstr ""

#: mu/modes/api/adafruit.py:567
msgid ""
"rtc.set_time_source(rtc) \n"
"Sets the rtc time source used by time.localtime().\n"
"The default is rtc.RTC().\n"
"Example usage:\n"
"import rtc\n"
"import time\n"
"\n"
"class RTC(object):\n"
"    @property\n"
"    def datetime(self):\n"
"        return time.struct_time((2018, 3, 17, 21, 1, 47, 0, 0, 0))\n"
"\n"
"r = RTC()\n"
"rtc.set_time_source(r)\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:570 mu/modes/api/adafruit.py:573
msgid ""
"storage.VfsFat(block_device) \n"
"Create a new VfsFat filesystem around the given block device.\n"
"\n"
"\n"
"Parameters:block_device -- Block device the the filesystem lives on"
msgstr ""

#: mu/modes/api/adafruit.py:576
msgid ""
"storage.VfsFat.ilistdir(path) \n"
"Return an iterator whose values describe files and folders within\n"
"path\n"
msgstr ""

#: mu/modes/api/adafruit.py:579
msgid ""
"storage.VfsFat.label() \n"
"The filesystem label, up to 11 case-insensitive bytes.  Note that\n"
"this property can only be set when the device is writable by the\n"
"microcontroller.\n"
msgstr ""

#: mu/modes/api/adafruit.py:581
msgid ""
"storage.VfsFat.mkdir(path) \n"
"Like os.mkdir\n"
msgstr ""

#: mu/modes/api/adafruit.py:583
msgid ""
"storage.VfsFat.mkfs() \n"
"Format the block device, deleting any data that may have been there\n"
msgstr ""

#: mu/modes/api/adafruit.py:586
msgid ""
"storage.VfsFat.mount(readonly, mkfs) \n"
"Don’t call this directly, call storage.mount.\n"
msgstr ""

#: mu/modes/api/adafruit.py:588
msgid ""
"storage.VfsFat.open(path, mode) \n"
"Like builtin open()\n"
msgstr ""

#: mu/modes/api/adafruit.py:589
msgid ""
"storage.VfsFat.rmdir(path) \n"
"Like os.rmdir\n"
msgstr ""

#: mu/modes/api/adafruit.py:590
msgid ""
"storage.VfsFat.stat(path) \n"
"Like os.stat\n"
msgstr ""

#: mu/modes/api/adafruit.py:591
msgid ""
"storage.VfsFat.statvfs(path) \n"
"Like os.statvfs\n"
msgstr ""

#: mu/modes/api/adafruit.py:593
msgid ""
"storage.VfsFat.umount() \n"
"Don’t call this directly, call storage.umount.\n"
msgstr ""

#: mu/modes/api/adafruit.py:596
msgid ""
"storage.erase_filesystem() \n"
"Erase and re-create the CIRCUITPY filesystem.\n"
"On boards that present USB-visible CIRCUITPY drive (e.g., SAMD21 and "
"SAMD51),\n"
"then call microcontroller.reset() to restart CircuitPython and have the\n"
"host computer remount CIRCUITPY.\n"
"This function can be called from the REPL when CIRCUITPY\n"
"has become corrupted.\n"
"\n"
"Warning\n"
"All the data on CIRCUITPY will be lost, and\n"
"CircuitPython will restart on certain boards.\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:599
msgid ""
"storage.getmount(mount_path) \n"
"Retrieves the mount object associated with the mount path\n"
msgstr ""

#: mu/modes/api/adafruit.py:602 mu/modes/api/adafruit.py:605
msgid ""
"storage.mount(filesystem, mount_path, *, readonly=False) \n"
"Mounts the given filesystem object at the given path.\n"
"This is the CircuitPython analog to the UNIX mount command.\n"
msgstr ""

#: mu/modes/api/adafruit.py:608
msgid ""
"storage.remount(mount_path, readonly) \n"
"Remounts the given path with new parameters.\n"
msgstr ""

#: mu/modes/api/adafruit.py:611
msgid ""
"storage.remount(mount_path, readonly=False) \n"
"Remounts the given path with new parameters.\n"
msgstr ""

#: mu/modes/api/adafruit.py:614 mu/modes/api/adafruit.py:617
msgid ""
"storage.umount(mount) \n"
"Unmounts the given filesystem object or if mount is a path, then unmount\n"
"the filesystem mounted at that location.\n"
"This is the CircuitPython analog to the UNIX umount command.\n"
msgstr ""

#: mu/modes/api/adafruit.py:620
msgid ""
"struct.calcsize(fmt) \n"
"Return the number of bytes needed to store the given fmt.\n"
msgstr ""

#: mu/modes/api/adafruit.py:623
msgid ""
"struct.pack(fmt, v1, v2, ...) \n"
"Pack the values v1, v2, … according to the format string fmt.\n"
"The return value is a bytes object encoding the values.\n"
msgstr ""

#: mu/modes/api/adafruit.py:626
msgid ""
"struct.pack_into(fmt, buffer, offset, v1, v2, ...) \n"
"Pack the values v1, v2, … according to the format string fmt into a buffer\n"
"starting at offset. offset may be negative to count from the end of buffer.\n"
msgstr ""

#: mu/modes/api/adafruit.py:629
msgid ""
"struct.unpack(fmt, data) \n"
"Unpack from the data according to the format string fmt. The return value\n"
"is a tuple of the unpacked values.\n"
msgstr ""

#: mu/modes/api/adafruit.py:632
msgid ""
"struct.unpack_from(fmt, data, offset) \n"
"Unpack from the data starting at offset according to the format string fmt.\n"
"offset may be negative to count from the end of buffer. The return value is\n"
"a tuple of the unpacked values.\n"
msgstr ""

#: mu/modes/api/adafruit.py:635
msgid ""
"supervisor.Runtime() \n"
"You cannot create an instance of supervisor.Runtime.\n"
"Use supervisor.runtime to access the sole instance available.\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:638
msgid ""
"supervisor.Runtime.serial_connected() \n"
"Returns the USB serial communication status (read-only).\n"
msgstr ""

#: mu/modes/api/adafruit.py:641 mu/modes/api/adafruit.py:644
msgid ""
"time.struct_time((tm_year, tm_mon, tm_mday, tm_hour, tm_min, tm_sec, "
"tm_wday, tm_yday, tm_isdst)) \n"
"Structure used to capture a date and time. Note that it takes a tuple!\n"
"\n"
"\n"
"Parameters:\n"
"tm_year (int) -- the year, 2017 for example\n"
"tm_mon (int) -- the month, range [1, 12]\n"
"tm_mday (int) -- the day of the month, range [1, 31]\n"
"tm_hour (int) -- the hour, range [0, 23]\n"
"tm_min (int) -- the minute, range [0, 59]\n"
"tm_sec (int) -- the second, range [0, 61]\n"
"tm_wday (int) -- the day of the week, range [0, 6], Monday is 0\n"
"tm_yday (int) -- the day of the year, range [1, 366], -1 indicates not "
"known\n"
"tm_isdst (int) -- 1 when in daylight savings, 0 when not, -1 if unknown."
msgstr ""

#: mu/modes/api/adafruit.py:647 mu/modes/api/adafruit.py:650
msgid ""
"touchio.TouchIn(pin) \n"
"Use the TouchIn on the given pin.\n"
"\n"
"\n"
"Parameters:pin (Pin) -- the pin to read from"
msgstr ""

#: mu/modes/api/adafruit.py:653 mu/modes/api/adafruit.py:656
msgid ""
"touchio.TouchIn.deinit() \n"
"Deinitialises the TouchIn and releases any hardware resources for reuse.\n"
msgstr ""

#: mu/modes/api/adafruit.py:659
msgid ""
"touchio.TouchIn.raw_value() \n"
"The raw touch measurement as an int. (read-only)\n"
msgstr ""

#: mu/modes/api/adafruit.py:662
msgid ""
"touchio.TouchIn.threshold() \n"
"Minimum raw_value needed to detect a touch (and for value to be True).\n"
"When the TouchIn object is created, an initial raw_value is read from the "
"pin,\n"
"and then threshold is set to be 100 + that value.\n"
"You can adjust threshold to make the pin more or less sensitive.\n"
msgstr ""

#: mu/modes/api/adafruit.py:665
msgid ""
"touchio.TouchIn.value() \n"
"Whether the touch pad is being touched or not.\n"
"\n"
"\n"
"\n"
"\n"
"Returns:True when touched, False otherwise.\n"
"\n"
"Return type:bool\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:668
msgid ""
"touchio.TouchIn.value() \n"
"Whether the touch pad is being touched or not. (read-only)\n"
"True when raw_value > threshold.\n"
msgstr ""

#: mu/modes/api/adafruit.py:670 mu/modes/api/adafruit.py:671
msgid ""
"usb_hid.Device() \n"
"Not currently dynamically supported.\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:672 mu/modes/api/adafruit.py:673
msgid ""
"usb_hid.Device.send_report(buf) \n"
"Send a HID report.\n"
msgstr ""

#: mu/modes/api/adafruit.py:675
msgid ""
"usb_hid.Device.usage() \n"
"The functionality of the device. For example Keyboard is 0x06 within the\n"
"generic desktop usage page 0x01. Mouse is 0x02 within the same usage\n"
"page.\n"
"\n"
"\n"
"\n"
"\n"
"Returns:the usage within the usage page\n"
"\n"
"Return type:int\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:678
msgid ""
"usb_hid.Device.usage() \n"
"The functionality of the device as an int. (read-only)\n"
"For example, Keyboard is 0x06 within the generic desktop usage page 0x01.\n"
"Mouse is 0x02 within the same usage page.\n"
msgstr ""

#: mu/modes/api/adafruit.py:681
msgid ""
"usb_hid.Device.usage_page() \n"
"The usage page of the device. Can be thought of a category.\n"
"\n"
"\n"
"\n"
"\n"
"Returns:the device’s usage page\n"
"\n"
"Return type:int\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/adafruit.py:684
msgid ""
"usb_hid.Device.usage_page() \n"
"The usage page of the device as an int. Can be thought of a category. (read-"
"only)\n"
msgstr ""

#: mu/modes/api/esp.py:24 mu/modes/api/microbit.py:24
msgid ""
"random.getrandbits(n) \n"
"Return an integer with n random bits."
msgstr ""

#: mu/modes/api/esp.py:26 mu/modes/api/microbit.py:26
msgid ""
"random.seed(n) \n"
"Initialise the random number generator with a known integer 'n'."
msgstr ""

#: mu/modes/api/esp.py:29 mu/modes/api/microbit.py:29
msgid ""
"random.randint(a, b) \n"
"Return a random whole number between a and b (inclusive)."
msgstr ""

#: mu/modes/api/esp.py:32 mu/modes/api/microbit.py:32
msgid ""
"random.randrange(stop) \n"
"Return a random whole number between 0 and up to (but not including) stop."
msgstr ""

#: mu/modes/api/esp.py:35 mu/modes/api/microbit.py:35
msgid ""
"random.choice(seq) \n"
"Return a randomly selected element from a sequence of objects (such as a "
"list)."
msgstr ""

#: mu/modes/api/esp.py:38 mu/modes/api/microbit.py:38
msgid ""
"random.random() \n"
"Return a random floating point number between 0.0 and 1.0."
msgstr ""

#: mu/modes/api/esp.py:41 mu/modes/api/microbit.py:41
msgid ""
"random.uniform(a, b) \n"
"Return a random floating point number between a and b (inclusive)."
msgstr ""

#: mu/modes/api/esp.py:45 mu/modes/api/microbit.py:45
msgid ""
"os.listdir() \n"
"Return a list of the names of all the files contained within the local\n"
"on-device file system."
msgstr ""

#: mu/modes/api/esp.py:47 mu/modes/api/microbit.py:47
msgid ""
"os.remove(filename) \n"
"Remove (delete) the file named filename."
msgstr ""

#: mu/modes/api/esp.py:49 mu/modes/api/microbit.py:49
msgid ""
"os.size(filename) \n"
"Return the size, in bytes, of the file named filename."
msgstr ""

#: mu/modes/api/esp.py:51 mu/modes/api/microbit.py:51
msgid ""
"os.uname() \n"
"Return information about MicroPython and the device."
msgstr ""

#: mu/modes/api/microbit.py:53
msgid "sys.version"
msgstr ""

#: mu/modes/api/microbit.py:54
msgid "sys.version_info"
msgstr ""

#: mu/modes/api/microbit.py:55
msgid "sys.implementation"
msgstr ""

#: mu/modes/api/microbit.py:56
msgid "sys.platform"
msgstr ""

#: mu/modes/api/microbit.py:57
msgid "sys.byteorder"
msgstr ""

#: mu/modes/api/esp.py:70 mu/modes/api/microbit.py:59
msgid ""
"sys.print_exception(ex) \n"
"Print to the REPL information about the exception 'ex'."
msgstr ""

#: mu/modes/api/microbit.py:63
msgid ""
"microbit.panic() \n"
"Put micro:bit in panic() mode and display an unhappy face.\n"
"Press the reset button to exit panic() mode."
msgstr ""

#: mu/modes/api/microbit.py:69
msgid ""
"microbit.running_time() \n"
"Return running_time() in milliseconds since micro:bit's last reset."
msgstr ""

#: mu/modes/api/microbit.py:72
msgid ""
"microbit.temperature() \n"
"Return micro:bit's temperature in degrees Celcius."
msgstr ""

#: mu/modes/api/microbit.py:76
msgid ""
"microbit.accelerometer.get_x() \n"
"Return micro:bit's tilt (X acceleration) in milli-g's."
msgstr ""
"microbit.accelerometer.get_x() \n"
"返回 micro:bit 的倾斜度 (X 轴向加速度) ，单位为毫克。"

#: mu/modes/api/microbit.py:79
msgid ""
"microbit.accelerometer.get_y() \n"
"Return micro:bit's tilt (Y acceleration) in milli-g's."
msgstr ""
"microbit.accelerometer.get_y() \n"
"返回 micro:bit 的倾斜度 (Y 轴向加速度) ，单位为毫克。"

#: mu/modes/api/microbit.py:82
msgid ""
"microbit.accelerometer.get_z() \n"
"Return micro:bit's up-down motion (Z acceleration) in milli-g's.\n"
"Z is a positive number when moving up. Moving down, Z is a negative number."
msgstr ""
"microbit.accelerometer.get_z() \n"
"返回 micro:bit 的倾斜度 (Z 轴向加速度) ，单位为毫克。\n"
"向上移动时返回值为正数，向下移动移动时返回的Z为负数。"

#: mu/modes/api/microbit.py:85
msgid ""
"microbit.accelerometer.is_gesture(name) \n"
"Return True or False to indicate if the named gesture is currently active.\n"
"MicroPython understands the following gestures: 'up', 'down', 'left', "
"'right',\n"
"'face up', 'face down', 'freefall', '3g', '6g', '8g' and 'shake'."
msgstr ""
"microbit.accelerometer.is_gesture(name) \n"
"返回 True 或 False 表示给定手势当前是否处于活动状态。\n"
"MicroPython理解一下手势：上（‘up’）, 下（‘down’）,左（‘left’）,右(‘right’),\n"
"朝上(‘face up’), 朝下(‘face down’), 自由落体(‘freefall’), ‘3g’, ‘6g’, ‘8g’ 以"
"及 摇晃(‘shake’)."

#: mu/modes/api/microbit.py:88
msgid ""
"microbit.accelerometer.was_gesture(name) \n"
"Return True or False to indicate if the named gesture was active since the\n"
"last call.\n"
"MicroPython understands the following gestures: 'up', 'down', 'left', "
"'right',\n"
"'face up', 'face down', 'freefall', '3g', '6g', '8g' and 'shake'."
msgstr ""
"microbit.accelerometer.was_gesture(name) \n"
"返回True或False，表示自上次调用后，给定手势是否处于活动状态。\n"
"MicroPython理解一下手势：上（‘up’）, 下（‘down’）,左（‘left’）,右(‘right’),\n"
"朝上(‘face up’), 朝下(‘face down’), 自由落体(‘freefall’), ‘3g’, ‘6g’, ‘8g’ 以"
"及 摇晃(‘shake’)."

#: mu/modes/api/microbit.py:91
msgid ""
"microbit.accelerometer.get_gestures() \n"
"Return a list indicating the gesture history. The most recent gesture is "
"last.\n"
"Calling this method also clears the gesture history.\n"
"MicroPython understands the following gestures: 'up', 'down', 'left', "
"'right',\n"
"'face up', 'face down', 'freefall', '3g', '6g', '8g' and 'shake'."
msgstr ""
"microbit.accelerometer.get_gestures() \n"
"返回指示手势历史记录的列表。 最后一条手势即是最近检测到的手势。\n"
"调用此方法会清除手势的历史记录。\n"
"MicroPython理解一下手势：上（‘up’）, 下（‘down’）,左（‘left’）,右(‘right’),\n"
"朝上(‘face up’), 朝下(‘face down’), 自由落体(‘freefall’), ‘3g’, ‘6g’, ‘8g’ 以"
"及 摇晃(‘shake’)."

#: mu/modes/api/microbit.py:94
msgid ""
"microbit.accelerometer.get_values() \n"
"Get the acceleration measurements in all axes at once, as a three-element "
"tuple of integers ordered as X, Y, Z."
msgstr ""
"microbit.accelerometer.get_values() \n"
"一次性获取所有方向轴上的加速度值，返回一个含有三个元素的元组（按X，Y，Z顺序排"
"列）"

#: mu/modes/api/microbit.py:98
msgid ""
"microbit.button_a.is_pressed() \n"
"If button A is pressed down, is_pressed() is True, else False."
msgstr ""
"microbit.button_a.is_pressed() \n"
"如果按钮A被按下，is_pressed() 返回True，否则返回False。"

#: mu/modes/api/microbit.py:101
msgid ""
"microbit.button_a.was_pressed() \n"
"Use was_pressed() to learn if button A was pressed since the last time\n"
"was_pressed() was called. Returns True or False."
msgstr ""
"microbit.button_a.was_pressed() \n"
"使用 was_pressed() 可以知道按钮 A 在上次was_pressed() 调用后是否曾经被按下"
"过，\n"
"返回 True 或者 False."

#: mu/modes/api/microbit.py:104
msgid ""
"microbit.button_a.get_presses() \n"
"Use get_presses() to get the running total of button presses, and also\n"
"reset this counter to zero."
msgstr ""
"microbit.button_a.get_presses() \n"
"使用 get_presses()可获得按钮A按下的总次数，调用后会将此计数器重置为零。"

#: mu/modes/api/microbit.py:107
msgid ""
"microbit.button_b.is_pressed() \n"
"If button B is pressed down, is_pressed() is True, else False."
msgstr ""
"microbit.button_b.is_pressed() \n"
"如果按钮B被按下，is_pressed() 返回True，否则返回False。"

#: mu/modes/api/microbit.py:110
msgid ""
"microbit.button_b.was_pressed() \n"
"Use was_pressed() to learn if button B was pressed since the last time\n"
"was_pressed() was called. Returns True or False."
msgstr ""
"microbit.button_b.was_pressed() \n"
"使用 was_pressed() 可以知道按钮 A 在上次was_pressed() 调用后是否曾经被按下"
"过，\n"
"返回 True 或者 False."

#: mu/modes/api/microbit.py:113
msgid ""
"microbit.button_b.get_presses() \n"
"Use get_presses() to get the running total of button presses, and also\n"
"reset this counter to zero."
msgstr ""
"microbit.button_b.get_presses() \n"
"使用 get_presses()可获得按钮B按下的总次数，调用后会将此计数器重置为零。"

#: mu/modes/api/microbit.py:117
msgid ""
"microbit.compass.is_calibrated() \n"
"If micro:bit's compass is_calibrated() and adjusted for accuracy, return "
"True.\n"
"If compass hasn't been adjusted for accuracy, return False."
msgstr ""

#: mu/modes/api/microbit.py:120
msgid ""
"microbit.compass.calibrate() \n"
"If micro:bit is confused, calibrate() the compass to adjust the its "
"accuracy.\n"
"Will ask you to rotate the device to draw a circle on the display. "
"Afterwards, micro:bit will know which way is north."
msgstr ""

#: mu/modes/api/microbit.py:123
msgid ""
"microbit.compass.clear_calibration() \n"
"Reset micro:bit's compass using clear_calibration() command.\n"
"Run calibrate() to improve accuracy."
msgstr ""

#: mu/modes/api/microbit.py:126
msgid ""
"microbit.compass.get_x() \n"
"Return magnetic field detected along micro:bit's X axis.\n"
"Usually, the compass returns the earth's magnetic field in micro-Tesla "
"units.\n"
"Unless...a strong magnet is nearby!"
msgstr ""

#: mu/modes/api/microbit.py:129
msgid ""
"microbit.compass.get_y() \n"
"Return magnetic field detected along micro:bit's Y axis.\n"
"Usually, the compass returns the earth's magnetic field in micro-Tesla "
"units.\n"
"Unless...a strong magnet is nearby!"
msgstr ""

#: mu/modes/api/microbit.py:132
msgid ""
"microbit.compass.get_z() \n"
"Return magnetic field detected along micro:bit's Z axis.\n"
"Usually, the compass returns the earth's magnetic field in micro-Tesla "
"units.\n"
"Unless...a strong magnet is nearby!"
msgstr ""

#: mu/modes/api/microbit.py:135
msgid ""
"microbit.compass.get_field_strength() \n"
"Return strength of magnetic field around micro:bit."
msgstr ""

#: mu/modes/api/microbit.py:138
msgid ""
"microbit.compass.heading() \n"
"Return a number between 0-360 indicating the device's heading. 0 is north."
msgstr ""

#: mu/modes/api/microbit.py:142
msgid ""
"microbit.display.show(x, delay=400, wait=True, loop=False, clear=False) \n"
"Use show(x) to print the string or image 'x' to the display. If 'x' is a "
"list\n"
"of images they will be animated together.\n"
"Use 'delay' to specify the speed of frame changes in milliseconds.\n"
"If wait is False animation will happen in the background while the program "
"continues.\n"
"If loop is True the animation will repeat forever.\n"
"If clear is True the display will clear at the end of the animation."
msgstr ""

#: mu/modes/api/microbit.py:145
msgid ""
"microbit.display.scroll(string, delay=150, wait=True, loop=False, "
"monospace=False) \n"
"Use scroll(string) to scroll the string across the display.\n"
"Use delay to control how fast the text scrolls.\n"
"If wait is False the text will scroll in the background while the program "
"continues.\n"
"If loop is True the text will repeat forever.\n"
"If monospace is True the characters will always take up 5 pixel-columns."
msgstr ""

#: mu/modes/api/microbit.py:147
msgid ""
"microbit.display.clear() \n"
"Use clear() to clear micro:bit's display."
msgstr ""

#: mu/modes/api/microbit.py:149
msgid ""
"microbit.display.get_pixel(x, y) \n"
"Use get_pixel(x, y) to return the display's brightness at LED pixel (x,y).\n"
"Brightness can be from 0 (LED is off) to 9 (maximum LED brightness)."
msgstr ""

#: mu/modes/api/microbit.py:152
msgid ""
"microbit.display.set_pixel(x, y, b) \n"
"Use set_pixel(x, y, b) to set the display at LED pixel (x,y) to brightness "
"'b'\n"
"which can be set between 0 (off) to 9 (full brightness)."
msgstr ""

#: mu/modes/api/microbit.py:154
msgid ""
"microbit.display.on() \n"
"Use on() to turn on the display."
msgstr ""

#: mu/modes/api/microbit.py:155
msgid ""
"microbit.display.off() \n"
"Use off() to turn off the display."
msgstr ""

#: mu/modes/api/microbit.py:157
msgid ""
"microbit.display.is_on() \n"
"Use is_on() to query if the micro:bit's display is on (True) or off (False)."
msgstr ""

#: mu/modes/api/microbit.py:161
msgid ""
"microbit.pin0.is_touched() \n"
"If pin0 is_touched() on micro:bit, return True. If nothing is touching the\n"
"pin, return False."
msgstr ""

#: mu/modes/api/microbit.py:164
msgid ""
"microbit.pin0.read_digital() \n"
"read_digital() value from pin0. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:167
msgid ""
"microbit.pin0.write_digital(value) \n"
"Set pin0 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:170
msgid ""
"microbit.pin0.read_analog() \n"
"Read the voltage applied to pin0. Return the reading as a number between\n"
"0 (meaning 0v) and 1023 (meaning 3.3v)."
msgstr ""

#: mu/modes/api/microbit.py:173
msgid ""
"microbit.pin0.write_analog(value) \n"
"Set pin0 to output a value between 0 and 1023."
msgstr ""

#: mu/modes/api/microbit.py:176
msgid ""
"microbit.pin0.set_analog_period(period) \n"
"Set the period of the PWM signal output to period milliseconds."
msgstr ""

#: mu/modes/api/microbit.py:179
msgid ""
"microbit.pin0.set_analog_period_microseconds(period) \n"
"Set the period of the PWM signal output to period microseconds."
msgstr ""

#: mu/modes/api/microbit.py:182
msgid ""
"microbit.pin1.is_touched() \n"
"If pin1 is_touched() on micro:bit, return True. If nothing is touching the\n"
"pin, return False."
msgstr ""

#: mu/modes/api/microbit.py:185
msgid ""
"microbit.pin1.read_digital() \n"
"read_digital() value from pin1. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:188
msgid ""
"microbit.pin1.write_digital(value) \n"
"Set pin1 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:191
msgid ""
"microbit.pin1.read_analog() \n"
"Read the voltage applied to pin1. Return the reading as a number between\n"
"0 (meaning 0v) and 1023 (meaning 3.3v)."
msgstr ""

#: mu/modes/api/microbit.py:194
msgid ""
"microbit.pin1.write_analog(value) \n"
"Set pin1 to output a value between 0 and 1023."
msgstr ""

#: mu/modes/api/microbit.py:197
msgid ""
"microbit.pin1.set_analog_period(period) \n"
"Set the period of the PWM signal output to period milliseconds."
msgstr ""

#: mu/modes/api/microbit.py:200
msgid ""
"microbit.pin1.set_analog_period_microseconds(period) \n"
"Set the period of the PWM signal output to period microseconds."
msgstr ""

#: mu/modes/api/microbit.py:203
msgid ""
"microbit.pin2.is_touched() \n"
"If pin2 is_touched() on micro:bit, return True. If nothing is touching the\n"
"pin, return False."
msgstr ""

#: mu/modes/api/microbit.py:206
msgid ""
"microbit.pin2.read_digital() \n"
"read_digital() value from pin2. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:209
msgid ""
"microbit.pin2.write_digital(value) \n"
"Set pin2 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:212
msgid ""
"microbit.pin2.read_analog() \n"
"Read the voltage applied to pin2. Return the reading as a number between\n"
"0 (meaning 0v) and 1023 (meaning 3.3v)."
msgstr ""

#: mu/modes/api/microbit.py:215
msgid ""
"microbit.pin2.write_analog(value) \n"
"Set pin2 to output a value between 0 and 1023."
msgstr ""

#: mu/modes/api/microbit.py:218
msgid ""
"microbit.pin2.set_analog_period(period) \n"
"Set the period of the PWM signal output to period milliseconds."
msgstr ""

#: mu/modes/api/microbit.py:221
msgid ""
"microbit.pin2.set_analog_period_microseconds(period) \n"
"Set the period of the PWM signal output to period microseconds."
msgstr ""

#: mu/modes/api/microbit.py:224
msgid ""
"microbit.pin3.read_digital() \n"
"read_digital() value from pin3. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:227
msgid ""
"microbit.pin2.write_digital(value) \n"
"Set pin3 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:230
msgid ""
"microbit.pin3.read_analog() \n"
"Read the voltage applied to pin3. Return the reading as a number between\n"
"0 (meaning 0v) and 1023 (meaning 3.3v)."
msgstr ""

#: mu/modes/api/microbit.py:233
msgid ""
"microbit.pin3.write_analog(value) \n"
"Set pin3 to output a value between 0 and 1023."
msgstr ""

#: mu/modes/api/microbit.py:236
msgid ""
"microbit.pin3.set_analog_period(period) \n"
"Set the period of the PWM signal output to period milliseconds."
msgstr ""

#: mu/modes/api/microbit.py:239
msgid ""
"microbit.pin3.set_analog_period_microseconds(period) \n"
"Set the period of the PWM signal output to period microseconds."
msgstr ""

#: mu/modes/api/microbit.py:242
msgid ""
"microbit.pin4.read_digital() \n"
"read_digital() value from pin4. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:245
msgid ""
"microbit.pin4.write_digital(value) \n"
"Set pin4 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:248
msgid ""
"microbit.pin4.read_analog() \n"
"Read the voltage applied to pin4. Return the reading as a number between\n"
"0 (meaning 0v) and 1023 (meaning 3.3v)."
msgstr ""

#: mu/modes/api/microbit.py:251
msgid ""
"microbit.pin4.write_analog(value) \n"
"Set pin4 to output a value between 0 and 1023."
msgstr ""

#: mu/modes/api/microbit.py:254
msgid ""
"microbit.pin4.set_analog_period(period) \n"
"Set the period of the PWM signal output to period milliseconds."
msgstr ""

#: mu/modes/api/microbit.py:257
msgid ""
"microbit.pin4.set_analog_period_microseconds(period) \n"
"Set the period of the PWM signal output to period microseconds."
msgstr ""

#: mu/modes/api/microbit.py:260
msgid ""
"microbit.pin5.read_digital() \n"
"read_digital() value from pin5. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:263
msgid ""
"microbit.pin5.write_digital(value) \n"
"Set pin5 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:266
msgid ""
"microbit.pin6.read_digital() \n"
"read_digital() value from pin6. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:269
msgid ""
"microbit.pin6.write_digital(value) \n"
"Set pin6 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:272
msgid ""
"microbit.pin7.read_digital() \n"
"read_digital() value from pin7. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:275
msgid ""
"microbit.pin7.write_digital(value) \n"
"Set pin7 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:278
msgid ""
"microbit.pin8.read_digital() \n"
"read_digital() value from pin8. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:281
msgid ""
"microbit.pin8.write_digital(value) \n"
"Set pin8 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:284
msgid ""
"microbit.pin9.read_digital() \n"
"read_digital() value from pin9. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:287
msgid ""
"microbit.pin9.write_digital(value) \n"
"Set pin9 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:290
msgid ""
"microbit.pin10.read_digital() \n"
"read_digital() value from pin10. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:293
msgid ""
"microbit.pin10.write_digital(value) \n"
"Set pin10 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:296
msgid ""
"microbit.pin10.read_analog() \n"
"Read the voltage applied to pin10. Return the reading as a number between\n"
"0 (meaning 0v) and 1023 (meaning 3.3v)."
msgstr ""

#: mu/modes/api/microbit.py:299
msgid ""
"microbit.pin10.write_analog(value) \n"
"Set pin10 to output a value between 0 and 1023."
msgstr ""

#: mu/modes/api/microbit.py:302
msgid ""
"microbit.pin10.set_analog_period(period) \n"
"Set the period of the PWM signal output to period milliseconds."
msgstr ""

#: mu/modes/api/microbit.py:305
msgid ""
"microbit.pin10.set_analog_period_microseconds(period) \n"
"Set the period of the PWM signal output to period microseconds."
msgstr ""

#: mu/modes/api/microbit.py:308
msgid ""
"microbit.pin11.read_digital() \n"
"read_digital() value from pin11. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:311
msgid ""
"microbit.pin11.write_digital(value) \n"
"Set pin11 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:314
msgid ""
"microbit.pin12.read_digital() \n"
"read_digital() value from pin12. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:317
msgid ""
"microbit.pin12.write_digital(value) \n"
"Set pin12 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:320
msgid ""
"microbit.pin13.read_digital() \n"
"read_digital() value from pin13. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:323
msgid ""
"microbit.pin13.write_digital(value) \n"
"Set pin13 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:326
msgid ""
"microbit.pin14.read_digital() \n"
"read_digital() value from pin14. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:329
msgid ""
"microbit.pin14.write_digital(value) \n"
"Set pin14 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:332
msgid ""
"microbit.pin15.read_digital() \n"
"read_digital() value from pin15. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:335
msgid ""
"microbit.pin15.write_digital(value) \n"
"Set pin15 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:338
msgid ""
"microbit.pin16.read_digital() \n"
"read_digital() value from pin16. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:341
msgid ""
"microbit.pin16.write_digital(value) \n"
"Set pin16 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:344
msgid ""
"microbit.pin19.read_digital() \n"
"read_digital() value from pin19. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:347
msgid ""
"microbit.pin19.write_digital(value) \n"
"Set pin19 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:350
msgid ""
"microbit.pin20.read_digital() \n"
"read_digital() value from pin20. The reading will be either 0 (lo) or 1 (hi)."
msgstr ""

#: mu/modes/api/microbit.py:353
msgid ""
"microbit.pin20.write_digital(value) \n"
"Set pin20 to output high if value is 1, or to low, it it is 0."
msgstr ""

#: mu/modes/api/microbit.py:357
msgid ""
"microbit.i2c.read(address, n, repeat=False) \n"
"Use read(address, n) to read 'n' bytes from the device with the 7-bit "
"address.\n"
"If repeat is True, no stop bit will be sent."
msgstr ""

#: mu/modes/api/microbit.py:360
msgid ""
"microbit.i2c.write(adress, buffer, repeat=False) \n"
"Use write(address, buffer) to write to the 'buffer' of the device at the 7-"
"bit 'address'.\n"
"If repeat is True, no stop bit will be sent."
msgstr ""

#: mu/modes/api/microbit.py:363
msgid ""
"microbit.i2c.init(frequency, scl, sda) \n"
"Use init(frequency, scl, sda) to set the bus frequency and pins."
msgstr ""

#: mu/modes/api/microbit.py:367
msgid ""
"microbit.Image(string) \n"
"Create and use built-in IMAGES to show on the display. Use:\n"
"Image(\n"
"  '09090:'\n"
"  '99999:'\n"
"  '99999:'\n"
"  '09990:'\n"
"  '00900:')\n"
"...to make a new 5x5 heart image. Numbers go from 0 (off) to 9 (brightest). "
"Note\n"
"the colon ':' to set the end of a row."
msgstr ""

#: mu/modes/api/microbit.py:369
msgid ""
"microbit.Image.width() \n"
"Return the width of the image in pixels."
msgstr ""

#: mu/modes/api/microbit.py:370
msgid ""
"microbit.Image.height() \n"
"Return the height of the image in pixels."
msgstr ""

#: mu/modes/api/microbit.py:372
msgid ""
"microbit.Image.get_pixel(x, y) \n"
"Use get_pixel(x, y) to return the image's brightness at LED pixel (x,y).\n"
"Brightness can be from 0 (LED is off) to 9 (maximum LED brightness)."
msgstr ""

#: mu/modes/api/microbit.py:375
msgid ""
"microbit.Image.set_pixel(x, y, b) \n"
"Use set_pixel(x, y, b) to set the LED pixel (x,y) in the image to "
"brightness\n"
"'b' which can be set between 0 (off) to 9 (full brightness)."
msgstr ""

#: mu/modes/api/microbit.py:378
msgid ""
"microbit.Image.shift_left(n) \n"
"Use shift_left(n) to make a copy of the image but moved 'n' pixels to the "
"left."
msgstr ""

#: mu/modes/api/microbit.py:381
msgid ""
"microbit.Image.shift_right(n) \n"
"Use shift_right(n) to make a copy of the image but moved 'n' pixels to\n"
"the right."
msgstr ""

#: mu/modes/api/microbit.py:384
msgid ""
"microbit.Image.shift_up(n) \n"
"Use shift_up(n) to make a copy of the image but moved 'n' pixels up."
msgstr ""

#: mu/modes/api/microbit.py:387
msgid ""
"microbit.Image.shift_down(n) \n"
"Use shift_down(n) to make a copy of the image but moved 'n' pixels down."
msgstr ""

#: mu/modes/api/microbit.py:390
msgid ""
"microbit.Image.copy() \n"
"Use copy() to make a new exact copy of the image."
msgstr ""

#: mu/modes/api/microbit.py:393
msgid ""
"microbit.Image.crop(x1, y1, x2, y2) \n"
"Use crop(x1, y1, x2, y2) to make a cut-out copy of the image where "
"coordinate\n"
"(x1,y1) is the top left corner of the cut-out area and coordinate (x2,y2) is "
"the\n"
"bottom right corner."
msgstr ""

#: mu/modes/api/microbit.py:396
msgid ""
"microbit.Image.invert() \n"
"Use invert() to make a negative copy of the image. Where a pixel was bright "
"or\n"
"on in the original, it is dim or off in the negative copy."
msgstr ""

#: mu/modes/api/microbit.py:398
msgid "microbit.Image.HEART"
msgstr "microbit.Image.HEART"

#: mu/modes/api/microbit.py:399
msgid "microbit.Image.HEART_SMALL"
msgstr "microbit.Image.HEART_SMALL"

#: mu/modes/api/microbit.py:400
msgid "microbit.Image.HAPPY"
msgstr "microbit.Image.HAPPY"

#: mu/modes/api/microbit.py:401
msgid "microbit.Image.SMILE"
msgstr "microbit.Image.SMILE"

#: mu/modes/api/microbit.py:402
msgid "microbit.Image.SAD"
msgstr "microbit.Image.SAD"

#: mu/modes/api/microbit.py:403
msgid "microbit.Image.CONFUSED"
msgstr "microbit.Image.CONFUSED"

#: mu/modes/api/microbit.py:404
msgid "microbit.Image.ANGRY"
msgstr "microbit.Image.ANGRY"

#: mu/modes/api/microbit.py:405
msgid "microbit.Image.ASLEEP"
msgstr "microbit.Image.ASLEEP"

#: mu/modes/api/microbit.py:406
msgid "microbit.Image.SURPRISED"
msgstr "microbit.Image.SURPRISED"

#: mu/modes/api/microbit.py:407
msgid "microbit.Image.SILLY"
msgstr "microbit.Image.SILLY"

#: mu/modes/api/microbit.py:408
msgid "microbit.Image.FABULOUS"
msgstr "microbit.Image.FABULOUS"

#: mu/modes/api/microbit.py:409
msgid "microbit.Image.MEH"
msgstr "microbit.Image.MEH"

#: mu/modes/api/microbit.py:410
msgid "microbit.Image.YES"
msgstr "microbit.Image.YES"

#: mu/modes/api/microbit.py:411
msgid "microbit.Image.NO"
msgstr "microbit.Image.NO"

#: mu/modes/api/microbit.py:412
msgid "microbit.Image.CLOCK12"
msgstr "microbit.Image.CLOCK12"

#: mu/modes/api/microbit.py:413
msgid "microbit.Image.CLOCK11"
msgstr "microbit.Image.CLOCK11"

#: mu/modes/api/microbit.py:414
msgid "microbit.Image.CLOCK10"
msgstr "microbit.Image.CLOCK10"

#: mu/modes/api/microbit.py:415
msgid "microbit.Image.CLOCK9"
msgstr "microbit.Image.CLOCK9"

#: mu/modes/api/microbit.py:416
msgid "microbit.Image.CLOCK8"
msgstr "microbit.Image.CLOCK8"

#: mu/modes/api/microbit.py:417
msgid "microbit.Image.CLOCK7"
msgstr "microbit.Image.CLOCK7"

#: mu/modes/api/microbit.py:418
msgid "microbit.Image.CLOCK6"
msgstr "microbit.Image.CLOCK6"

#: mu/modes/api/microbit.py:419
msgid "microbit.Image.CLOCK5"
msgstr "microbit.Image.CLOCK5"

#: mu/modes/api/microbit.py:420
msgid "microbit.Image.CLOCK4"
msgstr "microbit.Image.CLOCK4"

#: mu/modes/api/microbit.py:421
msgid "microbit.Image.CLOCK3"
msgstr "microbit.Image.CLOCK3"

#: mu/modes/api/microbit.py:422
msgid "microbit.Image.CLOCK2"
msgstr "microbit.Image.CLOCK2"

#: mu/modes/api/microbit.py:423
msgid "microbit.Image.CLOCK1"
msgstr "microbit.Image.CLOCK1"

#: mu/modes/api/microbit.py:424
msgid "microbit.Image.ARROW_N"
msgstr "microbit.Image.ARROW_N"

#: mu/modes/api/microbit.py:425
msgid "microbit.Image.ARROW_NE"
msgstr "microbit.Image.ARROW_NE"

#: mu/modes/api/microbit.py:426
msgid "microbit.Image.ARROW_E"
msgstr "microbit.Image.ARROW_E"

#: mu/modes/api/microbit.py:427
msgid "microbit.Image.ARROW_SE"
msgstr "microbit.Image.ARROW_SE"

#: mu/modes/api/microbit.py:428
msgid "microbit.Image.ARROW_S"
msgstr "microbit.Image.ARROW_S"

#: mu/modes/api/microbit.py:429
msgid "microbit.Image.ARROW_SW"
msgstr "microbit.Image.ARROW_SW"

#: mu/modes/api/microbit.py:430
msgid "microbit.Image.ARROW_W"
msgstr "microbit.Image.ARROW_W"

#: mu/modes/api/microbit.py:431
msgid "microbit.Image.ARROW_NW"
msgstr "microbit.Image.ARROW_NW"

#: mu/modes/api/microbit.py:432
msgid "microbit.Image.TRIANGLE"
msgstr "microbit.Image.TRIANGLE"

#: mu/modes/api/microbit.py:433
msgid "microbit.Image.TRIANGLE_LEFT"
msgstr "microbit.Image.TRIANGLE_LEFT"

#: mu/modes/api/microbit.py:434
msgid "microbit.Image.CHESSBOARD"
msgstr "microbit.Image.CHESSBOARD"

#: mu/modes/api/microbit.py:435
msgid "microbit.Image.DIAMOND"
msgstr "microbit.Image.DIAMOND"

#: mu/modes/api/microbit.py:436
msgid "microbit.Image.DIAMOND_SMALL"
msgstr "microbit.Image.DIAMOND_SMALL"

#: mu/modes/api/microbit.py:437
msgid "microbit.Image.SQUARE"
msgstr "microbit.Image.SQUARE"

#: mu/modes/api/microbit.py:438
msgid "microbit.Image.SQUARE_SMALL"
msgstr "microbit.Image.SQUARE_SMALL"

#: mu/modes/api/microbit.py:439
msgid "microbit.Image.RABBIT"
msgstr "microbit.Image.RABBIT"

#: mu/modes/api/microbit.py:440
msgid "microbit.Image.COW"
msgstr "microbit.Image.COW"

#: mu/modes/api/microbit.py:441
msgid "microbit.Image.MUSIC_CROTCHET"
msgstr "microbit.Image.MUSIC_CROTCHET"

#: mu/modes/api/microbit.py:442
msgid "microbit.Image.MUSIC_QUAVER"
msgstr "microbit.Image.MUSIC_QUAVER"

#: mu/modes/api/microbit.py:443
msgid "microbit.Image.MUSIC_QUAVERS"
msgstr "microbit.Image.MUSIC_QUAVERS"

#: mu/modes/api/microbit.py:444
msgid "microbit.Image.PITCHFORK"
msgstr "microbit.Image.PITCHFORK"

#: mu/modes/api/microbit.py:445
msgid "microbit.Image.XMAS"
msgstr "microbit.Image.XMAS"

#: mu/modes/api/microbit.py:446
msgid "microbit.Image.PACMAN"
msgstr "microbit.Image.PACMAN"

#: mu/modes/api/microbit.py:447
msgid "microbit.Image.TARGET"
msgstr "microbit.Image.TARGET"

#: mu/modes/api/microbit.py:448
msgid "microbit.Image.TSHIRT"
msgstr "microbit.Image.TSHIRT"

#: mu/modes/api/microbit.py:449
msgid "microbit.Image.ROLLERSKATE"
msgstr "microbit.Image.ROLLERSKATE"

#: mu/modes/api/microbit.py:450
msgid "microbit.Image.DUCK"
msgstr "microbit.Image.DUCK"

#: mu/modes/api/microbit.py:451
msgid "microbit.Image.HOUSE"
msgstr "microbit.Image.HOUSE"

#: mu/modes/api/microbit.py:452
msgid "microbit.Image.TORTOISE"
msgstr "microbit.Image.TORTOISE"

#: mu/modes/api/microbit.py:453
msgid "microbit.Image.BUTTERFLY"
msgstr "microbit.Image.BUTTERFLY"

#: mu/modes/api/microbit.py:454
msgid "microbit.Image.STICKFIGURE"
msgstr "microbit.Image.STICKFIGURE"

#: mu/modes/api/microbit.py:455
msgid "microbit.Image.GHOST"
msgstr "microbit.Image.GHOST"

#: mu/modes/api/microbit.py:456
msgid "microbit.Image.SWORD"
msgstr "microbit.Image.SWORD"

#: mu/modes/api/microbit.py:457
msgid "microbit.Image.GIRAFFE"
msgstr "microbit.Image.GIRAFFE"

#: mu/modes/api/microbit.py:458
msgid "microbit.Image.SKULL"
msgstr "microbit.Image.SKULL"

#: mu/modes/api/microbit.py:459
msgid "microbit.Image.UMBRELLA"
msgstr "microbit.Image.UMBRELLA"

#: mu/modes/api/microbit.py:460
msgid "microbit.Image.SNAKE"
msgstr "microbit.Image.SNAKE"

#: mu/modes/api/microbit.py:461
msgid "microbit.Image.ALL_CLOCKS"
msgstr "microbit.Image.ALL_CLOCKS"

#: mu/modes/api/microbit.py:462
msgid "microbit.Image.ALL_ARROWS"
msgstr "microbit.Image.ALL_ARROWS"

#: mu/modes/api/microbit.py:465
msgid ""
"microbit.uart.init(baudrate=9600, bits=8, parity=None, stop=1, tx=None, "
"rx=None) \n"
"Use init() to set up communication using the default values. \n"
"Otherwise override the defaults as named arguments."
msgstr ""

#: mu/modes/api/microbit.py:468
msgid ""
"microbit.uart.any() \n"
"If there are incoming characters waiting to be read, any() will return "
"True.\n"
"Otherwise, returns False."
msgstr ""

#: mu/modes/api/microbit.py:471
msgid ""
"microbit.uart.read(n) \n"
"Use read() to read characters.\n"
"Use read(n) to read, at most, 'n' bytes of data."
msgstr ""

#: mu/modes/api/microbit.py:474
msgid ""
"microbit.uart.readall() \n"
"Use readall() to read as much data as possible."
msgstr ""

#: mu/modes/api/microbit.py:477
msgid ""
"microbit.uart.readline() \n"
"Use readline() to read a line that ends with a newline character."
msgstr ""

#: mu/modes/api/microbit.py:480
msgid ""
"microbit.uart.readinto(buf, n) \n"
"Use readinto(buf) to read bytes into the buffer 'buf'.\n"
"Use readinto(buff, n) to read, at most, 'n' number of bytes into 'buf'."
msgstr ""

#: mu/modes/api/microbit.py:483
msgid ""
"microbit.uart.write() \n"
"Use write(buf) to write the bytes in buffer 'buf' to the connected device."
msgstr ""

#: mu/modes/api/microbit.py:487
msgid ""
"microbit.spi.init(baudrate=1000000, bits=8, mode=0, sclk=pin13, mosi=pin15, "
"miso=pin14) \n"
"Set up communication. Override the defaults for baudrate, mode,\n"
"SCLK, MOSI and MISO. The default connections are pin13 for SCLK, pin15 for\n"
"MOSI and pin14 for MISO."
msgstr ""

#: mu/modes/api/microbit.py:490
msgid ""
"microbit.spi.write(buf) \n"
"Use write(buf) to write bytes in buffer 'buf' to the connected device."
msgstr ""

#: mu/modes/api/microbit.py:492
msgid ""
"microbit.spi.read(n) \n"
"Use read(n) to read 'n' bytes of data."
msgstr ""

#: mu/modes/api/microbit.py:494
msgid ""
"microbit.spi.write_readinto(out, in) \n"
"Use write_readinto(out, in) to write the 'out' buffer to the connected "
"device\n"
"and read any response into the 'in' buffer. The length of the buffers "
"should\n"
"be the same. The buffers can be the same object."
msgstr ""

#: mu/modes/api/microbit.py:498
msgid ""
"music.set_tempo(number, bpm) \n"
"Make a beat last a 'number' of ticks long and\n"
"played at 'bpm' beats per minute."
msgstr ""

#: mu/modes/api/microbit.py:501
msgid ""
"music.pitch(freq, length=-1, pin=microbit.pin0, wait=True) \n"
"Make micro:bit play a note at 'freq' frequency for\n"
"'length' milliseconds. E.g. pitch(440, 1000) will play concert 'A' for 1 "
"second.\n"
"If length is a negative number the pitch is played continuously.\n"
"Use the optional pin argument to override the default output for the "
"speaker.\n"
"If wait is False the music will play in the background while the program\n"
"continues."
msgstr ""

#: mu/modes/api/microbit.py:504
msgid ""
"music.play(music, pin=microbit.pin0, wait=True, loop=False) \n"
"Make micro:bit play 'music' list of notes. Try out the built in music to "
"see\n"
"how it works. E.g. music.play(music.PUNCHLINE).\n"
"Use the optional pin argument to override the default output for the "
"speaker.\n"
"If wait is False the music will play in the background while the program\n"
"continues.\n"
"If loop is True, the tune will repeat."
msgstr ""

#: mu/modes/api/microbit.py:507
msgid ""
"music.get_tempo() \n"
"Return the number of ticks in a beat and number of beats per minute."
msgstr ""

#: mu/modes/api/microbit.py:510
msgid ""
"music.stop(pin=microbit.pin0) \n"
"Stops all music playback on the given pin. If no pin is given, pin0 is "
"assumed."
msgstr ""

#: mu/modes/api/microbit.py:513
msgid ""
"music.reset()\n"
"If things go wrong, reset() the music to its default settings."
msgstr ""

#: mu/modes/api/microbit.py:515
msgid "music.DADADADUM"
msgstr "music.DADADADUM"

#: mu/modes/api/microbit.py:516
msgid "music.ENTERTAINER"
msgstr "music.ENTERTAINER"

#: mu/modes/api/microbit.py:517
msgid "music.PRELUDE"
msgstr "music.PRELUDE"

#: mu/modes/api/microbit.py:518
msgid "music.ODE"
msgstr "music.ODE"

#: mu/modes/api/microbit.py:519
msgid "music.NYAN"
msgstr "music.NYAN"

#: mu/modes/api/microbit.py:520
msgid "music.RINGTONE"
msgstr "music.RINGTONE"

#: mu/modes/api/microbit.py:521
msgid "music.FUNK"
msgstr "music.FUNK"

#: mu/modes/api/microbit.py:522
msgid "music.BLUES"
msgstr "music.BLUES"

#: mu/modes/api/microbit.py:523
msgid "music.BIRTHDAY"
msgstr "music.BIRTHDAY"

#: mu/modes/api/microbit.py:524
msgid "music.WEDDING"
msgstr "music.WEDDING"

#: mu/modes/api/microbit.py:525
msgid "music.FUNERAL"
msgstr "music.FUNERAL"

#: mu/modes/api/microbit.py:526
msgid "music.PUNCHLINE"
msgstr "music.PUNCHLINE"

#: mu/modes/api/microbit.py:527
msgid "music.PYTHON"
msgstr "music.PYTHON"

#: mu/modes/api/microbit.py:528
msgid "music.BADDY"
msgstr "music.BADDY"

#: mu/modes/api/microbit.py:529
msgid "music.CHASE"
msgstr "music.CHASE"

#: mu/modes/api/microbit.py:530
msgid "music.BA_DING"
msgstr "music.BA_DING"

#: mu/modes/api/microbit.py:531
msgid "music.WAWAWAWAA"
msgstr "music.WAWAWAWAA"

#: mu/modes/api/microbit.py:532
msgid "music.JUMP_UP"
msgstr "music.JUMP_UP"

#: mu/modes/api/microbit.py:533
msgid "music.JUMP_DOWN"
msgstr "music.JUMP_DOWN"

#: mu/modes/api/microbit.py:534
msgid "music.POWER_UP"
msgstr "music.POWER_UP"

#: mu/modes/api/microbit.py:535
msgid "music.POWER_DOWN"
msgstr "music.POWER_DOWN"

#: mu/modes/api/microbit.py:537
msgid "antigravity"
msgstr ""

#: mu/modes/api/microbit.py:540
msgid ""
"this.authors() \n"
"Use authors() to reveal the names of the people who created this software."
msgstr ""

#: mu/modes/api/microbit.py:544
msgid ""
"love.badaboom()\n"
"Hear my soul speak:\n"
"The very instant that I saw you, did\n"
"My heart fly to your service."
msgstr ""

#: mu/modes/api/microbit.py:548
msgid ""
"neopixel.NeoPixel(pin, n) \n"
"Create a list representing a strip of 'n' neopixels controlled from the\n"
"specified pin (e.g. microbit.pin0).\n"
"Use the resulting object to change each pixel by position (starting from "
"0).\n"
"Individual pixels are given RGB (red, green, blue) values between 0-255 as "
"a\n"
"tupe. For example, (255, 255, 255) is white:\n"
"\n"
"np = neopixel.NeoPixel(microbit.pin0, 8)\n"
"np[0] = (255, 0, 128)\n"
"np.show()"
msgstr ""

#: mu/modes/api/microbit.py:550
msgid ""
"neopixel.NeoPixel.clear() \n"
"Clear all the pixels."
msgstr ""

#: mu/modes/api/microbit.py:552
msgid ""
"neopixel.NeoPixel.show() \n"
"Show the pixels. Must be called for any updates to become visible."
msgstr ""

#: mu/modes/api/microbit.py:556
msgid ""
"radio.on() \n"
"Turns on the radio. This needs to be called since the radio draws power and\n"
"takes up memory that you may otherwise need."
msgstr ""

#: mu/modes/api/microbit.py:558
msgid ""
"radio.off() \n"
"Turns off the radio, thus saving power and memory."
msgstr ""

#: mu/modes/api/microbit.py:560
msgid ""
"radio.config(length=32, queue=3, channel=7, power=0, address=0x75626974, "
"group=0, data_rate=radio.RATE_1MBIT) \n"
"Configures the various settings relating to the radio. The specified "
"default\n"
"values are sensible.\n"
"'length' is the maximum length, in bytes, of a message. It can be up to 251\n"
"bytes long.\n"
"'queue' is the number of messages to store on the message queue.\n"
"'channel' (0-100) defines the channel to which the radio is tuned.\n"
"'address' is an arbitrary 32-bit address that's used to filter packets.\n"
"'group' is an 8-bit value used with 'address' when filtering packets.\n"
"'data_rate' is the throughput speed. It can be one of: radio.RATE_250KbIT,\n"
"radio.RATE_1MbIT (the default) or radio.2MBIT."
msgstr ""

#: mu/modes/api/microbit.py:562
msgid ""
"radio.reset() \n"
"Reset the settings to their default value."
msgstr ""

#: mu/modes/api/microbit.py:563
msgid ""
"radio.send_bytes(message) \n"
"Sends a message containing bytes."
msgstr ""

#: mu/modes/api/microbit.py:565
msgid ""
"radio.receive_bytes() \n"
"Receive the next incoming message from the message queue. Returns 'None' if\n"
"there are no pending messages. Messages are returned as bytes."
msgstr ""

#: mu/modes/api/microbit.py:567
msgid ""
"radio.send(message) \n"
"Send a message string."
msgstr ""

#: mu/modes/api/microbit.py:569
msgid ""
"radio.receive() \n"
"Receive the next incoming message from the message queue as a string. "
"Returns\n"
"'None' if there are no pending messages."
msgstr ""

#: mu/modes/api/microbit.py:571
msgid "radio.RATE_250KBIT"
msgstr ""

#: mu/modes/api/microbit.py:572
msgid "radio.RATE_1MBIT"
msgstr ""

#: mu/modes/api/microbit.py:573
msgid "radio.RATE_2MBIT"
msgstr ""

#: mu/modes/api/microbit.py:576
msgid ""
"audio.play(source, wait=True, pins=(pin0, pin1)) \n"
"Play the source to completion where 'source' is an iterable, each element "
"of\n"
"which must be an AudioFrame instance."
msgstr ""

#: mu/modes/api/microbit.py:579
msgid ""
"audio.AudioFrame()() \n"
"Represents a list of 32 samples each of which is a signed byte. It takes "
"just\n"
"over 4ms to play a single frame."
msgstr ""

#: mu/modes/api/microbit.py:583
msgid ""
"speech.translate(words) \n"
"Return a string containing the phonemes for the English words in the string\n"
"'words'."
msgstr ""

#: mu/modes/api/microbit.py:586
msgid ""
"speech.say(words, pitch=64, speed=72, mouth=128, throat=128) \n"
"Say the English words in the string 'words'. Override the optional pitch,\n"
"speed, mouth and throat settings to change the tone of voice."
msgstr ""

#: mu/modes/api/microbit.py:589
msgid ""
"speech.pronounce(phonemes, pitch=64, speed=72, mouth=128, throat=128) \n"
"Pronounce the phonemes in the string 'phonemes'. Override the optional "
"pitch,\n"
"speed, mouth and throat settings to change the tone of voice."
msgstr ""

#: mu/modes/api/microbit.py:592
msgid ""
"speech.sing(song, pitch=64, speed=72, mouth=128, throat=128) \n"
"Sing the phonemes in the string 'song'. Add pitch information to a phoneme\n"
"with a hash followed by a number between 1-255 like this: '#112DOWWWWWWWW'.\n"
"Override the optional pitch, speed, mouth and throat settings to change the\n"
"tone of voice."
msgstr ""

#: mu/modes/api/esp.py:213 mu/modes/api/microbit.py:595
msgid ""
"math.sqrt(x) \n"
"Return the square root of 'x'."
msgstr ""

#: mu/modes/api/esp.py:214 mu/modes/api/microbit.py:596
msgid ""
"math.pow(x, y) \n"
"Return 'x' raised to the power 'y'."
msgstr ""

#: mu/modes/api/esp.py:215 mu/modes/api/microbit.py:597
msgid ""
"math.exp(x) \n"
"Return math.e**'x'."
msgstr ""

#: mu/modes/api/esp.py:217 mu/modes/api/microbit.py:599
msgid ""
"math.log(x, base=math.e) \n"
"With one argument, return the natural logarithm of 'x' (to base e).\n"
"With two arguments, return the logarithm of 'x' to the given 'base'."
msgstr ""

#: mu/modes/api/esp.py:219 mu/modes/api/microbit.py:601
msgid ""
"math.cos(x) \n"
"Return the cosine of 'x' radians."
msgstr ""

#: mu/modes/api/esp.py:220 mu/modes/api/microbit.py:602
msgid ""
"math.sin(x) \n"
"Return the sine of 'x' radians."
msgstr ""

#: mu/modes/api/esp.py:221 mu/modes/api/microbit.py:603
msgid ""
"math.tan(x) \n"
"Return the tangent of 'x' radians."
msgstr ""

#: mu/modes/api/esp.py:222 mu/modes/api/microbit.py:604
msgid ""
"math.acos(x) \n"
"Return the arc cosine of 'x', in radians."
msgstr ""

#: mu/modes/api/esp.py:223 mu/modes/api/microbit.py:605
msgid ""
"math.asin(x) \n"
"Return the arc sine of 'x', in radians."
msgstr ""

#: mu/modes/api/esp.py:224 mu/modes/api/microbit.py:606
msgid ""
"math.atan(x) \n"
"Return the arc tangent of 'x', in radians."
msgstr ""

#: mu/modes/api/esp.py:225 mu/modes/api/microbit.py:607
msgid ""
"math.atan2(x, y) \n"
"Return atan(y / x), in radians."
msgstr ""

#: mu/modes/api/esp.py:227 mu/modes/api/microbit.py:609
msgid ""
"math.ceil(x) \n"
"Return the ceiling of 'x', the smallest integer greater than or equal to 'x'."
msgstr ""

#: mu/modes/api/esp.py:230 mu/modes/api/microbit.py:612
msgid ""
"math.copysign(x, y) \n"
"Return a float with the magnitude (absolute value) of 'x' but the sign of "
"'y'. "
msgstr ""

#: mu/modes/api/esp.py:232 mu/modes/api/microbit.py:614
msgid ""
"math.fabs(x) \n"
"Return the absolute value of 'x'."
msgstr ""

#: mu/modes/api/esp.py:234 mu/modes/api/microbit.py:616
msgid ""
"math.floor(x) \n"
"Return the floor of 'x', the largest integer less than or equal to 'x'."
msgstr ""

#: mu/modes/api/esp.py:236 mu/modes/api/microbit.py:618
msgid ""
"math.fmod(x, y) \n"
"Return 'x' modulo 'y'."
msgstr ""

#: mu/modes/api/esp.py:238 mu/modes/api/microbit.py:620
msgid ""
"math.frexp(x) \n"
"Return the mantissa and exponent of 'x' as the pair (m, e). "
msgstr ""

#: mu/modes/api/esp.py:240 mu/modes/api/microbit.py:622
msgid ""
"math.ldexp(x, i) \n"
"Return 'x' * (2**'i')."
msgstr ""

#: mu/modes/api/esp.py:242 mu/modes/api/microbit.py:624
msgid ""
"math.modf(x) \n"
"Return the fractional and integer parts of x.\n"
"Both results carry the sign of x and are floats."
msgstr ""

#: mu/modes/api/esp.py:245 mu/modes/api/microbit.py:627
msgid ""
"math.isfinite(x) \n"
"Return True if 'x' is neither an infinity nor a NaN, and False otherwise."
msgstr ""

#: mu/modes/api/esp.py:248 mu/modes/api/microbit.py:630
msgid ""
"math.isinf(x) \n"
"Return True if 'x' is a positive or negative infinity, and False otherwise."
msgstr ""

#: mu/modes/api/esp.py:251 mu/modes/api/microbit.py:633
msgid ""
"math.isnan(x) \n"
"Return True if 'x' is a NaN (not a number), and False otherwise."
msgstr ""

#: mu/modes/api/esp.py:254 mu/modes/api/microbit.py:636
msgid ""
"math.trunc(x) \n"
"Return the Real value 'x' truncated to an Integral (usually an integer)."
msgstr ""

#: mu/modes/api/esp.py:256 mu/modes/api/microbit.py:638
msgid ""
"math.radians(x) \n"
"Convert angle 'x' from degrees to radians."
msgstr ""

#: mu/modes/api/esp.py:257 mu/modes/api/microbit.py:639
msgid ""
"math.degrees(x) \n"
"Convert angle 'x' from radians to degrees."
msgstr ""

#: mu/modes/api/pi.py:24
msgid ""
"gpiozero.AnalogInputDevice(*args, **kwargs) \n"
"Represents an analog input device connected to SPI (serial interface).\n"
"\n"
"Typical analog input devices are `analog to digital converters`_ (ADCs).\n"
"Several classes are provided for specific ADC chips, including\n"
":class:`MCP3004`, :class:`MCP3008`, :class:`MCP3204`, and :class:`MCP3208`.\n"
"\n"
"The following code demonstrates reading the first channel of an MCP3008\n"
"chip attached to the Pi's SPI pins::\n"
"\n"
"    from gpiozero import MCP3008\n"
"\n"
"    pot = MCP3008(0)\n"
"    print(pot.value)\n"
"\n"
"The :attr:`value` attribute is normalized such that its value is always\n"
"between 0.0 and 1.0 (or in special cases, such as differential sampling,\n"
"-1 to +1). Hence, you can use an analog input to control the brightness of\n"
"a :class:`PWMLED` like so::\n"
"\n"
"    from gpiozero import MCP3008, PWMLED\n"
"\n"
"    pot = MCP3008(0)\n"
"    led = PWMLED(17)\n"
"    led.source = pot.values\n"
"\n"
".. _analog to digital converters: https://en.wikipedia.org/wiki/Analog-to-"
"digital_converter"
msgstr ""

#: mu/modes/api/pi.py:27
msgid ""
"gpiozero.AngularServo(*args, **kwargs) \n"
"Extends :class:`Servo` and represents a rotational PWM-controlled servo\n"
"motor which can be set to particular angles (assuming valid minimum and\n"
"maximum angles are provided to the constructor).\n"
"\n"
"Connect a power source (e.g. a battery pack or the 5V pin) to the power\n"
"cable of the servo (this is typically colored red); connect the ground\n"
"cable of the servo (typically colored black or brown) to the negative of\n"
"your battery pack, or a GND pin; connect the final cable (typically colored\n"
"white or orange) to the GPIO pin you wish to use for controlling the servo.\n"
"\n"
"Next, calibrate the angles that the servo can rotate to. In an interactive\n"
"Python session, construct a :class:`Servo` instance. The servo should move\n"
"to its mid-point by default. Set the servo to its minimum value, and\n"
"measure the angle from the mid-point. Set the servo to its maximum value,\n"
"and again measure the angle::\n"
"\n"
"    >>> from gpiozero import Servo\n"
"    >>> s = Servo(17)\n"
"    >>> s.min() # measure the angle\n"
"    >>> s.max() # measure the angle\n"
"\n"
"You should now be able to construct an :class:`AngularServo` instance\n"
"with the correct bounds::\n"
"\n"
"    >>> from gpiozero import AngularServo\n"
"    >>> s = AngularServo(17, min_angle=-42, max_angle=44)\n"
"    >>> s.angle = 0.0\n"
"    >>> s.angle\n"
"    0.0\n"
"    >>> s.angle = 15\n"
"    >>> s.angle\n"
"    15.0\n"
"\n"
".. note::\n"
"\n"
"    You can set *min_angle* greater than *max_angle* if you wish to reverse\n"
"    the sense of the angles (e.g. ``min_angle=45, max_angle=-45``). This\n"
"    can be useful with servos that rotate in the opposite direction to your\n"
"    expectations of minimum and maximum.\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the device is attached to. See :ref:`pin_numbering`\n"
"    for valid pin numbers.\n"
"\n"
":param float initial_angle:\n"
"    Sets the servo's initial angle to the specified value. The default is\n"
"    0. The value specified must be between *min_angle* and *max_angle*\n"
"    inclusive. ``None`` means to start the servo un-controlled (see\n"
"    :attr:`value`).\n"
"\n"
":param float min_angle:\n"
"    Sets the minimum angle that the servo can rotate to. This defaults to\n"
"    -90, but should be set to whatever you measure from your servo during\n"
"    calibration.\n"
"\n"
":param float max_angle:\n"
"    Sets the maximum angle that the servo can rotate to. This defaults to\n"
"    90, but should be set to whatever you measure from your servo during\n"
"    calibration.\n"
"\n"
":param float min_pulse_width:\n"
"    The pulse width corresponding to the servo's minimum position. This\n"
"    defaults to 1ms.\n"
"\n"
":param float max_pulse_width:\n"
"    The pulse width corresponding to the servo's maximum position. This\n"
"    defaults to 2ms.\n"
"\n"
":param float frame_width:\n"
"    The length of time between servo control pulses measured in seconds.\n"
"    This defaults to 20ms which is a common value for servos."
msgstr ""

#: mu/modes/api/pi.py:30
msgid ""
"gpiozero.BadEventHandler() \n"
"Error raised when an event handler with an incompatible prototype is "
"specified"
msgstr ""

#: mu/modes/api/pi.py:33
msgid ""
"gpiozero.BadQueueLen() \n"
"Error raised when non-positive queue length is specified"
msgstr ""

#: mu/modes/api/pi.py:36
msgid ""
"gpiozero.BadWaitTime() \n"
"Error raised when an invalid wait time is specified"
msgstr ""

#: mu/modes/api/pi.py:39
msgid ""
"gpiozero.Button(*args, **kwargs) \n"
"Extends :class:`DigitalInputDevice` and represents a simple push button\n"
"or switch.\n"
"\n"
"Connect one side of the button to a ground pin, and the other to any GPIO\n"
"pin. Alternatively, connect one side of the button to the 3V3 pin, and the\n"
"other to any GPIO pin, then set *pull_up* to ``False`` in the\n"
":class:`Button` constructor.\n"
"\n"
"The following example will print a line of text when the button is pushed::\n"
"\n"
"    from gpiozero import Button\n"
"\n"
"    button = Button(4)\n"
"    button.wait_for_press()\n"
"    print(\"The button was pressed!\")\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the button is attached to. See :ref:`pin_numbering`\n"
"    for valid pin numbers.\n"
"\n"
":param bool pull_up:\n"
"    If ``True`` (the default), the GPIO pin will be pulled high by default.\n"
"    In this case, connect the other side of the button to ground. If\n"
"    ``False``, the GPIO pin will be pulled low by default. In this case,\n"
"    connect the other side of the button to 3V3.\n"
"\n"
":param float bounce_time:\n"
"    If ``None`` (the default), no software bounce compensation will be\n"
"    performed. Otherwise, this is the length of time (in seconds) that the\n"
"    component will ignore changes in state after an initial change.\n"
"\n"
":param float hold_time:\n"
"    The length of time (in seconds) to wait after the button is pushed,\n"
"    until executing the :attr:`when_held` handler. Defaults to ``1``.\n"
"\n"
":param bool hold_repeat:\n"
"    If ``True``, the :attr:`when_held` handler will be repeatedly executed\n"
"    as long as the device remains active, every *hold_time* seconds. If\n"
"    ``False`` (the default) the :attr:`when_held` handler will be only be\n"
"    executed once per hold."
msgstr ""

#: mu/modes/api/pi.py:42
msgid ""
"gpiozero.ButtonBoard(*args, **kwargs) \n"
"Extends :class:`CompositeDevice` and represents a generic button board or\n"
"collection of buttons.\n"
"\n"
":param int \\*pins:\n"
"    Specify the GPIO pins that the buttons of the board are attached to.\n"
"    You can designate as many pins as necessary.\n"
"\n"
":param bool pull_up:\n"
"    If ``True`` (the default), the GPIO pins will be pulled high by\n"
"    default. In this case, connect the other side of the buttons to\n"
"    ground. If ``False``, the GPIO pins will be pulled low by default. In\n"
"    this case, connect the other side of the buttons to 3V3. This\n"
"    parameter can only be specified as a keyword parameter.\n"
"\n"
":param float bounce_time:\n"
"    If ``None`` (the default), no software bounce compensation will be\n"
"    performed. Otherwise, this is the length of time (in seconds) that the\n"
"    buttons will ignore changes in state after an initial change. This\n"
"    parameter can only be specified as a keyword parameter.\n"
"\n"
":param float hold_time:\n"
"    The length of time (in seconds) to wait after any button is pushed,\n"
"    until executing the :attr:`when_held` handler. Defaults to ``1``. This\n"
"    parameter can only be specified as a keyword parameter.\n"
"\n"
":param bool hold_repeat:\n"
"    If ``True``, the :attr:`when_held` handler will be repeatedly executed\n"
"    as long as any buttons remain held, every *hold_time* seconds. If\n"
"    ``False`` (the default) the :attr:`when_held` handler will be only be\n"
"    executed once per hold. This parameter can only be specified as a\n"
"    keyword parameter.\n"
"\n"
":param \\*\\*named_pins:\n"
"    Specify GPIO pins that buttons of the board are attached to,\n"
"    associating each button with a property name. You can designate as\n"
"    many pins as necessary and use any names, provided they're not already\n"
"    in use by something else."
msgstr ""

#: mu/modes/api/pi.py:45
msgid ""
"gpiozero.Buzzer(*args, **kwargs) \n"
"Extends :class:`DigitalOutputDevice` and represents a digital buzzer\n"
"component.\n"
"\n"
"Connect the cathode (negative pin) of the buzzer to a ground pin; connect\n"
"the other side to any GPIO pin.\n"
"\n"
"The following example will sound the buzzer::\n"
"\n"
"    from gpiozero import Buzzer\n"
"\n"
"    bz = Buzzer(3)\n"
"    bz.on()\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the buzzer is attached to. See :ref:`pin_numbering`\n"
"    for valid pin numbers.\n"
"\n"
":param bool active_high:\n"
"    If ``True`` (the default), the buzzer will operate normally with the\n"
"    circuit described above. If ``False`` you should wire the cathode to\n"
"    the GPIO pin, and the anode to a 3V3 pin.\n"
"\n"
":param bool initial_value:\n"
"    If ``False`` (the default), the buzzer will be silent initially.  If\n"
"    ``None``, the buzzer will be left in whatever state the pin is found in\n"
"    when configured for output (warning: this can be on).  If ``True``, the\n"
"    buzzer will be switched on initially."
msgstr ""

#: mu/modes/api/pi.py:48
msgid ""
"gpiozero.CPUTemperature(*args, **kwargs) \n"
"Extends :class:`InternalDevice` to provide a device which is active when\n"
"the CPU temperature exceeds the *threshold* value.\n"
"\n"
"The following example plots the CPU's temperature on an LED bar graph::\n"
"\n"
"    from gpiozero import LEDBarGraph, CPUTemperature\n"
"    from signal import pause\n"
"\n"
"    # Use minimums and maximums that are closer to \"normal\" usage so the\n"
"    # bar graph is a bit more \"lively\"\n"
"    temp = CPUTemperature(min_temp=50, max_temp=90)\n"
"    graph = LEDBarGraph(5, 6, 13, 19, 25, pwm=True)\n"
"    graph.source = temp.values\n"
"    pause()\n"
"\n"
":param str sensor_file:\n"
"    The file from which to read the temperature. This defaults to the\n"
"    sysfs file :file:`/sys/class/thermal/thermal_zone0/temp`. Whatever\n"
"    file is specified is expected to contain a single line containing the\n"
"    temperature in milli-degrees celsius.\n"
"\n"
":param float min_temp:\n"
"    The temperature at which :attr:`value` will read 0.0. This defaults to\n"
"    0.0.\n"
"\n"
":param float max_temp:\n"
"    The temperature at which :attr:`value` will read 1.0. This defaults to\n"
"    100.0.\n"
"\n"
":param float threshold:\n"
"    The temperature above which the device will be considered \"active\".\n"
"    This defaults to 80.0."
msgstr ""

#: mu/modes/api/pi.py:51
msgid ""
"gpiozero.CamJamKitRobot(*args, **kwargs) \n"
"Extends :class:`Robot` for the `CamJam #3 EduKit`_ robot controller.\n"
"\n"
"The CamJam robot controller pins are fixed and therefore there's no need\n"
"to specify them when constructing this class. The following example drives\n"
"the robot forward::\n"
"\n"
"    from gpiozero import CamJamKitRobot\n"
"\n"
"    robot = CamJamKitRobot()\n"
"    robot.forward()\n"
"\n"
".. _CamJam #3 EduKit: http://camjam.me/?page_id=1035"
msgstr ""

#: mu/modes/api/pi.py:54
msgid ""
"gpiozero.CompositeDevice(*args, **kwargs) \n"
"Extends :class:`Device`. Represents a device composed of multiple devices\n"
"like simple HATs, H-bridge motor controllers, robots composed of multiple\n"
"motors, etc.\n"
"\n"
"The constructor accepts subordinate devices as positional or keyword\n"
"arguments.  Positional arguments form unnamed devices accessed via the\n"
":attr:`all` attribute, while keyword arguments are added to the device\n"
"as named (read-only) attributes.\n"
"\n"
":param list _order:\n"
"    If specified, this is the order of named items specified by keyword\n"
"    arguments (to ensure that the :attr:`value` tuple is constructed with a\n"
"    specific order). All keyword arguments *must* be included in the\n"
"    collection. If omitted, an alphabetically sorted order will be selected\n"
"    for keyword arguments."
msgstr ""

#: mu/modes/api/pi.py:57
msgid ""
"gpiozero.CompositeDeviceBadDevice() \n"
"Error raised when a composite device is constructed with an object that "
"doesn't inherit from :class:`Device`"
msgstr ""

#: mu/modes/api/pi.py:60
msgid ""
"gpiozero.CompositeDeviceBadName() \n"
"Error raised when a composite device is constructed with a reserved name"
msgstr ""

#: mu/modes/api/pi.py:63
msgid ""
"gpiozero.CompositeDeviceBadOrder() \n"
"Error raised when a composite device is constructed with an incomplete order"
msgstr ""

#: mu/modes/api/pi.py:66
msgid ""
"gpiozero.CompositeDeviceError() \n"
"Base class for errors specific to the CompositeDevice hierarchy"
msgstr ""

#: mu/modes/api/pi.py:69
msgid ""
"gpiozero.CompositeOutputDevice(*args, **kwargs) \n"
"Extends :class:`CompositeDevice` with :meth:`on`, :meth:`off`, and\n"
":meth:`toggle` methods for controlling subordinate output devices.  Also\n"
"extends :attr:`value` to be writeable.\n"
"\n"
":param list _order:\n"
"    If specified, this is the order of named items specified by keyword\n"
"    arguments (to ensure that the :attr:`value` tuple is constructed with a\n"
"    specific order). All keyword arguments *must* be included in the\n"
"    collection. If omitted, an alphabetically sorted order will be selected\n"
"    for keyword arguments."
msgstr ""

#: mu/modes/api/pi.py:72
msgid ""
"gpiozero.Device(*args, **kwargs) \n"
"Represents a single device of any type; GPIO-based, SPI-based, I2C-based,\n"
"etc. This is the base class of the device hierarchy. It defines the\n"
"basic services applicable to all devices (specifically thhe :attr:"
"`is_active`\n"
"property, the :attr:`value` property, and the :meth:`close` method)."
msgstr ""

#: mu/modes/api/pi.py:75
msgid ""
"gpiozero.DeviceClosed() \n"
"Error raised when an operation is attempted on a closed device"
msgstr ""

#: mu/modes/api/pi.py:78
msgid ""
"gpiozero.DigitalInputDevice(*args, **kwargs) \n"
"Represents a generic input device with typical on/off behaviour.\n"
"\n"
"This class extends :class:`InputDevice` with machinery to fire the active\n"
"and inactive events for devices that operate in a typical digital manner:\n"
"straight forward on / off states with (reasonably) clean transitions\n"
"between the two.\n"
"\n"
":param float bounce_time:\n"
"    Specifies the length of time (in seconds) that the component will\n"
"    ignore changes in state after an initial change. This defaults to\n"
"    ``None`` which indicates that no bounce compensation will be performed."
msgstr ""

#: mu/modes/api/pi.py:81
msgid ""
"gpiozero.DigitalOutputDevice(*args, **kwargs) \n"
"Represents a generic output device with typical on/off behaviour.\n"
"\n"
"This class extends :class:`OutputDevice` with a :meth:`blink` method which\n"
"uses an optional background thread to handle toggling the device state\n"
"without further interaction."
msgstr ""

#: mu/modes/api/pi.py:84
msgid ""
"gpiozero.DistanceSensor(*args, **kwargs) \n"
"Extends :class:`SmoothedInputDevice` and represents an HC-SR04 ultrasonic\n"
"distance sensor, as found in the `CamJam #3 EduKit`_.\n"
"\n"
"The distance sensor requires two GPIO pins: one for the *trigger* (marked\n"
"TRIG on the sensor) and another for the *echo* (marked ECHO on the sensor).\n"
"However, a voltage divider is required to ensure the 5V from the ECHO pin\n"
"doesn't damage the Pi. Wire your sensor according to the following\n"
"instructions:\n"
"\n"
"1. Connect the GND pin of the sensor to a ground pin on the Pi.\n"
"\n"
"2. Connect the TRIG pin of the sensor a GPIO pin.\n"
"\n"
"3. Connect a 330Ω resistor from the ECHO pin of the sensor to a different\n"
"   GPIO pin.\n"
"\n"
"4. Connect a 470Ω resistor from ground to the ECHO GPIO pin. This forms\n"
"   the required voltage divider.\n"
"\n"
"5. Finally, connect the VCC pin of the sensor to a 5V pin on the Pi.\n"
"\n"
"The following code will periodically report the distance measured by the\n"
"sensor in cm assuming the TRIG pin is connected to GPIO17, and the ECHO\n"
"pin to GPIO18::\n"
"\n"
"    from gpiozero import DistanceSensor\n"
"    from time import sleep\n"
"\n"
"    sensor = DistanceSensor(echo=18, trigger=17)\n"
"    while True:\n"
"        print('Distance: ', sensor.distance * 100)\n"
"        sleep(1)\n"
"\n"
":param int echo:\n"
"    The GPIO pin which the ECHO pin is attached to. See\n"
"    :ref:`pin_numbering` for valid pin numbers.\n"
"\n"
":param int trigger:\n"
"    The GPIO pin which the TRIG pin is attached to. See\n"
"    :ref:`pin_numbering` for valid pin numbers.\n"
"\n"
":param int queue_len:\n"
"    The length of the queue used to store values read from the sensor.\n"
"    This defaults to 30.\n"
"\n"
":param float max_distance:\n"
"    The :attr:`value` attribute reports a normalized value between 0 (too\n"
"    close to measure) and 1 (maximum distance). This parameter specifies\n"
"    the maximum distance expected in meters. This defaults to 1.\n"
"\n"
":param float threshold_distance:\n"
"    Defaults to 0.3. This is the distance (in meters) that will trigger the\n"
"    ``in_range`` and ``out_of_range`` events when crossed.\n"
"\n"
":param bool partial:\n"
"    When ``False`` (the default), the object will not return a value for\n"
"    :attr:`~SmoothedInputDevice.is_active` until the internal queue has\n"
"    filled with values.  Only set this to ``True`` if you require values\n"
"    immediately after object construction.\n"
"\n"
".. _CamJam #3 EduKit: http://camjam.me/?page_id=1035"
msgstr ""

#: mu/modes/api/pi.py:87
msgid ""
"gpiozero.Energenie(*args, **kwargs) \n"
"Extends :class:`Device` to represent an `Energenie socket`_ controller.\n"
"\n"
"This class is constructed with a socket number and an optional initial\n"
"state (defaults to ``False``, meaning off). Instances of this class can\n"
"be used to switch peripherals on and off. For example::\n"
"\n"
"    from gpiozero import Energenie\n"
"\n"
"    lamp = Energenie(1)\n"
"    lamp.on()\n"
"\n"
":param int socket:\n"
"    Which socket this instance should control. This is an integer number\n"
"    between 1 and 4.\n"
"\n"
":param bool initial_value:\n"
"    The initial state of the socket. As Energenie sockets provide no\n"
"    means of reading their state, you must provide an initial state for\n"
"    the socket, which will be set upon construction. This defaults to\n"
"    ``False`` which will switch the socket off.\n"
"\n"
".. _Energenie socket: https://energenie4u.co.uk/index.php/catalogue/product/"
"ENER002-2PI"
msgstr ""

#: mu/modes/api/pi.py:90
msgid ""
"gpiozero.EnergenieBadSocket() \n"
"Error raised when an invalid socket number is passed to :class:`Energenie`"
msgstr ""

#: mu/modes/api/pi.py:93
msgid ""
"gpiozero.EnergenieSocketMissing() \n"
"Error raised when socket number is not specified"
msgstr ""

#: mu/modes/api/pi.py:96
msgid ""
"gpiozero.EventsMixin(*args, **kwargs) \n"
"Adds edge-detected :meth:`when_activated` and :meth:`when_deactivated`\n"
"events to a device based on changes to the :attr:`~Device.is_active`\n"
"property common to all devices. Also adds :meth:`wait_for_active` and\n"
":meth:`wait_for_inactive` methods for level-waiting.\n"
"\n"
".. note::\n"
"\n"
"    Note that this mixin provides no means of actually firing its events;\n"
"    call :meth:`_fire_events` in sub-classes when device state changes to\n"
"    trigger the events. This should also be called once at the end of\n"
"    initialization to set initial states."
msgstr ""

#: mu/modes/api/pi.py:99
msgid ""
"gpiozero.FishDish(*args, **kwargs) \n"
"Extends :class:`TrafficLightsBuzzer` for the `Pi Supply FishDish`_: traffic\n"
"light LEDs, a button and a buzzer.\n"
"\n"
"The FishDish pins are fixed and therefore there's no need to specify them\n"
"when constructing this class. The following example waits for the button\n"
"to be pressed on the FishDish, then turns on all the LEDs::\n"
"\n"
"    from gpiozero import FishDish\n"
"\n"
"    fish = FishDish()\n"
"    fish.button.wait_for_press()\n"
"    fish.lights.on()\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances to represent each\n"
"    LED. If ``False`` (the default), construct regular :class:`LED`\n"
"    instances.\n"
"\n"
".. _Pi Supply FishDish: https://www.pi-supply.com/product/fish-dish-"
"raspberry-pi-led-buzzer-board/"
msgstr ""

#: mu/modes/api/pi.py:102
msgid ""
"gpiozero.GPIODevice(*args, **kwargs) \n"
"Extends :class:`Device`. Represents a generic GPIO device and provides\n"
"the services common to all single-pin GPIO devices (like ensuring two\n"
"GPIO devices do no share a :attr:`pin`).\n"
"\n"
":param int pin:\n"
"    The GPIO pin (in BCM numbering) that the device is connected to. If\n"
"    this is ``None``, :exc:`GPIOPinMissing` will be raised. If the pin is\n"
"    already in use by another device, :exc:`GPIOPinInUse` will be raised."
msgstr ""

#: mu/modes/api/pi.py:105
msgid ""
"gpiozero.GPIODeviceClosed() \n"
"Deprecated descendent of :exc:`DeviceClosed`"
msgstr ""

#: mu/modes/api/pi.py:108
msgid ""
"gpiozero.GPIODeviceError() \n"
"Base class for errors specific to the GPIODevice hierarchy"
msgstr ""

#: mu/modes/api/pi.py:111
msgid ""
"gpiozero.GPIOPinInUse() \n"
"Error raised when attempting to use a pin already in use by another device"
msgstr ""

#: mu/modes/api/pi.py:114
msgid ""
"gpiozero.GPIOPinMissing() \n"
"Error raised when a pin number is not specified"
msgstr ""

#: mu/modes/api/pi.py:116
msgid ""
"gpiozero.GPIOZeroError() \n"
"Base class for all exceptions in GPIO Zero"
msgstr ""

#: mu/modes/api/pi.py:117
msgid ""
"gpiozero.GPIOZeroWarning() \n"
"Base class for all warnings in GPIO Zero"
msgstr ""

#: mu/modes/api/pi.py:119
msgid ""
"gpiozero.HoldMixin(*args, **kwargs) \n"
"Extends :class:`EventsMixin` to add the :attr:`when_held` event and the\n"
"machinery to fire that event repeatedly (when :attr:`hold_repeat` is\n"
"``True``) at internals defined by :attr:`hold_time`."
msgstr ""

#: mu/modes/api/pi.py:122
msgid ""
"gpiozero.InputDevice(*args, **kwargs) \n"
"Represents a generic GPIO input device.\n"
"\n"
"This class extends :class:`GPIODevice` to add facilities common to GPIO\n"
"input devices.  The constructor adds the optional *pull_up* parameter to\n"
"specify how the pin should be pulled by the internal resistors. The\n"
":attr:`~GPIODevice.is_active` property is adjusted accordingly so that\n"
"``True`` still means active regardless of the :attr:`pull_up` setting.\n"
"\n"
":param int pin:\n"
"    The GPIO pin (in Broadcom numbering) that the device is connected to.\n"
"    If this is ``None`` a :exc:`GPIODeviceError` will be raised.\n"
"\n"
":param bool pull_up:\n"
"    If ``True``, the pin will be pulled high with an internal resistor. If\n"
"    ``False`` (the default), the pin will be pulled low."
msgstr ""

#: mu/modes/api/pi.py:125
msgid ""
"gpiozero.InputDeviceError() \n"
"Base class for errors specific to the InputDevice hierarchy"
msgstr ""

#: mu/modes/api/pi.py:128
msgid ""
"gpiozero.InternalDevice(*args, **kwargs) \n"
"Extends :class:`Device` to provide a basis for devices which have no\n"
"specific hardware representation. These are effectively pseudo-devices and\n"
"usually represent operating system services like the internal clock, file\n"
"systems or network facilities."
msgstr ""

#: mu/modes/api/pi.py:131
msgid ""
"gpiozero.LED(*args, **kwargs) \n"
"Extends :class:`DigitalOutputDevice` and represents a light emitting diode\n"
"(LED).\n"
"\n"
"Connect the cathode (short leg, flat side) of the LED to a ground pin;\n"
"connect the anode (longer leg) to a limiting resistor; connect the other\n"
"side of the limiting resistor to a GPIO pin (the limiting resistor can be\n"
"placed either side of the LED).\n"
"\n"
"The following example will light the LED::\n"
"\n"
"    from gpiozero import LED\n"
"\n"
"    led = LED(17)\n"
"    led.on()\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the LED is attached to. See :ref:`pin_numbering` for\n"
"    valid pin numbers.\n"
"\n"
":param bool active_high:\n"
"    If ``True`` (the default), the LED will operate normally with the\n"
"    circuit described above. If ``False`` you should wire the cathode to\n"
"    the GPIO pin, and the anode to a 3V3 pin (via a limiting resistor).\n"
"\n"
":param bool initial_value:\n"
"    If ``False`` (the default), the LED will be off initially.  If\n"
"    ``None``, the LED will be left in whatever state the pin is found in\n"
"    when configured for output (warning: this can be on).  If ``True``, the\n"
"    LED will be switched on initially."
msgstr ""

#: mu/modes/api/pi.py:134
msgid ""
"gpiozero.LEDBarGraph(*args, **kwargs) \n"
"Extends :class:`LEDCollection` to control a line of LEDs representing a\n"
"bar graph. Positive values (0 to 1) light the LEDs from first to last.\n"
"Negative values (-1 to 0) light the LEDs from last to first.\n"
"\n"
"The following example demonstrates turning on the first two and last two\n"
"LEDs in a board containing five LEDs attached to GPIOs 2 through 6::\n"
"\n"
"    from gpiozero import LEDBarGraph\n"
"    from time import sleep\n"
"\n"
"    graph = LEDBarGraph(2, 3, 4, 5, 6)\n"
"    graph.value = 2/5  # Light the first two LEDs only\n"
"    sleep(1)\n"
"    graph.value = -2/5 # Light the last two LEDs only\n"
"    sleep(1)\n"
"    graph.off()\n"
"\n"
"As with other output devices, :attr:`source` and :attr:`values` are\n"
"supported::\n"
"\n"
"    from gpiozero import LEDBarGraph, MCP3008\n"
"    from signal import pause\n"
"\n"
"    graph = LEDBarGraph(2, 3, 4, 5, 6, pwm=True)\n"
"    pot = MCP3008(channel=0)\n"
"    graph.source = pot.values\n"
"    pause()\n"
"\n"
":param int \\*pins:\n"
"    Specify the GPIO pins that the LEDs of the bar graph are attached to.\n"
"    You can designate as many pins as necessary.\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances for each pin. If\n"
"    ``False`` (the default), construct regular :class:`LED` instances. This\n"
"    parameter can only be specified as a keyword parameter.\n"
"\n"
":param bool active_high:\n"
"    If ``True`` (the default), the :meth:`on` method will set all the\n"
"    associated pins to HIGH. If ``False``, the :meth:`on` method will set\n"
"    all pins to LOW (the :meth:`off` method always does the opposite). This\n"
"    parameter can only be specified as a keyword parameter.\n"
"\n"
":param float initial_value:\n"
"    The initial :attr:`value` of the graph given as a float between -1 and\n"
"    +1.  Defaults to ``0.0``. This parameter can only be specified as a\n"
"    keyword parameter."
msgstr ""

#: mu/modes/api/pi.py:137
msgid ""
"gpiozero.LEDBoard(*args, **kwargs) \n"
"Extends :class:`LEDCollection` and represents a generic LED board or\n"
"collection of LEDs.\n"
"\n"
"The following example turns on all the LEDs on a board containing 5 LEDs\n"
"attached to GPIO pins 2 through 6::\n"
"\n"
"    from gpiozero import LEDBoard\n"
"\n"
"    leds = LEDBoard(2, 3, 4, 5, 6)\n"
"    leds.on()\n"
"\n"
":param int \\*pins:\n"
"    Specify the GPIO pins that the LEDs of the board are attached to. You\n"
"    can designate as many pins as necessary. You can also specify\n"
"    :class:`LEDBoard` instances to create trees of LEDs.\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances for each pin. If\n"
"    ``False`` (the default), construct regular :class:`LED` instances. This\n"
"    parameter can only be specified as a keyword parameter.\n"
"\n"
":param bool active_high:\n"
"    If ``True`` (the default), the :meth:`on` method will set all the\n"
"    associated pins to HIGH. If ``False``, the :meth:`on` method will set\n"
"    all pins to LOW (the :meth:`off` method always does the opposite). This\n"
"    parameter can only be specified as a keyword parameter.\n"
"\n"
":param bool initial_value:\n"
"    If ``False`` (the default), all LEDs will be off initially. If\n"
"    ``None``, each device will be left in whatever state the pin is found\n"
"    in when configured for output (warning: this can be on). If ``True``,\n"
"    the device will be switched on initially. This parameter can only be\n"
"    specified as a keyword parameter.\n"
"\n"
":param \\*\\*named_pins:\n"
"    Specify GPIO pins that LEDs of the board are attached to, associating\n"
"    each LED with a property name. You can designate as many pins as\n"
"    necessary and use any names, provided they're not already in use by\n"
"    something else. You can also specify :class:`LEDBoard` instances to\n"
"    create trees of LEDs."
msgstr ""

#: mu/modes/api/pi.py:140
msgid ""
"gpiozero.LEDCollection(*args, **kwargs) \n"
"Extends :class:`CompositeOutputDevice`. Abstract base class for\n"
":class:`LEDBoard` and :class:`LEDBarGraph`."
msgstr ""

#: mu/modes/api/pi.py:143
msgid ""
"gpiozero.LedBorg(*args, **kwargs) \n"
"Extends :class:`RGBLED` for the `PiBorg LedBorg`_: an add-on board\n"
"containing a very bright RGB LED.\n"
"\n"
"The LedBorg pins are fixed and therefore there's no need to specify them\n"
"when constructing this class. The following example turns the LedBorg\n"
"purple::\n"
"\n"
"    from gpiozero import LedBorg\n"
"\n"
"    led = LedBorg()\n"
"    led.color = (1, 0, 1)\n"
"\n"
":param tuple initial_value:\n"
"    The initial color for the LedBorg. Defaults to black ``(0, 0, 0)``.\n"
"\n"
":param bool pwm:\n"
"    If ``True`` (the default), construct :class:`PWMLED` instances for\n"
"    each component of the LedBorg. If ``False``, construct regular\n"
"    :class:`LED` instances, which prevents smooth color graduations.\n"
"\n"
".. _PiBorg LedBorg: https://www.piborg.org/ledborg"
msgstr ""

#: mu/modes/api/pi.py:146
msgid ""
"gpiozero.LightSensor(*args, **kwargs) \n"
"Extends :class:`SmoothedInputDevice` and represents a light dependent\n"
"resistor (LDR).\n"
"\n"
"Connect one leg of the LDR to the 3V3 pin; connect one leg of a 1µF\n"
"capacitor to a ground pin; connect the other leg of the LDR and the other\n"
"leg of the capacitor to the same GPIO pin. This class repeatedly discharges\n"
"the capacitor, then times the duration it takes to charge (which will vary\n"
"according to the light falling on the LDR).\n"
"\n"
"The following code will print a line of text when light is detected::\n"
"\n"
"    from gpiozero import LightSensor\n"
"\n"
"    ldr = LightSensor(18)\n"
"    ldr.wait_for_light()\n"
"    print(\"Light detected!\")\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the sensor is attached to. See :ref:`pin_numbering`\n"
"    for valid pin numbers.\n"
"\n"
":param int queue_len:\n"
"    The length of the queue used to store values read from the circuit.\n"
"    This defaults to 5.\n"
"\n"
":param float charge_time_limit:\n"
"    If the capacitor in the circuit takes longer than this length of time\n"
"    to charge, it is assumed to be dark. The default (0.01 seconds) is\n"
"    appropriate for a 1µF capacitor coupled with the LDR from the\n"
"    `CamJam #2 EduKit`_. You may need to adjust this value for different\n"
"    valued capacitors or LDRs.\n"
"\n"
":param float threshold:\n"
"    Defaults to 0.1. When the mean of all values in the internal queue\n"
"    rises above this value, the area will be considered \"light\", and all\n"
"    appropriate events will be fired.\n"
"\n"
":param bool partial:\n"
"    When ``False`` (the default), the object will not return a value for\n"
"    :attr:`~SmoothedInputDevice.is_active` until the internal queue has\n"
"    filled with values.  Only set this to ``True`` if you require values\n"
"    immediately after object construction.\n"
"\n"
".. _CamJam #2 EduKit: http://camjam.me/?page_id=623"
msgstr ""

#: mu/modes/api/pi.py:149
msgid ""
"gpiozero.LineSensor(*args, **kwargs) \n"
"Extends :class:`SmoothedInputDevice` and represents a single pin line "
"sensor\n"
"like the TCRT5000 infra-red proximity sensor found in the `CamJam #3\n"
"EduKit`_.\n"
"\n"
"A typical line sensor has a small circuit board with three pins: VCC, GND,\n"
"and OUT. VCC should be connected to a 3V3 pin, GND to one of the ground\n"
"pins, and finally OUT to the GPIO specified as the value of the *pin*\n"
"parameter in the constructor.\n"
"\n"
"The following code will print a line of text indicating when the sensor\n"
"detects a line, or stops detecting a line::\n"
"\n"
"    from gpiozero import LineSensor\n"
"    from signal import pause\n"
"\n"
"    sensor = LineSensor(4)\n"
"    sensor.when_line = lambda: print('Line detected')\n"
"    sensor.when_no_line = lambda: print('No line detected')\n"
"    pause()\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the sensor is attached to. See :ref:`pin_numbering`\n"
"    for valid pin numbers.\n"
"\n"
":param int queue_len:\n"
"    The length of the queue used to store values read from the sensor. This\n"
"    defaults to 5.\n"
"\n"
":param float sample_rate:\n"
"    The number of values to read from the device (and append to the\n"
"    internal queue) per second. Defaults to 100.\n"
"\n"
":param float threshold:\n"
"    Defaults to 0.5. When the mean of all values in the internal queue\n"
"    rises above this value, the sensor will be considered \"active\" by the\n"
"    :attr:`~SmoothedInputDevice.is_active` property, and all appropriate\n"
"    events will be fired.\n"
"\n"
":param bool partial:\n"
"    When ``False`` (the default), the object will not return a value for\n"
"    :attr:`~SmoothedInputDevice.is_active` until the internal queue has\n"
"    filled with values.  Only set this to ``True`` if you require values\n"
"    immediately after object construction.\n"
"\n"
".. _CamJam #3 EduKit: http://camjam.me/?page_id=1035"
msgstr ""

#: mu/modes/api/pi.py:152
msgid ""
"gpiozero.LocalPin() \n"
"Abstract base class representing pins attached locally to a Pi. This forms\n"
"the base class for local-only pin interfaces (:class:`RPiGPIOPin`,\n"
":class:`RPIOPin`, and :class:`NativePin`)."
msgstr ""

#: mu/modes/api/pi.py:155
msgid ""
"gpiozero.MCP3001(*args, **kwargs) \n"
"The `MCP3001`_ is a 10-bit analog to digital converter with 1 channel\n"
"\n"
".. _MCP3001: http://www.farnell.com/datasheets/630400.pdf"
msgstr ""

#: mu/modes/api/pi.py:158
msgid ""
"gpiozero.MCP3002(*args, **kwargs) \n"
"The `MCP3002`_ is a 10-bit analog to digital converter with 2 channels\n"
"(0-1).\n"
"\n"
".. _MCP3002: http://www.farnell.com/datasheets/1599363.pdf"
msgstr ""

#: mu/modes/api/pi.py:161
msgid ""
"gpiozero.MCP3004(*args, **kwargs) \n"
"The `MCP3004`_ is a 10-bit analog to digital converter with 4 channels\n"
"(0-3).\n"
"\n"
".. _MCP3004: http://www.farnell.com/datasheets/808965.pdf"
msgstr ""

#: mu/modes/api/pi.py:164
msgid ""
"gpiozero.MCP3008(*args, **kwargs) \n"
"The `MCP3008`_ is a 10-bit analog to digital converter with 8 channels\n"
"(0-7).\n"
"\n"
".. _MCP3008: http://www.farnell.com/datasheets/808965.pdf"
msgstr ""

#: mu/modes/api/pi.py:167
msgid ""
"gpiozero.MCP3201(*args, **kwargs) \n"
"The `MCP3201`_ is a 12-bit analog to digital converter with 1 channel\n"
"\n"
".. _MCP3201: http://www.farnell.com/datasheets/1669366.pdf"
msgstr ""

#: mu/modes/api/pi.py:170
msgid ""
"gpiozero.MCP3202(*args, **kwargs) \n"
"The `MCP3202`_ is a 12-bit analog to digital converter with 2 channels\n"
"(0-1).\n"
"\n"
".. _MCP3202: http://www.farnell.com/datasheets/1669376.pdf"
msgstr ""

#: mu/modes/api/pi.py:173
msgid ""
"gpiozero.MCP3204(*args, **kwargs) \n"
"The `MCP3204`_ is a 12-bit analog to digital converter with 4 channels\n"
"(0-3).\n"
"\n"
".. _MCP3204: http://www.farnell.com/datasheets/808967.pdf"
msgstr ""

#: mu/modes/api/pi.py:176
msgid ""
"gpiozero.MCP3208(*args, **kwargs) \n"
"The `MCP3208`_ is a 12-bit analog to digital converter with 8 channels\n"
"(0-7).\n"
"\n"
".. _MCP3208: http://www.farnell.com/datasheets/808967.pdf"
msgstr ""

#: mu/modes/api/pi.py:179
msgid ""
"gpiozero.MCP3301(*args, **kwargs) \n"
"The `MCP3301`_ is a signed 13-bit analog to digital converter.  Please note\n"
"that the MCP3301 always operates in differential mode between its two\n"
"channels and the output value is scaled from -1 to +1.\n"
"\n"
".. _MCP3301: http://www.farnell.com/datasheets/1669397.pdf"
msgstr ""

#: mu/modes/api/pi.py:182
msgid ""
"gpiozero.MCP3302(*args, **kwargs) \n"
"The `MCP3302`_ is a 12/13-bit analog to digital converter with 4 channels\n"
"(0-3). When operated in differential mode, the device outputs a signed\n"
"13-bit value which is scaled from -1 to +1. When operated in single-ended\n"
"mode (the default), the device outputs an unsigned 12-bit value scaled from\n"
"0 to 1.\n"
"\n"
".. _MCP3302: http://www.farnell.com/datasheets/1486116.pdf"
msgstr ""

#: mu/modes/api/pi.py:185
msgid ""
"gpiozero.MCP3304(*args, **kwargs) \n"
"The `MCP3304`_ is a 12/13-bit analog to digital converter with 8 channels\n"
"(0-7). When operated in differential mode, the device outputs a signed\n"
"13-bit value which is scaled from -1 to +1. When operated in single-ended\n"
"mode (the default), the device outputs an unsigned 12-bit value scaled from\n"
"0 to 1.\n"
"\n"
".. _MCP3304: http://www.farnell.com/datasheets/1486116.pdf"
msgstr ""

#: mu/modes/api/pi.py:188
msgid ""
"gpiozero.MotionSensor(*args, **kwargs) \n"
"Extends :class:`SmoothedInputDevice` and represents a passive infra-red\n"
"(PIR) motion sensor like the sort found in the `CamJam #2 EduKit`_.\n"
"\n"
".. _CamJam #2 EduKit: http://camjam.me/?page_id=623\n"
"\n"
"A typical PIR device has a small circuit board with three pins: VCC, OUT,\n"
"and GND. VCC should be connected to a 5V pin, GND to one of the ground\n"
"pins, and finally OUT to the GPIO specified as the value of the *pin*\n"
"parameter in the constructor.\n"
"\n"
"The following code will print a line of text when motion is detected::\n"
"\n"
"    from gpiozero import MotionSensor\n"
"\n"
"    pir = MotionSensor(4)\n"
"    pir.wait_for_motion()\n"
"    print(\"Motion detected!\")\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the sensor is attached to. See :ref:`pin_numbering`\n"
"    for valid pin numbers.\n"
"\n"
":param int queue_len:\n"
"    The length of the queue used to store values read from the sensor. This\n"
"    defaults to 1 which effectively disables the queue. If your motion\n"
"    sensor is particularly \"twitchy\" you may wish to increase this value.\n"
"\n"
":param float sample_rate:\n"
"    The number of values to read from the device (and append to the\n"
"    internal queue) per second. Defaults to 100.\n"
"\n"
":param float threshold:\n"
"    Defaults to 0.5. When the mean of all values in the internal queue\n"
"    rises above this value, the sensor will be considered \"active\" by the\n"
"    :attr:`~SmoothedInputDevice.is_active` property, and all appropriate\n"
"    events will be fired.\n"
"\n"
":param bool partial:\n"
"    When ``False`` (the default), the object will not return a value for\n"
"    :attr:`~SmoothedInputDevice.is_active` until the internal queue has\n"
"    filled with values.  Only set this to ``True`` if you require values\n"
"    immediately after object construction."
msgstr ""

#: mu/modes/api/pi.py:191
msgid ""
"gpiozero.Motor(*args, **kwargs) \n"
"Extends :class:`CompositeDevice` and represents a generic motor\n"
"connected to a bi-directional motor driver circuit (i.e.  an `H-bridge`_).\n"
"\n"
"Attach an `H-bridge`_ motor controller to your Pi; connect a power source\n"
"(e.g. a battery pack or the 5V pin) to the controller; connect the outputs\n"
"of the controller board to the two terminals of the motor; connect the\n"
"inputs of the controller board to two GPIO pins.\n"
"\n"
".. _H-bridge: https://en.wikipedia.org/wiki/H_bridge\n"
"\n"
"The following code will make the motor turn \"forwards\"::\n"
"\n"
"    from gpiozero import Motor\n"
"\n"
"    motor = Motor(17, 18)\n"
"    motor.forward()\n"
"\n"
":param int forward:\n"
"    The GPIO pin that the forward input of the motor driver chip is\n"
"    connected to.\n"
"\n"
":param int backward:\n"
"    The GPIO pin that the backward input of the motor driver chip is\n"
"    connected to.\n"
"\n"
":param bool pwm:\n"
"    If ``True`` (the default), construct :class:`PWMOutputDevice`\n"
"    instances for the motor controller pins, allowing both direction and\n"
"    variable speed control. If ``False``, construct\n"
"    :class:`DigitalOutputDevice` instances, allowing only direction\n"
"    control."
msgstr ""

#: mu/modes/api/pi.py:194
msgid ""
"gpiozero.OutputDevice(*args, **kwargs) \n"
"Represents a generic GPIO output device.\n"
"\n"
"This class extends :class:`GPIODevice` to add facilities common to GPIO\n"
"output devices: an :meth:`on` method to switch the device on, a\n"
"corresponding :meth:`off` method, and a :meth:`toggle` method.\n"
"\n"
":param int pin:\n"
"    The GPIO pin (in BCM numbering) that the device is connected to. If\n"
"    this is ``None`` a :exc:`GPIOPinMissing` will be raised.\n"
"\n"
":param bool active_high:\n"
"    If ``True`` (the default), the :meth:`on` method will set the GPIO to\n"
"    HIGH. If ``False``, the :meth:`on` method will set the GPIO to LOW (the\n"
"    :meth:`off` method always does the opposite).\n"
"\n"
":param bool initial_value:\n"
"    If ``False`` (the default), the device will be off initially.  If\n"
"    ``None``, the device will be left in whatever state the pin is found in\n"
"    when configured for output (warning: this can be on).  If ``True``, the\n"
"    device will be switched on initially."
msgstr ""

#: mu/modes/api/pi.py:197
msgid ""
"gpiozero.OutputDeviceBadValue() \n"
"Error raised when ``value`` is set to an invalid value"
msgstr ""

#: mu/modes/api/pi.py:200
msgid ""
"gpiozero.OutputDeviceError() \n"
"Base class for errors specified to the OutputDevice hierarchy"
msgstr ""

#: mu/modes/api/pi.py:203
msgid ""
"gpiozero.PWMLED(*args, **kwargs) \n"
"Extends :class:`PWMOutputDevice` and represents a light emitting diode\n"
"(LED) with variable brightness.\n"
"\n"
"A typical configuration of such a device is to connect a GPIO pin to the\n"
"anode (long leg) of the LED, and the cathode (short leg) to ground, with\n"
"an optional resistor to prevent the LED from burning out.\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the LED is attached to. See :ref:`pin_numbering` for\n"
"    valid pin numbers.\n"
"\n"
":param bool active_high:\n"
"    If ``True`` (the default), the :meth:`on` method will set the GPIO to\n"
"    HIGH. If ``False``, the :meth:`on` method will set the GPIO to LOW (the\n"
"    :meth:`off` method always does the opposite).\n"
"\n"
":param float initial_value:\n"
"    If ``0`` (the default), the LED will be off initially. Other values\n"
"    between 0 and 1 can be specified as an initial brightness for the LED.\n"
"    Note that ``None`` cannot be specified (unlike the parent class) as\n"
"    there is no way to tell PWM not to alter the state of the pin.\n"
"\n"
":param int frequency:\n"
"    The frequency (in Hz) of pulses emitted to drive the LED. Defaults\n"
"    to 100Hz."
msgstr ""

#: mu/modes/api/pi.py:206
msgid ""
"gpiozero.PWMOutputDevice(*args, **kwargs) \n"
"Generic output device configured for pulse-width modulation (PWM).\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the device is attached to. See :ref:`pin_numbering`\n"
"    for valid pin numbers.\n"
"\n"
":param bool active_high:\n"
"    If ``True`` (the default), the :meth:`on` method will set the GPIO to\n"
"    HIGH. If ``False``, the :meth:`on` method will set the GPIO to LOW (the\n"
"    :meth:`off` method always does the opposite).\n"
"\n"
":param float initial_value:\n"
"    If ``0`` (the default), the device's duty cycle will be 0 initially.\n"
"    Other values between 0 and 1 can be specified as an initial duty cycle.\n"
"    Note that ``None`` cannot be specified (unlike the parent class) as\n"
"    there is no way to tell PWM not to alter the state of the pin.\n"
"\n"
":param int frequency:\n"
"    The frequency (in Hz) of pulses emitted to drive the device. Defaults\n"
"    to 100Hz."
msgstr ""

#: mu/modes/api/pi.py:209
msgid ""
"gpiozero.PiBoardInfo(revision, model, pcb_revision, released, soc, "
"manufacturer, memory, storage, usb, ethernet, wifi, bluetooth, csi, dsi, "
"headers) \n"
"This class is a :func:`~collections.namedtuple` derivative used to\n"
"represent information about a particular model of Raspberry Pi. While it is\n"
"a tuple, it is strongly recommended that you use the following named\n"
"attributes to access the data contained within.\n"
"\n"
".. automethod:: physical_pin\n"
"\n"
".. automethod:: physical_pins\n"
"\n"
".. automethod:: pulled_up\n"
"\n"
".. attribute:: revision\n"
"\n"
"    A string indicating the revision of the Pi. This is unique to each\n"
"    revision and can be considered the \"key\" from which all other\n"
"    attributes are derived. However, in itself the string is fairly\n"
"    meaningless.\n"
"\n"
".. attribute:: model\n"
"\n"
"    A string containing the model of the Pi (for example, \"B\", \"B+\", \"A+"
"\",\n"
"    \"2B\", \"CM\" (for the Compute Module), or \"Zero\").\n"
"\n"
".. attribute:: pcb_revision\n"
"\n"
"    A string containing the PCB revision number which is silk-screened onto\n"
"    the Pi (on some models).\n"
"\n"
"    .. note::\n"
"\n"
"        This is primarily useful to distinguish between the model B\n"
"        revision 1.0 and 2.0 (not to be confused with the model 2B) which\n"
"        had slightly different pinouts on their 26-pin GPIO headers.\n"
"\n"
".. attribute:: released\n"
"\n"
"    A string containing an approximate release date for this revision of\n"
"    the Pi (formatted as yyyyQq, e.g. 2012Q1 means the first quarter of\n"
"    2012).\n"
"\n"
".. attribute:: soc\n"
"\n"
"    A string indicating the SoC (`system on a chip`_) that this revision\n"
"    of the Pi is based upon.\n"
"\n"
".. attribute:: manufacturer\n"
"\n"
"    A string indicating the name of the manufacturer (usually \"Sony\" but "
"a\n"
"    few others exist).\n"
"\n"
".. attribute:: memory\n"
"\n"
"    An integer indicating the amount of memory (in Mb) connected to the\n"
"    SoC.\n"
"\n"
"    .. note::\n"
"\n"
"        This can differ substantially from the amount of RAM available\n"
"        to the operating system as the GPU's memory is shared with the\n"
"        CPU. When the camera module is activated, at least 128Mb of RAM\n"
"        is typically reserved for the GPU.\n"
"\n"
".. attribute:: storage\n"
"\n"
"    A string indicating the type of bootable storage used with this\n"
"    revision of Pi, e.g. \"SD\", \"MicroSD\", or \"eMMC\" (for the Compute\n"
"    Module).\n"
"\n"
".. attribute:: usb\n"
"\n"
"    An integer indicating how many USB ports are physically present on\n"
"    this revision of the Pi.\n"
"\n"
"    .. note::\n"
"\n"
"        This does *not* include the micro-USB port used to power the Pi.\n"
"\n"
".. attribute:: ethernet\n"
"\n"
"    An integer indicating how many Ethernet ports are physically present\n"
"    on this revision of the Pi.\n"
"\n"
".. attribute:: wifi\n"
"\n"
"    A bool indicating whether this revision of the Pi has wifi built-in.\n"
"\n"
".. attribute:: bluetooth\n"
"\n"
"    A bool indicating whether this revision of the Pi has bluetooth\n"
"    built-in.\n"
"\n"
".. attribute:: csi\n"
"\n"
"    An integer indicating the number of CSI (camera) ports available on\n"
"    this revision of the Pi.\n"
"\n"
".. attribute:: dsi\n"
"\n"
"    An integer indicating the number of DSI (display) ports available on\n"
"    this revision of the Pi.\n"
"\n"
".. attribute:: headers\n"
"\n"
"    A dictionary which maps header labels to dictionaries which map\n"
"    physical pin numbers to :class:`PinInfo` tuples. For example, to obtain\n"
"    information about pin 12 on header P1 you would query\n"
"    ``headers['P1'][12]``.\n"
"\n"
".. _system on a chip: https://en.wikipedia.org/wiki/System_on_a_chip"
msgstr ""

#: mu/modes/api/pi.py:212
msgid ""
"gpiozero.PiLiter(*args, **kwargs) \n"
"Extends :class:`LEDBoard` for the `Ciseco Pi-LITEr`_: a strip of 8 very "
"bright\n"
"LEDs.\n"
"\n"
"The Pi-LITEr pins are fixed and therefore there's no need to specify them\n"
"when constructing this class. The following example turns on all the LEDs\n"
"of the Pi-LITEr::\n"
"\n"
"    from gpiozero import PiLiter\n"
"\n"
"    lite = PiLiter()\n"
"    lite.on()\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances for each pin. If\n"
"    ``False`` (the default), construct regular :class:`LED` instances.\n"
"\n"
":param bool initial_value:\n"
"    If ``False`` (the default), all LEDs will be off initially. If\n"
"    ``None``, each device will be left in whatever state the pin is found\n"
"    in when configured for output (warning: this can be on). If ``True``,\n"
"    the device will be switched on initially.\n"
"\n"
".. _Ciseco Pi-LITEr: http://shop.ciseco.co.uk/pi-liter-8-led-strip-for-the-"
"raspberry-pi/"
msgstr ""

#: mu/modes/api/pi.py:215
msgid ""
"gpiozero.PiLiterBarGraph(*args, **kwargs) \n"
"Extends :class:`LEDBarGraph` to treat the `Ciseco Pi-LITEr`_ as an\n"
"8-segment bar graph.\n"
"\n"
"The Pi-LITEr pins are fixed and therefore there's no need to specify them\n"
"when constructing this class. The following example sets the graph value\n"
"to 0.5::\n"
"\n"
"    from gpiozero import PiLiterBarGraph\n"
"\n"
"    graph = PiLiterBarGraph()\n"
"    graph.value = 0.5\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances for each pin. If\n"
"    ``False`` (the default), construct regular :class:`LED` instances.\n"
"\n"
":param float initial_value:\n"
"    The initial :attr:`value` of the graph given as a float between -1 and\n"
"    +1. Defaults to ``0.0``.\n"
"\n"
".. _Ciseco Pi-LITEr: http://shop.ciseco.co.uk/pi-liter-8-led-strip-for-the-"
"raspberry-pi/"
msgstr ""

#: mu/modes/api/pi.py:218
msgid ""
"gpiozero.PiTraffic(*args, **kwargs) \n"
"Extends :class:`TrafficLights` for the `Low Voltage Labs PI-TRAFFIC`_:\n"
"vertical traffic lights board when attached to GPIO pins 9, 10, and 11.\n"
"\n"
"There's no need to specify the pins if the PI-TRAFFIC is connected to the\n"
"default pins (9, 10, 11). The following example turns on the amber LED on\n"
"the PI-TRAFFIC::\n"
"\n"
"    from gpiozero import PiTraffic\n"
"\n"
"    traffic = PiTraffic()\n"
"    traffic.amber.on()\n"
"\n"
"To use the PI-TRAFFIC board when attached to a non-standard set of pins,\n"
"simply use the parent class, :class:`TrafficLights`.\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances to represent each\n"
"    LED. If ``False`` (the default), construct regular :class:`LED`\n"
"    instances.\n"
"\n"
":param bool initial_value:\n"
"    If ``False`` (the default), all LEDs will be off initially. If\n"
"    ``None``, each device will be left in whatever state the pin is found\n"
"    in when configured for output (warning: this can be on). If ``True``,\n"
"    the device will be switched on initially.\n"
"\n"
".. _Low Voltage Labs PI-TRAFFIC: http://lowvoltagelabs.com/products/pi-"
"traffic/"
msgstr ""

#: mu/modes/api/pi.py:221
msgid ""
"gpiozero.Pin() \n"
"Abstract base class representing a GPIO pin or a pin from an IO extender.\n"
"\n"
"Descendents should override property getters and setters to accurately\n"
"represent the capabilities of pins. The following functions *must* be\n"
"overridden:\n"
"\n"
"* :meth:`_get_function`\n"
"* :meth:`_set_function`\n"
"* :meth:`_get_state`\n"
"\n"
"The following functions *may* be overridden if applicable:\n"
"\n"
"* :meth:`close`\n"
"* :meth:`_set_state`\n"
"* :meth:`_get_frequency`\n"
"* :meth:`_set_frequency`\n"
"* :meth:`_get_pull`\n"
"* :meth:`_set_pull`\n"
"* :meth:`_get_bounce`\n"
"* :meth:`_set_bounce`\n"
"* :meth:`_get_edges`\n"
"* :meth:`_set_edges`\n"
"* :meth:`_get_when_changed`\n"
"* :meth:`_set_when_changed`\n"
"* :meth:`pi_info`\n"
"* :meth:`output_with_state`\n"
"* :meth:`input_with_pull`\n"
"\n"
".. warning::\n"
"\n"
"    Descendents must ensure that pin instances representing the same\n"
"    physical hardware are identical, right down to object identity. The\n"
"    framework relies on this to correctly clean up resources at interpreter\n"
"    shutdown."
msgstr ""

#: mu/modes/api/pi.py:224
msgid ""
"gpiozero.PinEdgeDetectUnsupported() \n"
"Error raised when attempting to use edge detection on unsupported pins"
msgstr ""

#: mu/modes/api/pi.py:227
msgid ""
"gpiozero.PinError() \n"
"Base class for errors related to pin implementations"
msgstr ""

#: mu/modes/api/pi.py:230
msgid ""
"gpiozero.PinFixedPull() \n"
"Error raised when attempting to set the pull of a pin with fixed pull-up"
msgstr ""

#: mu/modes/api/pi.py:233
msgid ""
"gpiozero.PinInfo(number, function, pull_up) \n"
"This class is a :func:`~collections.namedtuple` derivative used to\n"
"represent information about a pin present on a GPIO header. The following\n"
"attributes are defined:\n"
"\n"
".. attribute:: number\n"
"\n"
"    An integer containing the physical pin number on the header (starting\n"
"    from 1 in accordance with convention).\n"
"\n"
".. attribute:: function\n"
"\n"
"    A string describing the function of the pin. Some common examples\n"
"    include \"GND\" (for pins connecting to ground), \"3V3\" (for pins "
"which\n"
"    output 3.3 volts), \"GPIO9\" (for GPIO9 in the Broadcom numbering\n"
"    scheme), etc.\n"
"\n"
".. attribute:: pull_up\n"
"\n"
"    A bool indicating whether the pin has a physical pull-up resistor\n"
"    permanently attached (this is usually ``False`` but GPIO2 and GPIO3\n"
"    are *usually* ``True``). This is used internally by gpiozero to raise\n"
"    errors when pull-down is requested on a pin with a physical pull-up\n"
"    resistor."
msgstr ""

#: mu/modes/api/pi.py:236
msgid ""
"gpiozero.PinInvalidEdges() \n"
"Error raised when attempting to assign an invalid edge detection to a pin"
msgstr ""

#: mu/modes/api/pi.py:239
msgid ""
"gpiozero.PinInvalidFunction() \n"
"Error raised when attempting to change the function of a pin to an invalid "
"value"
msgstr ""

#: mu/modes/api/pi.py:242
msgid ""
"gpiozero.PinInvalidPull() \n"
"Error raised when attempting to assign an invalid pull-up to a pin"
msgstr ""

#: mu/modes/api/pi.py:245
msgid ""
"gpiozero.PinInvalidState() \n"
"Error raised when attempting to assign an invalid state to a pin"
msgstr ""

#: mu/modes/api/pi.py:248
msgid ""
"gpiozero.PinMultiplePins() \n"
"Error raised when multiple pins support the requested function"
msgstr ""

#: mu/modes/api/pi.py:251
msgid ""
"gpiozero.PinNoPins() \n"
"Error raised when no pins support the requested function"
msgstr ""

#: mu/modes/api/pi.py:254
msgid ""
"gpiozero.PinNonPhysical() \n"
"Warning raised when a non-physical pin is specified in a constructor"
msgstr ""

#: mu/modes/api/pi.py:257
msgid ""
"gpiozero.PinPWMError() \n"
"Base class for errors related to PWM implementations"
msgstr ""

#: mu/modes/api/pi.py:260
msgid ""
"gpiozero.PinPWMFixedValue() \n"
"Error raised when attempting to initialize PWM on an input pin"
msgstr ""

#: mu/modes/api/pi.py:263
msgid ""
"gpiozero.PinPWMUnsupported() \n"
"Error raised when attempting to activate PWM on unsupported pins"
msgstr ""

#: mu/modes/api/pi.py:266
msgid ""
"gpiozero.PinSetInput() \n"
"Error raised when attempting to set a read-only pin"
msgstr ""

#: mu/modes/api/pi.py:269
msgid ""
"gpiozero.PinUnknownPi() \n"
"Error raised when gpiozero doesn't recognize a revision of the Pi"
msgstr ""

#: mu/modes/api/pi.py:272
msgid ""
"gpiozero.PinWarning() \n"
"Base class for warnings related to pin implementations"
msgstr ""

#: mu/modes/api/pi.py:275
msgid ""
"gpiozero.PingServer(*args, **kwargs) \n"
"Extends :class:`InternalDevice` to provide a device which is active when a\n"
"*host* on the network can be pinged.\n"
"\n"
"The following example lights an LED while a server is reachable (note the\n"
"use of :attr:`~SourceMixin.source_delay` to ensure the server is not\n"
"flooded with pings)::\n"
"\n"
"    from gpiozero import PingServer, LED\n"
"    from signal import pause\n"
"\n"
"    server = PingServer('my-server')\n"
"    led = LED(4)\n"
"    led.source_delay = 1\n"
"    led.source = server.values\n"
"    pause()\n"
"\n"
":param str host:\n"
"    The hostname or IP address to attempt to ping."
msgstr ""

#: mu/modes/api/pi.py:278
msgid ""
"gpiozero.RGBLED(*args, **kwargs) \n"
"Extends :class:`Device` and represents a full color LED component (composed\n"
"of red, green, and blue LEDs).\n"
"\n"
"Connect the common cathode (longest leg) to a ground pin; connect each of\n"
"the other legs (representing the red, green, and blue anodes) to any GPIO\n"
"pins.  You can either use three limiting resistors (one per anode) or a\n"
"single limiting resistor on the cathode.\n"
"\n"
"The following code will make the LED purple::\n"
"\n"
"    from gpiozero import RGBLED\n"
"\n"
"    led = RGBLED(2, 3, 4)\n"
"    led.color = (1, 0, 1)\n"
"\n"
":param int red:\n"
"    The GPIO pin that controls the red component of the RGB LED.\n"
"\n"
":param int green:\n"
"    The GPIO pin that controls the green component of the RGB LED.\n"
"\n"
":param int blue:\n"
"    The GPIO pin that controls the blue component of the RGB LED.\n"
"\n"
":param bool active_high:\n"
"    Set to ``True`` (the default) for common cathode RGB LEDs. If you are\n"
"    using a common anode RGB LED, set this to ``False``.\n"
"\n"
":param tuple initial_value:\n"
"    The initial color for the RGB LED. Defaults to black ``(0, 0, 0)``.\n"
"\n"
":param bool pwm:\n"
"    If ``True`` (the default), construct :class:`PWMLED` instances for\n"
"    each component of the RGBLED. If ``False``, construct regular\n"
"    :class:`LED` instances, which prevents smooth color graduations."
msgstr ""

#: mu/modes/api/pi.py:281
msgid ""
"gpiozero.Robot(*args, **kwargs) \n"
"Extends :class:`CompositeDevice` to represent a generic dual-motor robot.\n"
"\n"
"This class is constructed with two tuples representing the forward and\n"
"backward pins of the left and right controllers respectively. For example,\n"
"if the left motor's controller is connected to GPIOs 4 and 14, while the\n"
"right motor's controller is connected to GPIOs 17 and 18 then the following\n"
"example will drive the robot forward::\n"
"\n"
"    from gpiozero import Robot\n"
"\n"
"    robot = Robot(left=(4, 14), right=(17, 18))\n"
"    robot.forward()\n"
"\n"
":param tuple left:\n"
"    A tuple of two GPIO pins representing the forward and backward inputs\n"
"    of the left motor's controller.\n"
"\n"
":param tuple right:\n"
"    A tuple of two GPIO pins representing the forward and backward inputs\n"
"    of the right motor's controller."
msgstr ""

#: mu/modes/api/pi.py:284
msgid ""
"gpiozero.RyanteckRobot(*args, **kwargs) \n"
"Extends :class:`Robot` for the `Ryanteck MCB`_ robot.\n"
"\n"
"The Ryanteck MCB pins are fixed and therefore there's no need to specify\n"
"them when constructing this class. The following example drives the robot\n"
"forward::\n"
"\n"
"    from gpiozero import RyanteckRobot\n"
"\n"
"    robot = RyanteckRobot()\n"
"    robot.forward()\n"
"\n"
".. _Ryanteck MCB: https://ryanteck.uk/add-ons/6-ryanteck-rpi-motor-"
"controller-board-0635648607160.html"
msgstr ""

#: mu/modes/api/pi.py:287
msgid ""
"gpiozero.SPIBadArgs() \n"
"Error raised when invalid arguments are given while constructing :class:"
"`SPIDevice`"
msgstr ""

#: mu/modes/api/pi.py:290
msgid ""
"gpiozero.SPIDevice(*args, **kwargs) \n"
"Extends :class:`Device`. Represents a device that communicates via the SPI\n"
"protocol.\n"
"\n"
"See :ref:`spi_args` for information on the keyword arguments that can be\n"
"specified with the constructor."
msgstr ""

#: mu/modes/api/pi.py:293
msgid ""
"gpiozero.SPIError() \n"
"Base class for errors related to the SPI implementation"
msgstr ""

#: mu/modes/api/pi.py:296
msgid ""
"gpiozero.SPISoftwareFallback() \n"
"Warning raised when falling back to the software implementation"
msgstr ""

#: mu/modes/api/pi.py:299
msgid ""
"gpiozero.SPIWarning() \n"
"Base class for warnings related to the SPI implementation"
msgstr ""

#: mu/modes/api/pi.py:302
msgid ""
"gpiozero.Servo(*args, **kwargs) \n"
"Extends :class:`CompositeDevice` and represents a PWM-controlled servo\n"
"motor connected to a GPIO pin.\n"
"\n"
"Connect a power source (e.g. a battery pack or the 5V pin) to the power\n"
"cable of the servo (this is typically colored red); connect the ground\n"
"cable of the servo (typically colored black or brown) to the negative of\n"
"your battery pack, or a GND pin; connect the final cable (typically colored\n"
"white or orange) to the GPIO pin you wish to use for controlling the servo.\n"
"\n"
"The following code will make the servo move between its minimum, maximum,\n"
"and mid-point positions with a pause between each::\n"
"\n"
"    from gpiozero import Servo\n"
"    from time import sleep\n"
"\n"
"    servo = Servo(17)\n"
"    while True:\n"
"        servo.min()\n"
"        sleep(1)\n"
"        servo.mid()\n"
"        sleep(1)\n"
"        servo.max()\n"
"        sleep(1)\n"
"\n"
":param int pin:\n"
"    The GPIO pin which the device is attached to. See :ref:`pin_numbering`\n"
"    for valid pin numbers.\n"
"\n"
":param float initial_value:\n"
"    If ``0`` (the default), the device's mid-point will be set\n"
"    initially.  Other values between -1 and +1 can be specified as an\n"
"    initial position. ``None`` means to start the servo un-controlled (see\n"
"    :attr:`value`).\n"
"\n"
":param float min_pulse_width:\n"
"    The pulse width corresponding to the servo's minimum position. This\n"
"    defaults to 1ms.\n"
"\n"
":param float max_pulse_width:\n"
"    The pulse width corresponding to the servo's maximum position. This\n"
"    defaults to 2ms.\n"
"\n"
":param float frame_width:\n"
"    The length of time between servo control pulses measured in seconds.\n"
"    This defaults to 20ms which is a common value for servos."
msgstr ""

#: mu/modes/api/pi.py:305
msgid ""
"gpiozero.SharedMixin() \n"
"This mixin marks a class as \"shared\". In this case, the meta-class\n"
"(GPIOMeta) will use :meth:`_shared_key` to convert the constructor\n"
"arguments to an immutable key, and will check whether any existing\n"
"instances match that key. If they do, they will be returned by the\n"
"constructor instead of a new instance. An internal reference counter is\n"
"used to determine how many times an instance has been \"constructed\" in "
"this\n"
"way.\n"
"\n"
"When :meth:`close` is called, an internal reference counter will be\n"
"decremented and the instance will only close when it reaches zero."
msgstr ""

#: mu/modes/api/pi.py:308
msgid ""
"gpiozero.SmoothedInputDevice(*args, **kwargs) \n"
"Represents a generic input device which takes its value from the mean of a\n"
"queue of historical values.\n"
"\n"
"This class extends :class:`InputDevice` with a queue which is filled by a\n"
"background thread which continually polls the state of the underlying\n"
"device. The mean of the values in the queue is compared to a threshold\n"
"which is used to determine the state of the :attr:`is_active` property.\n"
"\n"
".. note::\n"
"\n"
"    The background queue is not automatically started upon construction.\n"
"    This is to allow descendents to set up additional components before the\n"
"    queue starts reading values. Effectively this is an abstract base\n"
"    class.\n"
"\n"
"This class is intended for use with devices which either exhibit analog\n"
"behaviour (such as the charging time of a capacitor with an LDR), or those\n"
"which exhibit \"twitchy\" behaviour (such as certain motion sensors).\n"
"\n"
":param float threshold:\n"
"    The value above which the device will be considered \"on\".\n"
"\n"
":param int queue_len:\n"
"    The length of the internal queue which is filled by the background\n"
"    thread.\n"
"\n"
":param float sample_wait:\n"
"    The length of time to wait between retrieving the state of the\n"
"    underlying device. Defaults to 0.0 indicating that values are retrieved\n"
"    as fast as possible.\n"
"\n"
":param bool partial:\n"
"    If ``False`` (the default), attempts to read the state of the device\n"
"    (from the :attr:`is_active` property) will block until the queue has\n"
"    filled.  If ``True``, a value will be returned immediately, but be\n"
"    aware that this value is likely to fluctuate excessively."
msgstr ""

#: mu/modes/api/pi.py:311
msgid ""
"gpiozero.SnowPi(*args, **kwargs) \n"
"Extends :class:`LEDBoard` for the `Ryanteck SnowPi`_ board.\n"
"\n"
"The SnowPi pins are fixed and therefore there's no need to specify them\n"
"when constructing this class. The following example turns on the eyes, sets\n"
"the nose pulsing, and the arms blinking::\n"
"\n"
"    from gpiozero import SnowPi\n"
"\n"
"    snowman = SnowPi(pwm=True)\n"
"    snowman.eyes.on()\n"
"    snowman.nose.pulse()\n"
"    snowman.arms.blink()\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances to represent each\n"
"    LED. If ``False`` (the default), construct regular :class:`LED`\n"
"    instances.\n"
"\n"
":param bool initial_value:\n"
"    If ``False`` (the default), all LEDs will be off initially. If\n"
"    ``None``, each device will be left in whatever state the pin is found\n"
"    in when configured for output (warning: this can be on). If ``True``,\n"
"    the device will be switched on initially.\n"
"\n"
".. _Ryanteck SnowPi: https://ryanteck.uk/raspberry-pi/114-snowpi-the-gpio-"
"snowman-for-raspberry-pi-0635648608303.html"
msgstr ""

#: mu/modes/api/pi.py:314
msgid ""
"gpiozero.SourceMixin(*args, **kwargs) \n"
"Adds a :attr:`source` property to the class which, given an iterable, sets\n"
":attr:`value` to each member of that iterable until it is exhausted.  This\n"
"mixin is generally included in novel output devices to allow their state to\n"
"be driven from another device.\n"
"\n"
".. note::\n"
"\n"
"    Use this mixin *first* in the parent class list."
msgstr ""

#: mu/modes/api/pi.py:317
msgid ""
"gpiozero.TimeOfDay(*args, **kwargs) \n"
"Extends :class:`InternalDevice` to provide a device which is active when\n"
"the computer's clock indicates that the current time is between\n"
"*start_time* and *end_time* (inclusive) which are :class:`~datetime.time`\n"
"instances.\n"
"\n"
"The following example turns on a lamp attached to an :class:`Energenie`\n"
"plug between 7 and 8 AM::\n"
"\n"
"    from datetime import time\n"
"    from gpiozero import TimeOfDay, Energenie\n"
"    from signal import pause\n"
"\n"
"    lamp = Energenie(0)\n"
"    morning = TimeOfDay(time(7), time(8))\n"
"    morning.when_activated = lamp.on\n"
"    morning.when_deactivated = lamp.off\n"
"    pause()\n"
"\n"
":param ~datetime.time start_time:\n"
"    The time from which the device will be considered active.\n"
"\n"
":param ~datetime.time end_time:\n"
"    The time after which the device will be considered inactive.\n"
"\n"
":param bool utc:\n"
"    If ``True`` (the default), a naive UTC time will be used for the\n"
"    comparison rather than a local time-zone reading."
msgstr ""

#: mu/modes/api/pi.py:320
msgid ""
"gpiozero.TrafficHat(*args, **kwargs) \n"
"Extends :class:`TrafficLightsBuzzer` for the `Ryanteck Traffic HAT`_: "
"traffic\n"
"light LEDs, a button and a buzzer.\n"
"\n"
"The Traffic HAT pins are fixed and therefore there's no need to specify\n"
"them when constructing this class. The following example waits for the\n"
"button to be pressed on the Traffic HAT, then turns on all the LEDs::\n"
"\n"
"    from gpiozero import TrafficHat\n"
"\n"
"    hat = TrafficHat()\n"
"    hat.button.wait_for_press()\n"
"    hat.lights.on()\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances to represent each\n"
"    LED. If ``False`` (the default), construct regular :class:`LED`\n"
"    instances.\n"
"\n"
".. _Ryanteck Traffic HAT: https://ryanteck.uk/hats/1-"
"traffichat-0635648607122.html"
msgstr ""

#: mu/modes/api/pi.py:323
msgid ""
"gpiozero.TrafficLights(*args, **kwargs) \n"
"Extends :class:`LEDBoard` for devices containing red, yellow, and green\n"
"LEDs.\n"
"\n"
"The following example initializes a device connected to GPIO pins 2, 3,\n"
"and 4, then lights the amber (yellow) LED attached to GPIO 3::\n"
"\n"
"    from gpiozero import TrafficLights\n"
"\n"
"    traffic = TrafficLights(2, 3, 4)\n"
"    traffic.amber.on()\n"
"\n"
":param int red:\n"
"    The GPIO pin that the red LED is attached to.\n"
"\n"
":param int amber:\n"
"    The GPIO pin that the amber LED is attached to.\n"
"\n"
":param int green:\n"
"    The GPIO pin that the green LED is attached to.\n"
"\n"
":param bool pwm:\n"
"    If ``True``, construct :class:`PWMLED` instances to represent each\n"
"    LED. If ``False`` (the default), construct regular :class:`LED`\n"
"    instances.\n"
"\n"
":param bool initial_value:\n"
"    If ``False`` (the default), all LEDs will be off initially. If\n"
"    ``None``, each device will be left in whatever state the pin is found\n"
"    in when configured for output (warning: this can be on). If ``True``,\n"
"    the device will be switched on initially.\n"
"\n"
":param int yellow:\n"
"    The GPIO pin that the yellow LED is attached to. This is merely an\n"
"    alias for the ``amber`` parameter - you can't specify both ``amber``\n"
"    and ``yellow``."
msgstr ""

#: mu/modes/api/pi.py:326
msgid ""
"gpiozero.TrafficLightsBuzzer(*args, **kwargs) \n"
"Extends :class:`CompositeOutputDevice` and is a generic class for HATs with\n"
"traffic lights, a button and a buzzer.\n"
"\n"
":param TrafficLights lights:\n"
"    An instance of :class:`TrafficLights` representing the traffic lights\n"
"    of the HAT.\n"
"\n"
":param Buzzer buzzer:\n"
"    An instance of :class:`Buzzer` representing the buzzer on the HAT.\n"
"\n"
":param Button button:\n"
"    An instance of :class:`Button` representing the button on the HAT."
msgstr ""

#: mu/modes/api/pi.py:329
msgid ""
"gpiozero.ValuesMixin() \n"
"Adds a :attr:`values` property to the class which returns an infinite\n"
"generator of readings from the :attr:`value` property. There is rarely a\n"
"need to use this mixin directly as all base classes in GPIO Zero include\n"
"it.\n"
"\n"
".. note::\n"
"\n"
"    Use this mixin *first* in the parent class list."
msgstr ""

#: mu/modes/api/pi.py:332
msgid ""
"gpiozero.pi_info(revision=None) \n"
"Returns a :class:`PiBoardInfo` instance containing information about a\n"
"*revision* of the Raspberry Pi.\n"
"\n"
":param str revision:\n"
"    The revision of the Pi to return information about. If this is omitted\n"
"    or ``None`` (the default), then the library will attempt to determine\n"
"    the model of Pi it is running on and return information about that."
msgstr ""

#: mu/modes/api/pi.py:335
msgid ""
"picamera.Blue() \n"
"Represents the blue component of a :class:`Color` for use in\n"
"transformations.  Instances of this class can be constructed directly with\n"
"a float value, or by querying the :attr:`Color.blue` attribute. Addition,\n"
"subtraction, and multiplication are supported with :class:`Color`\n"
"instances. For example::\n"
"\n"
"    >>> Color(0, 0, 0) + Blue(0.2)\n"
"    <Color \"#000033\">\n"
"    >>> Color.from_hls(0.5, 0.5, 1.0) - Blue(1)\n"
"    <Color \"#00fe00\">\n"
"    >>> Blue(0.9) * Color('white')\n"
"    <Color \"#ffffe5\">"
msgstr ""

#: mu/modes/api/pi.py:338
msgid ""
"picamera.BufferIO(obj) \n"
"A stream which uses a :class:`memoryview` for storage.\n"
"\n"
"This is used internally by picamera for capturing directly to an existing\n"
"object which supports the buffer protocol (like a numpy array). Because the\n"
"underlying storage is fixed in size, the stream also has a fixed size and\n"
"will raise an :exc:`IOError` exception if an attempt is made to write\n"
"beyond the end of the buffer (though seek beyond the end is supported).\n"
"\n"
"Users should never need this class directly."
msgstr ""

#: mu/modes/api/pi.py:341
msgid ""
"picamera.CircularIO(size) \n"
"A thread-safe stream which uses a ring buffer for storage.\n"
"\n"
"CircularIO provides an in-memory stream similar to the :class:`io.BytesIO`\n"
"class. However, unlike :class:`io.BytesIO` its underlying storage is a\n"
"`ring buffer`_ with a fixed maximum size. Once the maximum size is reached,\n"
"writing effectively loops round to the beginning to the ring and starts\n"
"overwriting the oldest content.\n"
"\n"
"The *size* parameter specifies the maximum size of the stream in bytes. The\n"
":meth:`read`, :meth:`tell`, and :meth:`seek` methods all operate\n"
"equivalently to those in :class:`io.BytesIO` whilst :meth:`write` only\n"
"differs in the wrapping behaviour described above. A :meth:`read1` method\n"
"is also provided for efficient reading of the underlying ring buffer in\n"
"write-sized chunks (or less).\n"
"\n"
"A re-entrant threading lock guards all operations, and is accessible for\n"
"external use via the :attr:`lock` attribute.\n"
"\n"
"The performance of the class is geared toward faster writing than reading\n"
"on the assumption that writing will be the common operation and reading the\n"
"rare operation (a reasonable assumption for the camera use-case, but not\n"
"necessarily for more general usage).\n"
"\n"
".. _ring buffer: https://en.wikipedia.org/wiki/Circular_buffer"
msgstr ""

#: mu/modes/api/pi.py:344
msgid ""
"picamera.Color(*args, **kwargs) \n"
"The Color class is a tuple which represents a color as red, green, and\n"
"blue components.\n"
"\n"
"The class has a flexible constructor which allows you to create an instance\n"
"from a variety of color systems including `RGB`_, `Y'UV`_, `Y'IQ`_, `HLS`_,\n"
"and `HSV`_.  There are also explicit constructors for each of these systems\n"
"to allow you to force the use of a system in your code. For example, an\n"
"instance of :class:`Color` can be constructed in any of the following\n"
"ways::\n"
"\n"
"    >>> Color('#f00')\n"
"    <Color \"#ff0000\">\n"
"    >>> Color('green')\n"
"    <Color \"#008000\">\n"
"    >>> Color(0, 0, 1)\n"
"    <Color \"#0000ff\">\n"
"    >>> Color(hue=0, saturation=1, value=0.5)\n"
"    <Color \"#7f0000\">\n"
"    >>> Color(y=0.4, u=-0.05, v=0.615)\n"
"    <Color \"#ff0f4c\">\n"
"\n"
"The specific forms that the default constructor will accept are enumerated\n"
"below:\n"
"\n"
".. tabularcolumns:: |p{40mm}|p{100mm}|\n"
"\n"
"+------------------------------+------------------------------------------+\n"
"| Style                        | Description                              |\n"
"+==============================+==========================================+\n"
"| Single positional parameter  | Equivalent to calling                    |\n"
"|                              | :meth:`Color.from_string`.               |\n"
"+------------------------------+------------------------------------------+\n"
"| Three positional parameters  | Equivalent to calling                    |\n"
"|                              | :meth:`Color.from_rgb` if all three      |\n"
"|                              | parameters are between 0.0 and 1.0, or   |\n"
"|                              | :meth:`Color.from_rgb_bytes` otherwise.  |\n"
"+------------------------------+                                          |\n"
"| Three named parameters:      |                                          |\n"
"| *r*, *g*, *b*                |                                          |\n"
"+------------------------------+                                          |\n"
"| Three named parameters:      |                                          |\n"
"| *red*, *green*, *blue*       |                                          |\n"
"+------------------------------+------------------------------------------+\n"
"| Three named parameters:      | Equivalent to calling                    |\n"
"| *y*, *u*, *v*                | :meth:`Color.from_yuv` if *y* is between |\n"
"|                              | 0.0 and 1.0, *u* is between -0.436 and   |\n"
"|                              | 0.436, and *v* is between -0.615 and     |\n"
"|                              | 0.615, or :meth:`Color.from_yuv_bytes`   |\n"
"|                              | otherwise.                               |\n"
"+------------------------------+------------------------------------------+\n"
"| Three named parameters:      | Equivalent to calling                    |\n"
"| *y*, *i*, *q*                | :meth:`Color.from_yiq`.                  |\n"
"+------------------------------+------------------------------------------+\n"
"| Three named parameters:      | Equivalent to calling                    |\n"
"| *h*, *l*, *s*                | :meth:`Color.from_hls`.                  |\n"
"+------------------------------+                                          |\n"
"| Three named parameters:      |                                          |\n"
"| *hue*, *lightness*,          |                                          |\n"
"| *saturation*                 |                                          |\n"
"+------------------------------+------------------------------------------+\n"
"| Three named parameters:      | Equivalent to calling                    |\n"
"| *h*, *s*, *v*                | :meth:`Color.from_hsv`                   |\n"
"+------------------------------+                                          |\n"
"| Three named parameters:      |                                          |\n"
"| *hue*, *saturation*, *value* |                                          |\n"
"+------------------------------+------------------------------------------+\n"
"| Three named parameters:      | Equivalent to calling                    |\n"
"| *x*, *y*, *z*                | :meth:`Color.from_cie_xyz`               |\n"
"+------------------------------+------------------------------------------+\n"
"| Three named parameters:      | Equivalent to calling                    |\n"
"| *l*, *a*, *b*                | :meth:`Color.from_cie_lab`               |\n"
"+------------------------------+------------------------------------------+\n"
"| Three named parameters:      | Equivalent to calling                    |\n"
"| *l*, *u*, *v*                | :meth:`Color.from_cie_luv`               |\n"
"+------------------------------+------------------------------------------+\n"
"\n"
"If the constructor parameters do not conform to any of the variants in the\n"
"table above, a :exc:`ValueError` will be thrown.\n"
"\n"
"Internally, the color is *always* represented as 3 float values\n"
"corresponding to the red, green, and blue components of the color. These\n"
"values take a value from 0.0 to 1.0 (least to full intensity). The class\n"
"provides several attributes which can be used to convert one color system\n"
"into another::\n"
"\n"
"    >>> Color('#f00').hls\n"
"    (0.0, 0.5, 1.0)\n"
"    >>> Color.from_string('green').hue\n"
"    Hue(deg=120.0)\n"
"    >>> Color.from_rgb_bytes(0, 0, 255).yuv\n"
"    (0.114, 0.435912, -0.099978)\n"
"\n"
"As :class:`Color` derives from tuple, instances are immutable. While this\n"
"provides the advantage that they can be used as keys in a dict, it does\n"
"mean that colors themselves cannot be directly manipulated (e.g. by\n"
"reducing the red component).\n"
"\n"
"However, several auxilliary classes in the module provide the ability to\n"
"perform simple transformations of colors via operators which produce a new\n"
":class:`Color` instance. For example::\n"
"\n"
"    >>> Color('red') - Red(0.5)\n"
"    <Color \"#7f0000\">\n"
"    >>> Color('green') + Red(0.5)\n"
"    <Color \"#7f8000\">\n"
"    >>> Color.from_hls(0.5, 0.5, 1.0)\n"
"    <Color \"#00feff\">\n"
"    >>> Color.from_hls(0.5, 0.5, 1.0) * Lightness(0.8)\n"
"    <Color \"#00cbcc\">\n"
"    >>> (Color.from_hls(0.5, 0.5, 1.0) * Lightness(0.8)).hls\n"
"    (0.5, 0.4, 1.0)\n"
"\n"
"From the last example above one can see that even attributes not directly\n"
"stored by the color (such as lightness) can be manipulated in this fashion.\n"
"In this case a :class:`Color` instance is constructed from HLS (hue,\n"
"lightness, saturation) values with a lightness of 0.5. This is multiplied\n"
"by a :class:`Lightness` instance with a value of 0.8 which constructs a new\n"
":class:`Color` with the same hue and saturation, but a lightness of 0.5 *\n"
"0.8 = 0.4.\n"
"\n"
"If an instance is converted to a string (with :func:`str`) it will return a\n"
"string containing the 7-character HTML code for the color (e.g. \"#ff0000\"\n"
"for red). As can be seen in the examples above, a similar representation is\n"
"returned for :func:`repr`.\n"
"\n"
".. _RGB: https://en.wikipedia.org/wiki/RGB_color_space\n"
".. _Y'UV: https://en.wikipedia.org/wiki/YUV\n"
".. _Y'IQ: https://en.wikipedia.org/wiki/YIQ\n"
".. _HLS: https://en.wikipedia.org/wiki/HSL_and_HSV\n"
".. _HSV: https://en.wikipedia.org/wiki/HSL_and_HSV"
msgstr ""

#: mu/modes/api/pi.py:347
msgid ""
"picamera.Green() \n"
"Represents the green component of a :class:`Color` for use in\n"
"transformations.  Instances of this class can be constructed directly with\n"
"a float value, or by querying the :attr:`Color.green` attribute. Addition,\n"
"subtraction, and multiplication are supported with :class:`Color`\n"
"instances. For example::\n"
"\n"
"    >>> Color(0, 0, 0) + Green(0.1)\n"
"    <Color \"#001900\">\n"
"    >>> Color.from_yuv(1, -0.4, -0.6) - Green(1)\n"
"    <Color \"#50002f\">\n"
"    >>> (Green(0.5) * Color('white')).rgb\n"
"    (Red(1.0), Green(0.5), Blue(1.0))"
msgstr ""

#: mu/modes/api/pi.py:350
msgid ""
"picamera.Hue(n=None, deg=None, rad=None) \n"
"Represents the hue of a :class:`Color` for use in transformations.\n"
"Instances of this class can be constructed directly with a float value in\n"
"the range [0.0, 1.0) representing an angle around the `HSL hue wheel`_. As\n"
"this is a circular mapping, 0.0 and 1.0 effectively mean the same thing,\n"
"i.e.  out of range values will be normalized into the range [0.0, 1.0).\n"
"\n"
"The class can also be constructed with the keyword arguments ``deg`` or\n"
"``rad`` if you wish to specify the hue value in degrees or radians instead,\n"
"respectively. Instances can also be constructed by querying the\n"
":attr:`Color.hue` attribute.\n"
"\n"
"Addition, subtraction, and multiplication are supported with :class:`Color`\n"
"instances. For example::\n"
"\n"
"    >>> Color(1, 0, 0).hls\n"
"    (0.0, 0.5, 1.0)\n"
"    >>> (Color(1, 0, 0) + Hue(deg=180)).hls\n"
"    (0.5, 0.5, 1.0)\n"
"\n"
"Note that whilst multiplication by a :class:`Hue` doesn't make much sense,\n"
"it is still supported. However, the circular nature of a hue value can lead\n"
"to suprising effects. In particular, since 1.0 is equivalent to 0.0 the\n"
"following may be observed::\n"
"\n"
"    >>> (Hue(1.0) * Color.from_hls(0.5, 0.5, 1.0)).hls\n"
"    (0.0, 0.5, 1.0)\n"
"\n"
".. _HSL hue wheel: https://en.wikipedia.org/wiki/Hue"
msgstr ""

#: mu/modes/api/pi.py:353
msgid ""
"picamera.Lightness() \n"
"Represents the lightness of a :class:`Color` for use in transformations.\n"
"Instances of this class can be constructed directly with a float value, or\n"
"by querying the :attr:`Color.lightness` attribute. Addition, subtraction,\n"
"and multiplication are supported with :class:`Color` instances. For\n"
"example::\n"
"\n"
"    >>> Color(0, 0, 0) + Lightness(0.1)\n"
"    <Color \"#191919\">\n"
"    >>> Color.from_rgb_bytes(0x80, 0x80, 0) - Lightness(0.2)\n"
"    <Color \"#191900\">\n"
"    >>> Lightness(0.9) * Color('wheat')\n"
"    <Color \"#f0cd8d\">"
msgstr ""

#: mu/modes/api/pi.py:356
msgid ""
"picamera.PiCamera(camera_num=0, stereo_mode='none', stereo_decimate=False, "
"resolution=None, framerate=None, sensor_mode=0, led_pin=None, "
"clock_mode='reset', framerate_range=None) \n"
"Provides a pure Python interface to the Raspberry Pi's camera module.\n"
"\n"
"Upon construction, this class initializes the camera. The *camera_num*\n"
"parameter (which defaults to 0) selects the camera module that the instance\n"
"will represent. Only the Raspberry Pi compute module currently supports\n"
"more than one camera.\n"
"\n"
"The *sensor_mode*, *resolution*, *framerate*, *framerate_range*, and\n"
"*clock_mode* parameters provide initial values for the :attr:`sensor_mode`,\n"
":attr:`resolution`, :attr:`framerate`, :attr:`framerate_range`, and\n"
":attr:`clock_mode` attributes of the class (these attributes are all\n"
"relatively expensive to set individually, hence setting them all upon\n"
"construction is a speed optimization). Please refer to the attribute\n"
"documentation for more information and default values.\n"
"\n"
"The *stereo_mode* and *stereo_decimate* parameters configure dual cameras\n"
"on a compute module for sterescopic mode. These parameters can only be set\n"
"at construction time; they cannot be altered later without closing the\n"
":class:`PiCamera` instance and recreating it. The *stereo_mode* parameter\n"
"defaults to ``'none'`` (no stereoscopic mode) but can be set to\n"
"``'side-by-side'`` or ``'top-bottom'`` to activate a stereoscopic mode. If\n"
"the *stereo_decimate* parameter is ``True``, the resolution of the two\n"
"cameras will be halved so that the resulting image has the same dimensions\n"
"as if stereoscopic mode were not being used.\n"
"\n"
"The *led_pin* parameter can be used to specify the GPIO pin which should be\n"
"used to control the camera's LED via the :attr:`led` attribute. If this is\n"
"not specified, it should default to the correct value for your Pi platform.\n"
"You should only need to specify this parameter if you are using a custom\n"
"DeviceTree blob (this is only typical on the `Compute Module`_ platform).\n"
"\n"
"No preview or recording is started automatically upon construction.  Use\n"
"the :meth:`capture` method to capture images, the :meth:`start_recording`\n"
"method to begin recording video, or the :meth:`start_preview` method to\n"
"start live display of the camera's input.\n"
"\n"
"Several attributes are provided to adjust the camera's configuration. Some\n"
"of these can be adjusted while a recording is running, like\n"
":attr:`brightness`. Others, like :attr:`resolution`, can only be adjusted\n"
"when the camera is idle.\n"
"\n"
"When you are finished with the camera, you should ensure you call the\n"
":meth:`close` method to release the camera resources::\n"
"\n"
"    camera = PiCamera()\n"
"    try:\n"
"        # do something with the camera\n"
"        pass\n"
"    finally:\n"
"        camera.close()\n"
"\n"
"The class supports the context manager protocol to make this particularly\n"
"easy (upon exiting the :keyword:`with` statement, the :meth:`close` method\n"
"is automatically called)::\n"
"\n"
"    with PiCamera() as camera:\n"
"        # do something with the camera\n"
"        pass\n"
"\n"
".. versionchanged:: 1.8\n"
"    Added *stereo_mode* and *stereo_decimate* parameters.\n"
"\n"
".. versionchanged:: 1.9\n"
"    Added *resolution*, *framerate*, and *sensor_mode* parameters.\n"
"\n"
".. versionchanged:: 1.10\n"
"    Added *led_pin* parameter.\n"
"\n"
".. versionchanged:: 1.11\n"
"    Added *clock_mode* parameter, and permitted setting of resolution as\n"
"    appropriately formatted string.\n"
"\n"
".. versionchanged:: 1.13\n"
"    Added *framerate_range* parameter.\n"
"\n"
".. _Compute Module: https://www.raspberrypi.org/documentation/hardware/"
"computemodule/cmio-camera.md"
msgstr ""

#: mu/modes/api/pi.py:359
msgid ""
"picamera.PiCameraAlphaStripping() \n"
"Raised when picamera does alpha-byte stripping."
msgstr ""

#: mu/modes/api/pi.py:362
msgid ""
"picamera.PiCameraAlreadyRecording() \n"
"Raised when :meth:`~PiCamera.start_recording` or\n"
":meth:`~PiCamera.record_sequence` are called against a port which already\n"
"has an active recording."
msgstr ""

#: mu/modes/api/pi.py:365
msgid ""
"picamera.PiCameraCircularIO(camera, size=None, seconds=None, "
"bitrate=17000000, splitter_port=1) \n"
"A derivative of :class:`CircularIO` which tracks camera frames.\n"
"\n"
"PiCameraCircularIO provides an in-memory stream based on a ring buffer. It\n"
"is a specialization of :class:`CircularIO` which associates video frame\n"
"meta-data with the recorded stream, accessible from the :attr:`frames`\n"
"property.\n"
"\n"
".. warning::\n"
"\n"
"    The class makes a couple of assumptions which will cause the frame\n"
"    meta-data tracking to break if they are not adhered to:\n"
"\n"
"    * the stream is only ever appended to - no writes ever start from\n"
"      the middle of the stream\n"
"\n"
"    * the stream is never truncated (from the right; being ring buffer\n"
"      based, left truncation will occur automatically); the exception\n"
"      to this is the :meth:`clear` method.\n"
"\n"
"The *camera* parameter specifies the :class:`PiCamera` instance that will\n"
"be recording video to the stream. If specified, the *size* parameter\n"
"determines the maximum size of the stream in bytes. If *size* is not\n"
"specified (or ``None``), then *seconds* must be specified instead. This\n"
"provides the maximum length of the stream in seconds, assuming a data rate\n"
"in bits-per-second given by the *bitrate* parameter (which defaults to\n"
"``17000000``, or 17Mbps, which is also the default bitrate used for video\n"
"recording by :class:`PiCamera`).  You cannot specify both *size* and\n"
"*seconds*.\n"
"\n"
"The *splitter_port* parameter specifies the port of the built-in splitter\n"
"that the video encoder will be attached to. This defaults to ``1`` and most\n"
"users will have no need to specify anything different. If you do specify\n"
"something else, ensure it is equal to the *splitter_port* parameter of the\n"
"corresponding call to :meth:`~PiCamera.start_recording`.  For example::\n"
"\n"
"    import picamera\n"
"\n"
"    with picamera.PiCamera() as camera:\n"
"        with picamera.PiCameraCircularIO(camera, splitter_port=2) as "
"stream:\n"
"            camera.start_recording(stream, format='h264', splitter_port=2)\n"
"            camera.wait_recording(10, splitter_port=2)\n"
"            camera.stop_recording(splitter_port=2)\n"
"\n"
".. attribute:: frames\n"
"\n"
"    Returns an iterator over the frame meta-data.\n"
"\n"
"    As the camera records video to the stream, the class captures the\n"
"    meta-data associated with each frame (in the form of a\n"
"    :class:`PiVideoFrame` tuple), discarding meta-data for frames which are\n"
"    no longer fully stored within the underlying ring buffer.  You can use\n"
"    the frame meta-data to locate, for example, the first keyframe present\n"
"    in the stream in order to determine an appropriate range to extract."
msgstr ""

#: mu/modes/api/pi.py:368
msgid ""
"picamera.PiCameraClosed() \n"
"Raised when a method is called on a camera which has already been closed."
msgstr ""

#: mu/modes/api/pi.py:371
msgid ""
"picamera.PiCameraDeprecated() \n"
"Raised when deprecated functionality in picamera is used."
msgstr ""

#: mu/modes/api/pi.py:373
msgid ""
"picamera.PiCameraError() \n"
"Base class for PiCamera errors."
msgstr ""

#: mu/modes/api/pi.py:375
msgid ""
"picamera.PiCameraFallback() \n"
"Raised when picamera has to fallback on old functionality."
msgstr ""

#: mu/modes/api/pi.py:378
msgid ""
"picamera.PiCameraMMALError(status, prefix='') \n"
"Raised when an MMAL operation fails for whatever reason."
msgstr ""

#: mu/modes/api/pi.py:381
msgid ""
"picamera.PiCameraNotRecording() \n"
"Raised when :meth:`~PiCamera.stop_recording` or\n"
":meth:`~PiCamera.split_recording` are called against a port which has no\n"
"recording active."
msgstr ""

#: mu/modes/api/pi.py:384
msgid ""
"picamera.PiCameraPortDisabled(msg) \n"
"Raised when attempting a buffer operation on a disabled port.\n"
"\n"
"This exception is intended for the common use-case of attempting to get\n"
"or send a buffer just when a component is shutting down (e.g. at script\n"
"teardown) and simplifies the trivial response (ignore the error and shut\n"
"down quietly). For example::\n"
"\n"
"    def _callback(self, port, buf):\n"
"        try:\n"
"            buf = self.outputs[0].get_buffer(False)\n"
"        except PiCameraPortDisabled:\n"
"            return True # shutting down\n"
"        # ..."
msgstr ""

#: mu/modes/api/pi.py:387
msgid ""
"picamera.PiCameraResizerEncoding() \n"
"Raised when picamera uses a resizer purely for encoding purposes."
msgstr ""

#: mu/modes/api/pi.py:390
msgid ""
"picamera.PiCameraRuntimeError() \n"
"Raised when an invalid sequence of operations is attempted with a\n"
":class:`PiCamera` object."
msgstr ""

#: mu/modes/api/pi.py:393
msgid ""
"picamera.PiCameraValueError() \n"
"Raised when an invalid value is fed to a :class:`~PiCamera` object."
msgstr ""

#: mu/modes/api/pi.py:395
msgid ""
"picamera.PiCameraWarning() \n"
"Base class for PiCamera warnings."
msgstr ""

#: mu/modes/api/pi.py:397
msgid ""
"picamera.PiCookedMultiImageEncoder(parent, camera_port, input_port, format, "
"resize, **options) \n"
"Encoder for \"cooked\" (encoded) multiple image output.\n"
"\n"
"This encoder descends from :class:`PiMultiImageEncoder` but includes no\n"
"new functionality as video-port based encodes (which is all this class\n"
"is used for) don't support Exif tag output."
msgstr ""

#: mu/modes/api/pi.py:400
msgid ""
"picamera.PiCookedOneImageEncoder(parent, camera_port, input_port, format, "
"resize, **options) \n"
"Encoder for \"cooked\" (encoded) single image output.\n"
"\n"
"This encoder extends :class:`PiOneImageEncoder` to include Exif tags in the\n"
"output."
msgstr ""

#: mu/modes/api/pi.py:403
msgid ""
"picamera.PiCookedVideoEncoder(parent, camera_port, input_port, format, "
"resize, **options) \n"
"Video encoder for encoded recordings.\n"
"\n"
"This class is a derivative of :class:`PiVideoEncoder` and only exists to\n"
"provide naming symmetry with the image encoder classes."
msgstr ""

#: mu/modes/api/pi.py:406
msgid ""
"picamera.PiEncoder(parent, camera_port, input_port, format, resize, "
"**options) \n"
"Base implementation of an MMAL encoder for use by PiCamera.\n"
"\n"
"The *parent* parameter specifies the :class:`PiCamera` instance that has\n"
"constructed the encoder. The *camera_port* parameter provides the MMAL\n"
"camera port that the encoder should enable for capture (this will be the\n"
"still or video port of the camera component). The *input_port* parameter\n"
"specifies the MMAL port that the encoder should connect to its input.\n"
"Sometimes this will be the same as the camera port, but if other components\n"
"are present in the pipeline (e.g. a splitter), it may be different.\n"
"\n"
"The *format* parameter specifies the format that the encoder should\n"
"produce in its output. This is specified as a string and will be one of\n"
"the following for image encoders:\n"
"\n"
"* ``'jpeg'``\n"
"* ``'png'``\n"
"* ``'gif'``\n"
"* ``'bmp'``\n"
"* ``'yuv'``\n"
"* ``'rgb'``\n"
"* ``'rgba'``\n"
"* ``'bgr'``\n"
"* ``'bgra'``\n"
"\n"
"And one of the following for video encoders:\n"
"\n"
"* ``'h264'``\n"
"* ``'mjpeg'``\n"
"\n"
"The *resize* parameter is either ``None`` (indicating no resizing\n"
"should take place), or a ``(width, height)`` tuple specifying the\n"
"resolution that the output of the encoder should be resized to.\n"
"\n"
"Finally, the *options* parameter specifies additional keyword arguments\n"
"that can be used to configure the encoder (e.g. bitrate for videos, or\n"
"quality for images).\n"
"\n"
".. attribute:: camera_port\n"
"\n"
"    The :class:`~mmalobj.MMALVideoPort` that needs to be activated and\n"
"    deactivated in order to start/stop capture. This is not necessarily the\n"
"    port that the encoder component's input port is connected to (for\n"
"    example, in the case of video-port based captures, this will be the\n"
"    camera video port behind the splitter).\n"
"\n"
".. attribute:: encoder\n"
"\n"
"    The :class:`~mmalobj.MMALComponent` representing the encoder, or\n"
"    ``None`` if no encoder component has been created (some encoder classes\n"
"    don't use an actual encoder component, for example\n"
"    :class:`PiRawImageMixin`).\n"
"\n"
".. attribute:: event\n"
"\n"
"    A :class:`threading.Event` instance used to synchronize operations\n"
"    (like start, stop, and split) between the control thread and the\n"
"    callback thread.\n"
"\n"
".. attribute:: exception\n"
"\n"
"    If an exception occurs during the encoder callback, this attribute is\n"
"    used to store the exception until it can be re-raised in the control\n"
"    thread.\n"
"\n"
".. attribute:: format\n"
"\n"
"    The image or video format that the encoder is expected to produce. This\n"
"    is equal to the value of the *format* parameter.\n"
"\n"
".. attribute:: input_port\n"
"\n"
"    The :class:`~mmalobj.MMALVideoPort` that the encoder should be\n"
"    connected to.\n"
"\n"
".. attribute:: output_port\n"
"\n"
"    The :class:`~mmalobj.MMALVideoPort` that produces the encoder's output.\n"
"    In the case no encoder component is created, this should be the\n"
"    camera/component output port responsible for producing data. In other\n"
"    words, this attribute **must** be set on initialization.\n"
"\n"
".. attribute:: outputs\n"
"\n"
"    A mapping of ``key`` to ``(output, opened)`` tuples where ``output``\n"
"    is a file-like object, and ``opened`` is a bool indicating whether or\n"
"    not we opened the output object (and thus whether we are responsible\n"
"    for eventually closing it).\n"
"\n"
".. attribute:: outputs_lock\n"
"\n"
"    A :func:`threading.Lock` instance used to protect access to\n"
"    :attr:`outputs`.\n"
"\n"
".. attribute:: parent\n"
"\n"
"    The :class:`PiCamera` instance that created this PiEncoder instance.\n"
"\n"
".. attribute:: pool\n"
"\n"
"    A pointer to a pool of MMAL buffers.\n"
"\n"
".. attribute:: resizer\n"
"\n"
"    The :class:`~mmalobj.MMALResizer` component, or ``None`` if no resizer\n"
"    component has been created."
msgstr ""

#: mu/modes/api/pi.py:409
msgid ""
"picamera.PiFramerateRange(low, high) \n"
"This class is a :func:`~collections.namedtuple` derivative used to store\n"
"the low and high limits of a range of framerates. It is recommended that\n"
"you access the information stored by this class by attribute rather than\n"
"position (for example: ``camera.framerate_range.low`` rather than\n"
"``camera.framerate_range[0]``).\n"
"\n"
".. attribute:: low\n"
"\n"
"    The lowest framerate that the camera is permitted to use (inclusive).\n"
"    When the :attr:`~picamera.PiCamera.framerate_range` attribute is\n"
"    queried, this value will always be returned as a\n"
"    :class:`~fractions.Fraction`.\n"
"\n"
".. attribute:: high\n"
"\n"
"    The highest framerate that the camera is permitted to use (inclusive).\n"
"    When the :attr:`~picamera.PiCamera.framerate_range` attribute is\n"
"    queried, this value will always be returned as a\n"
"    :class:`~fractions.Fraction`.\n"
"\n"
".. versionadded:: 1.13"
msgstr ""

#: mu/modes/api/pi.py:412
msgid ""
"picamera.PiImageEncoder(parent, camera_port, input_port, format, resize, "
"**options) \n"
"Encoder for image capture.\n"
"\n"
"This derivative of :class:`PiEncoder` extends the :meth:`_create_encoder`\n"
"method to configure the encoder for a variety of encoded image outputs\n"
"(JPEG, PNG, etc.)."
msgstr ""

#: mu/modes/api/pi.py:415
msgid ""
"picamera.PiMultiImageEncoder(parent, camera_port, input_port, format, "
"resize, **options) \n"
"Encoder for multiple image capture.\n"
"\n"
"This class extends :class:`PiImageEncoder` to handle an iterable of outputs\n"
"instead of a single output. The :meth:`~PiEncoder._callback_write` method\n"
"is extended to terminate capture when the iterable is exhausted, while\n"
":meth:`PiEncoder._open_output` is overridden to begin iteration and rely\n"
"on the new :meth:`_next_output` method to advance output to the next item\n"
"in the iterable."
msgstr ""

#: mu/modes/api/pi.py:418
msgid ""
"picamera.PiNullSink(parent, source) \n"
"Implements an :class:`~mmalobj.MMALNullSink` which can be used in place of\n"
"a renderer.\n"
"\n"
"The *parent* parameter specifies the :class:`PiCamera` instance which\n"
"constructed this :class:`~mmalobj.MMALNullSink`. The *source* parameter\n"
"specifies the :class:`~mmalobj.MMALPort` which the null-sink should connect\n"
"to its input.\n"
"\n"
"The null-sink can act as a drop-in replacement for :class:`PiRenderer` in\n"
"most cases, but obviously doesn't implement attributes like ``alpha``,\n"
"``layer``, etc. as it simply dumps any incoming frames. This is also the\n"
"reason that this class doesn't derive from :class:`PiRenderer` like all\n"
"other classes in this module."
msgstr ""

#: mu/modes/api/pi.py:421
msgid ""
"picamera.PiOneImageEncoder(parent, camera_port, input_port, format, resize, "
"**options) \n"
"Encoder for single image capture.\n"
"\n"
"This class simply extends :meth:`~PiEncoder._callback_write` to terminate\n"
"capture at frame end (i.e. after a single frame has been received)."
msgstr ""

#: mu/modes/api/pi.py:424
msgid ""
"picamera.PiOverlayRenderer(parent, source, resolution=None, format=None, "
"layer=0, alpha=255, fullscreen=True, window=None, crop=None, rotation=0, "
"vflip=False, hflip=False) \n"
"Represents an :class:`~mmalobj.MMALRenderer` with a static source for\n"
"overlays.\n"
"\n"
"This class descends from :class:`PiRenderer` and adds a static *source* for\n"
"the :class:`~mmalobj.MMALRenderer`. The *source* must be an object that\n"
"supports the :ref:`buffer protocol <bufferobjects>` in one of the supported\n"
"formats.\n"
"\n"
"The optional *resolution* parameter specifies the size of the *source* as a\n"
"``(width, height)`` tuple. If this is omitted or ``None`` then the\n"
"resolution is assumed to be the same as the parent camera's current\n"
":attr:`~PiCamera.resolution`. The optional *format* parameter specifies the\n"
"encoding of the *source*. This can be one of the unencoded formats:\n"
"``'yuv'``, ``'rgb'``, ``'rgba'``, ``'bgr'``, or ``'bgra'``. If omitted or\n"
"``None``, *format* will be guessed based on the size of *source* (assuming\n"
"3 bytes for `RGB`_, and 4 bytes for `RGBA`_).\n"
"\n"
"The length of *source* must take into account that widths are rounded up to\n"
"the nearest multiple of 32, and heights to the nearest multiple of 16.  For\n"
"example, if *resolution* is ``(1280, 720)``, and *format* is ``'rgb'`` then\n"
"*source* must be a buffer with length 1280 x 720 x 3 bytes, or 2,764,800\n"
"bytes (because 1280 is a multiple of 32, and 720 is a multiple of 16 no\n"
"extra rounding is required).  However, if *resolution* is ``(97, 57)``, and\n"
"*format* is ``'rgb'`` then *source* must be a buffer with length 128 x 64 x\n"
"3 bytes, or 24,576 bytes (pixels beyond column 97 and row 57 in the source\n"
"will be ignored).\n"
"\n"
"The *layer*, *alpha*, *fullscreen*, and *window* parameters are the same\n"
"as in :class:`PiRenderer`.\n"
"\n"
".. _RGB: https://en.wikipedia.org/wiki/RGB\n"
".. _RGBA: https://en.wikipedia.org/wiki/RGBA_color_space\n"
"\n"
".. versionchanged:: 1.13\n"
"    Added *format* parameter"
msgstr ""

#: mu/modes/api/pi.py:427
msgid ""
"picamera.PiPreviewRenderer(parent, source, resolution=None, layer=2, "
"alpha=255, fullscreen=True, window=None, crop=None, rotation=0, vflip=False, "
"hflip=False) \n"
"Represents an :class:`~mmalobj.MMALRenderer` which uses the camera's\n"
"preview as a source.\n"
"\n"
"This class descends from :class:`PiRenderer` and adds an\n"
":class:`~mmalobj.MMALConnection` to connect the renderer to an MMAL port.\n"
"The *source* parameter specifies the :class:`~mmalobj.MMALPort` to connect\n"
"to the renderer.\n"
"\n"
"The *layer*, *alpha*, *fullscreen*, and *window* parameters are the same\n"
"as in :class:`PiRenderer`."
msgstr ""

#: mu/modes/api/pi.py:430
msgid ""
"picamera.PiRawImageMixin(parent, camera_port, input_port, format, resize, "
"**options) \n"
"Mixin class for \"raw\" (unencoded) image capture.\n"
"\n"
"The :meth:`_callback_write` method is overridden to manually calculate when\n"
"to terminate output."
msgstr ""

#: mu/modes/api/pi.py:433
msgid ""
"picamera.PiRawMixin(parent, camera_port, input_port, format, resize, "
"**options) \n"
"Mixin class for \"raw\" (unencoded) output.\n"
"\n"
"This mixin class overrides the initializer of :class:`PiEncoder`, along\n"
"with :meth:`_create_resizer` and :meth:`_create_encoder` to configure the\n"
"pipeline for unencoded output. Specifically, it disables the construction\n"
"of an encoder, and sets the output port to the input port passed to the\n"
"initializer, unless resizing is required (either for actual resizing, or\n"
"for format conversion) in which case the resizer's output is used."
msgstr ""

#: mu/modes/api/pi.py:436
msgid ""
"picamera.PiRawMultiImageEncoder(parent, camera_port, input_port, format, "
"resize, **options) \n"
"Multiple image encoder for unencoded capture.\n"
"\n"
"This class is a derivative of :class:`PiMultiImageEncoder` and the\n"
":class:`PiRawImageMixin` class intended for use with\n"
":meth:`~PiCamera.capture_sequence` when it is called with an unencoded\n"
"image format.\n"
"\n"
".. warning::\n"
"\n"
"    This class creates an inheritance diamond. Take care to determine the\n"
"    MRO of super-class calls."
msgstr ""

#: mu/modes/api/pi.py:439
msgid ""
"picamera.PiRawOneImageEncoder(parent, camera_port, input_port, format, "
"resize, **options) \n"
"Single image encoder for unencoded capture.\n"
"\n"
"This class is a derivative of :class:`PiOneImageEncoder` and the\n"
":class:`PiRawImageMixin` class intended for use with\n"
":meth:`~PiCamera.capture` (et al) when it is called with an unencoded image\n"
"format.\n"
"\n"
".. warning::\n"
"\n"
"    This class creates an inheritance diamond. Take care to determine the\n"
"    MRO of super-class calls."
msgstr ""

#: mu/modes/api/pi.py:442
msgid ""
"picamera.PiRawVideoEncoder(parent, camera_port, input_port, format, resize, "
"**options) \n"
"Video encoder for unencoded recordings.\n"
"\n"
"This class is a derivative of :class:`PiVideoEncoder` and the\n"
":class:`PiRawMixin` class intended for use with\n"
":meth:`~PiCamera.start_recording` when it is called with an unencoded\n"
"format.\n"
"\n"
".. warning::\n"
"\n"
"    This class creates an inheritance diamond. Take care to determine the\n"
"    MRO of super-class calls."
msgstr ""

#: mu/modes/api/pi.py:445
msgid ""
"picamera.PiRenderer(parent, layer=0, alpha=255, fullscreen=True, "
"window=None, crop=None, rotation=0, vflip=False, hflip=False) \n"
"Wraps :class:`~mmalobj.MMALRenderer` for use by PiCamera.\n"
"\n"
"The *parent* parameter specifies the :class:`PiCamera` instance that has\n"
"constructed this renderer. The *layer* parameter specifies the layer that\n"
"the renderer will inhabit. Higher numbered layers obscure lower numbered\n"
"layers (unless they are partially transparent). The initial opacity of the\n"
"renderer is specified by the *alpha* parameter (which defaults to 255,\n"
"meaning completely opaque). The *fullscreen* parameter which defaults to\n"
"``True`` indicates whether the renderer should occupy the entire display.\n"
"Finally, the *window* parameter (which only has meaning when *fullscreen*\n"
"is ``False``) is a four-tuple of ``(x, y, width, height)`` which gives the\n"
"screen coordinates that the renderer should occupy when it isn't\n"
"full-screen.\n"
"\n"
"This base class isn't directly used by :class:`PiCamera`, but the two\n"
"derivatives defined below, :class:`PiOverlayRenderer` and\n"
":class:`PiPreviewRenderer`, are used to produce overlays and the camera\n"
"preview respectively."
msgstr ""

#: mu/modes/api/pi.py:448
msgid ""
"picamera.PiResolution(width, height) \n"
"A :func:`~collections.namedtuple` derivative which represents a resolution\n"
"with a :attr:`width` and :attr:`height`.\n"
"\n"
".. attribute:: width\n"
"\n"
"    The width of the resolution in pixels\n"
"\n"
".. attribute:: height\n"
"\n"
"    The height of the resolution in pixels\n"
"\n"
".. versionadded:: 1.11"
msgstr ""

#: mu/modes/api/pi.py:451
msgid ""
"picamera.PiVideoEncoder(parent, camera_port, input_port, format, resize, "
"**options) \n"
"Encoder for video recording.\n"
"\n"
"This derivative of :class:`PiEncoder` configures itself for H.264 or MJPEG\n"
"encoding.  It also introduces a :meth:`split` method which is used by\n"
":meth:`~PiCamera.split_recording` and :meth:`~PiCamera.record_sequence` to\n"
"redirect future output to a new filename or object. Finally, it also\n"
"extends :meth:`PiEncoder.start` and :meth:`PiEncoder._callback_write` to\n"
"track video frame meta-data, and to permit recording motion data to a\n"
"separate output object."
msgstr ""

#: mu/modes/api/pi.py:454
msgid ""
"picamera.PiVideoFrame(index, frame_type, frame_size, video_size, split_size, "
"timestamp, complete) \n"
"This class is a :func:`~collections.namedtuple` derivative used to store\n"
"information about a video frame. It is recommended that you access the\n"
"information stored by this class by attribute name rather than position\n"
"(for example: ``frame.index`` rather than ``frame[0]``).\n"
"\n"
".. attribute:: index\n"
"\n"
"    Returns the zero-based number of the frame. This is a monotonic counter\n"
"    that is simply incremented every time the camera starts outputting a\n"
"    new frame. As a consequence, this attribute cannot be used to detect\n"
"    dropped frames. Nor does it necessarily represent actual frames; it\n"
"    will be incremented for SPS headers and motion data buffers too.\n"
"\n"
".. attribute:: frame_type\n"
"\n"
"    Returns a constant indicating the kind of data that the frame contains\n"
"    (see :class:`PiVideoFrameType`). Please note that certain frame types\n"
"    contain no image data at all.\n"
"\n"
".. attribute:: frame_size\n"
"\n"
"    Returns the size in bytes of the current frame. If a frame is written\n"
"    in multiple chunks, this value will increment while :attr:`index`\n"
"    remains static. Query :attr:`complete` to determine whether the frame\n"
"    has been completely output yet.\n"
"\n"
".. attribute:: video_size\n"
"\n"
"    Returns the size in bytes of the entire video up to this frame.  Note\n"
"    that this is unlikely to match the size of the actual file/stream\n"
"    written so far. This is because a stream may utilize buffering which\n"
"    will cause the actual amount written (e.g. to disk) to lag behind the\n"
"    value reported by this attribute.\n"
"\n"
".. attribute:: split_size\n"
"\n"
"    Returns the size in bytes of the video recorded since the last call to\n"
"    either :meth:`~PiCamera.start_recording` or\n"
"    :meth:`~PiCamera.split_recording`. For the reasons explained above,\n"
"    this may differ from the size of the actual file/stream written so far.\n"
"\n"
".. attribute:: timestamp\n"
"\n"
"    Returns the presentation timestamp (PTS) of the frame. This represents\n"
"    the point in time that the Pi received the first line of the frame from\n"
"    the camera.\n"
"\n"
"    The timestamp is measured in microseconds (millionths of a second).\n"
"    When the camera's clock mode is ``'reset'`` (the default), the\n"
"    timestamp is relative to the start of the video recording.  When the\n"
"    camera's :attr:`~PiCamera.clock_mode` is ``'raw'``, it is relative to\n"
"    the last system reboot. See :attr:`~PiCamera.timestamp` for more\n"
"    information.\n"
"\n"
"    .. warning::\n"
"\n"
"        Currently, the camera occasionally returns \"time unknown\" values "
"in\n"
"        this field which picamera represents as ``None``. If you are\n"
"        querying this property you will need to check the value is not\n"
"        ``None`` before using it. This happens for SPS header \"frames\",\n"
"        for example.\n"
"\n"
".. attribute:: complete\n"
"\n"
"    Returns a bool indicating whether the current frame is complete or not.\n"
"    If the frame is complete then :attr:`frame_size` will not increment\n"
"    any further, and will reset for the next frame.\n"
"\n"
".. versionchanged:: 1.5\n"
"    Deprecated :attr:`header` and :attr:`keyframe` attributes and added the\n"
"    new :attr:`frame_type` attribute instead.\n"
"\n"
".. versionchanged:: 1.9\n"
"    Added the :attr:`complete` attribute."
msgstr ""

#: mu/modes/api/pi.py:457
msgid ""
"picamera.PiVideoFrameType() \n"
"This class simply defines constants used to represent the type of a frame\n"
"in :attr:`PiVideoFrame.frame_type`. Effectively it is a namespace for an\n"
"enum.\n"
"\n"
".. attribute:: frame\n"
"\n"
"    Indicates a predicted frame (P-frame). This is the most common frame\n"
"    type.\n"
"\n"
".. attribute:: key_frame\n"
"\n"
"    Indicates an intra-frame (I-frame) also known as a key frame.\n"
"\n"
".. attribute:: sps_header\n"
"\n"
"    Indicates an inline SPS/PPS header (rather than picture data) which is\n"
"    typically used as a split point.\n"
"\n"
".. attribute:: motion_data\n"
"\n"
"    Indicates the frame is inline motion vector data, rather than picture\n"
"    data.\n"
"\n"
".. versionadded:: 1.5"
msgstr ""

#: mu/modes/api/pi.py:460
msgid ""
"picamera.Red() \n"
"Represents the red component of a :class:`Color` for use in\n"
"transformations. Instances of this class can be constructed directly with a\n"
"float value, or by querying the :attr:`Color.red` attribute. Addition,\n"
"subtraction, and multiplication are supported with :class:`Color`\n"
"instances. For example::\n"
"\n"
"    >>> Color.from_rgb(0, 0, 0) + Red(0.5)\n"
"    <Color \"#7f0000\">\n"
"    >>> Color('#f00') - Color('#900').red\n"
"    <Color \"#660000\">\n"
"    >>> (Red(0.1) * Color('red')).red\n"
"    Red(0.1)"
msgstr ""

#: mu/modes/api/pi.py:463
msgid ""
"picamera.Saturation() \n"
"Represents the saturation of a :class:`Color` for use in transformations.\n"
"Instances of this class can be constructed directly with a float value, or\n"
"by querying the :attr:`Color.saturation` attribute. Addition, subtraction,\n"
"and multiplication are supported with :class:`Color` instances. For\n"
"example::\n"
"\n"
"    >>> Color(0.9, 0.9, 0.6) + Saturation(0.1)\n"
"    <Color \"#ebeb92\">\n"
"    >>> Color('red') - Saturation(1)\n"
"    <Color \"#7f7f7f\">\n"
"    >>> Saturation(0.5) * Color('wheat')\n"
"    <Color \"#e4d9c3\">"
msgstr ""

#: mu/modes/api/pi.py:466
msgid ""
"picamera.mmal_check(status, prefix='') \n"
"Checks the return status of an mmal call and raises an exception on\n"
"failure.\n"
"\n"
"The *status* parameter is the result of an MMAL call. If *status* is\n"
"anything other than MMAL_SUCCESS, a :exc:`PiCameraMMALError` exception is\n"
"raised. The optional *prefix* parameter specifies a prefix message to place\n"
"at the start of the exception's message to provide some context."
msgstr ""

#: mu/modes/api/pi.py:469
msgid ""
"picamera.str() \n"
"str(object='') -> str\n"
"str(bytes_or_buffer[, encoding[, errors]]) -> str\n"
"\n"
"Create a new string object from the given object. If encoding or\n"
"errors is specified, then the object must expose a data buffer\n"
"that will be decoded using the given encoding and error handler.\n"
"Otherwise, returns the result of object.__str__() (if defined)\n"
"or repr(object).\n"
"encoding defaults to sys.getdefaultencoding().\n"
"errors defaults to 'strict'."
msgstr ""

#: mu/modes/api/pi.py:472
msgid ""
"guizero.App(title='guizero', width=500, height=500, layout='auto', "
"bgcolor=None) \n"
"Toplevel widget of Tk which represents mostly the main window\n"
"of an application. It has an associated Tcl interpreter."
msgstr ""

#: mu/modes/api/pi.py:475
msgid ""
"guizero.Box(master, layout='auto', grid=None, align=None) \n"
"Frame widget which may contain other widgets and can have a 3D border."
msgstr ""

#: mu/modes/api/pi.py:478
msgid ""
"guizero.ButtonGroup(master, options, selected, horizontal=False, "
"command=None, grid=None, align=None) \n"
"Frame widget which may contain other widgets and can have a 3D border."
msgstr ""

#: mu/modes/api/pi.py:481
msgid ""
"guizero.CheckBox(master, text, command=None, grid=None, align=None) \n"
"Checkbutton widget which is either in on- or off-state."
msgstr ""

#: mu/modes/api/pi.py:484
msgid ""
"guizero.Combo(master, options, selected=None, command=None, grid=None, "
"align=None) \n"
"OptionMenu which allows the user to select a value from a menu."
msgstr ""

#: mu/modes/api/pi.py:487
msgid ""
"guizero.MenuBar(master, toplevel, options) \n"
"Menu widget which allows displaying menu bars, pull-down menus and pop-up "
"menus."
msgstr ""

#: mu/modes/api/pi.py:490
msgid ""
"guizero.Picture(master, image, grid=None, align=None) \n"
"Label widget which can display text and bitmaps."
msgstr ""

#: mu/modes/api/pi.py:493
msgid ""
"guizero.PushButton(master, command, args=None, text='Button', icon=None, "
"pady=10, padx=10, grid=None, align=None) \n"
"Button widget."
msgstr ""

#: mu/modes/api/pi.py:496
msgid ""
"guizero.RadioButton(master, text, value, variable, command=None, grid=None, "
"align=None) \n"
"Radiobutton widget which shows only one of several buttons in on-state."
msgstr ""

#: mu/modes/api/pi.py:499
msgid ""
"guizero.Slider(master, start=0, end=100, horizontal=True, command=None, "
"grid=None, align=None) \n"
"Scale widget which can display a numerical scale."
msgstr ""

#: mu/modes/api/pi.py:502
msgid ""
"guizero.Text(master, text='', size=12, color='black', font='Helvetica', "
"grid=None, align=None) \n"
"Label widget which can display text and bitmaps."
msgstr ""

#: mu/modes/api/pi.py:505
msgid ""
"guizero.TextBox(master, text='', width=10, grid=None, align=None) \n"
"Entry widget which allows displaying simple text."
msgstr ""

#: mu/modes/api/pi.py:508
msgid ""
"guizero.Tk(screenName=None, baseName=None, className='Tk', useTk=1, sync=0, "
"use=None) \n"
"Toplevel widget of Tk which represents mostly the main window\n"
"of an application. It has an associated Tcl interpreter."
msgstr ""

#: mu/modes/api/pi.py:511
msgid ""
"guizero.Waffle(master, height=3, width=3, dim=20, pad=5, color='white', "
"dotty=False, remember=False, grid=None, align=None) \n"
"Frame widget which may contain other widgets and can have a 3D border."
msgstr ""

#: mu/modes/api/pi.py:514
msgid ""
"guizero.exit() \n"
"exit([status])\n"
"\n"
"Exit the interpreter by raising SystemExit(status).\n"
"If the status is omitted or None, it defaults to zero (i.e., success).\n"
"If the status is an integer, it will be used as the system exit status.\n"
"If it is another kind of object, it will be printed and the system\n"
"exit status will be one (i.e., failure)."
msgstr ""

#: mu/modes/api/pi.py:517
msgid ""
"networkzero.DifferentThreadError() \n"
"Common base class for all non-exit exceptions."
msgstr ""

#: mu/modes/api/pi.py:520
msgid ""
"networkzero.InvalidAddressError(address, errno=None) \n"
"Common base class for all non-exit exceptions."
msgstr ""

#: mu/modes/api/pi.py:523
msgid ""
"networkzero.NetworkZeroError() \n"
"Common base class for all non-exit exceptions."
msgstr ""

#: mu/modes/api/pi.py:526
msgid ""
"networkzero.SocketAlreadyExistsError() \n"
"Common base class for all non-exit exceptions."
msgstr ""

#: mu/modes/api/pi.py:529
msgid ""
"networkzero.SocketInterruptedError(after_n_seconds) \n"
"Common base class for all non-exit exceptions."
msgstr ""

#: mu/modes/api/pi.py:532
msgid ""
"networkzero.SocketTimedOutError(n_seconds) \n"
"Common base class for all non-exit exceptions."
msgstr ""

#: mu/modes/api/pi.py:535
msgid ""
"networkzero.action_and_params(commandline) \n"
"Treat a command line as an action followed by parameter\n"
"\n"
":param commandline: a string containing at least an action\n"
":returns: action, [param1, param2, ...]"
msgstr ""

#: mu/modes/api/pi.py:538
msgid ""
"networkzero.address(address=None) \n"
"Convert one of a number of inputs into a valid ip:port string.\n"
"\n"
"Elements which are not provided are filled in as follows:\n"
"    \n"
"    * IP Address: the system is asked for the set of IP addresses "
"associated \n"
"      with the machine and the first one is used, preferring those matching\n"
"      `address` if it is a wildcard.\n"
"    * Port number: a random port is selected from the pool of dynamically-"
"available \n"
"      port numbers.\n"
"  \n"
"This means you can pass any of: nothing; a hostname; an IP address; an IP "
"address with wildcards; a port number\n"
"\n"
"If an IP address is supplied but is invalid, an InvalidAddressError\n"
"exception is raised.\n"
"\n"
":param address: (optional) Any of: an IP address, a port number, or both\n"
"\n"
":returns: a valid ip:port string for this machine"
msgstr ""

#: mu/modes/api/pi.py:541
msgid ""
"networkzero.advertise(name, address=None, fail_if_exists=False, ttl_s=20) \n"
"Advertise a name at an address\n"
"\n"
"Start to advertise service `name` at address `address`. If\n"
"the address is not supplied, one is constructed and this is\n"
"returned by the function. ie this is a typical use::\n"
"\n"
"    address = nw0.advertise(\"myservice\")\n"
"    \n"
":param name: any text\n"
":param address: either \"ip:port\" or None\n"
":param fail_if_exists: fail if this name is already registered?\n"
":param ttl_s: the advert will persist for this many seconds other beacons\n"
":returns: the address given or constructed"
msgstr ""

#: mu/modes/api/pi.py:544
msgid ""
"networkzero.bytes_to_string(data) \n"
"Take bytes and return a base64-encoded unicode string equivalent\n"
"\n"
":param data: a bytes object\n"
":returns: base64-encoded unicode object"
msgstr ""

#: mu/modes/api/pi.py:547
msgid ""
"networkzero.discover(name, wait_for_s=60) \n"
"Discover a service by name\n"
"\n"
"Look for an advert to a named service::\n"
"\n"
"    address = nw0.discover(\"myservice\")\n"
"    \n"
":param name: any text\n"
":param wait_for_s: how many seconds to wait before giving up\n"
":returns: the address found or None"
msgstr ""

#: mu/modes/api/pi.py:550
msgid ""
"networkzero.discover_all() \n"
"Produce a list of all known services and their addresses\n"
"\n"
"Ask for all known services as a list of 2-tuples: (name, address)\n"
"This could, eg, be used to form a dictionary of services::\n"
"\n"
"    services = dict(nw0.discover_all())\n"
"    \n"
":returns: a list of 2-tuples [(name, address), ...]"
msgstr ""

#: mu/modes/api/pi.py:553
msgid ""
"networkzero.discover_group(group, separator='/', exclude=None) \n"
"Produce a list of all services and their addresses in a group\n"
"\n"
"A group is an optional form of namespace within the discovery mechanism.\n"
"If an advertised name has the form <group><sep><name> it is deemed to\n"
"belong to <group>. Note that the service's name is still the full\n"
"string <group><sep><name>. The group concept is simply for discovery and\n"
"to assist differentiation, eg, in a classroom group.\n"
"\n"
":param group: the name of a group prefix\n"
":param separator: the separator character [/]\n"
":param exclude: an iterable of names to exclude (or None)\n"
"\n"
":returns: a list of 2-tuples [(name, address), ...]"
msgstr ""

#: mu/modes/api/pi.py:556
msgid ""
"networkzero.networkzero.config() \n"
"Common configuration elements for networkzero"
msgstr ""

#: mu/modes/api/pi.py:559
msgid ""
"networkzero.networkzero.discovery() \n"
"Advertise and collect advertisements of network services\n"
"\n"
"The discovery module offers:\n"
"\n"
"    * A UDP broadcast socket which:\n"
"      \n"
"      - Listens for and keeps track of service adverts from this and other \n"
"        machines & processes\n"
"      - Broadcasts services advertised by this process\n"
"\n"
"    * A ZeroMQ socket which allow any process on this machine to \n"
"      communicate with its broadcast socket\n"
"\n"
"In other words, we have a beacon which listens to instructions\n"
"from processes on this machine while sending out and listening \n"
"to adverts broadcast to/from all machines on the network.\n"
"\n"
"The beacon is started automatically in a daemon thread when the first \n"
"attempt is made to advertise or discover. If another process already \n"
"has a beacon running (ie if this beacon can't bind to its port) this \n"
"beacon thread will shut down with no further action.\n"
"\n"
"The module-level functions to advertise and discover will open a connection\n"
"to a ZeroMQ socket on this machine (which might be hosted by this or by "
"another\n"
"process) and will use this socket to send commands to the beacon thread "
"which\n"
"will update or return its internal list of advertised services.\n"
"\n"
"As an additional convenience, the :func:`advertise` function will, if given "
"no\n"
"specific address, generate a suitable ip:port pair by interrogating the "
"system.\n"
"This functionality is actually in :func:`networkzero.address` (qv)."
msgstr ""

#: mu/modes/api/pi.py:562
msgid ""
"networkzero.send_message_to(address, message=None, "
"wait_for_reply_s=<Forever>) \n"
"Send a message and return the reply\n"
"\n"
":param address: a nw0 address (eg from `nw0.discover`)\n"
":param message: any simple Python object, including text & tuples\n"
":param wait_for_reply_s: how many seconds to wait for a reply [default: "
"forever]\n"
"\n"
":returns: the reply returned from the address or None if out of time"
msgstr ""

#: mu/modes/api/pi.py:565
msgid ""
"networkzero.send_news_to(address, topic, data=None) \n"
"Publish news to all subscribers\n"
"\n"
":param address: a nw0 address, eg from `nw0.advertise`\n"
":param topic: any text object\n"
":param data: any simple Python object including test & tuples [default: "
"empty]"
msgstr ""

#: mu/modes/api/pi.py:568
msgid ""
"networkzero.send_reply_to(address, reply=None) \n"
"Reply to a message previously received\n"
"\n"
":param address: a nw0 address (eg from `nw0.advertise`)\n"
":param reply: any simple Python object, including text & tuples"
msgstr ""

#: mu/modes/api/pi.py:571
msgid ""
"networkzero.string_to_bytes(data) \n"
"Take a base64-encoded unicode string and return the equivalent bytes\n"
"\n"
":param data: a base64-encoded unicode object\n"
":returns: the equivalent bytes"
msgstr ""

#: mu/modes/api/pi.py:574
msgid ""
"networkzero.wait_for_message_from(address, wait_for_s=<Forever>, "
"autoreply=False) \n"
"Wait for a message\n"
"\n"
":param address: a nw0 address (eg from `nw0.advertise`)\n"
":param wait_for_s: how many seconds to wait for a message before giving up "
"[default: forever]\n"
":param autoreply: whether to send an empty reply [default: No]\n"
"\n"
":returns: the message received from another address or None if out of time"
msgstr ""

#: mu/modes/api/pi.py:577
msgid ""
"networkzero.wait_for_news_from(address, prefix='', wait_for_s=<Forever>) \n"
"Wait for news whose topic starts with `prefix`.\n"
"\n"
":param address: a nw0 address, eg from `nw0.discover`\n"
":param prefix: any text object [default: all messages]\n"
":param wait_for_s: how many seconds to wait before giving up [default: "
"forever]\n"
"\n"
":returns: a 2-tuple of (topic, data) or (None, None) if out of time"
msgstr ""

#: mu/modes/api/pygamezero.py:24
msgid ""
"actor.Actor(image, pos=None, anchor=None, **kwargs) \n"
"Rect(left, top, width, height) -> Rect\n"
"Rect((left, top), (width, height)) -> Rect\n"
"Rect(object) -> Rect\n"
"pygame object for storing rectangular coordinates"
msgstr ""

#: mu/modes/api/pygamezero.py:27
msgid ""
"actor.atan2() \n"
"atan2(y, x)\n"
"\n"
"Return the arc tangent (measured in radians) of y/x.\n"
"Unlike atan(y/x), the signs of both x and y are considered."
msgstr ""

#: mu/modes/api/pygamezero.py:29
msgid ""
"actor.cos() \n"
"cos(x)\n"
"\n"
"Return the cosine of x (measured in radians)."
msgstr ""

#: mu/modes/api/pygamezero.py:31
msgid ""
"actor.degrees() \n"
"degrees(x)\n"
"\n"
"Convert angle x from radians to degrees."
msgstr ""

#: mu/modes/api/pygamezero.py:34
msgid ""
"actor.pygame() \n"
"Pygame is a set of Python modules designed for writing games.\n"
"It is written on top of the excellent SDL library. This allows you\n"
"to create fully featured games and multimedia programs in the python\n"
"language. The package is highly portable, with games running on\n"
"Windows, MacOS, OS X, BeOS, FreeBSD, IRIX, and Linux."
msgstr ""

#: mu/modes/api/pygamezero.py:37
msgid ""
"actor.radians() \n"
"radians(x)\n"
"\n"
"Convert angle x from degrees to radians."
msgstr ""

#: mu/modes/api/pygamezero.py:39
msgid ""
"actor.sin() \n"
"sin(x)\n"
"\n"
"Return the sine of x (measured in radians)."
msgstr ""

#: mu/modes/api/pygamezero.py:40
msgid ""
"actor.sqrt() \n"
"sqrt(x)\n"
"\n"
"Return the square root of x."
msgstr ""

#: mu/modes/api/pygamezero.py:42
msgid ""
"actor.transform_anchor(ax, ay, w, h, angle) \n"
"Transform anchor based upon a rotation of a surface of size w x h."
msgstr ""

#: mu/modes/api/pygamezero.py:45
msgid ""
"animation.Animation(object, tween='linear', duration=1, on_finished=None, "
"**targets) \n"
"An animation manager for object attribute animations.\n"
"\n"
"Each keyword argument given to the Animation on creation (except\n"
"\"type\" and \"duration\") will be *tweened* from their current value\n"
"on the object to the target value specified.\n"
"\n"
"If the value is a list or tuple, then each value inside that will\n"
"be tweened.\n"
"\n"
"The update() method is automatically scheduled with the clock for\n"
"the duration of the animation."
msgstr ""

#: mu/modes/api/pygamezero.py:48
msgid ""
"animation.each_tick(callback) \n"
"Schedule a callback to be called every tick.\n"
"\n"
"Unlike the standard scheduler functions, the callable is passed the\n"
"elapsed clock time since the last call (the same value passed to tick)."
msgstr ""

#: mu/modes/api/pygamezero.py:50
msgid ""
"animation.pow() \n"
"pow(x, y)\n"
"\n"
"Return x**y (x to the power of y)."
msgstr ""

#: mu/modes/api/pygamezero.py:52
msgid ""
"animation.sin() \n"
"sin(x)\n"
"\n"
"Return the sine of x (measured in radians)."
msgstr ""

#: mu/modes/api/pygamezero.py:55
msgid ""
"animation.unschedule(callback) \n"
"Unschedule the given callback.\n"
"\n"
"If scheduled multiple times all instances will be unscheduled."
msgstr ""

#: mu/modes/api/pygamezero.py:58
msgid ""
"clock.Clock() \n"
"A clock used for event scheduling.\n"
"\n"
"When tick() is called, all events scheduled for before now will be called\n"
"in order.\n"
"\n"
"tick() would typically be called from the game loop for the default clock.\n"
"\n"
"Additional clocks could be created - for example, a game clock that could\n"
"be suspended in pause screens. Your code must take care of calling tick()\n"
"or not. You could also run the clock at a different rate if desired, by\n"
"scaling dt before passing it to tick()."
msgstr ""

#: mu/modes/api/pygamezero.py:61
msgid ""
"clock.Event(time, cb, repeat=None) \n"
"An event scheduled for a future time.\n"
"\n"
"Events are ordered by their scheduled execution time."
msgstr ""

#: mu/modes/api/pygamezero.py:64
msgid ""
"clock.each_tick(callback) \n"
"Schedule a callback to be called every tick.\n"
"\n"
"Unlike the standard scheduler functions, the callable is passed the\n"
"elapsed clock time since the last call (the same value passed to tick)."
msgstr ""

#: mu/modes/api/pygamezero.py:67
msgid ""
"clock.heapq() \n"
"Heap queue algorithm (a.k.a. priority queue).\n"
"\n"
"Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for\n"
"all k, counting elements from 0.  For the sake of comparison,\n"
"non-existing elements are considered to be infinite.  The interesting\n"
"property of a heap is that a[0] is always its smallest element.\n"
"\n"
"Usage:\n"
"\n"
"heap = []            # creates an empty heap\n"
"heappush(heap, item) # pushes a new item on the heap\n"
"item = heappop(heap) # pops the smallest item from the heap\n"
"item = heap[0]       # smallest item on the heap without popping it\n"
"heapify(x)           # transforms list into a heap, in-place, in linear "
"time\n"
"item = heapreplace(heap, item) # pops and returns smallest item, and adds\n"
"                               # new item; the heap size is unchanged\n"
"\n"
"Our API differs from textbook heap algorithms as follows:\n"
"\n"
"- We use 0-based indexing.  This makes the relationship between the\n"
"  index for a node and the indexes for its children slightly less\n"
"  obvious, but is more suitable since Python uses 0-based indexing.\n"
"\n"
"- Our heappop() method returns the smallest item, not the largest.\n"
"\n"
"These two make it possible to view the heap as a regular Python list\n"
"without surprises: heap[0] is the smallest item, and heap.sort()\n"
"maintains the heap invariant!"
msgstr ""

#: mu/modes/api/pygamezero.py:70
msgid ""
"clock.method() \n"
"method(function, instance)\n"
"\n"
"Create a bound instance method object."
msgstr ""

#: mu/modes/api/pygamezero.py:73
msgid ""
"clock.schedule(callback, delay) \n"
"Schedule callback to be called once, at `delay` seconds from now.\n"
"\n"
":param callback: A parameterless callable to be called.\n"
":param delay: The delay before the call (in clock time / seconds)."
msgstr ""

#: mu/modes/api/pygamezero.py:76
msgid ""
"clock.schedule_interval(callback, delay) \n"
"Schedule callback to be called every `delay` seconds.\n"
"\n"
"The first occurrence will be after `delay` seconds.\n"
"\n"
":param callback: A parameterless callable to be called.\n"
":param delay: The interval in seconds."
msgstr ""

#: mu/modes/api/pygamezero.py:79
msgid ""
"clock.schedule_unique(callback, delay) \n"
"Schedule callback to be called once, at `delay` seconds from now.\n"
"\n"
"If it was already scheduled, postpone its firing.\n"
"\n"
":param callback: A parameterless callable to be called.\n"
":param delay: The delay before the call (in clock time / seconds)."
msgstr ""

#: mu/modes/api/pygamezero.py:82
msgid ""
"clock.tick(dt) \n"
"Update the clock time and fire all scheduled events.\n"
"\n"
":param dt: The elapsed time in seconds."
msgstr ""

#: mu/modes/api/pygamezero.py:85
msgid ""
"clock.total_ordering(cls) \n"
"Class decorator that fills in missing ordering methods"
msgstr ""

#: mu/modes/api/pygamezero.py:88
msgid ""
"clock.unschedule(callback) \n"
"Unschedule the given callback.\n"
"\n"
"If scheduled multiple times all instances will be unscheduled."
msgstr ""

#: mu/modes/api/pygamezero.py:91
msgid ""
"clock.weak_method(method) \n"
"Quick weak method ref in case users aren't using Python 3.4"
msgstr ""

#: mu/modes/api/pygamezero.py:113
msgid ""
"keyboard.Keyboard() \n"
"The current state of the keyboard.\n"
"\n"
"Each attribute represents a key. For example, ::\n"
"\n"
"    keyboard.a\n"
"\n"
"is True if the 'A' key is depressed, and False otherwise."
msgstr ""

#: mu/modes/api/pygamezero.py:116
msgid ""
"keyboard.keys(value, names=None, *, module=None, qualname=None, type=None, "
"start=1) \n"
"An enumeration."
msgstr ""

#: mu/modes/api/pygamezero.py:118
msgid ""
"keyboard.re() \n"
"Support for regular expressions (RE)."
msgstr ""

#: mu/modes/api/pygamezero.py:120
msgid ""
"keyboard.warn() \n"
"Issue a warning, or maybe ignore it or raise an exception."
msgstr ""

#: mu/modes/api/pygamezero.py:123
msgid ""
"music.ResourceLoader(subpath) \n"
"Abstract resource loader.\n"
"\n"
"A resource loader is a singleton; resources are loaded from a named\n"
"subdirectory of the global 'root'. The `.load()` method actually loads\n"
"a resource.\n"
"\n"
"Additionally, attribute access can be used to access and cache resources.\n"
"Dotted paths can be used to traverse directories."
msgstr ""

#: mu/modes/api/pygamezero.py:126
msgid ""
"music.fadeout(seconds) \n"
"Fade out and eventually stop the music playback.\n"
"\n"
":param seconds: The duration in seconds over which the sound will be faded\n"
"                out. For example, to fade out over half a second, call\n"
"                ``music.fadeout(0.5)``."
msgstr ""

#: mu/modes/api/pygamezero.py:128
msgid ""
"music.get_pos() \n"
"get_pos() -> time\n"
"get the music play time"
msgstr ""

#: mu/modes/api/pygamezero.py:129
msgid ""
"music.get_volume() \n"
"get_volume() -> value\n"
"get the music volume"
msgstr ""

#: mu/modes/api/pygamezero.py:131
msgid ""
"music.is_playing(name) \n"
"Return True if the music is playing and not paused."
msgstr ""

#: mu/modes/api/pygamezero.py:134
msgid ""
"music.pause() \n"
"Temporarily stop playback of the music stream.\n"
"\n"
"Call `unpause()` to resume."
msgstr ""

#: mu/modes/api/pygamezero.py:136
msgid ""
"music.pgzero.constants() \n"
"Names for constants returned by Pygame."
msgstr ""

#: mu/modes/api/pygamezero.py:138
msgid ""
"music.play(name) \n"
"Play a music file from the music/ directory.\n"
"\n"
"The music will loop when it finishes playing."
msgstr ""

#: mu/modes/api/pygamezero.py:140
msgid ""
"music.play_once(name) \n"
"Play a music file from the music/ directory."
msgstr ""

#: mu/modes/api/pygamezero.py:142
msgid ""
"music.queue(name) \n"
"Queue a music file to follow the current track.\n"
"\n"
"This will load a music file and queue it. A queued music file will begin as\n"
"soon as the current music naturally ends. If the current music is ever\n"
"stopped or changed, the queued song will be lost."
msgstr ""

#: mu/modes/api/pygamezero.py:144
msgid ""
"music.rewind() \n"
"rewind() -> None\n"
"restart music"
msgstr ""

#: mu/modes/api/pygamezero.py:145
msgid ""
"music.set_pos() \n"
"set_pos(pos) -> None\n"
"set position to play from"
msgstr ""

#: mu/modes/api/pygamezero.py:146
msgid ""
"music.set_volume() \n"
"set_volume(value) -> None\n"
"set the music volume"
msgstr ""

#: mu/modes/api/pygamezero.py:147
msgid ""
"music.stop() \n"
"stop() -> None\n"
"stop the music playback"
msgstr ""

#: mu/modes/api/pygamezero.py:149
msgid ""
"music.unpause() \n"
"Resume playback of the music stream after it has been paused."
msgstr ""

#: mu/modes/api/pygamezero.py:156
msgid ""
"screen.Screen(surface) \n"
"Interface to the screen."
msgstr ""

#: mu/modes/api/pygamezero.py:158
msgid ""
"screen.SurfacePainter(screen) \n"
"Interface to pygame.draw that is bound to a surface."
msgstr ""

#: mu/modes/api/pygamezero.py:161
msgid ""
"screen.pgzero.ptext() \n"
"pygame-text - high-level text rendering with Pygame.\n"
"\n"
"This module is directly copied from\n"
"\n"
"    https://github.com/cosmologicon/pygame-text\n"
"\n"
"at revision c04e59b7382a832e117f0598cdcbc1bb3eb26db5\n"
"and used under CC0."
msgstr ""

#: mu/modes/api/pygamezero.py:164
msgid ""
"screen.pygame() \n"
"Pygame is a set of Python modules designed for writing games.\n"
"It is written on top of the excellent SDL library. This allows you\n"
"to create fully featured games and multimedia programs in the python\n"
"language. The package is highly portable, with games running on\n"
"Windows, MacOS, OS X, BeOS, FreeBSD, IRIX, and Linux."
msgstr ""

#: mu/modes/api/pygamezero.py:167
msgid ""
"screen.round_pos(pos) \n"
"Round a tuple position so it can be used for drawing."
msgstr ""

#: mu/modes/api/python3.py:24
msgid ""
"argparse.Action(option_strings, dest, nargs=None, const=None, default=None, "
"type=None, choices=None, required=False, help=None, metavar=None) \n"
"Information about how to convert command line strings to Python objects.\n"
"\n"
"Action objects are used by an ArgumentParser to represent the information\n"
"needed to parse a single argument from one or more strings from the\n"
"command line. The keyword arguments to the Action constructor are also\n"
"all attributes of Action instances.\n"
"\n"
"Keyword Arguments:\n"
"\n"
"    - option_strings -- A list of command-line option strings which\n"
"        should be associated with this action.\n"
"\n"
"    - dest -- The name of the attribute to hold the created object(s)\n"
"\n"
"    - nargs -- The number of command-line arguments that should be\n"
"        consumed. By default, one argument will be consumed and a single\n"
"        value will be produced.  Other values include:\n"
"            - N (an integer) consumes N arguments (and produces a list)\n"
"            - '?' consumes zero or one arguments\n"
"            - '*' consumes zero or more arguments (and produces a list)\n"
"            - '+' consumes one or more arguments (and produces a list)\n"
"        Note that the difference between the default and nargs=1 is that\n"
"        with the default, a single value will be produced, while with\n"
"        nargs=1, a list containing a single value will be produced.\n"
"\n"
"    - const -- The value to be produced if the option is specified and the\n"
"        option uses an action that takes no values.\n"
"\n"
"    - default -- The value to be produced if the option is not specified.\n"
"\n"
"    - type -- A callable that accepts a single string argument, and\n"
"        returns the converted value.  The standard Python types str, int,\n"
"        float, and complex are useful examples of such callables.  If None,\n"
"        str is used.\n"
"\n"
"    - choices -- A container of values that should be allowed. If not None,\n"
"        after a command-line argument has been converted to the appropriate\n"
"        type, an exception will be raised if it is not a member of this\n"
"        collection.\n"
"\n"
"    - required -- True if the action must always be specified at the\n"
"        command line. This is only meaningful for optional command-line\n"
"        arguments.\n"
"\n"
"    - help -- The help string describing the argument.\n"
"\n"
"    - metavar -- The name to be used for the option's argument with the\n"
"        help string. If None, the 'dest' value will be used as the name."
msgstr ""

#: mu/modes/api/python3.py:27
msgid ""
"argparse.ArgumentDefaultsHelpFormatter(prog, indent_increment=2, "
"max_help_position=24, width=None) \n"
"Help message formatter which adds default values to argument help.\n"
"\n"
"Only the name of this class is considered a public API. All the methods\n"
"provided by the class are considered an implementation detail."
msgstr ""

#: mu/modes/api/python3.py:30
msgid ""
"argparse.ArgumentError(argument, message) \n"
"An error from creating or using an argument (optional or positional).\n"
"\n"
"The string value of this exception is the message, augmented with\n"
"information about the argument that caused it."
msgstr ""

#: mu/modes/api/python3.py:33
msgid ""
"argparse.ArgumentParser(prog=None, usage=None, description=None, "
"epilog=None, parents=[], formatter_class=<class 'argparse.HelpFormatter'>, "
"prefix_chars='-', fromfile_prefix_chars=None, argument_default=None, "
"conflict_handler='error', add_help=True, allow_abbrev=True) \n"
"Object for parsing command line strings into Python objects.\n"
"\n"
"Keyword Arguments:\n"
"    - prog -- The name of the program (default: sys.argv[0])\n"
"    - usage -- A usage message (default: auto-generated from arguments)\n"
"    - description -- A description of what the program does\n"
"    - epilog -- Text following the argument descriptions\n"
"    - parents -- Parsers whose arguments should be copied into this one\n"
"    - formatter_class -- HelpFormatter class for printing help messages\n"
"    - prefix_chars -- Characters that prefix optional arguments\n"
"    - fromfile_prefix_chars -- Characters that prefix files containing\n"
"        additional arguments\n"
"    - argument_default -- The default value for all arguments\n"
"    - conflict_handler -- String indicating how to handle conflicts\n"
"    - add_help -- Add a -h/-help option\n"
"    - allow_abbrev -- Allow long options to be abbreviated unambiguously"
msgstr ""

#: mu/modes/api/python3.py:36
msgid ""
"argparse.ArgumentTypeError() \n"
"An error from trying to convert a command line string to a type."
msgstr ""

#: mu/modes/api/python3.py:39
msgid ""
"argparse.FileType(mode='r', bufsize=-1, encoding=None, errors=None) \n"
"Factory for creating file object types\n"
"\n"
"Instances of FileType are typically passed as type= arguments to the\n"
"ArgumentParser add_argument() method.\n"
"\n"
"Keyword Arguments:\n"
"    - mode -- A string indicating how the file is to be opened. Accepts the\n"
"        same values as the builtin open() function.\n"
"    - bufsize -- The file's desired buffer size. Accepts the same values as\n"
"        the builtin open() function.\n"
"    - encoding -- The file's encoding. Accepts the same values as the\n"
"        builtin open() function.\n"
"    - errors -- A string indicating how encoding and decoding errors are to\n"
"        be handled. Accepts the same value as the builtin open() function."
msgstr ""

#: mu/modes/api/python3.py:42
msgid ""
"argparse.HelpFormatter(prog, indent_increment=2, max_help_position=24, "
"width=None) \n"
"Formatter for generating usage messages and argument help strings.\n"
"\n"
"Only the name of this class is considered a public API. All the methods\n"
"provided by the class are considered an implementation detail."
msgstr ""

#: mu/modes/api/python3.py:45
msgid ""
"argparse.MetavarTypeHelpFormatter(prog, indent_increment=2, "
"max_help_position=24, width=None) \n"
"Help message formatter which uses the argument 'type' as the default\n"
"metavar value (instead of the argument 'dest')\n"
"\n"
"Only the name of this class is considered a public API. All the methods\n"
"provided by the class are considered an implementation detail."
msgstr ""

#: mu/modes/api/python3.py:48
msgid ""
"argparse.Namespace(**kwargs) \n"
"Simple object for storing attributes.\n"
"\n"
"Implements equality by attribute names and values, and provides a simple\n"
"string representation."
msgstr ""

#: mu/modes/api/python3.py:51
msgid ""
"argparse.RawDescriptionHelpFormatter(prog, indent_increment=2, "
"max_help_position=24, width=None) \n"
"Help message formatter which retains any formatting in descriptions.\n"
"\n"
"Only the name of this class is considered a public API. All the methods\n"
"provided by the class are considered an implementation detail."
msgstr ""

#: mu/modes/api/python3.py:54
msgid ""
"argparse.RawTextHelpFormatter(prog, indent_increment=2, "
"max_help_position=24, width=None) \n"
"Help message formatter which retains formatting of all help text.\n"
"\n"
"Only the name of this class is considered a public API. All the methods\n"
"provided by the class are considered an implementation detail."
msgstr ""

#: mu/modes/api/python3.py:57 mu/modes/api/python3.py:60
msgid ""
"array.array() \n"
"array(typecode [, initializer]) -> array\n"
"\n"
"Return a new array whose items are restricted by typecode, and\n"
"initialized from the optional initializer value, which must be a list,\n"
"string or iterable over elements of the appropriate type.\n"
"\n"
"Arrays represent basic values and behave very much like lists, except\n"
"the type of objects stored in them is constrained. The type is specified\n"
"at object creation time by using a type code, which is a single character.\n"
"The following type codes are defined:\n"
"\n"
"    Type code   C Type             Minimum size in bytes \n"
"    'b'         signed integer     1 \n"
"    'B'         unsigned integer   1 \n"
"    'u'         Unicode character  2 (see note) \n"
"    'h'         signed integer     2 \n"
"    'H'         unsigned integer   2 \n"
"    'i'         signed integer     2 \n"
"    'I'         unsigned integer   2 \n"
"    'l'         signed integer     4 \n"
"    'L'         unsigned integer   4 \n"
"    'q'         signed integer     8 (see note) \n"
"    'Q'         unsigned integer   8 (see note) \n"
"    'f'         floating point     4 \n"
"    'd'         floating point     8 \n"
"\n"
"NOTE: The 'u' typecode corresponds to Python's unicode character. On \n"
"narrow builds this is 2-bytes on wide builds this is 4-bytes.\n"
"\n"
"NOTE: The 'q' and 'Q' type codes are only available if the platform \n"
"C compiler used to build Python supports 'long long', or, on Windows, \n"
"'__int64'.\n"
"\n"
"Methods:\n"
"\n"
"append() -- append a new item to the end of the array\n"
"buffer_info() -- return information giving the current memory info\n"
"byteswap() -- byteswap all the items of the array\n"
"count() -- return number of occurrences of an object\n"
"extend() -- extend array by appending multiple elements from an iterable\n"
"fromfile() -- read items from a file object\n"
"fromlist() -- append items from the list\n"
"frombytes() -- append items from the string\n"
"index() -- return index of first occurrence of an object\n"
"insert() -- insert a new item into the array at a provided position\n"
"pop() -- remove and return item (default last)\n"
"remove() -- remove first occurrence of an object\n"
"reverse() -- reverse the order of the items in the array\n"
"tofile() -- write all items to a file object\n"
"tolist() -- return the array converted to an ordinary list\n"
"tobytes() -- return the array converted to a string\n"
"\n"
"Attributes:\n"
"\n"
"typecode -- the typecode character used to create the array\n"
"itemsize -- the length in bytes of one array item"
msgstr ""

#: mu/modes/api/python3.py:63
msgid ""
"base64.a85decode(b, *, foldspaces=False, adobe=False, ignorechars=b' \\t\\n"
"\\r\\x0b') \n"
"Decode the Ascii85 encoded bytes-like object or ASCII string b.\n"
"\n"
"foldspaces is a flag that specifies whether the 'y' short sequence should "
"be\n"
"accepted as shorthand for 4 consecutive spaces (ASCII 0x20). This feature "
"is\n"
"not supported by the \"standard\" Adobe encoding.\n"
"\n"
"adobe controls whether the input sequence is in Adobe Ascii85 format (i.e.\n"
"is framed with <~ and ~>).\n"
"\n"
"ignorechars should be a byte string containing characters to ignore from "
"the\n"
"input. This should only contain whitespace characters, and by default\n"
"contains all whitespace characters in ASCII.\n"
"\n"
"The result is returned as a bytes object."
msgstr ""

#: mu/modes/api/python3.py:66
msgid ""
"base64.a85encode(b, *, foldspaces=False, wrapcol=0, pad=False, "
"adobe=False) \n"
"Encode bytes-like object b using Ascii85 and return a bytes object.\n"
"\n"
"foldspaces is an optional flag that uses the special short sequence 'y'\n"
"instead of 4 consecutive spaces (ASCII 0x20) as supported by 'btoa'. This\n"
"feature is not supported by the \"standard\" Adobe encoding.\n"
"\n"
"wrapcol controls whether the output should have newline (b'\\n') characters\n"
"added to it. If this is non-zero, each output line will be at most this\n"
"many characters long.\n"
"\n"
"pad controls whether the input is padded to a multiple of 4 before\n"
"encoding. Note that the btoa implementation always pads.\n"
"\n"
"adobe controls whether the encoded byte sequence is framed with <~ and ~>,\n"
"which is used by the Adobe implementation."
msgstr ""

#: mu/modes/api/python3.py:69
msgid ""
"base64.b16decode(s, casefold=False) \n"
"Decode the Base16 encoded bytes-like object or ASCII string s.\n"
"\n"
"Optional casefold is a flag specifying whether a lowercase alphabet is\n"
"acceptable as input.  For security purposes, the default is False.\n"
"\n"
"The result is returned as a bytes object.  A binascii.Error is raised if\n"
"s is incorrectly padded or if there are non-alphabet characters present\n"
"in the input."
msgstr ""

#: mu/modes/api/python3.py:72
msgid ""
"base64.b16encode(s) \n"
"Encode the bytes-like object s using Base16 and return a bytes object.\n"
"    "
msgstr ""

#: mu/modes/api/python3.py:75
msgid ""
"base64.b32decode(s, casefold=False, map01=None) \n"
"Decode the Base32 encoded bytes-like object or ASCII string s.\n"
"\n"
"Optional casefold is a flag specifying whether a lowercase alphabet is\n"
"acceptable as input.  For security purposes, the default is False.\n"
"\n"
"RFC 3548 allows for optional mapping of the digit 0 (zero) to the\n"
"letter O (oh), and for optional mapping of the digit 1 (one) to\n"
"either the letter I (eye) or letter L (el).  The optional argument\n"
"map01 when not None, specifies which letter the digit 1 should be\n"
"mapped to (when map01 is not None, the digit 0 is always mapped to\n"
"the letter O).  For security purposes the default is None, so that\n"
"0 and 1 are not allowed in the input.\n"
"\n"
"The result is returned as a bytes object.  A binascii.Error is raised if\n"
"the input is incorrectly padded or if there are non-alphabet\n"
"characters present in the input."
msgstr ""

#: mu/modes/api/python3.py:78
msgid ""
"base64.b32encode(s) \n"
"Encode the bytes-like object s using Base32 and return a bytes object.\n"
"    "
msgstr ""

#: mu/modes/api/python3.py:81
msgid ""
"base64.b64decode(s, altchars=None, validate=False) \n"
"Decode the Base64 encoded bytes-like object or ASCII string s.\n"
"\n"
"Optional altchars must be a bytes-like object or ASCII string of length 2\n"
"which specifies the alternative alphabet used instead of the '+' and '/'\n"
"characters.\n"
"\n"
"The result is returned as a bytes object.  A binascii.Error is raised if\n"
"s is incorrectly padded.\n"
"\n"
"If validate is False (the default), characters that are neither in the\n"
"normal base-64 alphabet nor the alternative alphabet are discarded prior\n"
"to the padding check.  If validate is True, these non-alphabet characters\n"
"in the input result in a binascii.Error."
msgstr ""

#: mu/modes/api/python3.py:84
msgid ""
"base64.b64encode(s, altchars=None) \n"
"Encode the bytes-like object s using Base64 and return a bytes object.\n"
"\n"
"Optional altchars should be a byte string of length 2 which specifies an\n"
"alternative alphabet for the '+' and '/' characters.  This allows an\n"
"application to e.g. generate url or filesystem safe Base64 strings."
msgstr ""

#: mu/modes/api/python3.py:87
msgid ""
"base64.b85decode(b) \n"
"Decode the base85-encoded bytes-like object or ASCII string b\n"
"\n"
"The result is returned as a bytes object."
msgstr ""

#: mu/modes/api/python3.py:90
msgid ""
"base64.b85encode(b, pad=False) \n"
"Encode bytes-like object b in base85 format and return a bytes object.\n"
"\n"
"If pad is true, the input is padded with b'\\0' so its length is a multiple "
"of\n"
"4 bytes before encoding."
msgstr ""

#: mu/modes/api/python3.py:92
msgid ""
"base64.binascii() \n"
"Conversion between binary data and ASCII"
msgstr ""

#: mu/modes/api/python3.py:94
msgid ""
"base64.decode(input, output) \n"
"Decode a file; input and output are binary files."
msgstr ""

#: mu/modes/api/python3.py:97
msgid ""
"base64.decodebytes(s) \n"
"Decode a bytestring of base-64 data into a bytes object."
msgstr ""

#: mu/modes/api/python3.py:99
msgid ""
"base64.decodestring(s) \n"
"Legacy alias of decodebytes()."
msgstr ""

#: mu/modes/api/python3.py:101
msgid ""
"base64.encode(input, output) \n"
"Encode a file; input and output are binary files."
msgstr ""

#: mu/modes/api/python3.py:104
msgid ""
"base64.encodebytes(s) \n"
"Encode a bytestring into a bytes object containing multiple lines\n"
"of base-64 data."
msgstr ""

#: mu/modes/api/python3.py:106
msgid ""
"base64.encodestring(s) \n"
"Legacy alias of encodebytes()."
msgstr ""

#: mu/modes/api/python3.py:107
msgid ""
"base64.main() \n"
"Small main program"
msgstr ""

#: mu/modes/api/python3.py:109
msgid ""
"base64.re() \n"
"Support for regular expressions (RE).\n"
"\n"
"This module provides regular expression matching operations similar to\n"
"those found in Perl.  It supports both 8-bit and Unicode strings; both\n"
"the pattern and the strings being processed can contain null bytes and\n"
"characters outside the US ASCII range.\n"
"\n"
"Regular expressions can contain both special and ordinary characters.\n"
"Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\n"
"regular expressions; they simply match themselves.  You can\n"
"concatenate ordinary characters, so last matches the string 'last'.\n"
"\n"
"The special characters are:\n"
"    \".\"      Matches any character except a newline.\n"
"    \"^\"      Matches the start of the string.\n"
"    \"$\"      Matches the end of the string or just before the newline at\n"
"             the end of the string.\n"
"    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n"
"             Greedy means that it will match as many repetitions as "
"possible.\n"
"    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n"
"    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n"
"    *?,+?,?? Non-greedy versions of the previous three special characters.\n"
"    {m,n}    Matches from m to n repetitions of the preceding RE.\n"
"    {m,n}?   Non-greedy version of the above.\n"
"    \"\\\\\"     Either escapes special characters or signals a special "
"sequence.\n"
"    []       Indicates a set of characters.\n"
"             A \"^\" as the first character indicates a complementing set.\n"
"    \"|\"      A|B, creates an RE that will match either A or B.\n"
"    (...)    Matches the RE inside the parentheses.\n"
"             The contents can be retrieved or matched later in the string.\n"
"    (?aiLmsux) Set the A, I, L, M, S, U, or X flag for the RE (see below).\n"
"    (?:...)  Non-grouping version of regular parentheses.\n"
"    (?P<name>...) The substring matched by the group is accessible by name.\n"
"    (?P=name)     Matches the text matched earlier by the group named name.\n"
"    (?#...)  A comment; ignored.\n"
"    (?=...)  Matches if ... matches next, but doesn't consume the string.\n"
"    (?!...)  Matches if ... doesn't match next.\n"
"    (?<=...) Matches if preceded by ... (must be fixed length).\n"
"    (?<!...) Matches if not preceded by ... (must be fixed length).\n"
"    (?(id/name)yes|no) Matches yes pattern if the group with id/name "
"matched,\n"
"                       the (optional) no pattern otherwise.\n"
"\n"
"The special sequences consist of \"\\\\\" and a character from the list\n"
"below.  If the ordinary character is not on the list, then the\n"
"resulting RE will match the second character.\n"
"    \\number  Matches the contents of the group of the same number.\n"
"    \\A       Matches only at the start of the string.\n"
"    \\Z       Matches only at the end of the string.\n"
"    \\b       Matches the empty string, but only at the start or end of a "
"word.\n"
"    \\B       Matches the empty string, but not at the start or end of a "
"word.\n"
"    \\d       Matches any decimal digit; equivalent to the set [0-9] in\n"
"             bytes patterns or string patterns with the ASCII flag.\n"
"             In string patterns without the ASCII flag, it will match the "
"whole\n"
"             range of Unicode digits.\n"
"    \\D       Matches any non-digit character; equivalent to [^\\d].\n"
"    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f"
"\\v] in\n"
"             bytes patterns or string patterns with the ASCII flag.\n"
"             In string patterns without the ASCII flag, it will match the "
"whole\n"
"             range of Unicode whitespace characters.\n"
"    \\S       Matches any non-whitespace character; equivalent to [^\\s].\n"
"    \\w       Matches any alphanumeric character; equivalent to [a-zA-"
"Z0-9_]\n"
"             in bytes patterns or string patterns with the ASCII flag.\n"
"             In string patterns without the ASCII flag, it will match the\n"
"             range of Unicode alphanumeric characters (letters plus digits\n"
"             plus underscore).\n"
"             With LOCALE, it will match the set [0-9_] plus characters "
"defined\n"
"             as letters for the current locale.\n"
"    \\W       Matches the complement of \\w.\n"
"    \\\\       Matches a literal backslash.\n"
"\n"
"This module exports the following functions:\n"
"    match     Match a regular expression pattern to the beginning of a "
"string.\n"
"    fullmatch Match a regular expression pattern to all of a string.\n"
"    search    Search a string for the presence of a pattern.\n"
"    sub       Substitute occurrences of a pattern found in a string.\n"
"    subn      Same as sub, but also return the number of substitutions "
"made.\n"
"    split     Split a string by the occurrences of a pattern.\n"
"    findall   Find all occurrences of a pattern in a string.\n"
"    finditer  Return an iterator yielding a match object for each match.\n"
"    compile   Compile a pattern into a RegexObject.\n"
"    purge     Clear the regular expression cache.\n"
"    escape    Backslash all non-alphanumerics in a string.\n"
"\n"
"Some of the functions in this module takes flags as optional parameters:\n"
"    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n"
"                   match the corresponding ASCII character categories\n"
"                   (rather than the whole Unicode categories, which is the\n"
"                   default).\n"
"                   For bytes patterns, this flag is the only available\n"
"                   behaviour and needn't be specified.\n"
"    I  IGNORECASE  Perform case-insensitive matching.\n"
"    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current "
"locale.\n"
"    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n"
"                   as well as the string.\n"
"                   \"$\" matches the end of lines (before a newline) as "
"well\n"
"                   as the end of the string.\n"
"    S  DOTALL      \".\" matches any character at all, including the "
"newline.\n"
"    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n"
"    U  UNICODE     For compatibility only. Ignored for string patterns (it\n"
"                   is the default), and forbidden for bytes patterns.\n"
"\n"
"This module also defines an exception 'error'."
msgstr ""

#: mu/modes/api/python3.py:112
msgid ""
"base64.standard_b64decode(s) \n"
"Decode bytes encoded with the standard Base64 alphabet.\n"
"\n"
"Argument s is a bytes-like object or ASCII string to decode.  The result\n"
"is returned as a bytes object.  A binascii.Error is raised if the input\n"
"is incorrectly padded.  Characters that are not in the standard alphabet\n"
"are discarded prior to the padding check."
msgstr ""

#: mu/modes/api/python3.py:115
msgid ""
"base64.standard_b64encode(s) \n"
"Encode bytes-like object s using the standard Base64 alphabet.\n"
"\n"
"The result is returned as a bytes object."
msgstr ""

#: mu/modes/api/python3.py:118
msgid ""
"base64.struct() \n"
"Functions to convert between Python values and C structs.\n"
"Python bytes objects are used to hold the data representing the C struct\n"
"and also as format strings (explained below) to describe the layout of data\n"
"in the C struct.\n"
"\n"
"The optional first format char indicates byte order, size and alignment:\n"
"  @: native order, size & alignment (default)\n"
"  =: native order, std. size & alignment\n"
"  <: little-endian, std. size & alignment\n"
"  >: big-endian, std. size & alignment\n"
"  !: same as >\n"
"\n"
"The remaining chars indicate types of args and must match exactly;\n"
"these can be preceded by a decimal repeat count:\n"
"  x: pad byte (no data); c:char; b:signed byte; B:unsigned byte;\n"
"  ?: _Bool (requires C99; if not available, char is used instead)\n"
"  h:short; H:unsigned short; i:int; I:unsigned int;\n"
"  l:long; L:unsigned long; f:float; d:double; e:half-float.\n"
"Special cases (preceding decimal count indicates length):\n"
"  s:string (array of char); p: pascal string (with count byte).\n"
"Special cases (only available in native format):\n"
"  n:ssize_t; N:size_t;\n"
"  P:an integer type that is wide enough to hold a pointer.\n"
"Special case (not in native mode unless 'long long' in platform C):\n"
"  q:long long; Q:unsigned long long\n"
"Whitespace between formats is ignored.\n"
"\n"
"The variable struct.error is an exception raised on errors."
msgstr ""

#: mu/modes/api/python3.py:121
msgid ""
"base64.urlsafe_b64decode(s) \n"
"Decode bytes using the URL- and filesystem-safe Base64 alphabet.\n"
"\n"
"Argument s is a bytes-like object or ASCII string to decode.  The result\n"
"is returned as a bytes object.  A binascii.Error is raised if the input\n"
"is incorrectly padded.  Characters that are not in the URL-safe base-64\n"
"alphabet, and are not a plus '+' or slash '/', are discarded prior to the\n"
"padding check.\n"
"\n"
"The alphabet uses '-' instead of '+' and '_' instead of '/'."
msgstr ""

#: mu/modes/api/python3.py:124
msgid ""
"base64.urlsafe_b64encode(s) \n"
"Encode bytes using the URL- and filesystem-safe Base64 alphabet.\n"
"\n"
"Argument s is a bytes-like object to encode.  The result is returned as a\n"
"bytes object.  The alphabet uses '-' instead of '+' and '_' instead of\n"
"'/'."
msgstr ""

#: mu/modes/api/python3.py:127
msgid ""
"collections.ByteString() \n"
"This unifies bytes and bytearray.\n"
"\n"
"XXX Should add all their methods."
msgstr ""

#: mu/modes/api/python3.py:130
msgid ""
"collections.ChainMap(*maps) \n"
"A ChainMap groups multiple dicts (or other mappings) together\n"
"to create a single, updateable view.\n"
"\n"
"The underlying mappings are stored in a list.  That list is public and can\n"
"be accessed or updated using the *maps* attribute.  There is no other\n"
"state.\n"
"\n"
"Lookups search the underlying mappings successively until a key is found.\n"
"In contrast, writes, updates, and deletions only operate on the first\n"
"mapping."
msgstr ""

#: mu/modes/api/python3.py:133
msgid ""
"collections.Counter(*args, **kwds) \n"
"Dict subclass for counting hashable items.  Sometimes called a bag\n"
"or multiset.  Elements are stored as dictionary keys and their counts\n"
"are stored as dictionary values.\n"
"\n"
">>> c = Counter('abcdeabcdabcaba')  # count elements from a string\n"
"\n"
">>> c.most_common(3)                # three most common elements\n"
"[('a', 5), ('b', 4), ('c', 3)]\n"
">>> sorted(c)                       # list all unique elements\n"
"['a', 'b', 'c', 'd', 'e']\n"
">>> ''.join(sorted(c.elements()))   # list elements with repetitions\n"
"'aaaaabbbbcccdde'\n"
">>> sum(c.values())                 # total of all counts\n"
"15\n"
"\n"
">>> c['a']                          # count of letter 'a'\n"
"5\n"
">>> for elem in 'shazam':           # update counts from an iterable\n"
"...     c[elem] += 1                # by adding 1 to each element's count\n"
">>> c['a']                          # now there are seven 'a'\n"
"7\n"
">>> del c['b']                      # remove all 'b'\n"
">>> c['b']                          # now there are zero 'b'\n"
"0\n"
"\n"
">>> d = Counter('simsalabim')       # make another counter\n"
">>> c.update(d)                     # add in the second counter\n"
">>> c['a']                          # now there are nine 'a'\n"
"9\n"
"\n"
">>> c.clear()                       # empty the counter\n"
">>> c\n"
"Counter()\n"
"\n"
"Note:  If a count is set to zero or reduced to zero, it will remain\n"
"in the counter until the entry is deleted or the counter is cleared:\n"
"\n"
">>> c = Counter('aaabbc')\n"
">>> c['b'] -= 2                     # reduce the count of 'b' by two\n"
">>> c.most_common()                 # 'b' is still in, but its count is "
"zero\n"
"[('a', 3), ('c', 1), ('b', 0)]"
msgstr ""

#: mu/modes/api/python3.py:136
msgid ""
"collections.ItemsView(mapping) \n"
"A set is a finite, iterable container.\n"
"\n"
"This class provides concrete generic implementations of all\n"
"methods except for __contains__, __iter__ and __len__.\n"
"\n"
"To override the comparisons (presumably for speed, as the\n"
"semantics are fixed), redefine __le__ and __ge__,\n"
"then the other operations will automatically follow suit."
msgstr ""

#: mu/modes/api/python3.py:139
msgid ""
"collections.KeysView(mapping) \n"
"A set is a finite, iterable container.\n"
"\n"
"This class provides concrete generic implementations of all\n"
"methods except for __contains__, __iter__ and __len__.\n"
"\n"
"To override the comparisons (presumably for speed, as the\n"
"semantics are fixed), redefine __le__ and __ge__,\n"
"then the other operations will automatically follow suit."
msgstr ""

#: mu/modes/api/python3.py:142
msgid ""
"collections.MutableSequence() \n"
"All the operations on a read-only sequence.\n"
"\n"
"Concrete subclasses must override __new__ or __init__,\n"
"__getitem__, and __len__."
msgstr ""

#: mu/modes/api/python3.py:145
msgid ""
"collections.MutableSet() \n"
"A mutable set is a finite, iterable container.\n"
"\n"
"This class provides concrete generic implementations of all\n"
"methods except for __contains__, __iter__, __len__,\n"
"add(), and discard().\n"
"\n"
"To override the comparisons (presumably for speed, as the\n"
"semantics are fixed), all you have to do is redefine __le__ and\n"
"then the other operations will automatically follow suit."
msgstr ""

#: mu/modes/api/python3.py:147
msgid ""
"collections.OrderedDict() \n"
"Dictionary that remembers insertion order"
msgstr ""

#: mu/modes/api/python3.py:149
msgid ""
"collections.Sequence() \n"
"All the operations on a read-only sequence.\n"
"\n"
"Concrete subclasses must override __new__ or __init__,\n"
"__getitem__, and __len__."
msgstr ""

#: mu/modes/api/python3.py:152
msgid ""
"collections.Set() \n"
"A set is a finite, iterable container.\n"
"\n"
"This class provides concrete generic implementations of all\n"
"methods except for __contains__, __iter__ and __len__.\n"
"\n"
"To override the comparisons (presumably for speed, as the\n"
"semantics are fixed), redefine __le__ and __ge__,\n"
"then the other operations will automatically follow suit."
msgstr ""

#: mu/modes/api/python3.py:155
msgid ""
"collections.UserList(initlist=None) \n"
"A more or less complete user-defined wrapper around list objects."
msgstr ""

#: mu/modes/api/python3.py:158
msgid ""
"collections.UserString(seq) \n"
"All the operations on a read-only sequence.\n"
"\n"
"Concrete subclasses must override __new__ or __init__,\n"
"__getitem__, and __len__."
msgstr ""

#: mu/modes/api/python3.py:161
msgid ""
"collections.defaultdict() \n"
"defaultdict(default_factory[, ...]) --> dict with default factory\n"
"\n"
"The default factory is called without arguments to produce\n"
"a new value when a key is not present, in __getitem__ only.\n"
"A defaultdict compares equal to a dict with the same items.\n"
"All remaining arguments are treated the same as if they were\n"
"passed to the dict constructor, including keyword arguments."
msgstr ""

#: mu/modes/api/python3.py:164
msgid ""
"collections.deque() \n"
"deque([iterable[, maxlen]]) --> deque object\n"
"\n"
"A list-like sequence optimized for data accesses near its endpoints."
msgstr ""

#: mu/modes/api/python3.py:167
msgid ""
"collections.namedtuple(typename, field_names, *, verbose=False, "
"rename=False, module=None) \n"
"Returns a new subclass of tuple with named fields.\n"
"\n"
">>> Point = namedtuple('Point', ['x', 'y'])\n"
">>> Point.__doc__                   # docstring for the new class\n"
"'Point(x, y)'\n"
">>> p = Point(11, y=22)             # instantiate with positional args or "
"keywords\n"
">>> p[0] + p[1]                     # indexable like a plain tuple\n"
"33\n"
">>> x, y = p                        # unpack like a regular tuple\n"
">>> x, y\n"
"(11, 22)\n"
">>> p.x + p.y                       # fields also accessible by name\n"
"33\n"
">>> d = p._asdict()                 # convert to a dictionary\n"
">>> d['x']\n"
"11\n"
">>> Point(**d)                      # convert from a dictionary\n"
"Point(x=11, y=22)\n"
">>> p._replace(x=100)               # _replace() is like str.replace() but "
"targets named fields\n"
"Point(x=100, y=22)"
msgstr ""

#: mu/modes/api/python3.py:170
msgid ""
"csv.Dialect() \n"
"Describe a CSV dialect.\n"
"\n"
"This must be subclassed (see csv.excel).  Valid attributes are:\n"
"delimiter, quotechar, escapechar, doublequote, skipinitialspace,\n"
"lineterminator, quoting."
msgstr ""

#: mu/modes/api/python3.py:172
msgid ""
"csv.Error() \n"
"Common base class for all non-exit exceptions."
msgstr ""

#: mu/modes/api/python3.py:173
msgid ""
"csv.OrderedDict() \n"
"Dictionary that remembers insertion order"
msgstr ""

#: mu/modes/api/python3.py:175
msgid ""
"csv.Sniffer() \n"
"\"Sniffs\" the format of a CSV file (i.e. delimiter, quotechar)\n"
"Returns a Dialect object."
msgstr ""

#: mu/modes/api/python3.py:178
msgid ""
"csv.StringIO(initial_value='', newline='\\n') \n"
"Text I/O implementation using an in-memory buffer.\n"
"\n"
"The initial_value argument sets the value of object.  The newline\n"
"argument is like the one of TextIOWrapper's constructor."
msgstr ""

#: mu/modes/api/python3.py:181
msgid ""
"csv.excel() \n"
"Describe the usual properties of Excel-generated CSV files."
msgstr ""

#: mu/modes/api/python3.py:184
msgid ""
"csv.excel_tab() \n"
"Describe the usual properties of Excel-generated TAB-delimited files."
msgstr ""

#: mu/modes/api/python3.py:187
msgid ""
"csv.field_size_limit() \n"
"Sets an upper limit on parsed fields.\n"
"    csv.field_size_limit([limit])\n"
"\n"
"Returns old limit. If limit is not given, no new limit is set and\n"
"the old limit is returned"
msgstr ""

#: mu/modes/api/python3.py:190
msgid ""
"csv.get_dialect() \n"
"Return the dialect instance associated with name.\n"
"dialect = csv.get_dialect(name)"
msgstr ""

#: mu/modes/api/python3.py:193
msgid ""
"csv.list_dialects() \n"
"Return a list of all know dialect names.\n"
"names = csv.list_dialects()"
msgstr ""

#: mu/modes/api/python3.py:196
msgid ""
"csv.re() \n"
"Support for regular expressions (RE).\n"
"\n"
"This module provides regular expression matching operations similar to\n"
"those found in Perl.  It supports both 8-bit and Unicode strings; both\n"
"the pattern and the strings being processed can contain null bytes and\n"
"characters outside the US ASCII range.\n"
"\n"
"Regular expressions can contain both special and ordinary characters.\n"
"Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\n"
"regular expressions; they simply match themselves.  You can\n"
"concatenate ordinary characters, so last matches the string 'last'.\n"
"\n"
"The special characters are:\n"
"    \".\"      Matches any character except a newline.\n"
"    \"^\"      Matches the start of the string.\n"
"    \"$\"      Matches the end of the string or just before the newline at\n"
"             the end of the string.\n"
"    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n"
"             Greedy means that it will match as many repetitions as "
"possible.\n"
"    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n"
"    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n"
"    *?,+?,?? Non-greedy versions of the previous three special characters.\n"
"    {m,n}    Matches from m to n repetitions of the preceding RE.\n"
"    {m,n}?   Non-greedy version of the above.\n"
"    \"\\\\\"     Either escapes special characters or signals a special "
"sequence.\n"
"    []       Indicates a set of characters.\n"
"             A \"^\" as the first character indicates a complementing set.\n"
"    \"|\"      A|B, creates an RE that will match either A or B.\n"
"    (...)    Matches the RE inside the parentheses.\n"
"             The contents can be retrieved or matched later in the string.\n"
"    (?aiLmsux) Set the A, I, L, M, S, U, or X flag for the RE (see below).\n"
"    (?:...)  Non-grouping version of regular parentheses.\n"
"    (?P<name>...) The substring matched by the group is accessible by name.\n"
"    (?P=name)     Matches the text matched earlier by the group named name.\n"
"    (?#...)  A comment; ignored.\n"
"    (?=...)  Matches if ... matches next, but doesn't consume the string.\n"
"    (?!...)  Matches if ... doesn't match next.\n"
"    (?<=...) Matches if preceded by ... (must be fixed length).\n"
"    (?<!...) Matches if not preceded by ... (must be fixed length).\n"
"    (?(id/name)yes|no) Matches yes pattern if the group with id/name "
"matched,\n"
"                       the (optional) no pattern otherwise.\n"
"\n"
"The special sequences consist of \"\\\\\" and a character from the list\n"
"below.  If the ordinary character is not on the list, then the\n"
"resulting RE will match the second character.\n"
"    \\number  Matches the contents of the group of the same number.\n"
"    \\A       Matches only at the start of the string.\n"
"    \\Z       Matches only at the end of the string.\n"
"    \\b       Matches the empty string, but only at the start or end of a "
"word.\n"
"    \\B       Matches the empty string, but not at the start or end of a "
"word.\n"
"    \\d       Matches any decimal digit; equivalent to the set [0-9] in\n"
"             bytes patterns or string patterns with the ASCII flag.\n"
"             In string patterns without the ASCII flag, it will match the "
"whole\n"
"             range of Unicode digits.\n"
"    \\D       Matches any non-digit character; equivalent to [^\\d].\n"
"    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f"
"\\v] in\n"
"             bytes patterns or string patterns with the ASCII flag.\n"
"             In string patterns without the ASCII flag, it will match the "
"whole\n"
"             range of Unicode whitespace characters.\n"
"    \\S       Matches any non-whitespace character; equivalent to [^\\s].\n"
"    \\w       Matches any alphanumeric character; equivalent to [a-zA-"
"Z0-9_]\n"
"             in bytes patterns or string patterns with the ASCII flag.\n"
"             In string patterns without the ASCII flag, it will match the\n"
"             range of Unicode alphanumeric characters (letters plus digits\n"
"             plus underscore).\n"
"             With LOCALE, it will match the set [0-9_] plus characters "
"defined\n"
"             as letters for the current locale.\n"
"    \\W       Matches the complement of \\w.\n"
"    \\\\       Matches a literal backslash.\n"
"\n"
"This module exports the following functions:\n"
"    match     Match a regular expression pattern to the beginning of a "
"string.\n"
"    fullmatch Match a regular expression pattern to all of a string.\n"
"    search    Search a string for the presence of a pattern.\n"
"    sub       Substitute occurrences of a pattern found in a string.\n"
"    subn      Same as sub, but also return the number of substitutions "
"made.\n"
"    split     Split a string by the occurrences of a pattern.\n"
"    findall   Find all occurrences of a pattern in a string.\n"
"    finditer  Return an iterator yielding a match object for each match.\n"
"    compile   Compile a pattern into a RegexObject.\n"
"    purge     Clear the regular expression cache.\n"
"    escape    Backslash all non-alphanumerics in a string.\n"
"\n"
"Some of the functions in this module takes flags as optional parameters:\n"
"    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n"
"                   match the corresponding ASCII character categories\n"
"                   (rather than the whole Unicode categories, which is the\n"
"                   default).\n"
"                   For bytes patterns, this flag is the only available\n"
"                   behaviour and needn't be specified.\n"
"    I  IGNORECASE  Perform case-insensitive matching.\n"
"    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current "
"locale.\n"
"    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n"
"                   as well as the string.\n"
"                   \"$\" matches the end of lines (before a newline) as "
"well\n"
"                   as the end of the string.\n"
"    S  DOTALL      \".\" matches any character at all, including the "
"newline.\n"
"    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n"
"    U  UNICODE     For compatibility only. Ignored for string patterns (it\n"
"                   is the default), and forbidden for bytes patterns.\n"
"\n"
"This module also defines an exception 'error'."
msgstr ""

#: mu/modes/api/python3.py:199
msgid ""
"csv.reader() \n"
"csv_reader = reader(iterable [, dialect='excel']\n"
"                        [optional keyword args])\n"
"    for row in csv_reader:\n"
"        process(row)\n"
"\n"
"The \"iterable\" argument can be any object that returns a line\n"
"of input for each iteration, such as a file object or a list.  The\n"
"optional \"dialect\" parameter is discussed below.  The function\n"
"also accepts optional keyword arguments which override settings\n"
"provided by the dialect.\n"
"\n"
"The returned object is an iterator.  Each iteration returns a row\n"
"of the CSV file (which can span multiple input lines)."
msgstr ""

#: mu/modes/api/python3.py:202
msgid ""
"csv.register_dialect() \n"
"Create a mapping from a string name to a dialect class.\n"
"dialect = csv.register_dialect(name[, dialect[, **fmtparams]])"
msgstr ""

#: mu/modes/api/python3.py:205
msgid ""
"csv.unix_dialect() \n"
"Describe the usual properties of Unix-generated CSV files."
msgstr ""

#: mu/modes/api/python3.py:208
msgid ""
"csv.unregister_dialect() \n"
"Delete the name/dialect mapping associated with a string name.\n"
"csv.unregister_dialect(name)"
msgstr ""

#: mu/modes/api/python3.py:211
msgid ""
"csv.writer() \n"
"csv_writer = csv.writer(fileobj [, dialect='excel']\n"
"                            [optional keyword args])\n"
"    for row in sequence:\n"
"        csv_writer.writerow(row)\n"
"\n"
"    [or]\n"
"\n"
"    csv_writer = csv.writer(fileobj [, dialect='excel']\n"
"                            [optional keyword args])\n"
"    csv_writer.writerows(rows)\n"
"\n"
"The \"fileobj\" argument can be any object that supports the file API."
msgstr ""

#: mu/modes/api/python3.py:213 mu/modes/api/python3.py:214
msgid ""
"datetime.date() \n"
"date(year, month, day) --> date object"
msgstr ""

#: mu/modes/api/python3.py:216 mu/modes/api/python3.py:219
msgid ""
"datetime.datetime() \n"
"datetime(year, month, day[, hour[, minute[, second[, microsecond[,"
"tzinfo]]]]])\n"
"\n"
"The year, month and day arguments are required. tzinfo may be None, or an\n"
"instance of a tzinfo subclass. The remaining arguments may be ints."
msgstr ""

#: mu/modes/api/python3.py:222 mu/modes/api/python3.py:225
msgid ""
"datetime.time() \n"
"time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object\n"
"\n"
"All arguments are optional. tzinfo may be None, or an instance of\n"
"a tzinfo subclass. The remaining arguments may be ints."
msgstr ""

#: mu/modes/api/python3.py:227 mu/modes/api/python3.py:228
msgid ""
"datetime.timedelta() \n"
"Difference between two datetime values."
msgstr ""

#: mu/modes/api/python3.py:229 mu/modes/api/python3.py:230
msgid ""
"datetime.timezone() \n"
"Fixed offset from UTC implementation of tzinfo."
msgstr ""

#: mu/modes/api/python3.py:231 mu/modes/api/python3.py:232
msgid ""
"datetime.tzinfo() \n"
"Abstract base class for time zone info objects."
msgstr ""

#: mu/modes/api/python3.py:234
msgid ""
"functools.WeakKeyDictionary(dict=None) \n"
"Mapping class that references keys weakly.\n"
"\n"
"Entries in the dictionary will be discarded when there is no\n"
"longer a strong reference to the key. This can be used to\n"
"associate additional data with an object owned by other parts of\n"
"an application without adding attributes to those objects. This\n"
"can be especially useful with objects that override attribute\n"
"accesses."
msgstr ""

#: mu/modes/api/python3.py:237
msgid ""
"functools.cmp_to_key() \n"
"Convert a cmp= function into a key= function."
msgstr ""

#: mu/modes/api/python3.py:240
msgid ""
"functools.get_cache_token() \n"
"Returns the current ABC cache token.\n"
"\n"
"The token is an opaque object (supporting equality testing) identifying the\n"
"current version of the ABC cache for virtual subclasses. The token changes\n"
"with every call to ``register()`` on any ABC."
msgstr ""

#: mu/modes/api/python3.py:243
msgid ""
"functools.lru_cache(maxsize=128, typed=False) \n"
"Least-recently-used cache decorator.\n"
"\n"
"If *maxsize* is set to None, the LRU features are disabled and the cache\n"
"can grow without bound.\n"
"\n"
"If *typed* is True, arguments of different types will be cached separately.\n"
"For example, f(3.0) and f(3) will be treated as distinct calls with\n"
"distinct results.\n"
"\n"
"Arguments to the cached function must be hashable.\n"
"\n"
"View the cache statistics named tuple (hits, misses, maxsize, currsize)\n"
"with f.cache_info().  Clear the cache and statistics with f.cache_clear().\n"
"Access the underlying function with f.__wrapped__.\n"
"\n"
"See:  http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used"
msgstr ""

#: mu/modes/api/python3.py:246
msgid ""
"functools.namedtuple(typename, field_names, *, verbose=False, rename=False, "
"module=None) \n"
"Returns a new subclass of tuple with named fields.\n"
"\n"
">>> Point = namedtuple('Point', ['x', 'y'])\n"
">>> Point.__doc__                   # docstring for the new class\n"
"'Point(x, y)'\n"
">>> p = Point(11, y=22)             # instantiate with positional args or "
"keywords\n"
">>> p[0] + p[1]                     # indexable like a plain tuple\n"
"33\n"
">>> x, y = p                        # unpack like a regular tuple\n"
">>> x, y\n"
"(11, 22)\n"
">>> p.x + p.y                       # fields also accessible by name\n"
"33\n"
">>> d = p._asdict()                 # convert to a dictionary\n"
">>> d['x']\n"
"11\n"
">>> Point(**d)                      # convert from a dictionary\n"
"Point(x=11, y=22)\n"
">>> p._replace(x=100)               # _replace() is like str.replace() but "
"targets named fields\n"
"Point(x=100, y=22)"
msgstr ""

#: mu/modes/api/python3.py:249
msgid ""
"functools.partial() \n"
"partial(func, *args, **keywords) - new function with partial application\n"
"of the given arguments and keywords."
msgstr ""

#: mu/modes/api/python3.py:252
msgid ""
"functools.partialmethod(func, *args, **keywords) \n"
"Method descriptor with partial application of the given arguments\n"
"and keywords.\n"
"\n"
"Supports wrapping existing descriptors and handles non-descriptor\n"
"callables as instance methods."
msgstr ""

#: mu/modes/api/python3.py:255
msgid ""
"functools.recursive_repr(fillvalue='...') \n"
"Decorator to make a repr function return fillvalue for a recursive call"
msgstr ""

#: mu/modes/api/python3.py:258
msgid ""
"functools.reduce() \n"
"reduce(function, sequence[, initial]) -> value\n"
"\n"
"Apply a function of two arguments cumulatively to the items of a sequence,\n"
"from left to right, so as to reduce the sequence to a single value.\n"
"For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates\n"
"((((1+2)+3)+4)+5).  If initial is present, it is placed before the items\n"
"of the sequence in the calculation, and serves as a default when the\n"
"sequence is empty."
msgstr ""

#: mu/modes/api/python3.py:261
msgid ""
"functools.singledispatch(func) \n"
"Single-dispatch generic function decorator.\n"
"\n"
"Transforms a function into a generic function, which can have different\n"
"behaviours depending upon the type of its first argument. The decorated\n"
"function acts as the default implementation, and additional\n"
"implementations can be registered using the register() attribute of the\n"
"generic function."
msgstr ""

#: mu/modes/api/python3.py:264
msgid ""
"functools.total_ordering(cls) \n"
"Class decorator that fills in missing ordering methods"
msgstr ""

#: mu/modes/api/python3.py:267
msgid ""
"functools.update_wrapper(wrapper, wrapped, assigned='__module__', "
"'__name__', '__qualname__', '__doc__', '__annotations__', "
"updated='__dict__',) \n"
"Update a wrapper function to look like the wrapped function\n"
"\n"
"wrapper is the function to be updated\n"
"wrapped is the original function\n"
"assigned is a tuple naming the attributes assigned directly\n"
"from the wrapped function to the wrapper function (defaults to\n"
"functools.WRAPPER_ASSIGNMENTS)\n"
"updated is a tuple naming the attributes of the wrapper that\n"
"are updated with the corresponding attribute from the wrapped\n"
"function (defaults to functools.WRAPPER_UPDATES)"
msgstr ""

#: mu/modes/api/python3.py:270
msgid ""
"functools.wraps(wrapped, assigned='__module__', '__name__', '__qualname__', "
"'__doc__', '__annotations__', updated='__dict__',) \n"
"Decorator factory to apply update_wrapper() to a wrapper function\n"
"\n"
"Returns a decorator that invokes update_wrapper() with the decorated\n"
"function as the wrapper argument and the arguments to wraps() as the\n"
"remaining arguments. Default arguments are as for update_wrapper().\n"
"This is a convenience function to simplify applying partial() to\n"
"update_wrapper()."
msgstr ""

#: mu/modes/api/python3.py:273
msgid ""
"hashlib.__hash_new(name, data=b'', **kwargs) \n"
"new(name, data=b'') - Return a new hashing object using the named "
"algorithm;\n"
"optionally initialized with data (which must be bytes)."
msgstr ""

#: mu/modes/api/python3.py:275
msgid ""
"hashlib.blake2b() \n"
"Return a new BLAKE2b hash object."
msgstr ""

#: mu/modes/api/python3.py:276
msgid ""
"hashlib.blake2s() \n"
"Return a new BLAKE2s hash object."
msgstr ""

#: mu/modes/api/python3.py:278
msgid ""
"hashlib.openssl_md5() \n"
"Returns a md5 hash object; optionally initialized with a string"
msgstr ""

#: mu/modes/api/python3.py:281
msgid ""
"hashlib.openssl_sha1() \n"
"Returns a sha1 hash object; optionally initialized with a string"
msgstr ""

#: mu/modes/api/python3.py:284
msgid ""
"hashlib.openssl_sha224() \n"
"Returns a sha224 hash object; optionally initialized with a string"
msgstr ""

#: mu/modes/api/python3.py:287
msgid ""
"hashlib.openssl_sha256() \n"
"Returns a sha256 hash object; optionally initialized with a string"
msgstr ""

#: mu/modes/api/python3.py:290
msgid ""
"hashlib.openssl_sha384() \n"
"Returns a sha384 hash object; optionally initialized with a string"
msgstr ""

#: mu/modes/api/python3.py:293
msgid ""
"hashlib.openssl_sha512() \n"
"Returns a sha512 hash object; optionally initialized with a string"
msgstr ""

#: mu/modes/api/python3.py:296
msgid ""
"hashlib.pbkdf2_hmac() \n"
"pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None) -> key\n"
"\n"
"Password based key derivation function 2 (PKCS #5 v2.0) with HMAC as\n"
"pseudorandom function."
msgstr ""

#: mu/modes/api/python3.py:299
msgid ""
"hashlib.sha3_224(string=None) \n"
"Return a new SHA3 hash object with a hashbit length of 28 bytes."
msgstr ""

#: mu/modes/api/python3.py:302
msgid ""
"hashlib.sha3_256() \n"
"sha3_256([string]) -> SHA3 object\n"
"\n"
"Return a new SHA3 hash object with a hashbit length of 32 bytes."
msgstr ""

#: mu/modes/api/python3.py:305
msgid ""
"hashlib.sha3_384() \n"
"sha3_384([string]) -> SHA3 object\n"
"\n"
"Return a new SHA3 hash object with a hashbit length of 48 bytes."
msgstr ""

#: mu/modes/api/python3.py:308
msgid ""
"hashlib.sha3_512() \n"
"sha3_512([string]) -> SHA3 object\n"
"\n"
"Return a new SHA3 hash object with a hashbit length of 64 bytes."
msgstr ""

#: mu/modes/api/python3.py:311
msgid ""
"hashlib.shake_128() \n"
"shake_128([string]) -> SHAKE object\n"
"\n"
"Return a new SHAKE hash object."
msgstr ""

#: mu/modes/api/python3.py:314
msgid ""
"hashlib.shake_256() \n"
"shake_256([string]) -> SHAKE object\n"
"\n"
"Return a new SHAKE hash object."
msgstr ""

#: mu/modes/api/python3.py:317
msgid ""
"itertools.accumulate() \n"
"accumulate(iterable[, func]) --> accumulate object\n"
"\n"
"Return series of accumulated sums (or other binary function results)."
msgstr ""

#: mu/modes/api/python3.py:320
msgid ""
"itertools.chain() \n"
"chain(*iterables) --> chain object\n"
"\n"
"Return a chain object whose .__next__() method returns elements from the\n"
"first iterable until it is exhausted, then elements from the next\n"
"iterable, until all of the iterables are exhausted."
msgstr ""

#: mu/modes/api/python3.py:323
msgid ""
"itertools.combinations() \n"
"combinations(iterable, r) --> combinations object\n"
"\n"
"Return successive r-length combinations of elements in the iterable.\n"
"\n"
"combinations(range(4), 3) --> (0,1,2), (0,1,3), (0,2,3), (1,2,3)"
msgstr ""

#: mu/modes/api/python3.py:326
msgid ""
"itertools.combinations_with_replacement() \n"
"combinations_with_replacement(iterable, r) --> combinations_with_replacement "
"object\n"
"\n"
"Return successive r-length combinations of elements in the iterable\n"
"allowing individual elements to have successive repeats.\n"
"combinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC"
msgstr ""

#: mu/modes/api/python3.py:329
msgid ""
"itertools.compress() \n"
"compress(data, selectors) --> iterator over selected data\n"
"\n"
"Return data elements corresponding to true selector elements.\n"
"Forms a shorter iterator from selected data elements using the\n"
"selectors to choose the data elements."
msgstr ""

#: mu/modes/api/python3.py:332
msgid ""
"itertools.count() \n"
"count(start=0, step=1) --> count object\n"
"\n"
"Return a count object whose .__next__() method returns consecutive values.\n"
"Equivalent to:\n"
"\n"
"    def count(firstval=0, step=1):\n"
"        x = firstval\n"
"        while 1:\n"
"            yield x\n"
"            x += step"
msgstr ""

#: mu/modes/api/python3.py:335
msgid ""
"itertools.cycle() \n"
"cycle(iterable) --> cycle object\n"
"\n"
"Return elements from the iterable until it is exhausted.\n"
"Then repeat the sequence indefinitely."
msgstr ""

#: mu/modes/api/python3.py:338
msgid ""
"itertools.dropwhile() \n"
"dropwhile(predicate, iterable) --> dropwhile object\n"
"\n"
"Drop items from the iterable while predicate(item) is true.\n"
"Afterwards, return every element until the iterable is exhausted."
msgstr ""

#: mu/modes/api/python3.py:341
msgid ""
"itertools.filterfalse() \n"
"filterfalse(function or None, sequence) --> filterfalse object\n"
"\n"
"Return those items of sequence for which function(item) is false.\n"
"If function is None, return the items that are false."
msgstr ""

#: mu/modes/api/python3.py:344
msgid ""
"itertools.groupby() \n"
"groupby(iterable[, keyfunc]) -> create an iterator which returns\n"
"(key, sub-iterator) grouped by each value of key(value)."
msgstr ""

#: mu/modes/api/python3.py:347
msgid ""
"itertools.islice() \n"
"islice(iterable, stop) --> islice object\n"
"islice(iterable, start, stop[, step]) --> islice object\n"
"\n"
"Return an iterator whose next() method returns selected values from an\n"
"iterable.  If start is specified, will skip all preceding elements;\n"
"otherwise, start defaults to zero.  Step defaults to one.  If\n"
"specified as another value, step determines how many values are \n"
"skipped between successive calls.  Works like a slice() on a list\n"
"but returns an iterator."
msgstr ""

#: mu/modes/api/python3.py:350
msgid ""
"itertools.permutations() \n"
"permutations(iterable[, r]) --> permutations object\n"
"\n"
"Return successive r-length permutations of elements in the iterable.\n"
"\n"
"permutations(range(3), 2) --> (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)"
msgstr ""

#: mu/modes/api/python3.py:353
msgid ""
"itertools.product() \n"
"product(*iterables, repeat=1) --> product object\n"
"\n"
"Cartesian product of input iterables.  Equivalent to nested for-loops.\n"
"\n"
"For example, product(A, B) returns the same as:  ((x,y) for x in A for y in "
"B).\n"
"The leftmost iterators are in the outermost for-loop, so the output tuples\n"
"cycle in a manner similar to an odometer (with the rightmost element "
"changing\n"
"on every iteration).\n"
"\n"
"To compute the product of an iterable with itself, specify the number\n"
"of repetitions with the optional repeat keyword argument. For example,\n"
"product(A, repeat=4) means the same as product(A, A, A, A).\n"
"\n"
"product('ab', range(3)) --> ('a',0) ('a',1) ('a',2) ('b',0) ('b',1) ('b',2)\n"
"product((0,1), (0,1), (0,1)) --> (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) ..."
msgstr ""

#: mu/modes/api/python3.py:356
msgid ""
"itertools.repeat() \n"
"repeat(object [,times]) -> create an iterator which returns the object\n"
"for the specified number of times.  If not specified, returns the object\n"
"endlessly."
msgstr ""

#: mu/modes/api/python3.py:359
msgid ""
"itertools.starmap() \n"
"starmap(function, sequence) --> starmap object\n"
"\n"
"Return an iterator whose values are returned from the function evaluated\n"
"with an argument tuple taken from the given sequence."
msgstr ""

#: mu/modes/api/python3.py:362
msgid ""
"itertools.takewhile() \n"
"takewhile(predicate, iterable) --> takewhile object\n"
"\n"
"Return successive entries from an iterable as long as the \n"
"predicate evaluates to true for each entry."
msgstr ""

#: mu/modes/api/python3.py:365
msgid ""
"itertools.tee() \n"
"tee(iterable, n=2) --> tuple of n independent iterators."
msgstr ""

#: mu/modes/api/python3.py:368
msgid ""
"itertools.zip_longest() \n"
"zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> zip_longest object\n"
"\n"
"Return a zip_longest object whose .__next__() method returns a tuple where\n"
"the i-th element comes from the i-th iterable argument.  The .__next__()\n"
"method continues until the longest iterable in the argument sequence\n"
"is exhausted and then it raises StopIteration.  When the shorter iterables\n"
"are exhausted, the fillvalue is substituted in their place.  The fillvalue\n"
"defaults to None or can be specified by a keyword argument."
msgstr ""

#: mu/modes/api/python3.py:371
msgid ""
"json.JSONDecodeError(msg, doc, pos) \n"
"Subclass of ValueError with the following additional properties:\n"
"\n"
"msg: The unformatted error message\n"
"doc: The JSON document being parsed\n"
"pos: The start index of doc where parsing failed\n"
"lineno: The line corresponding to pos\n"
"colno: The column corresponding to pos"
msgstr ""

#: mu/modes/api/python3.py:374
msgid ""
"json.JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None, "
"parse_constant=None, strict=True, object_pairs_hook=None) \n"
"Simple JSON <http://json.org> decoder\n"
"\n"
"Performs the following translations in decoding by default:\n"
"\n"
"+---------------+-------------------+\n"
"| JSON          | Python            |\n"
"+===============+===================+\n"
"| object        | dict              |\n"
"+---------------+-------------------+\n"
"| array         | list              |\n"
"+---------------+-------------------+\n"
"| string        | str               |\n"
"+---------------+-------------------+\n"
"| number (int)  | int               |\n"
"+---------------+-------------------+\n"
"| number (real) | float             |\n"
"+---------------+-------------------+\n"
"| true          | True              |\n"
"+---------------+-------------------+\n"
"| false         | False             |\n"
"+---------------+-------------------+\n"
"| null          | None              |\n"
"+---------------+-------------------+\n"
"\n"
"It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as\n"
"their corresponding ``float`` values, which is outside the JSON spec."
msgstr ""

#: mu/modes/api/python3.py:377
msgid ""
"json.JSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, "
"allow_nan=True, sort_keys=False, indent=None, separators=None, "
"default=None) \n"
"Extensible JSON <http://json.org> encoder for Python data structures.\n"
"\n"
"Supports the following objects and types by default:\n"
"\n"
"+-------------------+---------------+\n"
"| Python            | JSON          |\n"
"+===================+===============+\n"
"| dict              | object        |\n"
"+-------------------+---------------+\n"
"| list, tuple       | array         |\n"
"+-------------------+---------------+\n"
"| str               | string        |\n"
"+-------------------+---------------+\n"
"| int, float        | number        |\n"
"+-------------------+---------------+\n"
"| True              | true          |\n"
"+-------------------+---------------+\n"
"| False             | false         |\n"
"+-------------------+---------------+\n"
"| None              | null          |\n"
"+-------------------+---------------+\n"
"\n"
"To extend this to recognize other objects, subclass and implement a\n"
"``.default()`` method with another method that returns a serializable\n"
"object for ``o`` if possible, otherwise it should call the superclass\n"
"implementation (to raise ``TypeError``)."
msgstr ""

#: mu/modes/api/python3.py:380
msgid ""
"json.codecs() \n"
"codecs -- Python Codec Registry, API and helpers.\n"
"\n"
"\n"
"Written by Marc-Andre Lemburg (mal@lemburg.com).\n"
"\n"
"(c) Copyright CNRI, All Rights Reserved. NO WARRANTY."
msgstr ""

#: mu/modes/api/python3.py:383
msgid ""
"json.dump(obj, fp, *, skipkeys=False, ensure_ascii=True, "
"check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, "
"default=None, sort_keys=False, **kw) \n"
"Serialize ``obj`` as a JSON formatted stream to ``fp`` (a\n"
"``.write()``-supporting file-like object).\n"
"\n"
"If ``skipkeys`` is true then ``dict`` keys that are not basic types\n"
"(``str``, ``int``, ``float``, ``bool``, ``None``) will be skipped\n"
"instead of raising a ``TypeError``.\n"
"\n"
"If ``ensure_ascii`` is false, then the strings written to ``fp`` can\n"
"contain non-ASCII characters if they appear in strings contained in\n"
"``obj``. Otherwise, all such characters are escaped in JSON strings.\n"
"\n"
"If ``check_circular`` is false, then the circular reference check\n"
"for container types will be skipped and a circular reference will\n"
"result in an ``OverflowError`` (or worse).\n"
"\n"
"If ``allow_nan`` is false, then it will be a ``ValueError`` to\n"
"serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``)\n"
"in strict compliance of the JSON specification, instead of using the\n"
"JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).\n"
"\n"
"If ``indent`` is a non-negative integer, then JSON array elements and\n"
"object members will be pretty-printed with that indent level. An indent\n"
"level of 0 will only insert newlines. ``None`` is the most compact\n"
"representation.\n"
"\n"
"If specified, ``separators`` should be an ``(item_separator, "
"key_separator)``\n"
"tuple.  The default is ``(', ', ': ')`` if *indent* is ``None`` and\n"
"``(',', ': ')`` otherwise.  To get the most compact JSON representation,\n"
"you should specify ``(',', ':')`` to eliminate whitespace.\n"
"\n"
"``default(obj)`` is a function that should return a serializable version\n"
"of obj or raise TypeError. The default simply raises TypeError.\n"
"\n"
"If *sort_keys* is true (default: ``False``), then the output of\n"
"dictionaries will be sorted by key.\n"
"\n"
"To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the\n"
"``.default()`` method to serialize additional types), specify it with\n"
"the ``cls`` kwarg; otherwise ``JSONEncoder`` is used."
msgstr ""

#: mu/modes/api/python3.py:386
msgid ""
"json.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, "
"allow_nan=True, cls=None, indent=None, separators=None, default=None, "
"sort_keys=False, **kw) \n"
"Serialize ``obj`` to a JSON formatted ``str``.\n"
"\n"
"If ``skipkeys`` is true then ``dict`` keys that are not basic types\n"
"(``str``, ``int``, ``float``, ``bool``, ``None``) will be skipped\n"
"instead of raising a ``TypeError``.\n"
"\n"
"If ``ensure_ascii`` is false, then the return value can contain non-ASCII\n"
"characters if they appear in strings contained in ``obj``. Otherwise, all\n"
"such characters are escaped in JSON strings.\n"
"\n"
"If ``check_circular`` is false, then the circular reference check\n"
"for container types will be skipped and a circular reference will\n"
"result in an ``OverflowError`` (or worse).\n"
"\n"
"If ``allow_nan`` is false, then it will be a ``ValueError`` to\n"
"serialize out of range ``float`` values (``nan``, ``inf``, ``-inf``) in\n"
"strict compliance of the JSON specification, instead of using the\n"
"JavaScript equivalents (``NaN``, ``Infinity``, ``-Infinity``).\n"
"\n"
"If ``indent`` is a non-negative integer, then JSON array elements and\n"
"object members will be pretty-printed with that indent level. An indent\n"
"level of 0 will only insert newlines. ``None`` is the most compact\n"
"representation.\n"
"\n"
"If specified, ``separators`` should be an ``(item_separator, "
"key_separator)``\n"
"tuple.  The default is ``(', ', ': ')`` if *indent* is ``None`` and\n"
"``(',', ': ')`` otherwise.  To get the most compact JSON representation,\n"
"you should specify ``(',', ':')`` to eliminate whitespace.\n"
"\n"
"``default(obj)`` is a function that should return a serializable version\n"
"of obj or raise TypeError. The default simply raises TypeError.\n"
"\n"
"If *sort_keys* is true (default: ``False``), then the output of\n"
"dictionaries will be sorted by key.\n"
"\n"
"To use a custom ``JSONEncoder`` subclass (e.g. one that overrides the\n"
"``.default()`` method to serialize additional types), specify it with\n"
"the ``cls`` kwarg; otherwise ``JSONEncoder`` is used."
msgstr ""

#: mu/modes/api/python3.py:388
msgid ""
"json.json.decoder() \n"
"Implementation of JSONDecoder"
msgstr ""

#: mu/modes/api/python3.py:389
msgid ""
"json.json.encoder() \n"
"Implementation of JSONEncoder"
msgstr ""

#: mu/modes/api/python3.py:390
msgid ""
"json.json.scanner() \n"
"JSON token scanner"
msgstr ""

#: mu/modes/api/python3.py:392
msgid ""
"json.load(fp, *, cls=None, object_hook=None, parse_float=None, "
"parse_int=None, parse_constant=None, object_pairs_hook=None, **kw) \n"
"Deserialize ``fp`` (a ``.read()``-supporting file-like object containing\n"
"a JSON document) to a Python object.\n"
"\n"
"``object_hook`` is an optional function that will be called with the\n"
"result of any object literal decode (a ``dict``). The return value of\n"
"``object_hook`` will be used instead of the ``dict``. This feature\n"
"can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n"
"\n"
"``object_pairs_hook`` is an optional function that will be called with the\n"
"result of any object literal decoded with an ordered list of pairs.  The\n"
"return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n"
"This feature can be used to implement custom decoders that rely on the\n"
"order that the key and value pairs are decoded (for example,\n"
"collections.OrderedDict will remember the order of insertion). If\n"
"``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n"
"\n"
"To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n"
"kwarg; otherwise ``JSONDecoder`` is used."
msgstr ""

#: mu/modes/api/python3.py:395
msgid ""
"json.loads(s, *, encoding=None, cls=None, object_hook=None, "
"parse_float=None, parse_int=None, parse_constant=None, "
"object_pairs_hook=None, **kw) \n"
"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n"
"containing a JSON document) to a Python object.\n"
"\n"
"``object_hook`` is an optional function that will be called with the\n"
"result of any object literal decode (a ``dict``). The return value of\n"
"``object_hook`` will be used instead of the ``dict``. This feature\n"
"can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n"
"\n"
"``object_pairs_hook`` is an optional function that will be called with the\n"
"result of any object literal decoded with an ordered list of pairs.  The\n"
"return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n"
"This feature can be used to implement custom decoders that rely on the\n"
"order that the key and value pairs are decoded (for example,\n"
"collections.OrderedDict will remember the order of insertion). If\n"
"``object_hook`` is also defined, the ``object_pairs_hook`` takes priority.\n"
"\n"
"``parse_float``, if specified, will be called with the string\n"
"of every JSON float to be decoded. By default this is equivalent to\n"
"float(num_str). This can be used to use another datatype or parser\n"
"for JSON floats (e.g. decimal.Decimal).\n"
"\n"
"``parse_int``, if specified, will be called with the string\n"
"of every JSON int to be decoded. By default this is equivalent to\n"
"int(num_str). This can be used to use another datatype or parser\n"
"for JSON integers (e.g. float).\n"
"\n"
"``parse_constant``, if specified, will be called with one of the\n"
"following strings: -Infinity, Infinity, NaN.\n"
"This can be used to raise an exception if invalid JSON numbers\n"
"are encountered.\n"
"\n"
"To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n"
"kwarg; otherwise ``JSONDecoder`` is used.\n"
"\n"
"The ``encoding`` argument is ignored and deprecated."
msgstr ""

#: mu/modes/api/python3.py:397
msgid ""
"os.OSError() \n"
"Base class for I/O related errors."
msgstr ""

#: mu/modes/api/python3.py:399
msgid ""
"os.PathLike() \n"
"Abstract base class for implementing the file system path protocol."
msgstr ""

#: mu/modes/api/python3.py:402
msgid ""
"os.WCOREDUMP(status, /) \n"
"Return True if the process returning status was dumped to a core file."
msgstr ""

#: mu/modes/api/python3.py:404
msgid ""
"os.WEXITSTATUS(status) \n"
"Return the process return code from status."
msgstr ""

#: mu/modes/api/python3.py:406
msgid ""
"os.WIFCONTINUED(status) \n"
"Return True if a particular process was continued from a job control stop.\n"
"\n"
"Return True if the process returning status was continued from a\n"
"job control stop."
msgstr ""

#: mu/modes/api/python3.py:409
msgid ""
"os.WIFEXITED(status) \n"
"Return True if the process returning status exited via the exit() system "
"call."
msgstr ""

#: mu/modes/api/python3.py:412
msgid ""
"os.WIFSIGNALED(status) \n"
"Return True if the process returning status was terminated by a signal."
msgstr ""

#: mu/modes/api/python3.py:415
msgid ""
"os.WIFSTOPPED(status) \n"
"Return True if the process returning status was stopped."
msgstr ""

#: mu/modes/api/python3.py:418
msgid ""
"os.WSTOPSIG(status) \n"
"Return the signal that stopped the process that provided the status value."
msgstr ""

#: mu/modes/api/python3.py:421
msgid ""
"os.WTERMSIG(status) \n"
"Return the signal that terminated the process that provided the status value."
msgstr ""

#: mu/modes/api/python3.py:423
msgid ""
"os.abc() \n"
"Abstract Base Classes (ABCs) according to PEP 3119."
msgstr ""

#: mu/modes/api/python3.py:425
msgid ""
"os.abort() \n"
"Abort the interpreter immediately.\n"
"\n"
"This function 'dumps core' or otherwise fails in the hardest way possible\n"
"on the hosting operating system.  This function never returns."
msgstr ""

#: mu/modes/api/python3.py:428
msgid ""
"os.access(path, mode, *, dir_fd=None, effective_ids=False, "
"follow_symlinks=True) \n"
"Use the real uid/gid to test for access to a path.\n"
"\n"
"  path\n"
"    Path to be tested; can be string or bytes\n"
"  mode\n"
"    Operating-system mode bitfield.  Can be F_OK to test existence,\n"
"    or the inclusive-OR of R_OK, W_OK, and X_OK.\n"
"  dir_fd\n"
"    If not None, it should be a file descriptor open to a directory,\n"
"    and path should be relative; path will then be relative to that\n"
"    directory.\n"
"  effective_ids\n"
"    If True, access will use the effective uid/gid instead of\n"
"    the real uid/gid.\n"
"  follow_symlinks\n"
"    If False, and the last element of the path is a symbolic link,\n"
"    access will examine the symbolic link itself instead of the file\n"
"    the link points to.\n"
"\n"
"dir_fd, effective_ids, and follow_symlinks may not be implemented\n"
"  on your platform.  If they are unavailable, using them will raise a\n"
"  NotImplementedError.\n"
"\n"
"Note that most operations will use the effective uid/gid, therefore this\n"
"  routine can be used in a suid/sgid environment to test if the invoking "
"user\n"
"  has the specified access to the path."
msgstr ""

#: mu/modes/api/python3.py:431
msgid ""
"os.chdir(path) \n"
"Change the current working directory to the specified path.\n"
"\n"
"path may always be specified as a string.\n"
"On some platforms, path may also be specified as an open file descriptor.\n"
"  If this functionality is unavailable, using it raises an exception."
msgstr ""

#: mu/modes/api/python3.py:434
msgid ""
"os.chmod(path, mode, *, dir_fd=None, follow_symlinks=True) \n"
"Change the access permissions of a file.\n"
"\n"
"  path\n"
"    Path to be modified.  May always be specified as a str or bytes.\n"
"    On some platforms, path may also be specified as an open file "
"descriptor.\n"
"    If this functionality is unavailable, using it raises an exception.\n"
"  mode\n"
"    Operating-system mode bitfield.\n"
"  dir_fd\n"
"    If not None, it should be a file descriptor open to a directory,\n"
"    and path should be relative; path will then be relative to that\n"
"    directory.\n"
"  follow_symlinks\n"
"    If False, and the last element of the path is a symbolic link,\n"
"    chmod will modify the symbolic link itself instead of the file\n"
"    the link points to.\n"
"\n"
"It is an error to use dir_fd or follow_symlinks when specifying path as\n"
"  an open file descriptor.\n"
"dir_fd and follow_symlinks may not be implemented on your platform.\n"
"  If they are unavailable, using them will raise a NotImplementedError."
msgstr ""

#: mu/modes/api/python3.py:437
msgid ""
"os.chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True) \n"
"Change the owner and group id of path to the numeric uid and gid.\\\n"
"\n"
"  path\n"
"    Path to be examined; can be string, bytes, or open-file-descriptor int.\n"
"  dir_fd\n"
"    If not None, it should be a file descriptor open to a directory,\n"
"    and path should be relative; path will then be relative to that\n"
"    directory.\n"
"  follow_symlinks\n"
"    If False, and the last element of the path is a symbolic link,\n"
"    stat will examine the symbolic link itself instead of the file\n"
"    the link points to.\n"
"\n"
"path may always be specified as a string.\n"
"On some platforms, path may also be specified as an open file descriptor.\n"
"  If this functionality is unavailable, using it raises an exception.\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"If follow_symlinks is False, and the last element of the path is a symbolic\n"
"  link, chown will modify the symbolic link itself instead of the file the\n"
"  link points to.\n"
"It is an error to use dir_fd or follow_symlinks when specifying path as\n"
"  an open file descriptor.\n"
"dir_fd and follow_symlinks may not be implemented on your platform.\n"
"  If they are unavailable, using them will raise a NotImplementedError."
msgstr ""

#: mu/modes/api/python3.py:439
msgid ""
"os.chroot(path) \n"
"Change root directory to path."
msgstr ""

#: mu/modes/api/python3.py:440
msgid ""
"os.close(fd) \n"
"Close a file descriptor."
msgstr ""

#: mu/modes/api/python3.py:442
msgid ""
"os.closerange(fd_low, fd_high, /) \n"
"Closes all file descriptors in [fd_low, fd_high), ignoring errors."
msgstr ""

#: mu/modes/api/python3.py:445
msgid ""
"os.confstr(name, /) \n"
"Return a string-valued system configuration variable."
msgstr ""

#: mu/modes/api/python3.py:448
msgid ""
"os.cpu_count() \n"
"Return the number of CPUs in the system; return None if indeterminable.\n"
"\n"
"This number is not equivalent to the number of CPUs the current process can\n"
"use.  The number of usable CPUs can be obtained with\n"
"``len(os.sched_getaffinity(0))``"
msgstr ""

#: mu/modes/api/python3.py:451
msgid ""
"os.ctermid() \n"
"Return the name of the controlling terminal for this process."
msgstr ""

#: mu/modes/api/python3.py:454
msgid ""
"os.device_encoding(fd) \n"
"Return a string describing the encoding of a terminal's file descriptor.\n"
"\n"
"The file descriptor must be attached to a terminal.\n"
"If the device is not a terminal, return None."
msgstr ""

#: mu/modes/api/python3.py:456
msgid ""
"os.dup(fd, /) \n"
"Return a duplicate of a file descriptor."
msgstr ""

#: mu/modes/api/python3.py:457
msgid ""
"os.dup2(fd, fd2, inheritable=True) \n"
"Duplicate file descriptor."
msgstr ""

#: mu/modes/api/python3.py:459
msgid ""
"os.errno() \n"
"This module makes available standard errno system symbols.\n"
"\n"
"The value of each symbol is the corresponding integer value,\n"
"e.g., on most systems, errno.ENOENT equals the integer 2.\n"
"\n"
"The dictionary errno.errorcode maps numeric codes to symbol names,\n"
"e.g., errno.errorcode[2] could be the string 'ENOENT'.\n"
"\n"
"Symbols that are not relevant to the underlying system are not defined.\n"
"\n"
"To map error codes to error messages, use the function os.strerror(),\n"
"e.g. os.strerror(2) could return 'No such file or directory'."
msgstr ""

#: mu/modes/api/python3.py:462
msgid ""
"os.execl(file, *args) \n"
"execl(file, *args)\n"
"\n"
"Execute the executable file with argument list args, replacing the\n"
"current process. "
msgstr ""

#: mu/modes/api/python3.py:465
msgid ""
"os.execle(file, *args) \n"
"execle(file, *args, env)\n"
"\n"
"Execute the executable file with argument list args and\n"
"environment env, replacing the current process. "
msgstr ""

#: mu/modes/api/python3.py:468
msgid ""
"os.execlp(file, *args) \n"
"execlp(file, *args)\n"
"\n"
"Execute the executable file (which is searched for along $PATH)\n"
"with argument list args, replacing the current process. "
msgstr ""

#: mu/modes/api/python3.py:471
msgid ""
"os.execlpe(file, *args) \n"
"execlpe(file, *args, env)\n"
"\n"
"Execute the executable file (which is searched for along $PATH)\n"
"with argument list args and environment env, replacing the current\n"
"process. "
msgstr ""

#: mu/modes/api/python3.py:474
msgid ""
"os.execv(path, argv, /) \n"
"Execute an executable path with arguments, replacing current process.\n"
"\n"
"path\n"
"  Path of executable file.\n"
"argv\n"
"  Tuple or list of strings."
msgstr ""

#: mu/modes/api/python3.py:477
msgid ""
"os.execve(path, argv, env) \n"
"Execute an executable path with arguments, replacing current process.\n"
"\n"
"path\n"
"  Path of executable file.\n"
"argv\n"
"  Tuple or list of strings.\n"
"env\n"
"  Dictionary of strings mapping to strings."
msgstr ""

#: mu/modes/api/python3.py:480
msgid ""
"os.execvp(file, args) \n"
"execvp(file, args)\n"
"\n"
"Execute the executable file (which is searched for along $PATH)\n"
"with argument list args, replacing the current process.\n"
"args may be a list or tuple of strings. "
msgstr ""

#: mu/modes/api/python3.py:483
msgid ""
"os.execvpe(file, args, env) \n"
"execvpe(file, args, env)\n"
"\n"
"Execute the executable file (which is searched for along $PATH)\n"
"with argument list args and environment env , replacing the\n"
"current process.\n"
"args may be a list or tuple of strings. "
msgstr ""

#: mu/modes/api/python3.py:486
msgid ""
"os.fchdir(fd) \n"
"Change to the directory of the given file descriptor.\n"
"\n"
"fd must be opened on a directory, not a file.\n"
"Equivalent to os.chdir(fd)."
msgstr ""

#: mu/modes/api/python3.py:489
msgid ""
"os.fchmod(fd, mode) \n"
"Change the access permissions of the file given by file descriptor fd.\n"
"\n"
"Equivalent to os.chmod(fd, mode)."
msgstr ""

#: mu/modes/api/python3.py:492
msgid ""
"os.fchown(fd, uid, gid) \n"
"Change the owner and group id of the file specified by file descriptor.\n"
"\n"
"Equivalent to os.chown(fd, uid, gid)."
msgstr ""

#: mu/modes/api/python3.py:495
msgid ""
"os.fdatasync(fd) \n"
"Force write of fd to disk without forcing update of metadata."
msgstr ""

#: mu/modes/api/python3.py:498
msgid ""
"os.fork() \n"
"Fork a child process.\n"
"\n"
"Return 0 to child process and PID of child to parent process."
msgstr ""

#: mu/modes/api/python3.py:501
msgid ""
"os.forkpty() \n"
"Fork a new process with a new pseudo-terminal as controlling tty.\n"
"\n"
"Returns a tuple of (pid, master_fd).\n"
"Like fork(), return pid of 0 to the child process,\n"
"and pid of child to the parent process.\n"
"To both, return fd of newly opened pseudo-terminal."
msgstr ""

#: mu/modes/api/python3.py:504
msgid ""
"os.fpathconf(fd, name, /) \n"
"Return the configuration limit name for the file descriptor fd.\n"
"\n"
"If there is no limit, return -1."
msgstr ""

#: mu/modes/api/python3.py:507
msgid ""
"os.fsdecode(filename) \n"
"Decode filename (an os.PathLike, bytes, or str) from the filesystem\n"
"encoding with 'surrogateescape' error handler, return str unchanged. On\n"
"Windows, use 'strict' error handler if the file system encoding is\n"
"'mbcs' (which is the default encoding)."
msgstr ""

#: mu/modes/api/python3.py:510
msgid ""
"os.fsencode(filename) \n"
"Encode filename (an os.PathLike, bytes, or str) to the filesystem\n"
"encoding with 'surrogateescape' error handler, return bytes unchanged.\n"
"On Windows, use 'strict' error handler if the file system encoding is\n"
"'mbcs' (which is the default encoding)."
msgstr ""

#: mu/modes/api/python3.py:513
msgid ""
"os.fspath(path) \n"
"Return the file system path representation of the object.\n"
"\n"
"If the object is str or bytes, then allow it to pass through as-is. If the\n"
"object defines __fspath__(), then return the result of that method. All "
"other\n"
"types raise a TypeError."
msgstr ""

#: mu/modes/api/python3.py:516
msgid ""
"os.fstat(fd) \n"
"Perform a stat system call on the given file descriptor.\n"
"\n"
"Like stat(), but for an open file descriptor.\n"
"Equivalent to os.stat(fd)."
msgstr ""

#: mu/modes/api/python3.py:519
msgid ""
"os.fstatvfs(fd, /) \n"
"Perform an fstatvfs system call on the given fd.\n"
"\n"
"Equivalent to statvfs(fd)."
msgstr ""

#: mu/modes/api/python3.py:521
msgid ""
"os.fsync(fd) \n"
"Force write of fd to disk."
msgstr ""

#: mu/modes/api/python3.py:523
msgid ""
"os.ftruncate(fd, length, /) \n"
"Truncate a file, specified by file descriptor, to a specific length."
msgstr ""

#: mu/modes/api/python3.py:526
msgid ""
"os.fwalk(top='.', topdown=True, onerror=None, *, follow_symlinks=False, "
"dir_fd=None) \n"
"Directory tree generator.\n"
"\n"
"This behaves exactly like walk(), except that it yields a 4-tuple\n"
"\n"
"    dirpath, dirnames, filenames, dirfd\n"
"\n"
"`dirpath`, `dirnames` and `filenames` are identical to walk() output,\n"
"and `dirfd` is a file descriptor referring to the directory `dirpath`.\n"
"\n"
"The advantage of fwalk() over walk() is that it's safe against symlink\n"
"races (when follow_symlinks is False).\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and top should be relative; top will then be relative to that directory.\n"
"  (dir_fd is always supported for fwalk.)\n"
"\n"
"Caution:\n"
"Since fwalk() yields file descriptors, those are only valid until the\n"
"next iteration step, so you should dup() them if you want to keep them\n"
"for a longer period.\n"
"\n"
"Example:\n"
"\n"
"import os\n"
"for root, dirs, files, rootfd in os.fwalk('python/Lib/email'):\n"
"    print(root, \"consumes\", end=\"\")\n"
"    print(sum([os.stat(name, dir_fd=rootfd).st_size for name in files]),\n"
"          end=\"\")\n"
"    print(\"bytes in\", len(files), \"non-directory files\")\n"
"    if 'CVS' in dirs:\n"
"        dirs.remove('CVS')  # don't visit CVS directories"
msgstr ""

#: mu/modes/api/python3.py:529
msgid ""
"os.get_blocking() \n"
"get_blocking(fd) -> bool\n"
"\n"
"Get the blocking mode of the file descriptor:\n"
"False if the O_NONBLOCK flag is set, True if the flag is cleared."
msgstr ""

#: mu/modes/api/python3.py:532
msgid ""
"os.get_exec_path(env=None) \n"
"Returns the sequence of directories that will be searched for the\n"
"named executable (similar to a shell) when launching a process.\n"
"\n"
"*env* must be an environment variable dict or None.  If *env* is None,\n"
"os.environ will be used."
msgstr ""

#: mu/modes/api/python3.py:535
msgid ""
"os.get_inheritable(fd, /) \n"
"Get the close-on-exe flag of the specified file descriptor."
msgstr ""

#: mu/modes/api/python3.py:538
msgid ""
"os.get_terminal_size() \n"
"Return the size of the terminal window as (columns, lines).\n"
"\n"
"The optional argument fd (default standard output) specifies\n"
"which file descriptor should be queried.\n"
"\n"
"If the file descriptor is not connected to a terminal, an OSError\n"
"is thrown.\n"
"\n"
"This function will only be defined if an implementation is\n"
"available for this system.\n"
"\n"
"shutil.get_terminal_size is the high-level function which should \n"
"normally be used, os.get_terminal_size is the low-level implementation."
msgstr ""

#: mu/modes/api/python3.py:541
msgid ""
"os.getcwd() \n"
"Return a unicode string representing the current working directory."
msgstr ""

#: mu/modes/api/python3.py:544
msgid ""
"os.getcwdb() \n"
"Return a bytes string representing the current working directory."
msgstr ""

#: mu/modes/api/python3.py:546
msgid ""
"os.getegid() \n"
"Return the current process's effective group id."
msgstr ""

#: mu/modes/api/python3.py:548
msgid ""
"os.getenv(key, default=None) \n"
"Get an environment variable, return None if it doesn't exist.\n"
"The optional second argument can specify an alternate default.\n"
"key, default and the result are str."
msgstr ""

#: mu/modes/api/python3.py:551
msgid ""
"os.getenvb(key, default=None) \n"
"Get an environment variable, return None if it doesn't exist.\n"
"The optional second argument can specify an alternate default.\n"
"key, default and the result are bytes."
msgstr ""

#: mu/modes/api/python3.py:553
msgid ""
"os.geteuid() \n"
"Return the current process's effective user id."
msgstr ""

#: mu/modes/api/python3.py:554
msgid ""
"os.getgid() \n"
"Return the current process's group id."
msgstr ""

#: mu/modes/api/python3.py:556
msgid ""
"os.getgrouplist() \n"
"getgrouplist(user, group) -> list of groups to which a user belongs\n"
"\n"
"Returns a list of groups to which a user belongs.\n"
"\n"
"    user: username to lookup\n"
"    group: base group id of the user"
msgstr ""

#: mu/modes/api/python3.py:559
msgid ""
"os.getgroups() \n"
"Return list of supplemental group IDs for the process."
msgstr ""

#: mu/modes/api/python3.py:562
msgid ""
"os.getloadavg() \n"
"Return average recent system load information.\n"
"\n"
"Return the number of processes in the system run queue averaged over\n"
"the last 1, 5, and 15 minutes as a tuple of three floats.\n"
"Raises OSError if the load average was unobtainable."
msgstr ""

#: mu/modes/api/python3.py:564
msgid ""
"os.getlogin() \n"
"Return the actual login name."
msgstr ""

#: mu/modes/api/python3.py:566
msgid ""
"os.getpgid(pid) \n"
"Call the system call getpgid(), and return the result."
msgstr ""

#: mu/modes/api/python3.py:568
msgid ""
"os.getpgrp() \n"
"Return the current process group id."
msgstr ""

#: mu/modes/api/python3.py:569
msgid ""
"os.getpid() \n"
"Return the current process id."
msgstr ""

#: mu/modes/api/python3.py:571
msgid ""
"os.getppid() \n"
"Return the parent's process id.\n"
"\n"
"If the parent process has already exited, Windows machines will still\n"
"return its id; others systems will return the id of the 'init' process (1)."
msgstr ""

#: mu/modes/api/python3.py:573
msgid ""
"os.getpriority(which, who) \n"
"Return program scheduling priority."
msgstr ""

#: mu/modes/api/python3.py:574
msgid ""
"os.getrandom(size, flags=0) \n"
"Obtain a series of random bytes."
msgstr ""

#: mu/modes/api/python3.py:576
msgid ""
"os.getresgid() \n"
"Return a tuple of the current process's real, effective, and saved group ids."
msgstr ""

#: mu/modes/api/python3.py:579
msgid ""
"os.getresuid() \n"
"Return a tuple of the current process's real, effective, and saved user ids."
msgstr ""

#: mu/modes/api/python3.py:582
msgid ""
"os.getsid(pid, /) \n"
"Call the system call getsid(pid) and return the result."
msgstr ""

#: mu/modes/api/python3.py:584
msgid ""
"os.getuid() \n"
"Return the current process's user id."
msgstr ""

#: mu/modes/api/python3.py:586
msgid ""
"os.getxattr(path, attribute, *, follow_symlinks=True) \n"
"Return the value of extended attribute attribute on path.\n"
"\n"
"path may be either a string or an open file descriptor.\n"
"If follow_symlinks is False, and the last element of the path is a symbolic\n"
"  link, getxattr will examine the symbolic link itself instead of the file\n"
"  the link points to."
msgstr ""

#: mu/modes/api/python3.py:589
msgid ""
"os.initgroups() \n"
"initgroups(username, gid) -> None\n"
"\n"
"Call the system initgroups() to initialize the group access list with all "
"of\n"
"the groups of which the specified username is a member, plus the specified\n"
"group id."
msgstr ""

#: mu/modes/api/python3.py:592
msgid ""
"os.isatty(fd, /) \n"
"Return True if the fd is connected to a terminal.\n"
"\n"
"Return True if the file descriptor is an open file descriptor\n"
"connected to the slave end of a terminal."
msgstr ""

#: mu/modes/api/python3.py:594
msgid ""
"os.kill(pid, signal, /) \n"
"Kill a process with a signal."
msgstr ""

#: mu/modes/api/python3.py:595
msgid ""
"os.killpg(pgid, signal, /) \n"
"Kill a process group with a signal."
msgstr ""

#: mu/modes/api/python3.py:597
msgid ""
"os.lchown(path, uid, gid) \n"
"Change the owner and group id of path to the numeric uid and gid.\n"
"\n"
"This function will not follow symbolic links.\n"
"Equivalent to os.chown(path, uid, gid, follow_symlinks=False)."
msgstr ""

#: mu/modes/api/python3.py:600
msgid ""
"os.link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, "
"follow_symlinks=True) \n"
"Create a hard link to a file.\n"
"\n"
"If either src_dir_fd or dst_dir_fd is not None, it should be a file\n"
"  descriptor open to a directory, and the respective path string (src or "
"dst)\n"
"  should be relative; the path will then be relative to that directory.\n"
"If follow_symlinks is False, and the last element of src is a symbolic\n"
"  link, link will create a link to the symbolic link itself instead of the\n"
"  file the link points to.\n"
"src_dir_fd, dst_dir_fd, and follow_symlinks may not be implemented on your\n"
"  platform.  If they are unavailable, using them will raise a\n"
"  NotImplementedError."
msgstr ""

#: mu/modes/api/python3.py:603
msgid ""
"os.listdir(path=None) \n"
"Return a list containing the names of the files in the directory.\n"
"\n"
"path can be specified as either str or bytes.  If path is bytes,\n"
"  the filenames returned will also be bytes; in all other circumstances\n"
"  the filenames returned will be str.\n"
"If path is None, uses the path='.'.\n"
"On some platforms, path may also be specified as an open file descriptor;\\\n"
"  the file descriptor must refer to a directory.\n"
"  If this functionality is unavailable, using it raises "
"NotImplementedError.\n"
"\n"
"The list is in arbitrary order.  It does not include the special\n"
"entries '.' and '..' even if they are present in the directory."
msgstr ""

#: mu/modes/api/python3.py:606
msgid ""
"os.listxattr(path=None, *, follow_symlinks=True) \n"
"Return a list of extended attributes on path.\n"
"\n"
"path may be either None, a string, or an open file descriptor.\n"
"if path is None, listxattr will examine the current directory.\n"
"If follow_symlinks is False, and the last element of the path is a symbolic\n"
"  link, listxattr will examine the symbolic link itself instead of the file\n"
"  the link points to."
msgstr ""

#: mu/modes/api/python3.py:609
msgid ""
"os.lockf(fd, command, length, /) \n"
"Apply, test or remove a POSIX lock on an open file descriptor.\n"
"\n"
"fd\n"
"  An open file descriptor.\n"
"command\n"
"  One of F_LOCK, F_TLOCK, F_ULOCK or F_TEST.\n"
"length\n"
"  The number of bytes to lock, starting at the current position."
msgstr ""

#: mu/modes/api/python3.py:612
msgid ""
"os.lseek(fd, position, how, /) \n"
"Set the position of a file descriptor.  Return the new position.\n"
"\n"
"Return the new cursor position in number of bytes\n"
"relative to the beginning of the file."
msgstr ""

#: mu/modes/api/python3.py:615
msgid ""
"os.lstat(path, *, dir_fd=None) \n"
"Perform a stat system call on the given path, without following symbolic "
"links.\n"
"\n"
"Like stat(), but do not follow symbolic links.\n"
"Equivalent to stat(path, follow_symlinks=False)."
msgstr ""

#: mu/modes/api/python3.py:618
msgid ""
"os.major(device, /) \n"
"Extracts a device major number from a raw device number."
msgstr ""

#: mu/modes/api/python3.py:621
msgid ""
"os.makedev(major, minor, /) \n"
"Composes a raw device number from the major and minor device numbers."
msgstr ""

#: mu/modes/api/python3.py:624
msgid ""
"os.makedirs(name, mode=511, exist_ok=False) \n"
"makedirs(name [, mode=0o777][, exist_ok=False])\n"
"\n"
"Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n"
"mkdir, except that any intermediate path segment (not just the rightmost)\n"
"will be created if it does not exist. If the target directory already\n"
"exists, raise an OSError if exist_ok is False. Otherwise no exception is\n"
"raised.  This is recursive."
msgstr ""

#: mu/modes/api/python3.py:627
msgid ""
"os.minor(device, /) \n"
"Extracts a device minor number from a raw device number."
msgstr ""

#: mu/modes/api/python3.py:630
msgid ""
"os.mkdir(path, mode=511, *, dir_fd=None) \n"
"Create a directory.\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError.\n"
"\n"
"The mode argument is ignored on Windows."
msgstr ""

#: mu/modes/api/python3.py:633
msgid ""
"os.mkfifo(path, mode=438, *, dir_fd=None) \n"
"Create a \"fifo\" (a POSIX named pipe).\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError."
msgstr ""

#: mu/modes/api/python3.py:636
msgid ""
"os.mknod(path, mode=384, device=0, *, dir_fd=None) \n"
"Create a node in the file system.\n"
"\n"
"Create a node in the file system (file, device special file or named pipe)\n"
"at path.  mode specifies both the permissions to use and the\n"
"type of node to be created, being combined (bitwise OR) with one of\n"
"S_IFREG, S_IFCHR, S_IFBLK, and S_IFIFO.  If S_IFCHR or S_IFBLK is set on "
"mode,\n"
"device defines the newly created device special file (probably using\n"
"os.makedev()).  Otherwise device is ignored.\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError."
msgstr ""

#: mu/modes/api/python3.py:639
msgid ""
"os.nice(increment, /) \n"
"Add increment to the priority of process and return the new priority."
msgstr ""

#: mu/modes/api/python3.py:642
msgid ""
"os.open(path, flags, mode=511, *, dir_fd=None) \n"
"Open a file for low level IO.  Returns a file descriptor (integer).\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError."
msgstr ""

#: mu/modes/api/python3.py:645
msgid ""
"os.openpty() \n"
"Open a pseudo-terminal.\n"
"\n"
"Return a tuple of (master_fd, slave_fd) containing open file descriptors\n"
"for both the master and slave ends."
msgstr ""

#: mu/modes/api/python3.py:647
msgid ""
"os.path.abspath(path) \n"
"Return an absolute path."
msgstr ""

#: mu/modes/api/python3.py:648
msgid ""
"os.path.basename(p) \n"
"Returns the final component of a pathname"
msgstr ""

#: mu/modes/api/python3.py:650
msgid ""
"os.path.commonpath(paths) \n"
"Given a sequence of path names, returns the longest common sub-path."
msgstr ""

#: mu/modes/api/python3.py:653
msgid ""
"os.path.commonprefix(m) \n"
"Given a list of pathnames, returns the longest common leading component"
msgstr ""

#: mu/modes/api/python3.py:655
msgid ""
"os.path.dirname(p) \n"
"Returns the directory component of a pathname"
msgstr ""

#: mu/modes/api/python3.py:657
msgid ""
"os.path.exists(path) \n"
"Test whether a path exists.  Returns False for broken symbolic links"
msgstr ""

#: mu/modes/api/python3.py:660
msgid ""
"os.path.expanduser(path) \n"
"Expand ~ and ~user constructions.  If user or $HOME is unknown,\n"
"do nothing."
msgstr ""

#: mu/modes/api/python3.py:663
#, python-brace-format
msgid ""
"os.path.expandvars(path) \n"
"Expand shell variables of form $var and ${var}.  Unknown variables\n"
"are left unchanged."
msgstr ""

#: mu/modes/api/python3.py:666
msgid ""
"os.path.genericpath() \n"
"Path operations common to more than one OS\n"
"Do not use directly.  The OS specific modules import the appropriate\n"
"functions from this module themselves."
msgstr ""

#: mu/modes/api/python3.py:669
msgid ""
"os.path.getatime(filename) \n"
"Return the last access time of a file, reported by os.stat()."
msgstr ""

#: mu/modes/api/python3.py:672
msgid ""
"os.path.getctime(filename) \n"
"Return the metadata change time of a file, reported by os.stat()."
msgstr ""

#: mu/modes/api/python3.py:675
msgid ""
"os.path.getmtime(filename) \n"
"Return the last modification time of a file, reported by os.stat()."
msgstr ""

#: mu/modes/api/python3.py:678
msgid ""
"os.path.getsize(filename) \n"
"Return the size of a file, reported by os.stat()."
msgstr ""

#: mu/modes/api/python3.py:680
msgid ""
"os.path.isabs(s) \n"
"Test whether a path is absolute"
msgstr ""

#: mu/modes/api/python3.py:682
msgid ""
"os.path.isdir(s) \n"
"Return true if the pathname refers to an existing directory."
msgstr ""

#: mu/modes/api/python3.py:684
msgid ""
"os.path.isfile(path) \n"
"Test whether a path is a regular file"
msgstr ""

#: mu/modes/api/python3.py:685
msgid ""
"os.path.islink(path) \n"
"Test whether a path is a symbolic link"
msgstr ""

#: mu/modes/api/python3.py:686
msgid ""
"os.path.ismount(path) \n"
"Test whether a path is a mount point"
msgstr ""

#: mu/modes/api/python3.py:688
msgid ""
"os.path.join(a, *p) \n"
"Join two or more pathname components, inserting '/' as needed.\n"
"If any component is an absolute path, all previous path components\n"
"will be discarded.  An empty last part will result in a path that\n"
"ends with a separator."
msgstr ""

#: mu/modes/api/python3.py:691
msgid ""
"os.path.lexists(path) \n"
"Test whether a path exists.  Returns True for broken symbolic links"
msgstr ""

#: mu/modes/api/python3.py:694
msgid ""
"os.path.normcase(s) \n"
"Normalize case of pathname.  Has no effect under Posix"
msgstr ""

#: mu/modes/api/python3.py:697
msgid ""
"os.path.normpath(path) \n"
"Normalize path, eliminating double slashes, etc."
msgstr ""

#: mu/modes/api/python3.py:700
msgid ""
"os.path.os() \n"
"OS routines for NT or Posix depending on what system we're on.\n"
"\n"
"This exports:\n"
"  - all functions from posix or nt, e.g. unlink, stat, etc.\n"
"  - os.path is either posixpath or ntpath\n"
"  - os.name is either 'posix' or 'nt'\n"
"  - os.curdir is a string representing the current directory (always '.')\n"
"  - os.pardir is a string representing the parent directory (always '..')\n"
"  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n"
"  - os.extsep is the extension separator (always '.')\n"
"  - os.altsep is the alternate pathname separator (None or '/')\n"
"  - os.pathsep is the component separator used in $PATH etc\n"
"  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r"
"\\n')\n"
"  - os.defpath is the default search path for executables\n"
"  - os.devnull is the file path of the null device ('/dev/null', etc.)\n"
"\n"
"Programs that import and use 'os' stand a better chance of being\n"
"portable between different platforms.  Of course, they must then\n"
"only use functions that are defined by all platforms (e.g., unlink\n"
"and opendir), and leave all pathname manipulation to os.path\n"
"(e.g., split and join)."
msgstr ""

#: mu/modes/api/python3.py:703
msgid ""
"os.path.realpath(filename) \n"
"Return the canonical path of the specified filename, eliminating any\n"
"symbolic links encountered in the path."
msgstr ""

#: mu/modes/api/python3.py:706
msgid ""
"os.path.relpath(path, start=None) \n"
"Return a relative version of a path"
msgstr ""

#: mu/modes/api/python3.py:709
msgid ""
"os.path.samefile(f1, f2) \n"
"Test whether two pathnames reference the same actual file"
msgstr ""

#: mu/modes/api/python3.py:712
msgid ""
"os.path.sameopenfile(fp1, fp2) \n"
"Test whether two open file objects reference the same file"
msgstr ""

#: mu/modes/api/python3.py:715
msgid ""
"os.path.samestat(s1, s2) \n"
"Test whether two stat buffers reference the same file"
msgstr ""

#: mu/modes/api/python3.py:718
msgid ""
"os.path.split(p) \n"
"Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is\n"
"everything after the final slash.  Either part may be empty."
msgstr ""

#: mu/modes/api/python3.py:721
msgid ""
"os.path.splitdrive(p) \n"
"Split a pathname into drive and path. On Posix, drive is always\n"
"empty."
msgstr ""

#: mu/modes/api/python3.py:724
msgid ""
"os.path.splitext(p) \n"
"Split the extension from a pathname.\n"
"\n"
"Extension is everything from the last dot to the end, ignoring\n"
"leading dots.  Returns \"(root, ext)\"; ext may be empty."
msgstr ""

#: mu/modes/api/python3.py:727
msgid ""
"os.path.stat() \n"
"Constants/functions for interpreting results of os.stat() and os.lstat().\n"
"\n"
"Suggested usage: from stat import *"
msgstr ""

#: mu/modes/api/python3.py:730
msgid ""
"os.path.sys() \n"
"This module provides access to some objects used or maintained by the\n"
"interpreter and to functions that interact strongly with the interpreter.\n"
"\n"
"Dynamic objects:\n"
"\n"
"argv -- command line arguments; argv[0] is the script pathname if known\n"
"path -- module search path; path[0] is the script directory, else ''\n"
"modules -- dictionary of loaded modules\n"
"\n"
"displayhook -- called to show results in an interactive session\n"
"excepthook -- called to handle any uncaught exception other than SystemExit\n"
"  To customize printing in an interactive session or to install a custom\n"
"  top-level exception handler, assign other functions to replace these.\n"
"\n"
"stdin -- standard input file object; used by input()\n"
"stdout -- standard output file object; used by print()\n"
"stderr -- standard error object; used for error messages\n"
"  By assigning other file objects (or objects that behave like files)\n"
"  to these, it is possible to redirect all of the interpreter's I/O.\n"
"\n"
"last_type -- type of last uncaught exception\n"
"last_value -- value of last uncaught exception\n"
"last_traceback -- traceback of last uncaught exception\n"
"  These three are only available in an interactive session after a\n"
"  traceback has been printed.\n"
"\n"
"Static objects:\n"
"\n"
"builtin_module_names -- tuple of module names built into this interpreter\n"
"copyright -- copyright notice pertaining to this interpreter\n"
"exec_prefix -- prefix used to find the machine-specific Python library\n"
"executable -- absolute path of the executable binary of the Python "
"interpreter\n"
"float_info -- a struct sequence with information about the float "
"implementation.\n"
"float_repr_style -- string indicating the style of repr() output for floats\n"
"hash_info -- a struct sequence with information about the hash algorithm.\n"
"hexversion -- version information encoded as a single integer\n"
"implementation -- Python implementation information.\n"
"int_info -- a struct sequence with information about the int "
"implementation.\n"
"maxsize -- the largest supported length of containers.\n"
"maxunicode -- the value of the largest Unicode code point\n"
"platform -- platform identifier\n"
"prefix -- prefix used to find the Python library\n"
"thread_info -- a struct sequence with information about the thread "
"implementation.\n"
"version -- the version of this interpreter as a string\n"
"version_info -- version information as a named tuple\n"
"__stdin__ -- the original stdin; don't touch!\n"
"__stdout__ -- the original stdout; don't touch!\n"
"__stderr__ -- the original stderr; don't touch!\n"
"__displayhook__ -- the original displayhook; don't touch!\n"
"__excepthook__ -- the original excepthook; don't touch!\n"
"\n"
"Functions:\n"
"\n"
"displayhook() -- print an object to the screen, and save it in builtins._\n"
"excepthook() -- print an exception and its traceback to sys.stderr\n"
"exc_info() -- return thread-safe information about the current exception\n"
"exit() -- exit the interpreter by raising SystemExit\n"
"getdlopenflags() -- returns flags to be used for dlopen() calls\n"
"getprofile() -- get the global profiling function\n"
"getrefcount() -- return the reference count for an object (plus one :-)\n"
"getrecursionlimit() -- return the max recursion depth for the interpreter\n"
"getsizeof() -- return the size of an object in bytes\n"
"gettrace() -- get the global debug tracing function\n"
"setcheckinterval() -- control how often the interpreter checks for events\n"
"setdlopenflags() -- set the flags to be used for dlopen() calls\n"
"setprofile() -- set the global profiling function\n"
"setrecursionlimit() -- set the max recursion depth for the interpreter\n"
"settrace() -- set the global debug tracing function"
msgstr ""

#: mu/modes/api/python3.py:733
msgid ""
"os.pathconf(path, name) \n"
"Return the configuration limit name for the file or directory path.\n"
"\n"
"If there is no limit, return -1.\n"
"On some platforms, path may also be specified as an open file descriptor.\n"
"  If this functionality is unavailable, using it raises an exception."
msgstr ""

#: mu/modes/api/python3.py:736
msgid ""
"os.pipe() \n"
"Create a pipe.\n"
"\n"
"Returns a tuple of two file descriptors:\n"
"  (read_fd, write_fd)"
msgstr ""

#: mu/modes/api/python3.py:739
msgid ""
"os.pipe2(flags, /) \n"
"Create a pipe with flags set atomically.\n"
"\n"
"Returns a tuple of two file descriptors:\n"
"  (read_fd, write_fd)\n"
"\n"
"flags can be constructed by ORing together one or more of these values:\n"
"O_NONBLOCK, O_CLOEXEC."
msgstr ""

#: mu/modes/api/python3.py:742
msgid ""
"os.posix_fadvise(fd, offset, length, advice, /) \n"
"Announce an intention to access data in a specific pattern.\n"
"\n"
"Announce an intention to access data in a specific pattern, thus allowing\n"
"the kernel to make optimizations.\n"
"The advice applies to the region of the file specified by fd starting at\n"
"offset and continuing for length bytes.\n"
"advice is one of POSIX_FADV_NORMAL, POSIX_FADV_SEQUENTIAL,\n"
"POSIX_FADV_RANDOM, POSIX_FADV_NOREUSE, POSIX_FADV_WILLNEED, or\n"
"POSIX_FADV_DONTNEED."
msgstr ""

#: mu/modes/api/python3.py:745
msgid ""
"os.posix_fallocate(fd, offset, length, /) \n"
"Ensure a file has allocated at least a particular number of bytes on disk.\n"
"\n"
"Ensure that the file specified by fd encompasses a range of bytes\n"
"starting at offset bytes from the beginning and continuing for length bytes."
msgstr ""

#: mu/modes/api/python3.py:748
msgid ""
"os.posixpath() \n"
"Common operations on Posix pathnames.\n"
"\n"
"Instead of importing this module directly, import os and refer to\n"
"this module as os.path.  The \"os.path\" name is an alias for this\n"
"module on Posix systems; on other systems (e.g. Mac, Windows),\n"
"os.path provides the same operations in a manner specific to that\n"
"platform, and is an alias to another module (e.g. macpath, ntpath).\n"
"\n"
"Some of this can actually be useful on non-Posix systems too, e.g.\n"
"for manipulation of the pathname component of URLs."
msgstr ""

#: mu/modes/api/python3.py:751
msgid ""
"os.pread(fd, length, offset, /) \n"
"Read a number of bytes from a file descriptor starting at a particular "
"offset.\n"
"\n"
"Read length bytes from file descriptor fd, starting at offset bytes from\n"
"the beginning of the file.  The file offset remains unchanged."
msgstr ""

#: mu/modes/api/python3.py:753
msgid ""
"os.putenv(name, value, /) \n"
"Change or add an environment variable."
msgstr ""

#: mu/modes/api/python3.py:755
msgid ""
"os.pwrite(fd, buffer, offset, /) \n"
"Write bytes to a file descriptor starting at a particular offset.\n"
"\n"
"Write buffer to fd, starting at offset bytes from the beginning of\n"
"the file.  Returns the number of bytes writte.  Does not change the\n"
"current file offset."
msgstr ""

#: mu/modes/api/python3.py:758
msgid ""
"os.read(fd, length, /) \n"
"Read from a file descriptor.  Returns a bytes object."
msgstr ""

#: mu/modes/api/python3.py:761
msgid ""
"os.readlink() \n"
"readlink(path, *, dir_fd=None) -> path\n"
"\n"
"Return a string representing the path to which the symbolic link points.\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError."
msgstr ""

#: mu/modes/api/python3.py:764
msgid ""
"os.readv(fd, buffers, /) \n"
"Read from a file descriptor fd into an iterable of buffers.\n"
"\n"
"The buffers should be mutable buffers accepting bytes.\n"
"readv will transfer data into each buffer until it is full\n"
"and then move on to the next buffer in the sequence to hold\n"
"the rest of the data.\n"
"\n"
"readv returns the total number of bytes read,\n"
"which may be less than the total capacity of all the buffers."
msgstr ""

#: mu/modes/api/python3.py:767
msgid ""
"os.remove(path, *, dir_fd=None) \n"
"Remove a file (same as unlink()).\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError."
msgstr ""

#: mu/modes/api/python3.py:770
msgid ""
"os.removedirs(name) \n"
"removedirs(name)\n"
"\n"
"Super-rmdir; remove a leaf directory and all empty intermediate\n"
"ones.  Works like rmdir except that, if the leaf directory is\n"
"successfully removed, directories corresponding to rightmost path\n"
"segments will be pruned away until either the whole path is\n"
"consumed or an error occurs.  Errors during this latter phase are\n"
"ignored -- they generally mean that a directory was not empty."
msgstr ""

#: mu/modes/api/python3.py:773
msgid ""
"os.removexattr(path, attribute, *, follow_symlinks=True) \n"
"Remove extended attribute attribute on path.\n"
"\n"
"path may be either a string or an open file descriptor.\n"
"If follow_symlinks is False, and the last element of the path is a symbolic\n"
"  link, removexattr will modify the symbolic link itself instead of the "
"file\n"
"  the link points to."
msgstr ""

#: mu/modes/api/python3.py:776
msgid ""
"os.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None) \n"
"Rename a file or directory.\n"
"\n"
"If either src_dir_fd or dst_dir_fd is not None, it should be a file\n"
"  descriptor open to a directory, and the respective path string (src or "
"dst)\n"
"  should be relative; the path will then be relative to that directory.\n"
"src_dir_fd and dst_dir_fd, may not be implemented on your platform.\n"
"  If they are unavailable, using them will raise a NotImplementedError."
msgstr ""

#: mu/modes/api/python3.py:779
msgid ""
"os.renames(old, new) \n"
"renames(old, new)\n"
"\n"
"Super-rename; create directories as necessary and delete any left\n"
"empty.  Works like rename, except creation of any intermediate\n"
"directories needed to make the new pathname good is attempted\n"
"first.  After the rename, directories corresponding to rightmost\n"
"path segments of the old name will be pruned until either the\n"
"whole path is consumed or a nonempty directory is found.\n"
"\n"
"Note: this function can fail with the new directory structure made\n"
"if you lack permissions needed to unlink the leaf directory or\n"
"file."
msgstr ""

#: mu/modes/api/python3.py:782
msgid ""
"os.replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None) \n"
"Rename a file or directory, overwriting the destination.\n"
"\n"
"If either src_dir_fd or dst_dir_fd is not None, it should be a file\n"
"  descriptor open to a directory, and the respective path string (src or "
"dst)\n"
"  should be relative; the path will then be relative to that directory.\n"
"src_dir_fd and dst_dir_fd, may not be implemented on your platform.\n"
"  If they are unavailable, using them will raise a NotImplementedError.\""
msgstr ""

#: mu/modes/api/python3.py:785
msgid ""
"os.rmdir(path, *, dir_fd=None) \n"
"Remove a directory.\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError."
msgstr ""

#: mu/modes/api/python3.py:788
msgid ""
"os.scandir() \n"
"scandir(path='.') -> iterator of DirEntry objects for given path"
msgstr ""

#: mu/modes/api/python3.py:791
msgid ""
"os.sched_get_priority_max(policy) \n"
"Get the maximum scheduling priority for policy."
msgstr ""

#: mu/modes/api/python3.py:794
msgid ""
"os.sched_get_priority_min(policy) \n"
"Get the minimum scheduling priority for policy."
msgstr ""

#: mu/modes/api/python3.py:797
msgid ""
"os.sched_getaffinity(pid, /) \n"
"Return the affinity of the process identified by pid (or the current process "
"if zero).\n"
"\n"
"The affinity is returned as a set of CPU identifiers."
msgstr ""

#: mu/modes/api/python3.py:800
msgid ""
"os.sched_getparam(pid, /) \n"
"Returns scheduling parameters for the process identified by pid.\n"
"\n"
"If pid is 0, returns parameters for the calling process.\n"
"Return value is an instance of sched_param."
msgstr ""

#: mu/modes/api/python3.py:803
msgid ""
"os.sched_getscheduler(pid, /) \n"
"Get the scheduling policy for the process identifiedy by pid.\n"
"\n"
"Passing 0 for pid returns the scheduling policy for the calling process."
msgstr ""

#: mu/modes/api/python3.py:806
msgid ""
"os.sched_param(sched_priority) \n"
"Current has only one field: sched_priority\");\n"
"\n"
"sched_priority\n"
"  A scheduling parameter."
msgstr ""

#: mu/modes/api/python3.py:809
msgid ""
"os.sched_rr_get_interval(pid, /) \n"
"Return the round-robin quantum for the process identified by pid, in "
"seconds.\n"
"\n"
"Value returned is a float."
msgstr ""

#: mu/modes/api/python3.py:812
msgid ""
"os.sched_setaffinity(pid, mask, /) \n"
"Set the CPU affinity of the process identified by pid to mask.\n"
"\n"
"mask should be an iterable of integers identifying CPUs."
msgstr ""

#: mu/modes/api/python3.py:815
msgid ""
"os.sched_setparam(pid, param, /) \n"
"Set scheduling parameters for the process identified by pid.\n"
"\n"
"If pid is 0, sets parameters for the calling process.\n"
"param should be an instance of sched_param."
msgstr ""

#: mu/modes/api/python3.py:818
msgid ""
"os.sched_setscheduler(pid, policy, param, /) \n"
"Set the scheduling policy for the process identified by pid.\n"
"\n"
"If pid is 0, the calling process is changed.\n"
"param is an instance of sched_param."
msgstr ""

#: mu/modes/api/python3.py:820
msgid ""
"os.sched_yield() \n"
"Voluntarily relinquish the CPU."
msgstr ""

#: mu/modes/api/python3.py:822
msgid ""
"os.sendfile() \n"
"sendfile(out, in, offset, count) -> byteswritten\n"
"sendfile(out, in, offset, count[, headers][, trailers], flags=0)\n"
"            -> byteswritten\n"
"Copy count bytes from file descriptor in to file descriptor out."
msgstr ""

#: mu/modes/api/python3.py:825
msgid ""
"os.set_blocking() \n"
"set_blocking(fd, blocking)\n"
"\n"
"Set the blocking mode of the specified file descriptor.\n"
"Set the O_NONBLOCK flag if blocking is False,\n"
"clear the O_NONBLOCK flag otherwise."
msgstr ""

#: mu/modes/api/python3.py:828
msgid ""
"os.set_inheritable(fd, inheritable, /) \n"
"Set the inheritable flag of the specified file descriptor."
msgstr ""

#: mu/modes/api/python3.py:830
msgid ""
"os.setegid(egid, /) \n"
"Set the current process's effective group id."
msgstr ""

#: mu/modes/api/python3.py:831
msgid ""
"os.seteuid(euid, /) \n"
"Set the current process's effective user id."
msgstr ""

#: mu/modes/api/python3.py:832
msgid ""
"os.setgid(gid, /) \n"
"Set the current process's group id."
msgstr ""

#: mu/modes/api/python3.py:834
msgid ""
"os.setgroups(groups, /) \n"
"Set the groups of the current process to list."
msgstr ""

#: mu/modes/api/python3.py:836
msgid ""
"os.setpgid(pid, pgrp, /) \n"
"Call the system call setpgid(pid, pgrp)."
msgstr ""

#: mu/modes/api/python3.py:838
msgid ""
"os.setpgrp() \n"
"Make the current process the leader of its process group."
msgstr ""

#: mu/modes/api/python3.py:841
msgid ""
"os.setpriority(which, who, priority) \n"
"Set program scheduling priority."
msgstr ""

#: mu/modes/api/python3.py:844
msgid ""
"os.setregid(rgid, egid, /) \n"
"Set the current process's real and effective group ids."
msgstr ""

#: mu/modes/api/python3.py:847
msgid ""
"os.setresgid(rgid, egid, sgid, /) \n"
"Set the current process's real, effective, and saved group ids."
msgstr ""

#: mu/modes/api/python3.py:850
msgid ""
"os.setresuid(ruid, euid, suid, /) \n"
"Set the current process's real, effective, and saved user ids."
msgstr ""

#: mu/modes/api/python3.py:853
msgid ""
"os.setreuid(ruid, euid, /) \n"
"Set the current process's real and effective user ids."
msgstr ""

#: mu/modes/api/python3.py:855
msgid ""
"os.setsid() \n"
"Call the system call setsid()."
msgstr ""

#: mu/modes/api/python3.py:856
msgid ""
"os.setuid(uid, /) \n"
"Set the current process's user id."
msgstr ""

#: mu/modes/api/python3.py:858
msgid ""
"os.setxattr(path, attribute, value, flags=0, *, follow_symlinks=True) \n"
"Set extended attribute attribute on path to value.\n"
"\n"
"path may be either a string or an open file descriptor.\n"
"If follow_symlinks is False, and the last element of the path is a symbolic\n"
"  link, setxattr will modify the symbolic link itself instead of the file\n"
"  the link points to."
msgstr ""

#: mu/modes/api/python3.py:861
msgid ""
"os.spawnl(mode, file, *args) \n"
"spawnl(mode, file, *args) -> integer\n"
"\n"
"Execute file with arguments from args in a subprocess.\n"
"If mode == P_NOWAIT return the pid of the process.\n"
"If mode == P_WAIT return the process's exit code if it exits normally;\n"
"otherwise return -SIG, where SIG is the signal that killed it. "
msgstr ""

#: mu/modes/api/python3.py:864
msgid ""
"os.spawnle(mode, file, *args) \n"
"spawnle(mode, file, *args, env) -> integer\n"
"\n"
"Execute file with arguments from args in a subprocess with the\n"
"supplied environment.\n"
"If mode == P_NOWAIT return the pid of the process.\n"
"If mode == P_WAIT return the process's exit code if it exits normally;\n"
"otherwise return -SIG, where SIG is the signal that killed it. "
msgstr ""

#: mu/modes/api/python3.py:867
msgid ""
"os.spawnlp(mode, file, *args) \n"
"spawnlp(mode, file, *args) -> integer\n"
"\n"
"Execute file (which is looked for along $PATH) with arguments from\n"
"args in a subprocess with the supplied environment.\n"
"If mode == P_NOWAIT return the pid of the process.\n"
"If mode == P_WAIT return the process's exit code if it exits normally;\n"
"otherwise return -SIG, where SIG is the signal that killed it. "
msgstr ""

#: mu/modes/api/python3.py:870
msgid ""
"os.spawnlpe(mode, file, *args) \n"
"spawnlpe(mode, file, *args, env) -> integer\n"
"\n"
"Execute file (which is looked for along $PATH) with arguments from\n"
"args in a subprocess with the supplied environment.\n"
"If mode == P_NOWAIT return the pid of the process.\n"
"If mode == P_WAIT return the process's exit code if it exits normally;\n"
"otherwise return -SIG, where SIG is the signal that killed it. "
msgstr ""

#: mu/modes/api/python3.py:873
msgid ""
"os.spawnv(mode, file, args) \n"
"spawnv(mode, file, args) -> integer\n"
"\n"
"Execute file with arguments from args in a subprocess.\n"
"If mode == P_NOWAIT return the pid of the process.\n"
"If mode == P_WAIT return the process's exit code if it exits normally;\n"
"otherwise return -SIG, where SIG is the signal that killed it. "
msgstr ""

#: mu/modes/api/python3.py:876
msgid ""
"os.spawnve(mode, file, args, env) \n"
"spawnve(mode, file, args, env) -> integer\n"
"\n"
"Execute file with arguments from args in a subprocess with the\n"
"specified environment.\n"
"If mode == P_NOWAIT return the pid of the process.\n"
"If mode == P_WAIT return the process's exit code if it exits normally;\n"
"otherwise return -SIG, where SIG is the signal that killed it. "
msgstr ""

#: mu/modes/api/python3.py:879
msgid ""
"os.spawnvp(mode, file, args) \n"
"spawnvp(mode, file, args) -> integer\n"
"\n"
"Execute file (which is looked for along $PATH) with arguments from\n"
"args in a subprocess.\n"
"If mode == P_NOWAIT return the pid of the process.\n"
"If mode == P_WAIT return the process's exit code if it exits normally;\n"
"otherwise return -SIG, where SIG is the signal that killed it. "
msgstr ""

#: mu/modes/api/python3.py:882
msgid ""
"os.spawnvpe(mode, file, args, env) \n"
"spawnvpe(mode, file, args, env) -> integer\n"
"\n"
"Execute file (which is looked for along $PATH) with arguments from\n"
"args in a subprocess with the supplied environment.\n"
"If mode == P_NOWAIT return the pid of the process.\n"
"If mode == P_WAIT return the process's exit code if it exits normally;\n"
"otherwise return -SIG, where SIG is the signal that killed it. "
msgstr ""

#: mu/modes/api/python3.py:885
msgid ""
"os.stat() \n"
"Constants/functions for interpreting results of os.stat() and os.lstat().\n"
"\n"
"Suggested usage: from stat import *"
msgstr ""

#: mu/modes/api/python3.py:888
msgid ""
"os.stat(path, *, dir_fd=None, follow_symlinks=True) \n"
"Perform a stat system call on the given path.\n"
"\n"
"  path\n"
"    Path to be examined; can be string, bytes, path-like object or\n"
"    open-file-descriptor int.\n"
"  dir_fd\n"
"    If not None, it should be a file descriptor open to a directory,\n"
"    and path should be a relative string; path will then be relative to\n"
"    that directory.\n"
"  follow_symlinks\n"
"    If False, and the last element of the path is a symbolic link,\n"
"    stat will examine the symbolic link itself instead of the file\n"
"    the link points to.\n"
"\n"
"dir_fd and follow_symlinks may not be implemented\n"
"  on your platform.  If they are unavailable, using them will raise a\n"
"  NotImplementedError.\n"
"\n"
"It's an error to use dir_fd or follow_symlinks when specifying path as\n"
"  an open file descriptor."
msgstr ""

#: mu/modes/api/python3.py:891
msgid ""
"os.stat_float_times() \n"
"stat_float_times([newval]) -> oldval\n"
"\n"
"Determine whether os.[lf]stat represents time stamps as float objects.\n"
"\n"
"If value is True, future calls to stat() return floats; if it is False,\n"
"future calls return ints.\n"
"If value is omitted, return the current setting."
msgstr ""

#: mu/modes/api/python3.py:894
msgid ""
"os.stat_result() \n"
"stat_result: Result from stat, fstat, or lstat.\n"
"\n"
"This object may be accessed either as a tuple of\n"
"  (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)\n"
"or via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.\n"
"\n"
"Posix/windows: If your platform supports st_blksize, st_blocks, st_rdev,\n"
"or st_flags, they are available as attributes only.\n"
"\n"
"See os.stat for more information."
msgstr ""

#: mu/modes/api/python3.py:897
msgid ""
"os.statvfs(path) \n"
"Perform a statvfs system call on the given path.\n"
"\n"
"path may always be specified as a string.\n"
"On some platforms, path may also be specified as an open file descriptor.\n"
"  If this functionality is unavailable, using it raises an exception."
msgstr ""

#: mu/modes/api/python3.py:900
msgid ""
"os.statvfs_result() \n"
"statvfs_result: Result from statvfs or fstatvfs.\n"
"\n"
"This object may be accessed either as a tuple of\n"
"  (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, "
"namemax),\n"
"or via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.\n"
"\n"
"See os.statvfs for more information."
msgstr ""

#: mu/modes/api/python3.py:902
msgid ""
"os.strerror(code, /) \n"
"Translate an error code to a message string."
msgstr ""

#: mu/modes/api/python3.py:904
msgid ""
"os.symlink(src, dst, target_is_directory=False, *, dir_fd=None) \n"
"Create a symbolic link pointing to src named dst.\n"
"\n"
"target_is_directory is required on Windows if the target is to be\n"
"  interpreted as a directory.  (On Windows, symlink requires\n"
"  Windows 6.0 or greater, and raises a NotImplementedError otherwise.)\n"
"  target_is_directory is ignored on non-Windows platforms.\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError."
msgstr ""

#: mu/modes/api/python3.py:906
msgid ""
"os.sync() \n"
"Force write of everything to disk."
msgstr ""

#: mu/modes/api/python3.py:908
msgid ""
"os.sys() \n"
"This module provides access to some objects used or maintained by the\n"
"interpreter and to functions that interact strongly with the interpreter.\n"
"\n"
"Dynamic objects:\n"
"\n"
"argv -- command line arguments; argv[0] is the script pathname if known\n"
"path -- module search path; path[0] is the script directory, else ''\n"
"modules -- dictionary of loaded modules\n"
"\n"
"displayhook -- called to show results in an interactive session\n"
"excepthook -- called to handle any uncaught exception other than SystemExit\n"
"  To customize printing in an interactive session or to install a custom\n"
"  top-level exception handler, assign other functions to replace these.\n"
"\n"
"stdin -- standard input file object; used by input()\n"
"stdout -- standard output file object; used by print()\n"
"stderr -- standard error object; used for error messages\n"
"  By assigning other file objects (or objects that behave like files)\n"
"  to these, it is possible to redirect all of the interpreter's I/O.\n"
"\n"
"last_type -- type of last uncaught exception\n"
"last_value -- value of last uncaught exception\n"
"last_traceback -- traceback of last uncaught exception\n"
"  These three are only available in an interactive session after a\n"
"  traceback has been printed.\n"
"\n"
"Static objects:\n"
"\n"
"builtin_module_names -- tuple of module names built into this interpreter\n"
"copyright -- copyright notice pertaining to this interpreter\n"
"exec_prefix -- prefix used to find the machine-specific Python library\n"
"executable -- absolute path of the executable binary of the Python "
"interpreter\n"
"float_info -- a struct sequence with information about the float "
"implementation.\n"
"float_repr_style -- string indicating the style of repr() output for floats\n"
"hash_info -- a struct sequence with information about the hash algorithm.\n"
"hexversion -- version information encoded as a single integer\n"
"implementation -- Python implementation information.\n"
"int_info -- a struct sequence with information about the int "
"implementation.\n"
"maxsize -- the largest supported length of containers.\n"
"maxunicode -- the value of the largest Unicode code point\n"
"platform -- platform identifier\n"
"prefix -- prefix used to find the Python library\n"
"thread_info -- a struct sequence with information about the thread "
"implementation.\n"
"version -- the version of this interpreter as a string\n"
"version_info -- version information as a named tuple\n"
"__stdin__ -- the original stdin; don't touch!\n"
"__stdout__ -- the original stdout; don't touch!\n"
"__stderr__ -- the original stderr; don't touch!\n"
"__displayhook__ -- the original displayhook; don't touch!\n"
"__excepthook__ -- the original excepthook; don't touch!\n"
"\n"
"Functions:\n"
"\n"
"displayhook() -- print an object to the screen, and save it in builtins._\n"
"excepthook() -- print an exception and its traceback to sys.stderr\n"
"exc_info() -- return thread-safe information about the current exception\n"
"exit() -- exit the interpreter by raising SystemExit\n"
"getdlopenflags() -- returns flags to be used for dlopen() calls\n"
"getprofile() -- get the global profiling function\n"
"getrefcount() -- return the reference count for an object (plus one :-)\n"
"getrecursionlimit() -- return the max recursion depth for the interpreter\n"
"getsizeof() -- return the size of an object in bytes\n"
"gettrace() -- get the global debug tracing function\n"
"setcheckinterval() -- control how often the interpreter checks for events\n"
"setdlopenflags() -- set the flags to be used for dlopen() calls\n"
"setprofile() -- set the global profiling function\n"
"setrecursionlimit() -- set the max recursion depth for the interpreter\n"
"settrace() -- set the global debug tracing function"
msgstr ""

#: mu/modes/api/python3.py:911
msgid ""
"os.sysconf(name, /) \n"
"Return an integer-valued system configuration variable."
msgstr ""

#: mu/modes/api/python3.py:913
msgid ""
"os.system(command) \n"
"Execute the command in a subshell."
msgstr ""

#: mu/modes/api/python3.py:915
msgid ""
"os.tcgetpgrp(fd, /) \n"
"Return the process group associated with the terminal specified by fd."
msgstr ""

#: mu/modes/api/python3.py:918
msgid ""
"os.tcsetpgrp(fd, pgid, /) \n"
"Set the process group associated with the terminal specified by fd."
msgstr ""

#: mu/modes/api/python3.py:921
msgid ""
"os.terminal_size() \n"
"A tuple of (columns, lines) for holding terminal window size"
msgstr ""

#: mu/modes/api/python3.py:924
msgid ""
"os.times() \n"
"Return a collection containing process timing information.\n"
"\n"
"The object returned behaves like a named tuple with these fields:\n"
"  (utime, stime, cutime, cstime, elapsed_time)\n"
"All fields are floating point numbers."
msgstr ""

#: mu/modes/api/python3.py:927
msgid ""
"os.times_result() \n"
"times_result: Result from os.times().\n"
"\n"
"This object may be accessed either as a tuple of\n"
"  (user, system, children_user, children_system, elapsed),\n"
"or via the attributes user, system, children_user, children_system,\n"
"and elapsed.\n"
"\n"
"See os.times for more information."
msgstr ""

#: mu/modes/api/python3.py:930
msgid ""
"os.truncate(path, length) \n"
"Truncate a file, specified by path, to a specific length.\n"
"\n"
"On some platforms, path may also be specified as an open file descriptor.\n"
"  If this functionality is unavailable, using it raises an exception."
msgstr ""

#: mu/modes/api/python3.py:933
msgid ""
"os.ttyname(fd, /) \n"
"Return the name of the terminal device connected to 'fd'.\n"
"\n"
"fd\n"
"  Integer file descriptor handle."
msgstr ""

#: mu/modes/api/python3.py:936
msgid ""
"os.umask(mask, /) \n"
"Set the current numeric umask and return the previous umask."
msgstr ""

#: mu/modes/api/python3.py:939
msgid ""
"os.uname() \n"
"Return an object identifying the current operating system.\n"
"\n"
"The object behaves like a named tuple with the following fields:\n"
"  (sysname, nodename, release, version, machine)"
msgstr ""

#: mu/modes/api/python3.py:942
msgid ""
"os.uname_result() \n"
"uname_result: Result from os.uname().\n"
"\n"
"This object may be accessed either as a tuple of\n"
"  (sysname, nodename, release, version, machine),\n"
"or via the attributes sysname, nodename, release, version, and machine.\n"
"\n"
"See os.uname for more information."
msgstr ""

#: mu/modes/api/python3.py:945
msgid ""
"os.unlink(path, *, dir_fd=None) \n"
"Remove a file (same as remove()).\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"dir_fd may not be implemented on your platform.\n"
"  If it is unavailable, using it will raise a NotImplementedError."
msgstr ""

#: mu/modes/api/python3.py:947
msgid ""
"os.unsetenv(name, /) \n"
"Delete an environment variable."
msgstr ""

#: mu/modes/api/python3.py:949
msgid ""
"os.urandom(size, /) \n"
"Return a bytes object containing random bytes suitable for cryptographic use."
msgstr ""

#: mu/modes/api/python3.py:952
msgid ""
"os.utime(path, times=None, *, ns=None, dir_fd=None, follow_symlinks=True) \n"
"Set the access and modified time of path.\n"
"\n"
"path may always be specified as a string.\n"
"On some platforms, path may also be specified as an open file descriptor.\n"
"  If this functionality is unavailable, using it raises an exception.\n"
"\n"
"If times is not None, it must be a tuple (atime, mtime);\n"
"    atime and mtime should be expressed as float seconds since the epoch.\n"
"If ns is specified, it must be a tuple (atime_ns, mtime_ns);\n"
"    atime_ns and mtime_ns should be expressed as integer nanoseconds\n"
"    since the epoch.\n"
"If times is None and ns is unspecified, utime uses the current time.\n"
"Specifying tuples for both times and ns is an error.\n"
"\n"
"If dir_fd is not None, it should be a file descriptor open to a directory,\n"
"  and path should be relative; path will then be relative to that "
"directory.\n"
"If follow_symlinks is False, and the last element of the path is a symbolic\n"
"  link, utime will modify the symbolic link itself instead of the file the\n"
"  link points to.\n"
"It is an error to use dir_fd or follow_symlinks when specifying path\n"
"  as an open file descriptor.\n"
"dir_fd and follow_symlinks may not be available on your platform.\n"
"  If they are unavailable, using them will raise a NotImplementedError."
msgstr ""

#: mu/modes/api/python3.py:955
msgid ""
"os.wait() \n"
"Wait for completion of a child process.\n"
"\n"
"Returns a tuple of information about the child process:\n"
"    (pid, status)"
msgstr ""

#: mu/modes/api/python3.py:958
msgid ""
"os.wait3(options) \n"
"Wait for completion of a child process.\n"
"\n"
"Returns a tuple of information about the child process:\n"
"  (pid, status, rusage)"
msgstr ""

#: mu/modes/api/python3.py:961
msgid ""
"os.wait4(pid, options) \n"
"Wait for completion of a specific child process.\n"
"\n"
"Returns a tuple of information about the child process:\n"
"  (pid, status, rusage)"
msgstr ""

#: mu/modes/api/python3.py:964
msgid ""
"os.waitid(idtype, id, options, /) \n"
"Returns the result of waiting for a process or processes.\n"
"\n"
"  idtype\n"
"    Must be one of be P_PID, P_PGID or P_ALL.\n"
"  id\n"
"    The id to wait on.\n"
"  options\n"
"    Constructed from the ORing of one or more of WEXITED, WSTOPPED\n"
"    or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT.\n"
"\n"
"Returns either waitid_result or None if WNOHANG is specified and there are\n"
"no children in a waitable state."
msgstr ""

#: mu/modes/api/python3.py:967
msgid ""
"os.waitid_result() \n"
"waitid_result: Result from waitid.\n"
"\n"
"This object may be accessed either as a tuple of\n"
"  (si_pid, si_uid, si_signo, si_status, si_code),\n"
"or via the attributes si_pid, si_uid, and so on.\n"
"\n"
"See os.waitid for more information."
msgstr ""

#: mu/modes/api/python3.py:970
msgid ""
"os.waitpid(pid, options, /) \n"
"Wait for completion of a given child process.\n"
"\n"
"Returns a tuple of information regarding the child process:\n"
"    (pid, status)\n"
"\n"
"The options argument is ignored on Windows."
msgstr ""

#: mu/modes/api/python3.py:973
msgid ""
"os.walk(top, topdown=True, onerror=None, followlinks=False) \n"
"Directory tree generator.\n"
"\n"
"For each directory in the directory tree rooted at top (including top\n"
"itself, but excluding '.' and '..'), yields a 3-tuple\n"
"\n"
"    dirpath, dirnames, filenames\n"
"\n"
"dirpath is a string, the path to the directory.  dirnames is a list of\n"
"the names of the subdirectories in dirpath (excluding '.' and '..').\n"
"filenames is a list of the names of the non-directory files in dirpath.\n"
"Note that the names in the lists are just names, with no path components.\n"
"To get a full path (which begins with top) to a file or directory in\n"
"dirpath, do os.path.join(dirpath, name).\n"
"\n"
"If optional arg 'topdown' is true or not specified, the triple for a\n"
"directory is generated before the triples for any of its subdirectories\n"
"(directories are generated top down).  If topdown is false, the triple\n"
"for a directory is generated after the triples for all of its\n"
"subdirectories (directories are generated bottom up).\n"
"\n"
"When topdown is true, the caller can modify the dirnames list in-place\n"
"(e.g., via del or slice assignment), and walk will only recurse into the\n"
"subdirectories whose names remain in dirnames; this can be used to prune "
"the\n"
"search, or to impose a specific order of visiting.  Modifying dirnames when\n"
"topdown is false is ineffective, since the directories in dirnames have\n"
"already been generated by the time dirnames itself is generated. No matter\n"
"the value of topdown, the list of subdirectories is retrieved before the\n"
"tuples for the directory and its subdirectories are generated.\n"
"\n"
"By default errors from the os.scandir() call are ignored.  If\n"
"optional arg 'onerror' is specified, it should be a function; it\n"
"will be called with one argument, an OSError instance.  It can\n"
"report the error to continue with the walk, or raise the exception\n"
"to abort the walk.  Note that the filename is available as the\n"
"filename attribute of the exception object.\n"
"\n"
"By default, os.walk does not follow symbolic links to subdirectories on\n"
"systems that support them.  In order to get this functionality, set the\n"
"optional argument 'followlinks' to true.\n"
"\n"
"Caution:  if you pass a relative pathname for top, don't change the\n"
"current working directory between resumptions of walk.  walk never\n"
"changes the current directory, and assumes that the client doesn't\n"
"either.\n"
"\n"
"Example:\n"
"\n"
"import os\n"
"from os.path import join, getsize\n"
"for root, dirs, files in os.walk('python/Lib/email'):\n"
"    print(root, \"consumes\", end=\"\")\n"
"    print(sum([getsize(join(root, name)) for name in files]), end=\"\")\n"
"    print(\"bytes in\", len(files), \"non-directory files\")\n"
"    if 'CVS' in dirs:\n"
"        dirs.remove('CVS')  # don't visit CVS directories"
msgstr ""

#: mu/modes/api/python3.py:975
msgid ""
"os.write(fd, data, /) \n"
"Write a bytes object to a file descriptor."
msgstr ""

#: mu/modes/api/python3.py:977
msgid ""
"os.writev(fd, buffers, /) \n"
"Iterate over buffers, and write the contents of each to a file descriptor.\n"
"\n"
"Returns the total number of bytes written.\n"
"buffers must be a sequence of bytes-like objects."
msgstr ""

#: mu/modes/api/python3.py:980
msgid ""
"random.Random(x=None) \n"
"Random number generator base class used by bound module functions.\n"
"\n"
"Used to instantiate instances of Random to get generators that don't\n"
"share state.\n"
"\n"
"Class Random can also be subclassed if you want to use a different basic\n"
"generator of your own devising: in that case, override the following\n"
"methods:  random(), seed(), getstate(), and setstate().\n"
"Optionally, implement a getrandbits() method so that randrange()\n"
"can cover arbitrarily large ranges."
msgstr ""

#: mu/modes/api/python3.py:983
msgid ""
"random.SystemRandom(x=None) \n"
"Alternate random number generator using sources provided\n"
"by the operating system (such as /dev/urandom on Unix or\n"
"CryptGenRandom on Windows).\n"
"\n"
" Not available on all systems (see os.urandom() for details)."
msgstr ""

#: mu/modes/api/python3.py:986
msgid ""
"random.betavariate(alpha, beta) \n"
"Beta distribution.\n"
"\n"
"Conditions on the parameters are alpha > 0 and beta > 0.\n"
"Returned values range between 0 and 1."
msgstr ""

#: mu/modes/api/python3.py:989
msgid ""
"random.choice(seq) \n"
"Choose a random element from a non-empty sequence."
msgstr ""

#: mu/modes/api/python3.py:992
msgid ""
"random.choices(population, weights=None, *, cum_weights=None, k=1) \n"
"Return a k sized list of population elements chosen with replacement.\n"
"\n"
"If the relative weights or cumulative weights are not specified,\n"
"the selections are made with equal probability."
msgstr ""

#: mu/modes/api/python3.py:995
msgid ""
"random.expovariate(lambd) \n"
"Exponential distribution.\n"
"\n"
"lambd is 1.0 divided by the desired mean.  It should be\n"
"nonzero.  (The parameter would be called \"lambda\", but that is\n"
"a reserved word in Python.)  Returned values range from 0 to\n"
"positive infinity if lambd is positive, and from negative\n"
"infinity to 0 if lambd is negative."
msgstr ""

#: mu/modes/api/python3.py:998
msgid ""
"random.gammavariate(alpha, beta) \n"
"Gamma distribution.  Not the gamma function!\n"
"\n"
"Conditions on the parameters are alpha > 0 and beta > 0.\n"
"\n"
"The probability distribution function is:\n"
"\n"
"            x ** (alpha - 1) * math.exp(-x / beta)\n"
"  pdf(x) =  --------------------------------------\n"
"              math.gamma(alpha) * beta ** alpha"
msgstr ""

#: mu/modes/api/python3.py:1001
msgid ""
"random.gauss(mu, sigma) \n"
"Gaussian distribution.\n"
"\n"
"mu is the mean, and sigma is the standard deviation.  This is\n"
"slightly faster than the normalvariate() function.\n"
"\n"
"Not thread-safe without a lock around calls."
msgstr ""

#: mu/modes/api/python3.py:1004
msgid ""
"random.getrandbits() \n"
"getrandbits(k) -> x.  Generates an int with k random bits."
msgstr ""

#: mu/modes/api/python3.py:1007
msgid ""
"random.getstate() \n"
"Return internal state; can be passed to setstate() later."
msgstr ""

#: mu/modes/api/python3.py:1010
msgid ""
"random.lognormvariate(mu, sigma) \n"
"Log normal distribution.\n"
"\n"
"If you take the natural logarithm of this distribution, you'll get a\n"
"normal distribution with mean mu and standard deviation sigma.\n"
"mu can have any value, and sigma must be greater than zero."
msgstr ""

#: mu/modes/api/python3.py:1013
msgid ""
"random.normalvariate(mu, sigma) \n"
"Normal distribution.\n"
"\n"
"mu is the mean, and sigma is the standard deviation."
msgstr ""

#: mu/modes/api/python3.py:1016
msgid ""
"random.paretovariate(alpha) \n"
"Pareto distribution.  alpha is the shape parameter."
msgstr ""

#: mu/modes/api/python3.py:1019
msgid ""
"random.randint(a, b) \n"
"Return random integer in range [a, b], including both end points.\n"
"        "
msgstr ""

#: mu/modes/api/python3.py:1021
msgid ""
"random.random() \n"
"random() -> x in the interval [0, 1)."
msgstr ""

#: mu/modes/api/python3.py:1023
msgid ""
"random.randrange(start, stop=None, step=1, _int=<class 'int'>) \n"
"Choose a random item from range(start, stop[, step]).\n"
"\n"
"This fixes the problem with randint() which includes the\n"
"endpoint; in Python this is usually not what you want."
msgstr ""

#: mu/modes/api/python3.py:1026
msgid ""
"random.sample(population, k) \n"
"Chooses k unique random elements from a population sequence or set.\n"
"\n"
"Returns a new list containing elements from the population while\n"
"leaving the original population unchanged.  The resulting list is\n"
"in selection order so that all sub-slices will also be valid random\n"
"samples.  This allows raffle winners (the sample) to be partitioned\n"
"into grand prize and second place winners (the subslices).\n"
"\n"
"Members of the population need not be hashable or unique.  If the\n"
"population contains repeats, then each occurrence is a possible\n"
"selection in the sample.\n"
"\n"
"To choose a sample in a range of integers, use range as an argument.\n"
"This is especially fast and space efficient for sampling from a\n"
"large population:   sample(range(10000000), 60)"
msgstr ""

#: mu/modes/api/python3.py:1029
msgid ""
"random.seed(a=None, version=2) \n"
"Initialize internal state from hashable object.\n"
"\n"
"None or no argument seeds from current time or from an operating\n"
"system specific randomness source if available.\n"
"\n"
"If *a* is an int, all bits are used.\n"
"\n"
"For version 2 (the default), all of the bits are used if *a* is a str,\n"
"bytes, or bytearray.  For version 1 (provided for reproducing random\n"
"sequences from older versions of Python), the algorithm for str and\n"
"bytes generates a narrower range of seeds."
msgstr ""

#: mu/modes/api/python3.py:1032
msgid ""
"random.setstate(state) \n"
"Restore internal state from object returned by getstate()."
msgstr ""

#: mu/modes/api/python3.py:1035
msgid ""
"random.shuffle(x, random=None) \n"
"Shuffle list x in place, and return None.\n"
"\n"
"Optional argument random is a 0-argument function returning a\n"
"random float in [0.0, 1.0); if it is the default None, the\n"
"standard random.random will be used."
msgstr ""

#: mu/modes/api/python3.py:1038
msgid ""
"random.triangular(low=0.0, high=1.0, mode=None) \n"
"Triangular distribution.\n"
"\n"
"Continuous distribution bounded by given lower and upper limits,\n"
"and having a given mode value in-between.\n"
"\n"
"http://en.wikipedia.org/wiki/Triangular_distribution"
msgstr ""

#: mu/modes/api/python3.py:1041
msgid ""
"random.uniform(a, b) \n"
"Get a random number in the range [a, b) or [a, b] depending on rounding."
msgstr ""

#: mu/modes/api/python3.py:1044
msgid ""
"random.vonmisesvariate(mu, kappa) \n"
"Circular data distribution.\n"
"\n"
"mu is the mean angle, expressed in radians between 0 and 2*pi, and\n"
"kappa is the concentration parameter, which must be greater than or\n"
"equal to zero.  If kappa is equal to zero, this distribution reduces\n"
"to a uniform random angle over the range 0 to 2*pi."
msgstr ""

#: mu/modes/api/python3.py:1047
msgid ""
"random.weibullvariate(alpha, beta) \n"
"Weibull distribution.\n"
"\n"
"alpha is the scale parameter and beta is the shape parameter."
msgstr ""

#: mu/modes/api/python3.py:1050
msgid ""
"socket.AddressFamily(value, names=None, *, module=None, qualname=None, "
"type=None, start=1) \n"
"An enumeration."
msgstr ""

#: mu/modes/api/python3.py:1053
msgid ""
"socket.AddressInfo(value, names=None, *, module=None, qualname=None, "
"type=None, start=1) \n"
"An enumeration."
msgstr ""

#: mu/modes/api/python3.py:1056
msgid ""
"socket.CMSG_LEN() \n"
"CMSG_LEN(length) -> control message length\n"
"\n"
"Return the total length, without trailing padding, of an ancillary\n"
"data item with associated data of the given length.  This value can\n"
"often be used as the buffer size for recvmsg() to receive a single\n"
"item of ancillary data, but RFC 3542 requires portable applications to\n"
"use CMSG_SPACE() and thus include space for padding, even when the\n"
"item will be the last in the buffer.  Raises OverflowError if length\n"
"is outside the permissible range of values."
msgstr ""

#: mu/modes/api/python3.py:1059
msgid ""
"socket.CMSG_SPACE() \n"
"CMSG_SPACE(length) -> buffer size\n"
"\n"
"Return the buffer size needed for recvmsg() to receive an ancillary\n"
"data item with associated data of the given length, along with any\n"
"trailing padding.  The buffer space needed to receive multiple items\n"
"is the sum of the CMSG_SPACE() values for their associated data\n"
"lengths.  Raises OverflowError if length is outside the permissible\n"
"range of values."
msgstr ""

#: mu/modes/api/python3.py:1062
msgid ""
"socket.IntEnum(value, names=None, *, module=None, qualname=None, type=None, "
"start=1) \n"
"Enum where members are also (and must be) ints"
msgstr ""

#: mu/modes/api/python3.py:1065
msgid ""
"socket.IntFlag(value, names=None, *, module=None, qualname=None, type=None, "
"start=1) \n"
"Support for integer-based Flags"
msgstr ""

#: mu/modes/api/python3.py:1068
msgid ""
"socket.MsgFlag(value, names=None, *, module=None, qualname=None, type=None, "
"start=1) \n"
"An enumeration."
msgstr ""

#: mu/modes/api/python3.py:1070
msgid ""
"socket.OSError() \n"
"Base class for I/O related errors."
msgstr ""

#: mu/modes/api/python3.py:1072
msgid ""
"socket.SocketIO(sock, mode) \n"
"Raw I/O implementation for stream sockets.\n"
"\n"
"This class supports the makefile() method on sockets.  It provides\n"
"the raw I/O interface on top of a socket object."
msgstr ""

#: mu/modes/api/python3.py:1075
msgid ""
"socket.SocketKind(value, names=None, *, module=None, qualname=None, "
"type=None, start=1) \n"
"An enumeration."
msgstr ""

#: mu/modes/api/python3.py:1078
msgid ""
"socket.create_connection(address, timeout=<object object at 0x7fcbd4efa180>, "
"source_address=None) \n"
"Connect to *address* and return the socket object.\n"
"\n"
"Convenience function.  Connect to *address* (a 2-tuple ``(host,\n"
"port)``) and return the socket object.  Passing the optional\n"
"*timeout* parameter will set the timeout on the socket instance\n"
"before attempting to connect.  If no *timeout* is supplied, the\n"
"global default timeout setting returned by :func:`getdefaulttimeout`\n"
"is used.  If *source_address* is set it must be a tuple of (host, port)\n"
"for the socket to bind as a source address before making the connection.\n"
"A host of '' or port 0 tells the OS to use the default."
msgstr ""

#: mu/modes/api/python3.py:1081
msgid ""
"socket.dup() \n"
"dup(integer) -> integer\n"
"\n"
"Duplicate an integer socket file descriptor.  This is like os.dup(), but "
"for\n"
"sockets; on some platforms os.dup() won't work for socket file descriptors."
msgstr ""

#: mu/modes/api/python3.py:1084
msgid ""
"socket.errno() \n"
"This module makes available standard errno system symbols.\n"
"\n"
"The value of each symbol is the corresponding integer value,\n"
"e.g., on most systems, errno.ENOENT equals the integer 2.\n"
"\n"
"The dictionary errno.errorcode maps numeric codes to symbol names,\n"
"e.g., errno.errorcode[2] could be the string 'ENOENT'.\n"
"\n"
"Symbols that are not relevant to the underlying system are not defined.\n"
"\n"
"To map error codes to error messages, use the function os.strerror(),\n"
"e.g. os.strerror(2) could return 'No such file or directory'."
msgstr ""

#: mu/modes/api/python3.py:1087
msgid ""
"socket.fromfd(fd, family, type, proto=0) \n"
"fromfd(fd, family, type[, proto]) -> socket object\n"
"\n"
"Create a socket object from a duplicate of the given file\n"
"descriptor.  The remaining arguments are the same as for socket()."
msgstr ""

#: mu/modes/api/python3.py:1089
msgid ""
"socket.gaierror() \n"
"Base class for I/O related errors."
msgstr ""

#: mu/modes/api/python3.py:1091
msgid ""
"socket.getaddrinfo(host, port, family=0, type=0, proto=0, flags=0) \n"
"Resolve host and port into list of address info entries.\n"
"\n"
"Translate the host/port argument into a sequence of 5-tuples that contain\n"
"all the necessary arguments for creating a socket connected to that "
"service.\n"
"host is a domain name, a string representation of an IPv4/v6 address or\n"
"None. port is a string service name such as 'http', a numeric port number "
"or\n"
"None. By passing None as the value of host and port, you can pass NULL to\n"
"the underlying C API.\n"
"\n"
"The family, type and proto arguments can be optionally specified in order "
"to\n"
"narrow the list of addresses returned. Passing zero as a value for each of\n"
"these arguments selects the full range of results."
msgstr ""

#: mu/modes/api/python3.py:1094
msgid ""
"socket.getdefaulttimeout() \n"
"getdefaulttimeout() -> timeout\n"
"\n"
"Returns the default timeout in seconds (float) for new socket objects.\n"
"A value of None indicates that new socket objects have no timeout.\n"
"When the socket module is first imported, the default is None."
msgstr ""

#: mu/modes/api/python3.py:1097
msgid ""
"socket.getfqdn(name='') \n"
"Get fully qualified domain name from name.\n"
"\n"
"An empty argument is interpreted as meaning the local host.\n"
"\n"
"First the hostname returned by gethostbyaddr() is checked, then\n"
"possibly existing aliases. In case no FQDN is available, hostname\n"
"from gethostname() is returned."
msgstr ""

#: mu/modes/api/python3.py:1100
msgid ""
"socket.gethostbyaddr() \n"
"gethostbyaddr(host) -> (name, aliaslist, addresslist)\n"
"\n"
"Return the true host name, a list of aliases, and a list of IP addresses,\n"
"for a host.  The host argument is a string giving a host name or IP number."
msgstr ""

#: mu/modes/api/python3.py:1103
msgid ""
"socket.gethostbyname() \n"
"gethostbyname(host) -> address\n"
"\n"
"Return the IP address (a string of the form '255.255.255.255') for a host."
msgstr ""

#: mu/modes/api/python3.py:1106
msgid ""
"socket.gethostbyname_ex() \n"
"gethostbyname_ex(host) -> (name, aliaslist, addresslist)\n"
"\n"
"Return the true host name, a list of aliases, and a list of IP addresses,\n"
"for a host.  The host argument is a string giving a host name or IP number."
msgstr ""

#: mu/modes/api/python3.py:1109
msgid ""
"socket.gethostname() \n"
"gethostname() -> string\n"
"\n"
"Return the current host name."
msgstr ""

#: mu/modes/api/python3.py:1112
msgid ""
"socket.getnameinfo() \n"
"getnameinfo(sockaddr, flags) --> (host, port)\n"
"\n"
"Get host and port for a sockaddr."
msgstr ""

#: mu/modes/api/python3.py:1115
msgid ""
"socket.getprotobyname() \n"
"getprotobyname(name) -> integer\n"
"\n"
"Return the protocol number for the named protocol.  (Rarely used.)"
msgstr ""

#: mu/modes/api/python3.py:1118
msgid ""
"socket.getservbyname() \n"
"getservbyname(servicename[, protocolname]) -> integer\n"
"\n"
"Return a port number from a service name and protocol name.\n"
"The optional protocol name, if given, should be 'tcp' or 'udp',\n"
"otherwise any protocol will match."
msgstr ""

#: mu/modes/api/python3.py:1121
msgid ""
"socket.getservbyport() \n"
"getservbyport(port[, protocolname]) -> string\n"
"\n"
"Return the service name from a port number and protocol name.\n"
"The optional protocol name, if given, should be 'tcp' or 'udp',\n"
"otherwise any protocol will match."
msgstr ""

#: mu/modes/api/python3.py:1123
msgid ""
"socket.herror() \n"
"Base class for I/O related errors."
msgstr ""

#: mu/modes/api/python3.py:1125
msgid ""
"socket.htonl() \n"
"htonl(integer) -> integer\n"
"\n"
"Convert a 32-bit integer from host to network byte order."
msgstr ""

#: mu/modes/api/python3.py:1128
msgid ""
"socket.htons() \n"
"htons(integer) -> integer\n"
"\n"
"Convert a 16-bit integer from host to network byte order."
msgstr ""

#: mu/modes/api/python3.py:1131
msgid ""
"socket.if_indextoname() \n"
"if_indextoname(if_index)\n"
"\n"
"Returns the interface name corresponding to the interface index if_index."
msgstr ""

#: mu/modes/api/python3.py:1134
msgid ""
"socket.if_nameindex() \n"
"if_nameindex()\n"
"\n"
"Returns a list of network interface information (index, name) tuples."
msgstr ""

#: mu/modes/api/python3.py:1137
msgid ""
"socket.if_nametoindex() \n"
"if_nametoindex(if_name)\n"
"\n"
"Returns the interface index corresponding to the interface name if_name."
msgstr ""

#: mu/modes/api/python3.py:1140
msgid ""
"socket.inet_aton() \n"
"inet_aton(string) -> bytes giving packed 32-bit IP representation\n"
"\n"
"Convert an IP address in string format (123.45.67.89) to the 32-bit packed\n"
"binary format used in low-level network functions."
msgstr ""

#: mu/modes/api/python3.py:1143
msgid ""
"socket.inet_ntoa() \n"
"inet_ntoa(packed_ip) -> ip_address_string\n"
"\n"
"Convert an IP address from 32-bit packed binary format to string format"
msgstr ""

#: mu/modes/api/python3.py:1146
msgid ""
"socket.inet_ntop() \n"
"inet_ntop(af, packed_ip) -> string formatted IP address\n"
"\n"
"Convert a packed IP address of the given family to string format."
msgstr ""

#: mu/modes/api/python3.py:1149
msgid ""
"socket.inet_pton() \n"
"inet_pton(af, ip) -> packed IP address string\n"
"\n"
"Convert an IP address from string format to a packed string suitable\n"
"for use with low-level network functions."
msgstr ""

#: mu/modes/api/python3.py:1152
msgid ""
"socket.io() \n"
"The io module provides the Python interfaces to stream handling. The\n"
"builtin open function is defined in this module.\n"
"\n"
"At the top of the I/O hierarchy is the abstract base class IOBase. It\n"
"defines the basic interface to a stream. Note, however, that there is no\n"
"separation between reading and writing to streams; implementations are\n"
"allowed to raise an OSError if they do not support a given operation.\n"
"\n"
"Extending IOBase is RawIOBase which deals simply with the reading and\n"
"writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide\n"
"an interface to OS files.\n"
"\n"
"BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its\n"
"subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer\n"
"streams that are readable, writable, and both respectively.\n"
"BufferedRandom provides a buffered interface to random access\n"
"streams. BytesIO is a simple stream of in-memory bytes.\n"
"\n"
"Another IOBase subclass, TextIOBase, deals with the encoding and decoding\n"
"of streams into text. TextIOWrapper, which extends it, is a buffered text\n"
"interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO\n"
"is an in-memory stream for text.\n"
"\n"
"Argument names are not part of the specification, and only the arguments\n"
"of open() are intended to be used as keyword arguments.\n"
"\n"
"data:\n"
"\n"
"DEFAULT_BUFFER_SIZE\n"
"\n"
"   An int containing the default buffer size used by the module's buffered\n"
"   I/O classes. open() uses the file's blksize (as obtained by os.stat) if\n"
"   possible."
msgstr ""

#: mu/modes/api/python3.py:1155
msgid ""
"socket.ntohl() \n"
"ntohl(integer) -> integer\n"
"\n"
"Convert a 32-bit integer from network to host byte order."
msgstr ""

#: mu/modes/api/python3.py:1158
msgid ""
"socket.ntohs() \n"
"ntohs(integer) -> integer\n"
"\n"
"Convert a 16-bit integer from network to host byte order."
msgstr ""

#: mu/modes/api/python3.py:1161
msgid ""
"socket.os() \n"
"OS routines for NT or Posix depending on what system we're on.\n"
"\n"
"This exports:\n"
"  - all functions from posix or nt, e.g. unlink, stat, etc.\n"
"  - os.path is either posixpath or ntpath\n"
"  - os.name is either 'posix' or 'nt'\n"
"  - os.curdir is a string representing the current directory (always '.')\n"
"  - os.pardir is a string representing the parent directory (always '..')\n"
"  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n"
"  - os.extsep is the extension separator (always '.')\n"
"  - os.altsep is the alternate pathname separator (None or '/')\n"
"  - os.pathsep is the component separator used in $PATH etc\n"
"  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r"
"\\n')\n"
"  - os.defpath is the default search path for executables\n"
"  - os.devnull is the file path of the null device ('/dev/null', etc.)\n"
"\n"
"Programs that import and use 'os' stand a better chance of being\n"
"portable between different platforms.  Of course, they must then\n"
"only use functions that are defined by all platforms (e.g., unlink\n"
"and opendir), and leave all pathname manipulation to os.path\n"
"(e.g., split and join)."
msgstr ""

#: mu/modes/api/python3.py:1164
msgid ""
"socket.selectors() \n"
"Selectors module.\n"
"\n"
"This module allows high-level and efficient I/O multiplexing, built upon "
"the\n"
"`select` module primitives."
msgstr ""

#: mu/modes/api/python3.py:1167
msgid ""
"socket.setdefaulttimeout() \n"
"setdefaulttimeout(timeout)\n"
"\n"
"Set the default timeout in seconds (float) for new socket objects.\n"
"A value of None indicates that new socket objects have no timeout.\n"
"When the socket module is first imported, the default is None."
msgstr ""

#: mu/modes/api/python3.py:1170
msgid ""
"socket.sethostname() \n"
"sethostname(name)\n"
"\n"
"Sets the hostname to name."
msgstr ""

#: mu/modes/api/python3.py:1173
msgid ""
"socket.socket() \n"
"socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None) -> socket "
"object\n"
"\n"
"Open a socket of the given type.  The family argument specifies the\n"
"address family; it defaults to AF_INET.  The type argument specifies\n"
"whether this is a stream (SOCK_STREAM, this is the default)\n"
"or datagram (SOCK_DGRAM) socket.  The protocol argument defaults to 0,\n"
"specifying the default protocol.  Keyword arguments are accepted.\n"
"The socket is created as non-inheritable.\n"
"\n"
"A socket object represents one endpoint of a network connection.\n"
"\n"
"Methods of socket objects (keyword arguments not allowed):\n"
"\n"
"_accept() -- accept connection, returning new socket fd and client address\n"
"bind(addr) -- bind the socket to a local address\n"
"close() -- close the socket\n"
"connect(addr) -- connect the socket to a remote address\n"
"connect_ex(addr) -- connect, return an error code instead of an exception\n"
"dup() -- return a new socket fd duplicated from fileno()\n"
"fileno() -- return underlying file descriptor\n"
"getpeername() -- return remote address [*]\n"
"getsockname() -- return local address\n"
"getsockopt(level, optname[, buflen]) -- get socket options\n"
"gettimeout() -- return timeout or None\n"
"listen([n]) -- start listening for incoming connections\n"
"recv(buflen[, flags]) -- receive data\n"
"recv_into(buffer[, nbytes[, flags]]) -- receive data (into a buffer)\n"
"recvfrom(buflen[, flags]) -- receive data and sender's address\n"
"recvfrom_into(buffer[, nbytes, [, flags])\n"
"  -- receive data and sender's address (into a buffer)\n"
"sendall(data[, flags]) -- send all data\n"
"send(data[, flags]) -- send data, may not send all of it\n"
"sendto(data[, flags], addr) -- send data to a given address\n"
"setblocking(0 | 1) -- set or clear the blocking I/O flag\n"
"setsockopt(level, optname, value[, optlen]) -- set socket options\n"
"settimeout(None | float) -- set or clear the timeout\n"
"shutdown(how) -- shut down traffic in one or both directions\n"
"if_nameindex() -- return all network interface indices and names\n"
"if_nametoindex(name) -- return the corresponding interface index\n"
"if_indextoname(index) -- return the corresponding interface name\n"
"\n"
" [*] not available on all platforms!"
msgstr ""

#: mu/modes/api/python3.py:1176
msgid ""
"socket.socket(family=<AddressFamily.AF_INET: 2>, type=<SocketKind."
"SOCK_STREAM: 1>, proto=0, fileno=None) \n"
"A subclass of _socket.socket adding the makefile() method."
msgstr ""

#: mu/modes/api/python3.py:1179
msgid ""
"socket.socketpair(family=None, type=<SocketKind.SOCK_STREAM: 1>, proto=0) \n"
"socketpair([family[, type[, proto]]]) -> (socket object, socket object)\n"
"Create a pair of socket objects from the sockets returned by the platform\n"
"socketpair() function.\n"
"The arguments are the same as for socket() except the default family is "
"AF_UNIX\n"
"if defined on the platform; otherwise, the default is AF_INET."
msgstr ""

#: mu/modes/api/python3.py:1182
msgid ""
"socket.sys() \n"
"This module provides access to some objects used or maintained by the\n"
"interpreter and to functions that interact strongly with the interpreter.\n"
"\n"
"Dynamic objects:\n"
"\n"
"argv -- command line arguments; argv[0] is the script pathname if known\n"
"path -- module search path; path[0] is the script directory, else ''\n"
"modules -- dictionary of loaded modules\n"
"\n"
"displayhook -- called to show results in an interactive session\n"
"excepthook -- called to handle any uncaught exception other than SystemExit\n"
"  To customize printing in an interactive session or to install a custom\n"
"  top-level exception handler, assign other functions to replace these.\n"
"\n"
"stdin -- standard input file object; used by input()\n"
"stdout -- standard output file object; used by print()\n"
"stderr -- standard error object; used for error messages\n"
"  By assigning other file objects (or objects that behave like files)\n"
"  to these, it is possible to redirect all of the interpreter's I/O.\n"
"\n"
"last_type -- type of last uncaught exception\n"
"last_value -- value of last uncaught exception\n"
"last_traceback -- traceback of last uncaught exception\n"
"  These three are only available in an interactive session after a\n"
"  traceback has been printed.\n"
"\n"
"Static objects:\n"
"\n"
"builtin_module_names -- tuple of module names built into this interpreter\n"
"copyright -- copyright notice pertaining to this interpreter\n"
"exec_prefix -- prefix used to find the machine-specific Python library\n"
"executable -- absolute path of the executable binary of the Python "
"interpreter\n"
"float_info -- a struct sequence with information about the float "
"implementation.\n"
"float_repr_style -- string indicating the style of repr() output for floats\n"
"hash_info -- a struct sequence with information about the hash algorithm.\n"
"hexversion -- version information encoded as a single integer\n"
"implementation -- Python implementation information.\n"
"int_info -- a struct sequence with information about the int "
"implementation.\n"
"maxsize -- the largest supported length of containers.\n"
"maxunicode -- the value of the largest Unicode code point\n"
"platform -- platform identifier\n"
"prefix -- prefix used to find the Python library\n"
"thread_info -- a struct sequence with information about the thread "
"implementation.\n"
"version -- the version of this interpreter as a string\n"
"version_info -- version information as a named tuple\n"
"__stdin__ -- the original stdin; don't touch!\n"
"__stdout__ -- the original stdout; don't touch!\n"
"__stderr__ -- the original stderr; don't touch!\n"
"__displayhook__ -- the original displayhook; don't touch!\n"
"__excepthook__ -- the original excepthook; don't touch!\n"
"\n"
"Functions:\n"
"\n"
"displayhook() -- print an object to the screen, and save it in builtins._\n"
"excepthook() -- print an exception and its traceback to sys.stderr\n"
"exc_info() -- return thread-safe information about the current exception\n"
"exit() -- exit the interpreter by raising SystemExit\n"
"getdlopenflags() -- returns flags to be used for dlopen() calls\n"
"getprofile() -- get the global profiling function\n"
"getrefcount() -- return the reference count for an object (plus one :-)\n"
"getrecursionlimit() -- return the max recursion depth for the interpreter\n"
"getsizeof() -- return the size of an object in bytes\n"
"gettrace() -- get the global debug tracing function\n"
"setcheckinterval() -- control how often the interpreter checks for events\n"
"setdlopenflags() -- set the flags to be used for dlopen() calls\n"
"setprofile() -- set the global profiling function\n"
"setrecursionlimit() -- set the max recursion depth for the interpreter\n"
"settrace() -- set the global debug tracing function"
msgstr ""

#: mu/modes/api/python3.py:1184
msgid ""
"socket.timeout() \n"
"Base class for I/O related errors."
msgstr ""

#: mu/modes/api/python3.py:1186
msgid ""
"sys.call_tracing() \n"
"call_tracing(func, args) -> object\n"
"\n"
"Call func(*args), while tracing is enabled.  The tracing state is\n"
"saved, and restored afterwards.  This is intended to be called from\n"
"a debugger from a checkpoint, to recursively debug some other code."
msgstr ""

#: mu/modes/api/python3.py:1189
msgid ""
"sys.callstats() \n"
"callstats() -> tuple of integers\n"
"\n"
"Return a tuple of function call statistics, if CALL_PROFILE was defined\n"
"when Python was built.  Otherwise, return None.\n"
"\n"
"When enabled, this function returns detailed, implementation-specific\n"
"details about the number of function calls executed. The return value is\n"
"a 11-tuple where the entries in the tuple are counts of:\n"
"0. all function calls\n"
"1. calls to PyFunction_Type objects\n"
"2. PyFunction calls that do not create an argument tuple\n"
"3. PyFunction calls that do not create an argument tuple\n"
"   and bypass PyEval_EvalCodeEx()\n"
"4. PyMethod calls\n"
"5. PyMethod calls on bound methods\n"
"6. PyType calls\n"
"7. PyCFunction calls\n"
"8. generator calls\n"
"9. All other calls\n"
"10. Number of stack pops performed by call_function()"
msgstr ""

#: mu/modes/api/python3.py:1192
msgid ""
"sys.displayhook() \n"
"displayhook(object) -> None\n"
"\n"
"Print an object to sys.stdout and also save it in builtins._"
msgstr ""

#: mu/modes/api/python3.py:1195
msgid ""
"sys.exc_info() \n"
"exc_info() -> (type, value, traceback)\n"
"\n"
"Return information about the most recent exception caught by an except\n"
"clause in the current stack frame or in an older stack frame."
msgstr ""

#: mu/modes/api/python3.py:1198
msgid ""
"sys.excepthook() \n"
"excepthook(exctype, value, traceback) -> None\n"
"\n"
"Handle an exception by displaying it with a traceback on sys.stderr."
msgstr ""

#: mu/modes/api/python3.py:1201
msgid ""
"sys.exit() \n"
"exit([status])\n"
"\n"
"Exit the interpreter by raising SystemExit(status).\n"
"If the status is omitted or None, it defaults to zero (i.e., success).\n"
"If the status is an integer, it will be used as the system exit status.\n"
"If it is another kind of object, it will be printed and the system\n"
"exit status will be one (i.e., failure)."
msgstr ""

#: mu/modes/api/python3.py:1204
msgid ""
"sys.get_asyncgen_hooks() \n"
"get_asyncgen_hooks()\n"
"\n"
"Return a namedtuple of installed asynchronous generators hooks (firstiter, "
"finalizer)."
msgstr ""

#: mu/modes/api/python3.py:1207
msgid ""
"sys.get_coroutine_wrapper() \n"
"get_coroutine_wrapper()\n"
"\n"
"Return the wrapper for coroutine objects set by sys.set_coroutine_wrapper."
msgstr ""

#: mu/modes/api/python3.py:1210
msgid ""
"sys.getallocatedblocks() \n"
"getallocatedblocks() -> integer\n"
"\n"
"Return the number of memory blocks currently allocated, regardless of their\n"
"size."
msgstr ""

#: mu/modes/api/python3.py:1213
msgid ""
"sys.getcheckinterval() \n"
"getcheckinterval() -> current check interval; see setcheckinterval()."
msgstr ""

#: mu/modes/api/python3.py:1216
msgid ""
"sys.getdefaultencoding() \n"
"getdefaultencoding() -> string\n"
"\n"
"Return the current default string encoding used by the Unicode \n"
"implementation."
msgstr ""

#: mu/modes/api/python3.py:1219
msgid ""
"sys.getdlopenflags() \n"
"getdlopenflags() -> int\n"
"\n"
"Return the current value of the flags that are used for dlopen calls.\n"
"The flag constants are defined in the os module."
msgstr ""

#: mu/modes/api/python3.py:1222
msgid ""
"sys.getfilesystemencodeerrors() \n"
"getfilesystemencodeerrors() -> string\n"
"\n"
"Return the error mode used to convert Unicode filenames in\n"
"operating system filenames."
msgstr ""

#: mu/modes/api/python3.py:1225
msgid ""
"sys.getfilesystemencoding() \n"
"getfilesystemencoding() -> string\n"
"\n"
"Return the encoding used to convert Unicode filenames in\n"
"operating system filenames."
msgstr ""

#: mu/modes/api/python3.py:1228
msgid ""
"sys.getprofile() \n"
"getprofile()\n"
"\n"
"Return the profiling function set with sys.setprofile.\n"
"See the profiler chapter in the library manual."
msgstr ""

#: mu/modes/api/python3.py:1231
msgid ""
"sys.getrecursionlimit() \n"
"getrecursionlimit()\n"
"\n"
"Return the current value of the recursion limit, the maximum depth\n"
"of the Python interpreter stack.  This limit prevents infinite\n"
"recursion from causing an overflow of the C stack and crashing Python."
msgstr ""

#: mu/modes/api/python3.py:1234
msgid ""
"sys.getrefcount() \n"
"getrefcount(object) -> integer\n"
"\n"
"Return the reference count of object.  The count returned is generally\n"
"one higher than you might expect, because it includes the (temporary)\n"
"reference as an argument to getrefcount()."
msgstr ""

#: mu/modes/api/python3.py:1237
msgid ""
"sys.getsizeof() \n"
"getsizeof(object, default) -> int\n"
"\n"
"Return the size of object in bytes."
msgstr ""

#: mu/modes/api/python3.py:1240
msgid ""
"sys.getswitchinterval() \n"
"getswitchinterval() -> current thread switch interval; see "
"setswitchinterval()."
msgstr ""

#: mu/modes/api/python3.py:1243
msgid ""
"sys.gettrace() \n"
"gettrace()\n"
"\n"
"Return the global debug tracing function set with sys.settrace.\n"
"See the debugger chapter in the library manual."
msgstr ""

#: mu/modes/api/python3.py:1246
msgid ""
"sys.intern() \n"
"intern(string) -> string\n"
"\n"
"``Intern'' the given string.  This enters the string in the (global)\n"
"table of interned strings whose purpose is to speed up dictionary lookups.\n"
"Return the string itself or the previously interned string object with the\n"
"same value."
msgstr ""

#: mu/modes/api/python3.py:1249
msgid ""
"sys.is_finalizing() \n"
"is_finalizing()\n"
"Return True if Python is exiting."
msgstr ""

#: mu/modes/api/python3.py:1252
msgid ""
"sys.set_asyncgen_hooks() \n"
"set_asyncgen_hooks(*, firstiter=None, finalizer=None)\n"
"\n"
"Set a finalizer for async generators objects."
msgstr ""

#: mu/modes/api/python3.py:1255
msgid ""
"sys.set_coroutine_wrapper() \n"
"set_coroutine_wrapper(wrapper)\n"
"\n"
"Set a wrapper for coroutine objects."
msgstr ""

#: mu/modes/api/python3.py:1258
msgid ""
"sys.setcheckinterval() \n"
"setcheckinterval(n)\n"
"\n"
"Tell the Python interpreter to check for asynchronous events every\n"
"n instructions.  This also affects how often thread switches occur."
msgstr ""

#: mu/modes/api/python3.py:1261
msgid ""
"sys.setdlopenflags() \n"
"setdlopenflags(n) -> None\n"
"\n"
"Set the flags used by the interpreter for dlopen calls, such as when the\n"
"interpreter loads extension modules.  Among other things, this will enable\n"
"a lazy resolving of symbols when importing a module, if called as\n"
"sys.setdlopenflags(0).  To share symbols across extension modules, call as\n"
"sys.setdlopenflags(os.RTLD_GLOBAL).  Symbolic names for the flag modules\n"
"can be found in the os module (RTLD_xxx constants, e.g. os.RTLD_LAZY)."
msgstr ""

#: mu/modes/api/python3.py:1264
msgid ""
"sys.setprofile() \n"
"setprofile(function)\n"
"\n"
"Set the profiling function.  It will be called on each function call\n"
"and return.  See the profiler chapter in the library manual."
msgstr ""

#: mu/modes/api/python3.py:1267
msgid ""
"sys.setrecursionlimit() \n"
"setrecursionlimit(n)\n"
"\n"
"Set the maximum depth of the Python interpreter stack to n.  This\n"
"limit prevents infinite recursion from causing an overflow of the C\n"
"stack and crashing Python.  The highest possible limit is platform-\n"
"dependent."
msgstr ""

#: mu/modes/api/python3.py:1270
msgid ""
"sys.setswitchinterval() \n"
"setswitchinterval(n)\n"
"\n"
"Set the ideal thread switching delay inside the Python interpreter\n"
"The actual frequency of switching threads can be lower if the\n"
"interpreter executes long sequences of uninterruptible code\n"
"(this is implementation-specific and workload-dependent).\n"
"\n"
"The parameter must represent the desired switching delay in seconds\n"
"A typical value is 0.005 (5 milliseconds)."
msgstr ""

#: mu/modes/api/python3.py:1273
msgid ""
"sys.settrace() \n"
"settrace(function)\n"
"\n"
"Set the global debug tracing function.  It will be called on each\n"
"function call.  See the debugger chapter in the library manual."
msgstr ""

#: mu/modes/api/python3.py:1276
msgid ""
"time.asctime() \n"
"asctime([tuple]) -> string\n"
"\n"
"Convert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.\n"
"When the time tuple is not present, current time as returned by localtime()\n"
"is used."
msgstr ""

#: mu/modes/api/python3.py:1279
msgid ""
"time.clock() \n"
"clock() -> floating point number\n"
"\n"
"Return the CPU time or real time since the start of the process or since\n"
"the first call to clock().  This has as much precision as the system\n"
"records."
msgstr ""

#: mu/modes/api/python3.py:1282
msgid ""
"time.clock_getres() \n"
"clock_getres(clk_id) -> floating point number\n"
"\n"
"Return the resolution (precision) of the specified clock clk_id."
msgstr ""

#: mu/modes/api/python3.py:1285
msgid ""
"time.clock_gettime() \n"
"clock_gettime(clk_id) -> floating point number\n"
"\n"
"Return the time of the specified clock clk_id."
msgstr ""

#: mu/modes/api/python3.py:1288
msgid ""
"time.clock_settime() \n"
"clock_settime(clk_id, time)\n"
"\n"
"Set the time of the specified clock clk_id."
msgstr ""

#: mu/modes/api/python3.py:1291
msgid ""
"time.ctime() \n"
"ctime(seconds) -> string\n"
"\n"
"Convert a time in seconds since the Epoch to a string in local time.\n"
"This is equivalent to asctime(localtime(seconds)). When the time tuple is\n"
"not present, current time as returned by localtime() is used."
msgstr ""

#: mu/modes/api/python3.py:1294
msgid ""
"time.get_clock_info() \n"
"get_clock_info(name: str) -> dict\n"
"\n"
"Get information of the specified clock."
msgstr ""

#: mu/modes/api/python3.py:1297
msgid ""
"time.gmtime() \n"
"gmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min,\n"
"                       tm_sec, tm_wday, tm_yday, tm_isdst)\n"
"\n"
"Convert seconds since the Epoch to a time tuple expressing UTC (a.k.a.\n"
"GMT).  When 'seconds' is not passed in, convert the current time instead.\n"
"\n"
"If the platform supports the tm_gmtoff and tm_zone, they are available as\n"
"attributes only."
msgstr ""

#: mu/modes/api/python3.py:1300
msgid ""
"time.localtime() \n"
"localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,\n"
"                          tm_sec,tm_wday,tm_yday,tm_isdst)\n"
"\n"
"Convert seconds since the Epoch to a time tuple expressing local time.\n"
"When 'seconds' is not passed in, convert the current time instead."
msgstr ""

#: mu/modes/api/python3.py:1303
msgid ""
"time.mktime() \n"
"mktime(tuple) -> floating point number\n"
"\n"
"Convert a time tuple in local time to seconds since the Epoch.\n"
"Note that mktime(gmtime(0)) will not generally return zero for most\n"
"time zones; instead the returned value will either be equal to that\n"
"of the timezone or altzone attributes on the time module."
msgstr ""

#: mu/modes/api/python3.py:1306
msgid ""
"time.monotonic() \n"
"monotonic() -> float\n"
"\n"
"Monotonic clock, cannot go backward."
msgstr ""

#: mu/modes/api/python3.py:1309
msgid ""
"time.perf_counter() \n"
"perf_counter() -> float\n"
"\n"
"Performance counter for benchmarking."
msgstr ""

#: mu/modes/api/python3.py:1312
msgid ""
"time.process_time() \n"
"process_time() -> float\n"
"\n"
"Process time for profiling: sum of the kernel and user-space CPU time."
msgstr ""

#: mu/modes/api/python3.py:1315
msgid ""
"time.sleep() \n"
"sleep(seconds)\n"
"\n"
"Delay execution for a given number of seconds.  The argument may be\n"
"a floating point number for subsecond precision."
msgstr ""

#: mu/modes/api/python3.py:1318
msgid ""
"time.strftime() \n"
"strftime(format[, tuple]) -> string\n"
"\n"
"Convert a time tuple to a string according to a format specification.\n"
"See the library reference manual for formatting codes. When the time tuple\n"
"is not present, current time as returned by localtime() is used.\n"
"\n"
"Commonly used format codes:\n"
"\n"
"%Y  Year with century as a decimal number.\n"
"%m  Month as a decimal number [01,12].\n"
"%d  Day of the month as a decimal number [01,31].\n"
"%H  Hour (24-hour clock) as a decimal number [00,23].\n"
"%M  Minute as a decimal number [00,59].\n"
"%S  Second as a decimal number [00,61].\n"
"%z  Time zone offset from UTC.\n"
"%a  Locale's abbreviated weekday name.\n"
"%A  Locale's full weekday name.\n"
"%b  Locale's abbreviated month name.\n"
"%B  Locale's full month name.\n"
"%c  Locale's appropriate date and time representation.\n"
"%I  Hour (12-hour clock) as a decimal number [01,12].\n"
"%p  Locale's equivalent of either AM or PM.\n"
"\n"
"Other codes may be available on your platform.  See documentation for\n"
"the C library strftime function."
msgstr ""

#: mu/modes/api/python3.py:1321
msgid ""
"time.strptime() \n"
"strptime(string, format) -> struct_time\n"
"\n"
"Parse a string to a time tuple according to a format specification.\n"
"See the library reference manual for formatting codes (same as\n"
"strftime()).\n"
"\n"
"Commonly used format codes:\n"
"\n"
"%Y  Year with century as a decimal number.\n"
"%m  Month as a decimal number [01,12].\n"
"%d  Day of the month as a decimal number [01,31].\n"
"%H  Hour (24-hour clock) as a decimal number [00,23].\n"
"%M  Minute as a decimal number [00,59].\n"
"%S  Second as a decimal number [00,61].\n"
"%z  Time zone offset from UTC.\n"
"%a  Locale's abbreviated weekday name.\n"
"%A  Locale's full weekday name.\n"
"%b  Locale's abbreviated month name.\n"
"%B  Locale's full month name.\n"
"%c  Locale's appropriate date and time representation.\n"
"%I  Hour (12-hour clock) as a decimal number [01,12].\n"
"%p  Locale's equivalent of either AM or PM.\n"
"\n"
"Other codes may be available on your platform.  See documentation for\n"
"the C library strftime function."
msgstr ""

#: mu/modes/api/python3.py:1324
msgid ""
"time.struct_time() \n"
"The time value as returned by gmtime(), localtime(), and strptime(), and\n"
"accepted by asctime(), mktime() and strftime().  May be considered as a\n"
"sequence of 9 integers.\n"
"\n"
"Note that several fields' values are not the same as those defined by\n"
"the C language standard for struct tm.  For example, the value of the\n"
"field tm_year is the actual year, not year - 1900.  See individual\n"
"fields' descriptions for details."
msgstr ""

#: mu/modes/api/python3.py:1327
msgid ""
"time.time() \n"
"time() -> floating point number\n"
"\n"
"Return the current time in seconds since the Epoch.\n"
"Fractions of a second may be present if the system clock provides them."
msgstr ""

#: mu/modes/api/python3.py:1330
msgid ""
"time.tzset() \n"
"tzset()\n"
"\n"
"Initialize, or reinitialize, the local timezone to the value stored in\n"
"os.environ['TZ']. The TZ environment variable should be specified in\n"
"standard Unix timezone format as documented in the tzset man page\n"
"(eg. 'US/Eastern', 'Europe/Amsterdam'). Unknown timezones will silently\n"
"fall back to UTC. If the TZ environment variable is not set, the local\n"
"timezone is set to the systems best guess of wallclock time.\n"
"Changing the TZ environment variable without calling tzset *may* change\n"
"the local timezone used by methods such as localtime, but this behaviour\n"
"should not be relied on."
msgstr ""

#: mu/modes/api/python3.py:1333
msgid ""
"turtle.Canvas(master=None, cnf={}, **kw) \n"
"Canvas widget to display graphical elements like lines or text."
msgstr ""

#: mu/modes/api/python3.py:1336 mu/modes/api/python3.py:1339
msgid ""
"turtle.RawTurtle(canvas=None, shape='classic', undobuffersize=1000, "
"visible=True) \n"
"Animation part of the RawTurtle.\n"
"Puts RawTurtle upon a TurtleScreen and provides tools for\n"
"its animation."
msgstr ""

#: mu/modes/api/python3.py:1342
msgid ""
"turtle.Screen() \n"
"Return the singleton screen object.\n"
"If none exists at the moment, create a new one and return it,\n"
"else return the existing one."
msgstr ""

#: mu/modes/api/python3.py:1345
msgid ""
"turtle.ScrolledCanvas(master, width=500, height=350, canvwidth=600, "
"canvheight=500) \n"
"Modeled after the scrolled canvas class from Grayons's Tkinter book.\n"
"\n"
"Used as the default canvas, which pops up automatically when\n"
"using turtle graphics functions or the Turtle class."
msgstr ""

#: mu/modes/api/python3.py:1348
msgid ""
"turtle.Shape(type_, data=None) \n"
"Data structure modeling shapes.\n"
"\n"
"attribute _type is one of \"polygon\", \"image\", \"compound\"\n"
"attribute _data is - depending on _type a poygon-tuple,\n"
"an image or a list constructed using the addcomponent method."
msgstr ""

#: mu/modes/api/python3.py:1351
msgid ""
"turtle.TNavigator(mode='standard') \n"
"Navigation part of the RawTurtle.\n"
"Implements methods for turtle movement."
msgstr ""

#: mu/modes/api/python3.py:1354
msgid ""
"turtle.TPen(resizemode='noresize') \n"
"Drawing part of the RawTurtle.\n"
"Implements drawing properties."
msgstr ""

#: mu/modes/api/python3.py:1357
msgid ""
"turtle.Tbuffer(bufsize=10) \n"
"Ring buffer used as undobuffer for RawTurtle objects."
msgstr ""

#: mu/modes/api/python3.py:1360
msgid ""
"turtle.Terminator() \n"
"Will be raised in TurtleScreen.update, if _RUNNING becomes False.\n"
"\n"
"This stops execution of a turtle graphics script.\n"
"Main purpose: use in the Demo-Viewer turtle.Demo.py."
msgstr ""

#: mu/modes/api/python3.py:1363 mu/modes/api/python3.py:1366
msgid ""
"turtle.Turtle(shape='classic', undobuffersize=1000, visible=True) \n"
"RawTurtle auto-creating (scrolled) canvas.\n"
"\n"
"When a Turtle object is created or a function derived from some\n"
"Turtle method is called a TurtleScreen object is automatically created."
msgstr ""

#: mu/modes/api/python3.py:1368
msgid ""
"turtle.TurtleGraphicsError() \n"
"Some TurtleGraphics Error\n"
"    "
msgstr ""

#: mu/modes/api/python3.py:1370
msgid ""
"turtle.TurtleScreen(cv, mode='standard', colormode=1.0, delay=10) \n"
"Provides screen oriented methods like setbg etc.\n"
"\n"
"Only relies upon the methods of TurtleScreenBase and NOT\n"
"upon components of the underlying graphics toolkit -\n"
"which is Tkinter in this case."
msgstr ""

#: mu/modes/api/python3.py:1373
msgid ""
"turtle.TurtleScreenBase(cv) \n"
"Provide the basic graphics functionality.\n"
"Interface between Tkinter and turtle.py.\n"
"\n"
"To port turtle.py to some different graphics toolkit\n"
"a corresponding TurtleScreenBase class has to be implemented."
msgstr ""

#: mu/modes/api/python3.py:1376
msgid ""
"turtle.Vec2D(x, y) \n"
"A 2 dimensional vector class, used as a helper class\n"
"for implementing turtle graphics.\n"
"May be useful for turtle graphics programs also.\n"
"Derived from tuple, so a vector is a tuple!\n"
"\n"
"Provides (for a, b vectors, k number):\n"
"   a+b vector addition\n"
"   a-b vector subtraction\n"
"   a*b inner product\n"
"   k*a and a*k multiplication with scalar\n"
"   |a| absolute value of a\n"
"   a.rotate(angle) rotation"
msgstr ""

#: mu/modes/api/python3.py:1379
msgid ""
"turtle.addshape(name, shape=None) \n"
"Adds a turtle shape to TurtleScreen's shapelist.\n"
"\n"
"Arguments:\n"
"(1) name is the name of a gif-file and shape is None.\n"
"    Installs the corresponding image shape.\n"
"    !! Image-shapes DO NOT rotate when turning the turtle,\n"
"    !! so they do not display the heading of the turtle!\n"
"(2) name is an arbitrary string and shape is a tuple\n"
"    of pairs of coordinates. Installs the corresponding\n"
"    polygon shape\n"
"(3) name is an arbitrary string and shape is a\n"
"    (compound) Shape object. Installs the corresponding\n"
"    compound shape.\n"
"To use a shape, you have to issue the command shape(shapename).\n"
"\n"
"call: register_shape(\"turtle.gif\")\n"
"--or: register_shape(\"tri\", ((0,0), (10,10), (-10,10)))\n"
"\n"
"Example:\n"
">>> register_shape(\"triangle\", ((5,-3),(0,5),(-5,-3)))"
msgstr ""

#: mu/modes/api/python3.py:1382
msgid ""
"turtle.back(distance) \n"
"Move the turtle backward by distance.\n"
"\n"
"Aliases: back | backward | bk\n"
"\n"
"Argument:\n"
"distance -- a number\n"
"\n"
"Move the turtle backward by distance ,opposite to the direction the\n"
"turtle is headed. Do not change the turtle's heading.\n"
"\n"
"Example:\n"
">>> position()\n"
"(0.00, 0.00)\n"
">>> backward(30)\n"
">>> position()\n"
"(-30.00, 0.00)"
msgstr ""

#: mu/modes/api/python3.py:1385
msgid ""
"turtle.backward(distance) \n"
"Move the turtle backward by distance.\n"
"\n"
"Aliases: back | backward | bk\n"
"\n"
"Argument:\n"
"distance -- a number\n"
"\n"
"Move the turtle backward by distance ,opposite to the direction the\n"
"turtle is headed. Do not change the turtle's heading.\n"
"\n"
"Example:\n"
">>> position()\n"
"(0.00, 0.00)\n"
">>> backward(30)\n"
">>> position()\n"
"(-30.00, 0.00)"
msgstr ""

#: mu/modes/api/python3.py:1388
msgid ""
"turtle.begin_fill() \n"
"Called just before drawing a shape to be filled.\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> color(\"black\", \"red\")\n"
">>> begin_fill()\n"
">>> circle(60)\n"
">>> end_fill()"
msgstr ""

#: mu/modes/api/python3.py:1391
msgid ""
"turtle.begin_poly() \n"
"Start recording the vertices of a polygon.\n"
"\n"
"No argument.\n"
"\n"
"Start recording the vertices of a polygon. Current turtle position\n"
"is first point of polygon.\n"
"\n"
"Example:\n"
">>> begin_poly()"
msgstr ""

#: mu/modes/api/python3.py:1394
msgid ""
"turtle.bgcolor(*args) \n"
"Set or return backgroundcolor of the TurtleScreen.\n"
"\n"
"Arguments (if given): a color string or three numbers\n"
"in the range 0..colormode or a 3-tuple of such numbers.\n"
"\n"
"Example:\n"
">>> bgcolor(\"orange\")\n"
">>> bgcolor()\n"
"'orange'\n"
">>> bgcolor(0.5,0,0.5)\n"
">>> bgcolor()\n"
"'#800080'"
msgstr ""

#: mu/modes/api/python3.py:1397
msgid ""
"turtle.bgpic(picname=None) \n"
"Set background image or return name of current backgroundimage.\n"
"\n"
"Optional argument:\n"
"picname -- a string, name of a gif-file or \"nopic\".\n"
"\n"
"If picname is a filename, set the corresponding image as background.\n"
"If picname is \"nopic\", delete backgroundimage, if present.\n"
"If picname is None, return the filename of the current backgroundimage.\n"
"\n"
"Example:\n"
">>> bgpic()\n"
"'nopic'\n"
">>> bgpic(\"landscape.gif\")\n"
">>> bgpic()\n"
"'landscape.gif'"
msgstr ""

#: mu/modes/api/python3.py:1400
msgid ""
"turtle.bk(distance) \n"
"Move the turtle backward by distance.\n"
"\n"
"Aliases: back | backward | bk\n"
"\n"
"Argument:\n"
"distance -- a number\n"
"\n"
"Move the turtle backward by distance ,opposite to the direction the\n"
"turtle is headed. Do not change the turtle's heading.\n"
"\n"
"Example:\n"
">>> position()\n"
"(0.00, 0.00)\n"
">>> backward(30)\n"
">>> position()\n"
"(-30.00, 0.00)"
msgstr ""

#: mu/modes/api/python3.py:1402
msgid ""
"turtle.bye() \n"
"Shut the turtlegraphics window.\n"
"\n"
"Example:\n"
">>> bye()"
msgstr ""

#: mu/modes/api/python3.py:1404
msgid ""
"turtle.circle(radius, extent=None, steps=None) \n"
"Draw a circle with given radius.\n"
"\n"
"Arguments:\n"
"radius -- a number\n"
"extent (optional) -- a number\n"
"steps (optional) -- an integer\n"
"\n"
"Draw a circle with given radius. The center is radius units left\n"
"of the turtle; extent - an angle - determines which part of the\n"
"circle is drawn. If extent is not given, draw the entire circle.\n"
"If extent is not a full circle, one endpoint of the arc is the\n"
"current pen position. Draw the arc in counterclockwise direction\n"
"if radius is positive, otherwise in clockwise direction. Finally\n"
"the direction of the turtle is changed by the amount of extent.\n"
"\n"
"As the circle is approximated by an inscribed regular polygon,\n"
"steps determines the number of steps to use. If not given,\n"
"it will be calculated automatically. Maybe used to draw regular\n"
"polygons.\n"
"\n"
"call: circle(radius)                  # full circle\n"
"--or: circle(radius, extent)          # arc\n"
"--or: circle(radius, extent, steps)\n"
"--or: circle(radius, steps=6)         # 6-sided polygon\n"
"\n"
"Example:\n"
">>> circle(50)\n"
">>> circle(120, 180)  # semicircle"
msgstr ""

#: mu/modes/api/python3.py:1407
msgid ""
"turtle.clear() \n"
"Delete the turtle's drawings from the screen. Do not move \n"
"\n"
"No arguments.\n"
"\n"
"Delete the turtle's drawings from the screen. Do not move \n"
"State and position of the turtle as well as drawings of other\n"
"turtles are not affected.\n"
"\n"
"Examples:\n"
">>> clear()"
msgstr ""

#: mu/modes/api/python3.py:1410
msgid ""
"turtle.clearscreen() \n"
"Delete all drawings and all turtles from the TurtleScreen.\n"
"\n"
"No argument.\n"
"\n"
"Reset empty TurtleScreen to its initial state: white background,\n"
"no backgroundimage, no eventbindings and tracing on.\n"
"\n"
"Example:\n"
">>> clear()\n"
"\n"
"Note: this method is not available as function."
msgstr ""

#: mu/modes/api/python3.py:1413
msgid ""
"turtle.clearstamp(stampid) \n"
"Delete stamp with given stampid\n"
"\n"
"Argument:\n"
"stampid - an integer, must be return value of previous stamp() call.\n"
"\n"
"Example:\n"
">>> color(\"blue\")\n"
">>> astamp = stamp()\n"
">>> fd(50)\n"
">>> clearstamp(astamp)"
msgstr ""

#: mu/modes/api/python3.py:1416
msgid ""
"turtle.clearstamps(n=None) \n"
"Delete all or first/last n of turtle's stamps.\n"
"\n"
"Optional argument:\n"
"n -- an integer\n"
"\n"
"If n is None, delete all of pen's stamps,\n"
"else if n > 0 delete first n stamps\n"
"else if n < 0 delete last n stamps.\n"
"\n"
"Example:\n"
">>> for i in range(8):\n"
"...     stamp(); fd(30)\n"
"...\n"
">>> clearstamps(2)\n"
">>> clearstamps(-2)\n"
">>> clearstamps()"
msgstr ""

#: mu/modes/api/python3.py:1419
msgid ""
"turtle.clone() \n"
"Create and return a clone of the \n"
"\n"
"No argument.\n"
"\n"
"Create and return a clone of the turtle with same position, heading\n"
"and turtle properties.\n"
"\n"
"Example (for a Turtle instance named mick):\n"
"mick = Turtle()\n"
"joe = mick.clone()"
msgstr ""

#: mu/modes/api/python3.py:1422
msgid ""
"turtle.color(*args) \n"
"Return or set the pencolor and fillcolor.\n"
"\n"
"Arguments:\n"
"Several input formats are allowed.\n"
"They use 0, 1, 2, or 3 arguments as follows:\n"
"\n"
"color()\n"
"    Return the current pencolor and the current fillcolor\n"
"    as a pair of color specification strings as are returned\n"
"    by pencolor and fillcolor.\n"
"color(colorstring), color((r,g,b)), color(r,g,b)\n"
"    inputs as in pencolor, set both, fillcolor and pencolor,\n"
"    to the given value.\n"
"color(colorstring1, colorstring2),\n"
"color((r1,g1,b1), (r2,g2,b2))\n"
"    equivalent to pencolor(colorstring1) and fillcolor(colorstring2)\n"
"    and analogously, if the other input format is used.\n"
"\n"
"If turtleshape is a polygon, outline and interior of that polygon\n"
"is drawn with the newly set colors.\n"
"For mor info see: pencolor, fillcolor\n"
"\n"
"Example:\n"
">>> color('red', 'green')\n"
">>> color()\n"
"('red', 'green')\n"
">>> colormode(255)\n"
">>> color((40, 80, 120), (160, 200, 240))\n"
">>> color()\n"
"('#285078', '#a0c8f0')"
msgstr ""

#: mu/modes/api/python3.py:1425
msgid ""
"turtle.colormode(cmode=None) \n"
"Return the colormode or set it to 1.0 or 255.\n"
"\n"
"Optional argument:\n"
"cmode -- one of the values 1.0 or 255\n"
"\n"
"r, g, b values of colortriples have to be in range 0..cmode.\n"
"\n"
"Example:\n"
">>> colormode()\n"
"1.0\n"
">>> colormode(255)\n"
">>> pencolor(240,160,80)"
msgstr ""

#: mu/modes/api/python3.py:1428
msgid ""
"turtle.config_dict(filename) \n"
"Convert content of config-file into dictionary."
msgstr ""

#: mu/modes/api/python3.py:1431
msgid ""
"turtle.deepcopy(x, memo=None, _nil=[]) \n"
"Deep copy operation on arbitrary Python objects.\n"
"\n"
"See the module's __doc__ string for more info."
msgstr ""

#: mu/modes/api/python3.py:1434
msgid ""
"turtle.degrees(fullcircle=360.0) \n"
"Set angle measurement units to degrees.\n"
"\n"
"Optional argument:\n"
"fullcircle -  a number\n"
"\n"
"Set angle measurement units, i. e. set number\n"
"of 'degrees' for a full circle. Dafault value is\n"
"360 degrees.\n"
"\n"
"Example:\n"
">>> left(90)\n"
">>> heading()\n"
"90\n"
"\n"
"Change angle measurement unit to grad (also known as gon,\n"
"grade, or gradian and equals 1/100-th of the right angle.)\n"
">>> degrees(400.0)\n"
">>> heading()\n"
"100"
msgstr ""

#: mu/modes/api/python3.py:1437
msgid ""
"turtle.delay(delay=None) \n"
"Return or set the drawing delay in milliseconds.\n"
"\n"
"Optional argument:\n"
"delay -- positive integer\n"
"\n"
"Example:\n"
">>> delay(15)\n"
">>> delay()\n"
"15"
msgstr ""

#: mu/modes/api/python3.py:1440
msgid ""
"turtle.distance(x, y=None) \n"
"Return the distance from the turtle to (x,y) in turtle step units.\n"
"\n"
"Arguments:\n"
"x -- a number   or  a pair/vector of numbers   or   a turtle instance\n"
"y -- a number       None                            None\n"
"\n"
"call: distance(x, y)         # two coordinates\n"
"--or: distance((x, y))       # a pair (tuple) of coordinates\n"
"--or: distance(vec)          # e.g. as returned by pos()\n"
"--or: distance(mypen)        # where mypen is another turtle\n"
"\n"
"Example:\n"
">>> pos()\n"
"(0.00, 0.00)\n"
">>> distance(30,40)\n"
"50.0\n"
">>> pen = Turtle()\n"
">>> pen.forward(77)\n"
">>> distance(pen)\n"
"77.0"
msgstr ""

#: mu/modes/api/python3.py:1443
msgid ""
"turtle.dot(size=None, *color) \n"
"Draw a dot with diameter size, using color.\n"
"\n"
"Optional arguments:\n"
"size -- an integer >= 1 (if given)\n"
"color -- a colorstring or a numeric color tuple\n"
"\n"
"Draw a circular dot with diameter size, using color.\n"
"If size is not given, the maximum of pensize+4 and 2*pensize is used.\n"
"\n"
"Example:\n"
">>> dot()\n"
">>> fd(50); dot(20, \"blue\"); fd(50)"
msgstr ""

#: mu/modes/api/python3.py:1446
msgid ""
"turtle.down() \n"
"Pull the pen down -- drawing when moving.\n"
"\n"
"Aliases: pendown | pd | down\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> pendown()"
msgstr ""

#: mu/modes/api/python3.py:1449
msgid ""
"turtle.end_fill() \n"
"Fill the shape drawn after the call begin_fill().\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> color(\"black\", \"red\")\n"
">>> begin_fill()\n"
">>> circle(60)\n"
">>> end_fill()"
msgstr ""

#: mu/modes/api/python3.py:1452
msgid ""
"turtle.end_poly() \n"
"Stop recording the vertices of a polygon.\n"
"\n"
"No argument.\n"
"\n"
"Stop recording the vertices of a polygon. Current turtle position is\n"
"last point of polygon. This will be connected with the first point.\n"
"\n"
"Example:\n"
">>> end_poly()"
msgstr ""

#: mu/modes/api/python3.py:1455
msgid ""
"turtle.exitonclick() \n"
"Go into mainloop until the mouse is clicked.\n"
"\n"
"No arguments.\n"
"\n"
"Bind bye() method to mouseclick on TurtleScreen.\n"
"If \"using_IDLE\" - value in configuration dictionary is False\n"
"(default value), enter mainloop.\n"
"If IDLE with -n switch (no subprocess) is used, this value should be\n"
"set to True in turtle.cfg. In this case IDLE's mainloop\n"
"is active also for the client script.\n"
"\n"
"This is a method of the Screen-class and not available for\n"
"TurtleScreen instances.\n"
"\n"
"Example:\n"
">>> exitonclick()"
msgstr ""

#: mu/modes/api/python3.py:1458
msgid ""
"turtle.fd(distance) \n"
"Move the turtle forward by the specified distance.\n"
"\n"
"Aliases: forward | fd\n"
"\n"
"Argument:\n"
"distance -- a number (integer or float)\n"
"\n"
"Move the turtle forward by the specified distance, in the direction\n"
"the turtle is headed.\n"
"\n"
"Example:\n"
">>> position()\n"
"(0.00, 0.00)\n"
">>> forward(25)\n"
">>> position()\n"
"(25.00,0.00)\n"
">>> forward(-75)\n"
">>> position()\n"
"(-50.00,0.00)"
msgstr ""

#: mu/modes/api/python3.py:1461
msgid ""
"turtle.fillcolor(*args) \n"
"Return or set the fillcolor.\n"
"\n"
"Arguments:\n"
"Four input formats are allowed:\n"
"  - fillcolor()\n"
"    Return the current fillcolor as color specification string,\n"
"    possibly in hex-number format (see example).\n"
"    May be used as input to another color/pencolor/fillcolor call.\n"
"  - fillcolor(colorstring)\n"
"    s is a Tk color specification string, such as \"red\" or \"yellow\"\n"
"  - fillcolor((r, g, b))\n"
"    *a tuple* of r, g, and b, which represent, an RGB color,\n"
"    and each of r, g, and b are in the range 0..colormode,\n"
"    where colormode is either 1.0 or 255\n"
"  - fillcolor(r, g, b)\n"
"    r, g, and b represent an RGB color, and each of r, g, and b\n"
"    are in the range 0..colormode\n"
"\n"
"If turtleshape is a polygon, the interior of that polygon is drawn\n"
"with the newly set fillcolor.\n"
"\n"
"Example:\n"
">>> fillcolor('violet')\n"
">>> col = pencolor()\n"
">>> fillcolor(col)\n"
">>> fillcolor(0, .5, 0)"
msgstr ""

#: mu/modes/api/python3.py:1464
msgid ""
"turtle.filling() \n"
"Return fillstate (True if filling, False else).\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> begin_fill()\n"
">>> if filling():\n"
"...     pensize(5)\n"
"... else:\n"
"...     pensize(3)"
msgstr ""

#: mu/modes/api/python3.py:1467
msgid ""
"turtle.forward(distance) \n"
"Move the turtle forward by the specified distance.\n"
"\n"
"Aliases: forward | fd\n"
"\n"
"Argument:\n"
"distance -- a number (integer or float)\n"
"\n"
"Move the turtle forward by the specified distance, in the direction\n"
"the turtle is headed.\n"
"\n"
"Example:\n"
">>> position()\n"
"(0.00, 0.00)\n"
">>> forward(25)\n"
">>> position()\n"
"(25.00,0.00)\n"
">>> forward(-75)\n"
">>> position()\n"
"(-50.00,0.00)"
msgstr ""

#: mu/modes/api/python3.py:1470
msgid ""
"turtle.get_poly() \n"
"Return the lastly recorded polygon.\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> p = get_poly()\n"
">>> register_shape(\"myFavouriteShape\", p)"
msgstr ""

#: mu/modes/api/python3.py:1473
msgid ""
"turtle.get_shapepoly() \n"
"Return the current shape polygon as tuple of coordinate pairs.\n"
"\n"
"No argument.\n"
"\n"
"Examples:\n"
">>> shape(\"square\")\n"
">>> shapetransform(4, -1, 0, 2)\n"
">>> get_shapepoly()\n"
"((50, -20), (30, 20), (-50, 20), (-30, -20))"
msgstr ""

#: mu/modes/api/python3.py:1476
msgid ""
"turtle.getcanvas() \n"
"Return the Canvas of this TurtleScreen.\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> cv = getcanvas()\n"
">>> cv\n"
"<turtle.ScrolledCanvas instance at 0x010742D8>"
msgstr ""

#: mu/modes/api/python3.py:1479
msgid ""
"turtle.getmethparlist(ob) \n"
"Get strings describing the arguments for the given object\n"
"\n"
"Returns a pair of strings representing function parameter lists\n"
"including parenthesis.  The first string is suitable for use in\n"
"function definition and the second is suitable for use in function\n"
"call.  The \"self\" parameter is not included."
msgstr ""

#: mu/modes/api/python3.py:1482
msgid ""
"turtle.getpen() \n"
"Return the Turtleobject itself.\n"
"\n"
"No argument.\n"
"\n"
"Only reasonable use: as a function to return the 'anonymous turtle':\n"
"\n"
"Example:\n"
">>> pet = getturtle()\n"
">>> pet.fd(50)\n"
">>> pet\n"
"<Turtle object at 0x0187D810>\n"
">>> turtles()\n"
"[<Turtle object at 0x0187D810>]"
msgstr ""

#: mu/modes/api/python3.py:1485
msgid ""
"turtle.getscreen() \n"
"Return the TurtleScreen object, the turtle is drawing  on.\n"
"\n"
"No argument.\n"
"\n"
"Return the TurtleScreen object, the turtle is drawing  on.\n"
"So TurtleScreen-methods can be called for that object.\n"
"\n"
"Example:\n"
">>> ts = getscreen()\n"
">>> ts\n"
"<TurtleScreen object at 0x0106B770>\n"
">>> ts.bgcolor(\"pink\")"
msgstr ""

#: mu/modes/api/python3.py:1488
msgid ""
"turtle.getshapes() \n"
"Return a list of names of all currently available turtle shapes.\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> getshapes()\n"
"['arrow', 'blank', 'circle', ... , 'turtle']"
msgstr ""

#: mu/modes/api/python3.py:1491
msgid ""
"turtle.getturtle() \n"
"Return the Turtleobject itself.\n"
"\n"
"No argument.\n"
"\n"
"Only reasonable use: as a function to return the 'anonymous turtle':\n"
"\n"
"Example:\n"
">>> pet = getturtle()\n"
">>> pet.fd(50)\n"
">>> pet\n"
"<Turtle object at 0x0187D810>\n"
">>> turtles()\n"
"[<Turtle object at 0x0187D810>]"
msgstr ""

#: mu/modes/api/python3.py:1494
msgid ""
"turtle.goto(x, y=None) \n"
"Move turtle to an absolute position.\n"
"\n"
"Aliases: setpos | setposition | goto:\n"
"\n"
"Arguments:\n"
"x -- a number      or     a pair/vector of numbers\n"
"y -- a number             None\n"
"\n"
"call: goto(x, y)         # two coordinates\n"
"--or: goto((x, y))       # a pair (tuple) of coordinates\n"
"--or: goto(vec)          # e.g. as returned by pos()\n"
"\n"
"Move turtle to an absolute position. If the pen is down,\n"
"a line will be drawn. The turtle's orientation does not change.\n"
"\n"
"Example:\n"
">>> tp = pos()\n"
">>> tp\n"
"(0.00, 0.00)\n"
">>> setpos(60,30)\n"
">>> pos()\n"
"(60.00,30.00)\n"
">>> setpos((20,80))\n"
">>> pos()\n"
"(20.00,80.00)\n"
">>> setpos(tp)\n"
">>> pos()\n"
"(0.00,0.00)"
msgstr ""

#: mu/modes/api/python3.py:1497
msgid ""
"turtle.heading() \n"
"Return the turtle's current heading.\n"
"\n"
"No arguments.\n"
"\n"
"Example:\n"
">>> left(67)\n"
">>> heading()\n"
"67.0"
msgstr ""

#: mu/modes/api/python3.py:1500
msgid ""
"turtle.hideturtle() \n"
"Makes the turtle invisible.\n"
"\n"
"Aliases: hideturtle | ht\n"
"\n"
"No argument.\n"
"\n"
"It's a good idea to do this while you're in the\n"
"middle of a complicated drawing, because hiding\n"
"the turtle speeds up the drawing observably.\n"
"\n"
"Example:\n"
">>> hideturtle()"
msgstr ""

#: mu/modes/api/python3.py:1503
msgid ""
"turtle.home() \n"
"Move turtle to the origin - coordinates (0,0).\n"
"\n"
"No arguments.\n"
"\n"
"Move turtle to the origin - coordinates (0,0) and set its\n"
"heading to its start-orientation (which depends on mode).\n"
"\n"
"Example:\n"
">>> home()"
msgstr ""

#: mu/modes/api/python3.py:1506
msgid ""
"turtle.ht() \n"
"Makes the turtle invisible.\n"
"\n"
"Aliases: hideturtle | ht\n"
"\n"
"No argument.\n"
"\n"
"It's a good idea to do this while you're in the\n"
"middle of a complicated drawing, because hiding\n"
"the turtle speeds up the drawing observably.\n"
"\n"
"Example:\n"
">>> hideturtle()"
msgstr ""

#: mu/modes/api/python3.py:1509
msgid ""
"turtle.inspect() \n"
"Get useful information from live Python objects.\n"
"\n"
"This module encapsulates the interface provided by the internal special\n"
"attributes (co_*, im_*, tb_*, etc.) in a friendlier fashion.\n"
"It also provides some help for examining source code and class layout.\n"
"\n"
"Here are some of the useful functions provided by this module:\n"
"\n"
"    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),\n"
"        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),\n"
"        isroutine() - check object types\n"
"    getmembers() - get members of an object that satisfy a given condition\n"
"\n"
"    getfile(), getsourcefile(), getsource() - find an object's source code\n"
"    getdoc(), getcomments() - get documentation on an object\n"
"    getmodule() - determine the module that an object came from\n"
"    getclasstree() - arrange classes so as to represent their hierarchy\n"
"\n"
"    getargvalues(), getcallargs() - get info about function arguments\n"
"    getfullargspec() - same, with support for Python 3 features\n"
"    formatargspec(), formatargvalues() - format an argument spec\n"
"    getouterframes(), getinnerframes() - get info about frames\n"
"    currentframe() - get the current stack frame\n"
"    stack(), trace() - get info about frames on the stack or in a traceback\n"
"\n"
"    signature() - get a Signature object for the callable"
msgstr ""

#: mu/modes/api/python3.py:1512
msgid ""
"turtle.isdown() \n"
"Return True if pen is down, False if it's up.\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> penup()\n"
">>> isdown()\n"
"False\n"
">>> pendown()\n"
">>> isdown()\n"
"True"
msgstr ""

#: mu/modes/api/python3.py:1514
msgid ""
"turtle.isfile(path) \n"
"Test whether a path is a regular file"
msgstr ""

#: mu/modes/api/python3.py:1516
msgid ""
"turtle.isvisible() \n"
"Return True if the Turtle is shown, False if it's hidden.\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> hideturtle()\n"
">>> print isvisible():\n"
"False"
msgstr ""

#: mu/modes/api/python3.py:1519
msgid ""
"turtle.join(a, *p) \n"
"Join two or more pathname components, inserting '/' as needed.\n"
"If any component is an absolute path, all previous path components\n"
"will be discarded.  An empty last part will result in a path that\n"
"ends with a separator."
msgstr ""

#: mu/modes/api/python3.py:1522
msgid ""
"turtle.left(angle) \n"
"Turn turtle left by angle units.\n"
"\n"
"Aliases: left | lt\n"
"\n"
"Argument:\n"
"angle -- a number (integer or float)\n"
"\n"
"Turn turtle left by angle units. (Units are by default degrees,\n"
"but can be set via the degrees() and radians() functions.)\n"
"Angle orientation depends on mode. (See this.)\n"
"\n"
"Example:\n"
">>> heading()\n"
"22.0\n"
">>> left(45)\n"
">>> heading()\n"
"67.0"
msgstr ""

#: mu/modes/api/python3.py:1525
msgid ""
"turtle.listen(xdummy=None, ydummy=None) \n"
"Set focus on TurtleScreen (in order to collect key-events)\n"
"\n"
"No arguments.\n"
"Dummy arguments are provided in order\n"
"to be able to pass listen to the onclick method.\n"
"\n"
"Example:\n"
">>> listen()"
msgstr ""

#: mu/modes/api/python3.py:1528
msgid ""
"turtle.lt(angle) \n"
"Turn turtle left by angle units.\n"
"\n"
"Aliases: left | lt\n"
"\n"
"Argument:\n"
"angle -- a number (integer or float)\n"
"\n"
"Turn turtle left by angle units. (Units are by default degrees,\n"
"but can be set via the degrees() and radians() functions.)\n"
"Angle orientation depends on mode. (See this.)\n"
"\n"
"Example:\n"
">>> heading()\n"
"22.0\n"
">>> left(45)\n"
">>> heading()\n"
"67.0"
msgstr ""

#: mu/modes/api/python3.py:1531 mu/modes/api/python3.py:1534
msgid ""
"turtle.mainloop() \n"
"Starts event loop - calling Tkinter's mainloop function.\n"
"\n"
"No argument.\n"
"\n"
"Must be last statement in a turtle graphics program.\n"
"Must NOT be used if a script is run from within IDLE in -n mode\n"
"(No subprocess) - for interactive use of turtle graphics.\n"
"\n"
"Example:\n"
">>> mainloop()"
msgstr ""

#: mu/modes/api/python3.py:1537
msgid ""
"turtle.math() \n"
"This module is always available.  It provides access to the\n"
"mathematical functions defined by the C standard."
msgstr ""

#: mu/modes/api/python3.py:1540
msgid ""
"turtle.mode(mode=None) \n"
"Set turtle-mode ('standard', 'logo' or 'world') and perform reset.\n"
"\n"
"Optional argument:\n"
"mode -- one of the strings 'standard', 'logo' or 'world'\n"
"\n"
"Mode 'standard' is compatible with turtle.py.\n"
"Mode 'logo' is compatible with most Logo-Turtle-Graphics.\n"
"Mode 'world' uses userdefined 'worldcoordinates'. *Attention*: in\n"
"this mode angles appear distorted if x/y unit-ratio doesn't equal 1.\n"
"If mode is not given, return the current mode.\n"
"\n"
"     Mode      Initial turtle heading     positive angles\n"
" ------------|-------------------------|-------------------\n"
"  'standard'    to the right (east)       counterclockwise\n"
"    'logo'        upward    (north)         clockwise\n"
"\n"
"Examples:\n"
">>> mode('logo')   # resets turtle heading to north\n"
">>> mode()\n"
"'logo'"
msgstr ""

#: mu/modes/api/python3.py:1543
msgid ""
"turtle.numinput(title, prompt, default=None, minval=None, maxval=None) \n"
"Pop up a dialog window for input of a number.\n"
"\n"
"Arguments: title is the title of the dialog window,\n"
"prompt is a text mostly describing what numerical information to input.\n"
"default: default value\n"
"minval: minimum value for imput\n"
"maxval: maximum value for input\n"
"\n"
"The number input must be in the range minval .. maxval if these are\n"
"given. If not, a hint is issued and the dialog remains open for\n"
"correction. Return the number input.\n"
"If the dialog is canceled,  return None.\n"
"\n"
"Example:\n"
">>> numinput(\"Poker\", \"Your stakes:\", 1000, minval=10, maxval=10000)"
msgstr ""

#: mu/modes/api/python3.py:1546
msgid ""
"turtle.onclick(fun, btn=1, add=None) \n"
"Bind fun to mouse-click event on this turtle on canvas.\n"
"\n"
"Arguments:\n"
"fun --  a function with two arguments, to which will be assigned\n"
"        the coordinates of the clicked point on the canvas.\n"
"num --  number of the mouse-button defaults to 1 (left mouse button).\n"
"add --  True or False. If True, new binding will be added, otherwise\n"
"        it will replace a former binding.\n"
"\n"
"Example for the anonymous turtle, i. e. the procedural way:\n"
"\n"
">>> def turn(x, y):\n"
"...     left(360)\n"
"...\n"
">>> onclick(turn)  # Now clicking into the turtle will turn it.\n"
">>> onclick(None)  # event-binding will be removed"
msgstr ""

#: mu/modes/api/python3.py:1549
msgid ""
"turtle.ondrag(fun, btn=1, add=None) \n"
"Bind fun to mouse-move event on this turtle on canvas.\n"
"\n"
"Arguments:\n"
"fun -- a function with two arguments, to which will be assigned\n"
"       the coordinates of the clicked point on the canvas.\n"
"num -- number of the mouse-button defaults to 1 (left mouse button).\n"
"\n"
"Every sequence of mouse-move-events on a turtle is preceded by a\n"
"mouse-click event on that \n"
"\n"
"Example:\n"
">>> ondrag(goto)\n"
"\n"
"Subsequently clicking and dragging a Turtle will move it\n"
"across the screen thereby producing handdrawings (if pen is\n"
"down)."
msgstr ""

#: mu/modes/api/python3.py:1552
msgid ""
"turtle.onkey(fun, key) \n"
"Bind fun to key-release event of key.\n"
"\n"
"Arguments:\n"
"fun -- a function with no arguments\n"
"key -- a string: key (e.g. \"a\") or key-symbol (e.g. \"space\")\n"
"\n"
"In order to be able to register key-events, TurtleScreen\n"
"must have focus. (See method listen.)\n"
"\n"
"Example:\n"
"\n"
">>> def f():\n"
"...     fd(50)\n"
"...     lt(60)\n"
"...\n"
">>> onkey(f, \"Up\")\n"
">>> listen()\n"
"\n"
"Subsequently the turtle can be moved by repeatedly pressing\n"
"the up-arrow key, consequently drawing a hexagon"
msgstr ""

#: mu/modes/api/python3.py:1555
msgid ""
"turtle.onkeypress(fun, key=None) \n"
"Bind fun to key-press event of key if key is given,\n"
"or to any key-press-event if no key is given.\n"
"\n"
"Arguments:\n"
"fun -- a function with no arguments\n"
"key -- a string: key (e.g. \"a\") or key-symbol (e.g. \"space\")\n"
"\n"
"In order to be able to register key-events, TurtleScreen\n"
"must have focus. (See method listen.)\n"
"\n"
"Example (for a TurtleScreen instance named screen\n"
"and a Turtle instance named turtle):\n"
"\n"
">>> def f():\n"
"...     fd(50)\n"
"...     lt(60)\n"
"...\n"
">>> onkeypress(f, \"Up\")\n"
">>> listen()\n"
"\n"
"Subsequently the turtle can be moved by repeatedly pressing\n"
"the up-arrow key, or by keeping pressed the up-arrow key.\n"
"consequently drawing a hexagon."
msgstr ""

#: mu/modes/api/python3.py:1558
msgid ""
"turtle.onkeyrelease(fun, key) \n"
"Bind fun to key-release event of key.\n"
"\n"
"Arguments:\n"
"fun -- a function with no arguments\n"
"key -- a string: key (e.g. \"a\") or key-symbol (e.g. \"space\")\n"
"\n"
"In order to be able to register key-events, TurtleScreen\n"
"must have focus. (See method listen.)\n"
"\n"
"Example:\n"
"\n"
">>> def f():\n"
"...     fd(50)\n"
"...     lt(60)\n"
"...\n"
">>> onkey(f, \"Up\")\n"
">>> listen()\n"
"\n"
"Subsequently the turtle can be moved by repeatedly pressing\n"
"the up-arrow key, consequently drawing a hexagon"
msgstr ""

#: mu/modes/api/python3.py:1561
msgid ""
"turtle.onrelease(fun, btn=1, add=None) \n"
"Bind fun to mouse-button-release event on this turtle on canvas.\n"
"\n"
"Arguments:\n"
"fun -- a function with two arguments, to which will be assigned\n"
"        the coordinates of the clicked point on the canvas.\n"
"num --  number of the mouse-button defaults to 1 (left mouse button).\n"
"\n"
"Example (for a MyTurtle instance named joe):\n"
">>> class MyTurtle(Turtle):\n"
"...     def glow(self,x,y):\n"
"...             self.fillcolor(\"red\")\n"
"...     def unglow(self,x,y):\n"
"...             self.fillcolor(\"\")\n"
"...\n"
">>> joe = MyTurtle()\n"
">>> joe.onclick(joe.glow)\n"
">>> joe.onrelease(joe.unglow)\n"
"\n"
"Clicking on joe turns fillcolor red, unclicking turns it to\n"
"transparent."
msgstr ""

#: mu/modes/api/python3.py:1564
msgid ""
"turtle.onscreenclick(fun, btn=1, add=None) \n"
"Bind fun to mouse-click event on canvas.\n"
"\n"
"Arguments:\n"
"fun -- a function with two arguments, the coordinates of the\n"
"       clicked point on the canvas.\n"
"num -- the number of the mouse-button, defaults to 1\n"
"\n"
"Example (for a TurtleScreen instance named screen)\n"
"\n"
">>> onclick(goto)\n"
">>> # Subsequently clicking into the TurtleScreen will\n"
">>> # make the turtle move to the clicked point.\n"
">>> onclick(None)"
msgstr ""

#: mu/modes/api/python3.py:1567
msgid ""
"turtle.ontimer(fun, t=0) \n"
"Install a timer, which calls fun after t milliseconds.\n"
"\n"
"Arguments:\n"
"fun -- a function with no arguments.\n"
"t -- a number >= 0\n"
"\n"
"Example:\n"
"\n"
">>> running = True\n"
">>> def f():\n"
"...     if running:\n"
"...             fd(50)\n"
"...             lt(60)\n"
"...             ontimer(f, 250)\n"
"...\n"
">>> f()   # makes the turtle marching around\n"
">>> running = False"
msgstr ""

#: mu/modes/api/python3.py:1570
msgid ""
"turtle.pd() \n"
"Pull the pen down -- drawing when moving.\n"
"\n"
"Aliases: pendown | pd | down\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> pendown()"
msgstr ""

#: mu/modes/api/python3.py:1573
msgid ""
"turtle.pen(pen=None, **pendict) \n"
"Return or set the pen's attributes.\n"
"\n"
"Arguments:\n"
"    pen -- a dictionary with some or all of the below listed keys.\n"
"    **pendict -- one or more keyword-arguments with the below\n"
"                 listed keys as keywords.\n"
"\n"
"Return or set the pen's attributes in a 'pen-dictionary'\n"
"with the following key/value pairs:\n"
"   \"shown\"      :   True/False\n"
"   \"pendown\"    :   True/False\n"
"   \"pencolor\"   :   color-string or color-tuple\n"
"   \"fillcolor\"  :   color-string or color-tuple\n"
"   \"pensize\"    :   positive number\n"
"   \"speed\"      :   number in range 0..10\n"
"   \"resizemode\" :   \"auto\" or \"user\" or \"noresize\"\n"
"   \"stretchfactor\": (positive number, positive number)\n"
"   \"shearfactor\":   number\n"
"   \"outline\"    :   positive number\n"
"   \"tilt\"       :   number\n"
"\n"
"This dictionary can be used as argument for a subsequent\n"
"pen()-call to restore the former pen-state. Moreover one\n"
"or more of these attributes can be provided as keyword-arguments.\n"
"This can be used to set several pen attributes in one statement.\n"
"\n"
"\n"
"Examples:\n"
">>> pen(fillcolor=\"black\", pencolor=\"red\", pensize=10)\n"
">>> pen()\n"
"{'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,\n"
"'pencolor': 'red', 'pendown': True, 'fillcolor': 'black',\n"
"'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}\n"
">>> penstate=pen()\n"
">>> color(\"yellow\",\"\")\n"
">>> penup()\n"
">>> pen()\n"
"{'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,\n"
"'pencolor': 'yellow', 'pendown': False, 'fillcolor': '',\n"
"'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}\n"
">>> p.pen(penstate, fillcolor=\"green\")\n"
">>> p.pen()\n"
"{'pensize': 10, 'shown': True, 'resizemode': 'auto', 'outline': 1,\n"
"'pencolor': 'red', 'pendown': True, 'fillcolor': 'green',\n"
"'stretchfactor': (1,1), 'speed': 3, 'shearfactor': 0.0}"
msgstr ""

#: mu/modes/api/python3.py:1576
msgid ""
"turtle.pencolor(*args) \n"
"Return or set the pencolor.\n"
"\n"
"Arguments:\n"
"Four input formats are allowed:\n"
"  - pencolor()\n"
"    Return the current pencolor as color specification string,\n"
"    possibly in hex-number format (see example).\n"
"    May be used as input to another color/pencolor/fillcolor call.\n"
"  - pencolor(colorstring)\n"
"    s is a Tk color specification string, such as \"red\" or \"yellow\"\n"
"  - pencolor((r, g, b))\n"
"    *a tuple* of r, g, and b, which represent, an RGB color,\n"
"    and each of r, g, and b are in the range 0..colormode,\n"
"    where colormode is either 1.0 or 255\n"
"  - pencolor(r, g, b)\n"
"    r, g, and b represent an RGB color, and each of r, g, and b\n"
"    are in the range 0..colormode\n"
"\n"
"If turtleshape is a polygon, the outline of that polygon is drawn\n"
"with the newly set pencolor.\n"
"\n"
"Example:\n"
">>> pencolor('brown')\n"
">>> tup = (0.2, 0.8, 0.55)\n"
">>> pencolor(tup)\n"
">>> pencolor()\n"
"'#33cc8c'"
msgstr ""

#: mu/modes/api/python3.py:1579
msgid ""
"turtle.pendown() \n"
"Pull the pen down -- drawing when moving.\n"
"\n"
"Aliases: pendown | pd | down\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> pendown()"
msgstr ""

#: mu/modes/api/python3.py:1582
msgid ""
"turtle.pensize(width=None) \n"
"Set or return the line thickness.\n"
"\n"
"Aliases:  pensize | width\n"
"\n"
"Argument:\n"
"width -- positive number\n"
"\n"
"Set the line thickness to width or return it. If resizemode is set\n"
"to \"auto\" and turtleshape is a polygon, that polygon is drawn with\n"
"the same line thickness. If no argument is given, current pensize\n"
"is returned.\n"
"\n"
"Example:\n"
">>> pensize()\n"
"1\n"
">>> pensize(10)   # from here on lines of width 10 are drawn"
msgstr ""

#: mu/modes/api/python3.py:1585
msgid ""
"turtle.penup() \n"
"Pull the pen up -- no drawing when moving.\n"
"\n"
"Aliases: penup | pu | up\n"
"\n"
"No argument\n"
"\n"
"Example:\n"
">>> penup()"
msgstr ""

#: mu/modes/api/python3.py:1588
msgid ""
"turtle.pos() \n"
"Return the turtle's current location (x,y), as a Vec2D-vector.\n"
"\n"
"Aliases: pos | position\n"
"\n"
"No arguments.\n"
"\n"
"Example:\n"
">>> pos()\n"
"(0.00, 240.00)"
msgstr ""

#: mu/modes/api/python3.py:1591
msgid ""
"turtle.position() \n"
"Return the turtle's current location (x,y), as a Vec2D-vector.\n"
"\n"
"Aliases: pos | position\n"
"\n"
"No arguments.\n"
"\n"
"Example:\n"
">>> pos()\n"
"(0.00, 240.00)"
msgstr ""

#: mu/modes/api/python3.py:1594
msgid ""
"turtle.pu() \n"
"Pull the pen up -- no drawing when moving.\n"
"\n"
"Aliases: penup | pu | up\n"
"\n"
"No argument\n"
"\n"
"Example:\n"
">>> penup()"
msgstr ""

#: mu/modes/api/python3.py:1597
msgid ""
"turtle.radians() \n"
"Set the angle measurement units to radians.\n"
"\n"
"No arguments.\n"
"\n"
"Example:\n"
">>> heading()\n"
"90\n"
">>> radians()\n"
">>> heading()\n"
"1.5707963267948966"
msgstr ""

#: mu/modes/api/python3.py:1600
msgid ""
"turtle.read_docstrings(lang) \n"
"Read in docstrings from lang-specific docstring dictionary.\n"
"\n"
"Transfer docstrings, translated to lang, from a dictionary-file\n"
"to the methods of classes Screen and Turtle and - in revised form -\n"
"to the corresponding functions."
msgstr ""

#: mu/modes/api/python3.py:1603
msgid ""
"turtle.readconfig(cfgdict) \n"
"Read config-files, change configuration-dict accordingly.\n"
"\n"
"If there is a turtle.cfg file in the current working directory,\n"
"read it from there. If this contains an importconfig-value,\n"
"say 'myway', construct filename turtle_mayway.cfg else use\n"
"turtle.cfg and read it from the import-directory, where\n"
"turtle.py is located.\n"
"Update configuration dictionary first according to config-file,\n"
"in the import directory, then according to config-file in the\n"
"current working directory.\n"
"If no config-file is found, the default configuration is used."
msgstr ""

#: mu/modes/api/python3.py:1606
msgid ""
"turtle.register_shape(name, shape=None) \n"
"Adds a turtle shape to TurtleScreen's shapelist.\n"
"\n"
"Arguments:\n"
"(1) name is the name of a gif-file and shape is None.\n"
"    Installs the corresponding image shape.\n"
"    !! Image-shapes DO NOT rotate when turning the turtle,\n"
"    !! so they do not display the heading of the turtle!\n"
"(2) name is an arbitrary string and shape is a tuple\n"
"    of pairs of coordinates. Installs the corresponding\n"
"    polygon shape\n"
"(3) name is an arbitrary string and shape is a\n"
"    (compound) Shape object. Installs the corresponding\n"
"    compound shape.\n"
"To use a shape, you have to issue the command shape(shapename).\n"
"\n"
"call: register_shape(\"turtle.gif\")\n"
"--or: register_shape(\"tri\", ((0,0), (10,10), (-10,10)))\n"
"\n"
"Example:\n"
">>> register_shape(\"triangle\", ((5,-3),(0,5),(-5,-3)))"
msgstr ""

#: mu/modes/api/python3.py:1609
msgid ""
"turtle.reset() \n"
"Delete the turtle's drawings and restore its default values.\n"
"\n"
"No argument.\n"
"\n"
"Delete the turtle's drawings from the screen, re-center the turtle\n"
"and set variables to the default values.\n"
"\n"
"Example:\n"
">>> position()\n"
"(0.00,-22.00)\n"
">>> heading()\n"
"100.0\n"
">>> reset()\n"
">>> position()\n"
"(0.00,0.00)\n"
">>> heading()\n"
"0.0"
msgstr ""

#: mu/modes/api/python3.py:1612
msgid ""
"turtle.resetscreen() \n"
"Reset all Turtles on the Screen to their initial state.\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> reset()"
msgstr ""

#: mu/modes/api/python3.py:1615
msgid ""
"turtle.resizemode(rmode=None) \n"
"Set resizemode to one of the values: \"auto\", \"user\", \"noresize\".\n"
"\n"
"(Optional) Argument:\n"
"rmode -- one of the strings \"auto\", \"user\", \"noresize\"\n"
"\n"
"Different resizemodes have the following effects:\n"
"  - \"auto\" adapts the appearance of the turtle\n"
"           corresponding to the value of pensize.\n"
"  - \"user\" adapts the appearance of the turtle according to the\n"
"           values of stretchfactor and outlinewidth (outline),\n"
"           which are set by shapesize()\n"
"  - \"noresize\" no adaption of the turtle's appearance takes place.\n"
"If no argument is given, return current resizemode.\n"
"resizemode(\"user\") is called by a call of shapesize with arguments.\n"
"\n"
"\n"
"Examples:\n"
">>> resizemode(\"noresize\")\n"
">>> resizemode()\n"
"'noresize'"
msgstr ""

#: mu/modes/api/python3.py:1618
msgid ""
"turtle.right(angle) \n"
"Turn turtle right by angle units.\n"
"\n"
"Aliases: right | rt\n"
"\n"
"Argument:\n"
"angle -- a number (integer or float)\n"
"\n"
"Turn turtle right by angle units. (Units are by default degrees,\n"
"but can be set via the degrees() and radians() functions.)\n"
"Angle orientation depends on mode. (See this.)\n"
"\n"
"Example:\n"
">>> heading()\n"
"22.0\n"
">>> right(45)\n"
">>> heading()\n"
"337.0"
msgstr ""

#: mu/modes/api/python3.py:1621
msgid ""
"turtle.rt(angle) \n"
"Turn turtle right by angle units.\n"
"\n"
"Aliases: right | rt\n"
"\n"
"Argument:\n"
"angle -- a number (integer or float)\n"
"\n"
"Turn turtle right by angle units. (Units are by default degrees,\n"
"but can be set via the degrees() and radians() functions.)\n"
"Angle orientation depends on mode. (See this.)\n"
"\n"
"Example:\n"
">>> heading()\n"
"22.0\n"
">>> right(45)\n"
">>> heading()\n"
"337.0"
msgstr ""

#: mu/modes/api/python3.py:1624
msgid ""
"turtle.screensize(canvwidth=None, canvheight=None, bg=None) \n"
"Resize the canvas the turtles are drawing on.\n"
"\n"
"Optional arguments:\n"
"canvwidth -- positive integer, new width of canvas in pixels\n"
"canvheight --  positive integer, new height of canvas in pixels\n"
"bg -- colorstring or color-tuple, new backgroundcolor\n"
"If no arguments are given, return current (canvaswidth, canvasheight)\n"
"\n"
"Do not alter the drawing window. To observe hidden parts of\n"
"the canvas use the scrollbars. (Can make visible those parts\n"
"of a drawing, which were outside the canvas before!)\n"
"\n"
"Example (for a Turtle instance named turtle):\n"
">>> turtle.screensize(2000,1500)\n"
">>> # e.g. to search for an erroneously escaped turtle ;-)"
msgstr ""

#: mu/modes/api/python3.py:1627
msgid ""
"turtle.seth(to_angle) \n"
"Set the orientation of the turtle to to_angle.\n"
"\n"
"Aliases:  setheading | seth\n"
"\n"
"Argument:\n"
"to_angle -- a number (integer or float)\n"
"\n"
"Set the orientation of the turtle to to_angle.\n"
"Here are some common directions in degrees:\n"
"\n"
" standard - mode:          logo-mode:\n"
"-------------------|--------------------\n"
"   0 - east                0 - north\n"
"  90 - north              90 - east\n"
" 180 - west              180 - south\n"
" 270 - south             270 - west\n"
"\n"
"Example:\n"
">>> setheading(90)\n"
">>> heading()\n"
"90"
msgstr ""

#: mu/modes/api/python3.py:1630
msgid ""
"turtle.setheading(to_angle) \n"
"Set the orientation of the turtle to to_angle.\n"
"\n"
"Aliases:  setheading | seth\n"
"\n"
"Argument:\n"
"to_angle -- a number (integer or float)\n"
"\n"
"Set the orientation of the turtle to to_angle.\n"
"Here are some common directions in degrees:\n"
"\n"
" standard - mode:          logo-mode:\n"
"-------------------|--------------------\n"
"   0 - east                0 - north\n"
"  90 - north              90 - east\n"
" 180 - west              180 - south\n"
" 270 - south             270 - west\n"
"\n"
"Example:\n"
">>> setheading(90)\n"
">>> heading()\n"
"90"
msgstr ""

#: mu/modes/api/python3.py:1633
msgid ""
"turtle.setpos(x, y=None) \n"
"Move turtle to an absolute position.\n"
"\n"
"Aliases: setpos | setposition | goto:\n"
"\n"
"Arguments:\n"
"x -- a number      or     a pair/vector of numbers\n"
"y -- a number             None\n"
"\n"
"call: goto(x, y)         # two coordinates\n"
"--or: goto((x, y))       # a pair (tuple) of coordinates\n"
"--or: goto(vec)          # e.g. as returned by pos()\n"
"\n"
"Move turtle to an absolute position. If the pen is down,\n"
"a line will be drawn. The turtle's orientation does not change.\n"
"\n"
"Example:\n"
">>> tp = pos()\n"
">>> tp\n"
"(0.00, 0.00)\n"
">>> setpos(60,30)\n"
">>> pos()\n"
"(60.00,30.00)\n"
">>> setpos((20,80))\n"
">>> pos()\n"
"(20.00,80.00)\n"
">>> setpos(tp)\n"
">>> pos()\n"
"(0.00,0.00)"
msgstr ""

#: mu/modes/api/python3.py:1636
msgid ""
"turtle.setposition(x, y=None) \n"
"Move turtle to an absolute position.\n"
"\n"
"Aliases: setpos | setposition | goto:\n"
"\n"
"Arguments:\n"
"x -- a number      or     a pair/vector of numbers\n"
"y -- a number             None\n"
"\n"
"call: goto(x, y)         # two coordinates\n"
"--or: goto((x, y))       # a pair (tuple) of coordinates\n"
"--or: goto(vec)          # e.g. as returned by pos()\n"
"\n"
"Move turtle to an absolute position. If the pen is down,\n"
"a line will be drawn. The turtle's orientation does not change.\n"
"\n"
"Example:\n"
">>> tp = pos()\n"
">>> tp\n"
"(0.00, 0.00)\n"
">>> setpos(60,30)\n"
">>> pos()\n"
"(60.00,30.00)\n"
">>> setpos((20,80))\n"
">>> pos()\n"
"(20.00,80.00)\n"
">>> setpos(tp)\n"
">>> pos()\n"
"(0.00,0.00)"
msgstr ""

#: mu/modes/api/python3.py:1639
msgid ""
"turtle.settiltangle(angle) \n"
"Rotate the turtleshape to point in the specified direction\n"
"\n"
"Argument: angle -- number\n"
"\n"
"Rotate the turtleshape to point in the direction specified by angle,\n"
"regardless of its current tilt-angle. DO NOT change the turtle's\n"
"heading (direction of movement).\n"
"\n"
"\n"
"Examples:\n"
">>> shape(\"circle\")\n"
">>> shapesize(5,2)\n"
">>> settiltangle(45)\n"
">>> stamp()\n"
">>> fd(50)\n"
">>> settiltangle(-45)\n"
">>> stamp()\n"
">>> fd(50)"
msgstr ""

#: mu/modes/api/python3.py:1642
msgid ""
"turtle.setundobuffer(size) \n"
"Set or disable undobuffer.\n"
"\n"
"Argument:\n"
"size -- an integer or None\n"
"\n"
"If size is an integer an empty undobuffer of given size is installed.\n"
"Size gives the maximum number of turtle-actions that can be undone\n"
"by the undo() function.\n"
"If size is None, no undobuffer is present.\n"
"\n"
"Example:\n"
">>> setundobuffer(42)"
msgstr ""

#: mu/modes/api/python3.py:1645
#, python-format
msgid ""
"turtle.setup(width=0.5, height=0.75, startx=None, starty=None) \n"
"Set the size and position of the main window.\n"
"\n"
"Arguments:\n"
"width: as integer a size in pixels, as float a fraction of the \n"
"  Default is 50% of \n"
"height: as integer the height in pixels, as float a fraction of the\n"
"   Default is 75% of \n"
"startx: if positive, starting position in pixels from the left\n"
"  edge of the screen, if negative from the right edge\n"
"  Default, startx=None is to center window horizontally.\n"
"starty: if positive, starting position in pixels from the top\n"
"  edge of the screen, if negative from the bottom edge\n"
"  Default, starty=None is to center window vertically.\n"
"\n"
"Examples:\n"
">>> setup (width=200, height=200, startx=0, starty=0)\n"
"\n"
"sets window to 200x200 pixels, in upper left of screen\n"
"\n"
">>> setup(width=.75, height=0.5, startx=None, starty=None)\n"
"\n"
"sets window to 75% of screen by 50% of screen and centers"
msgstr ""

#: mu/modes/api/python3.py:1648
msgid ""
"turtle.setworldcoordinates(llx, lly, urx, ury) \n"
"Set up a user defined coordinate-system.\n"
"\n"
"Arguments:\n"
"llx -- a number, x-coordinate of lower left corner of canvas\n"
"lly -- a number, y-coordinate of lower left corner of canvas\n"
"urx -- a number, x-coordinate of upper right corner of canvas\n"
"ury -- a number, y-coordinate of upper right corner of canvas\n"
"\n"
"Set up user coodinat-system and switch to mode 'world' if necessary.\n"
"This performs a reset. If mode 'world' is already active,\n"
"all drawings are redrawn according to the new coordinates.\n"
"\n"
"But ATTENTION: in user-defined coordinatesystems angles may appear\n"
"distorted. (see Screen.mode())\n"
"\n"
"Example:\n"
">>> setworldcoordinates(-10,-0.5,50,1.5)\n"
">>> for _ in range(36):\n"
"...     left(10)\n"
"...     forward(0.5)"
msgstr ""

#: mu/modes/api/python3.py:1651
msgid ""
"turtle.setx(x) \n"
"Set the turtle's first coordinate to x\n"
"\n"
"Argument:\n"
"x -- a number (integer or float)\n"
"\n"
"Set the turtle's first coordinate to x, leave second coordinate\n"
"unchanged.\n"
"\n"
"Example:\n"
">>> position()\n"
"(0.00, 240.00)\n"
">>> setx(10)\n"
">>> position()\n"
"(10.00, 240.00)"
msgstr ""

#: mu/modes/api/python3.py:1654
msgid ""
"turtle.sety(y) \n"
"Set the turtle's second coordinate to y\n"
"\n"
"Argument:\n"
"y -- a number (integer or float)\n"
"\n"
"Set the turtle's first coordinate to x, second coordinate remains\n"
"unchanged.\n"
"\n"
"Example:\n"
">>> position()\n"
"(0.00, 40.00)\n"
">>> sety(-10)\n"
">>> position()\n"
"(0.00, -10.00)"
msgstr ""

#: mu/modes/api/python3.py:1657
msgid ""
"turtle.shape(name=None) \n"
"Set turtle shape to shape with given name / return current shapename.\n"
"\n"
"Optional argument:\n"
"name -- a string, which is a valid shapename\n"
"\n"
"Set turtle shape to shape with given name or, if name is not given,\n"
"return name of current shape.\n"
"Shape with name must exist in the TurtleScreen's shape dictionary.\n"
"Initially there are the following polygon shapes:\n"
"'arrow', 'turtle', 'circle', 'square', 'triangle', 'classic'.\n"
"To learn about how to deal with shapes see Screen-method register_shape.\n"
"\n"
"Example:\n"
">>> shape()\n"
"'arrow'\n"
">>> shape(\"turtle\")\n"
">>> shape()\n"
"'turtle'"
msgstr ""

#: mu/modes/api/python3.py:1660
msgid ""
"turtle.shapesize(stretch_wid=None, stretch_len=None, outline=None) \n"
"Set/return turtle's stretchfactors/outline. Set resizemode to \"user\".\n"
"\n"
"Optional arguments:\n"
"   stretch_wid : positive number\n"
"   stretch_len : positive number\n"
"   outline  : positive number\n"
"\n"
"Return or set the pen's attributes x/y-stretchfactors and/or outline.\n"
"Set resizemode to \"user\".\n"
"If and only if resizemode is set to \"user\", the turtle will be displayed\n"
"stretched according to its stretchfactors:\n"
"stretch_wid is stretchfactor perpendicular to orientation\n"
"stretch_len is stretchfactor in direction of turtles orientation.\n"
"outline determines the width of the shapes's outline.\n"
"\n"
"Examples:\n"
">>> resizemode(\"user\")\n"
">>> shapesize(5, 5, 12)\n"
">>> shapesize(outline=8)"
msgstr ""

#: mu/modes/api/python3.py:1663
msgid ""
"turtle.shapetransform(t11=None, t12=None, t21=None, t22=None) \n"
"Set or return the current transformation matrix of the turtle shape.\n"
"\n"
"Optional arguments: t11, t12, t21, t22 -- numbers.\n"
"\n"
"If none of the matrix elements are given, return the transformation\n"
"matrix.\n"
"Otherwise set the given elements and transform the turtleshape\n"
"according to the matrix consisting of first row t11, t12 and\n"
"second row t21, 22.\n"
"Modify stretchfactor, shearfactor and tiltangle according to the\n"
"given matrix.\n"
"\n"
"Examples:\n"
">>> shape(\"square\")\n"
">>> shapesize(4,2)\n"
">>> shearfactor(-0.5)\n"
">>> shapetransform()\n"
"(4.0, -1.0, -0.0, 2.0)"
msgstr ""

#: mu/modes/api/python3.py:1666
msgid ""
"turtle.shearfactor(shear=None) \n"
"Set or return the current shearfactor.\n"
"\n"
"Optional argument: shear -- number, tangent of the shear angle\n"
"\n"
"Shear the turtleshape according to the given shearfactor shear,\n"
"which is the tangent of the shear angle. DO NOT change the\n"
"turtle's heading (direction of movement).\n"
"If shear is not given: return the current shearfactor, i. e. the\n"
"tangent of the shear angle, by which lines parallel to the\n"
"heading of the turtle are sheared.\n"
"\n"
"Examples:\n"
">>> shape(\"circle\")\n"
">>> shapesize(5,2)\n"
">>> shearfactor(0.5)\n"
">>> shearfactor()\n"
">>> 0.5"
msgstr ""

#: mu/modes/api/python3.py:1669
msgid ""
"turtle.showturtle() \n"
"Makes the turtle visible.\n"
"\n"
"Aliases: showturtle | st\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> hideturtle()\n"
">>> showturtle()"
msgstr ""

#: mu/modes/api/python3.py:1672
msgid ""
"turtle.speed(speed=None) \n"
"Return or set the turtle's speed.\n"
"\n"
"Optional argument:\n"
"speed -- an integer in the range 0..10 or a speedstring (see below)\n"
"\n"
"Set the turtle's speed to an integer value in the range 0 .. 10.\n"
"If no argument is given: return current speed.\n"
"\n"
"If input is a number greater than 10 or smaller than 0.5,\n"
"speed is set to 0.\n"
"Speedstrings  are mapped to speedvalues in the following way:\n"
"    'fastest' :  0\n"
"    'fast'    :  10\n"
"    'normal'  :  6\n"
"    'slow'    :  3\n"
"    'slowest' :  1\n"
"speeds from 1 to 10 enforce increasingly faster animation of\n"
"line drawing and turtle turning.\n"
"\n"
"Attention:\n"
"speed = 0 : *no* animation takes place. forward/back makes turtle jump\n"
"and likewise left/right make the turtle turn instantly.\n"
"\n"
"Example:\n"
">>> speed(3)"
msgstr ""

#: mu/modes/api/python3.py:1675
msgid ""
"turtle.split(p) \n"
"Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is\n"
"everything after the final slash.  Either part may be empty."
msgstr ""

#: mu/modes/api/python3.py:1678
msgid ""
"turtle.st() \n"
"Makes the turtle visible.\n"
"\n"
"Aliases: showturtle | st\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> hideturtle()\n"
">>> showturtle()"
msgstr ""

#: mu/modes/api/python3.py:1681
msgid ""
"turtle.stamp() \n"
"Stamp a copy of the turtleshape onto the canvas and return its id.\n"
"\n"
"No argument.\n"
"\n"
"Stamp a copy of the turtle shape onto the canvas at the current\n"
"turtle position. Return a stamp_id for that stamp, which can be\n"
"used to delete it by calling clearstamp(stamp_id).\n"
"\n"
"Example:\n"
">>> color(\"blue\")\n"
">>> stamp()\n"
"13\n"
">>> fd(50)"
msgstr ""

#: mu/modes/api/python3.py:1684
msgid ""
"turtle.sys() \n"
"This module provides access to some objects used or maintained by the\n"
"interpreter and to functions that interact strongly with the interpreter.\n"
"\n"
"Dynamic objects:\n"
"\n"
"argv -- command line arguments; argv[0] is the script pathname if known\n"
"path -- module search path; path[0] is the script directory, else ''\n"
"modules -- dictionary of loaded modules\n"
"\n"
"displayhook -- called to show results in an interactive session\n"
"excepthook -- called to handle any uncaught exception other than SystemExit\n"
"  To customize printing in an interactive session or to install a custom\n"
"  top-level exception handler, assign other functions to replace these.\n"
"\n"
"stdin -- standard input file object; used by input()\n"
"stdout -- standard output file object; used by print()\n"
"stderr -- standard error object; used for error messages\n"
"  By assigning other file objects (or objects that behave like files)\n"
"  to these, it is possible to redirect all of the interpreter's I/O.\n"
"\n"
"last_type -- type of last uncaught exception\n"
"last_value -- value of last uncaught exception\n"
"last_traceback -- traceback of last uncaught exception\n"
"  These three are only available in an interactive session after a\n"
"  traceback has been printed.\n"
"\n"
"Static objects:\n"
"\n"
"builtin_module_names -- tuple of module names built into this interpreter\n"
"copyright -- copyright notice pertaining to this interpreter\n"
"exec_prefix -- prefix used to find the machine-specific Python library\n"
"executable -- absolute path of the executable binary of the Python "
"interpreter\n"
"float_info -- a struct sequence with information about the float "
"implementation.\n"
"float_repr_style -- string indicating the style of repr() output for floats\n"
"hash_info -- a struct sequence with information about the hash algorithm.\n"
"hexversion -- version information encoded as a single integer\n"
"implementation -- Python implementation information.\n"
"int_info -- a struct sequence with information about the int "
"implementation.\n"
"maxsize -- the largest supported length of containers.\n"
"maxunicode -- the value of the largest Unicode code point\n"
"platform -- platform identifier\n"
"prefix -- prefix used to find the Python library\n"
"thread_info -- a struct sequence with information about the thread "
"implementation.\n"
"version -- the version of this interpreter as a string\n"
"version_info -- version information as a named tuple\n"
"__stdin__ -- the original stdin; don't touch!\n"
"__stdout__ -- the original stdout; don't touch!\n"
"__stderr__ -- the original stderr; don't touch!\n"
"__displayhook__ -- the original displayhook; don't touch!\n"
"__excepthook__ -- the original excepthook; don't touch!\n"
"\n"
"Functions:\n"
"\n"
"displayhook() -- print an object to the screen, and save it in builtins._\n"
"excepthook() -- print an exception and its traceback to sys.stderr\n"
"exc_info() -- return thread-safe information about the current exception\n"
"exit() -- exit the interpreter by raising SystemExit\n"
"getdlopenflags() -- returns flags to be used for dlopen() calls\n"
"getprofile() -- get the global profiling function\n"
"getrefcount() -- return the reference count for an object (plus one :-)\n"
"getrecursionlimit() -- return the max recursion depth for the interpreter\n"
"getsizeof() -- return the size of an object in bytes\n"
"gettrace() -- get the global debug tracing function\n"
"setcheckinterval() -- control how often the interpreter checks for events\n"
"setdlopenflags() -- set the flags to be used for dlopen() calls\n"
"setprofile() -- set the global profiling function\n"
"setrecursionlimit() -- set the max recursion depth for the interpreter\n"
"settrace() -- set the global debug tracing function"
msgstr ""

#: mu/modes/api/python3.py:1687
msgid ""
"turtle.textinput(title, prompt) \n"
"Pop up a dialog window for input of a string.\n"
"\n"
"Arguments: title is the title of the dialog window,\n"
"prompt is a text mostly describing what information to input.\n"
"\n"
"Return the string input\n"
"If the dialog is canceled, return None.\n"
"\n"
"Example:\n"
">>> textinput(\"NIM\", \"Name of first player:\")"
msgstr ""

#: mu/modes/api/python3.py:1690
msgid ""
"turtle.tilt(angle) \n"
"Rotate the turtleshape by angle.\n"
"\n"
"Argument:\n"
"angle - a number\n"
"\n"
"Rotate the turtleshape by angle from its current tilt-angle,\n"
"but do NOT change the turtle's heading (direction of movement).\n"
"\n"
"Examples:\n"
">>> shape(\"circle\")\n"
">>> shapesize(5,2)\n"
">>> tilt(30)\n"
">>> fd(50)\n"
">>> tilt(30)\n"
">>> fd(50)"
msgstr ""

#: mu/modes/api/python3.py:1693
msgid ""
"turtle.tiltangle(angle=None) \n"
"Set or return the current tilt-angle.\n"
"\n"
"Optional argument: angle -- number\n"
"\n"
"Rotate the turtleshape to point in the direction specified by angle,\n"
"regardless of its current tilt-angle. DO NOT change the turtle's\n"
"heading (direction of movement).\n"
"If angle is not given: return the current tilt-angle, i. e. the angle\n"
"between the orientation of the turtleshape and the heading of the\n"
"turtle (its direction of movement).\n"
"\n"
"Deprecated since Python 3.1\n"
"\n"
"Examples:\n"
">>> shape(\"circle\")\n"
">>> shapesize(5,2)\n"
">>> tilt(45)\n"
">>> tiltangle()"
msgstr ""

#: mu/modes/api/python3.py:1696
msgid ""
"turtle.time() \n"
"This module provides various functions to manipulate time values.\n"
"\n"
"There are two standard representations of time.  One is the number\n"
"of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer\n"
"or a floating point number (to represent fractions of seconds).\n"
"The Epoch is system-defined; on Unix, it is generally January 1st, 1970.\n"
"The actual value can be retrieved by calling gmtime(0).\n"
"\n"
"The other representation is a tuple of 9 integers giving local time.\n"
"The tuple items are:\n"
"  year (including century, e.g. 1998)\n"
"  month (1-12)\n"
"  day (1-31)\n"
"  hours (0-23)\n"
"  minutes (0-59)\n"
"  seconds (0-59)\n"
"  weekday (0-6, Monday is 0)\n"
"  Julian day (day in the year, 1-366)\n"
"  DST (Daylight Savings Time) flag (-1, 0 or 1)\n"
"If the DST flag is 0, the time is given in the regular time zone;\n"
"if it is 1, the time is given in the DST time zone;\n"
"if it is -1, mktime() should guess based on the date and time.\n"
"\n"
"Variables:\n"
"\n"
"timezone -- difference in seconds between UTC and local standard time\n"
"altzone -- difference in  seconds between UTC and local DST time\n"
"daylight -- whether local time should reflect DST\n"
"tzname -- tuple of (standard time zone name, DST time zone name)\n"
"\n"
"Functions:\n"
"\n"
"time() -- return current time in seconds since the Epoch as a float\n"
"clock() -- return CPU time since process start as a float\n"
"sleep() -- delay for a number of seconds given as a float\n"
"gmtime() -- convert seconds since Epoch to UTC tuple\n"
"localtime() -- convert seconds since Epoch to local time tuple\n"
"asctime() -- convert time tuple to string\n"
"ctime() -- convert time in seconds to string\n"
"mktime() -- convert local time tuple to seconds since Epoch\n"
"strftime() -- convert time tuple to string according to format "
"specification\n"
"strptime() -- parse string to time tuple according to format specification\n"
"tzset() -- change the local timezone"
msgstr ""

#: mu/modes/api/python3.py:1699
msgid ""
"turtle.title(titlestring) \n"
"Set title of turtle-window\n"
"\n"
"Argument:\n"
"titlestring -- a string, to appear in the titlebar of the\n"
"               turtle graphics window.\n"
"\n"
"This is a method of Screen-class. Not available for TurtleScreen-\n"
"objects.\n"
"\n"
"Example:\n"
">>> title(\"Welcome to the turtle-zoo!\")"
msgstr ""

#: mu/modes/api/python3.py:1702
msgid ""
"turtle.tkinter() \n"
"Wrapper functions for Tcl/Tk.\n"
"\n"
"Tkinter provides classes which allow the display, positioning and\n"
"control of widgets. Toplevel widgets are Tk and Toplevel. Other\n"
"widgets are Frame, Label, Entry, Text, Canvas, Button, Radiobutton,\n"
"Checkbutton, Scale, Listbox, Scrollbar, OptionMenu, Spinbox\n"
"LabelFrame and PanedWindow.\n"
"\n"
"Properties of the widgets are specified with keyword arguments.\n"
"Keyword arguments have the same name as the corresponding resource\n"
"under Tk.\n"
"\n"
"Widgets are positioned with one of the geometry managers Place, Pack\n"
"or Grid. These managers can be called with methods place, pack, grid\n"
"available in every Widget.\n"
"\n"
"Actions are bound to events by resources (e.g. keyword argument\n"
"command) or with the method bind.\n"
"\n"
"Example (Hello, World):\n"
"import tkinter\n"
"from tkinter.constants import *\n"
"tk = tkinter.Tk()\n"
"frame = tkinter.Frame(tk, relief=RIDGE, borderwidth=2)\n"
"frame.pack(fill=BOTH,expand=1)\n"
"label = tkinter.Label(frame, text=\"Hello, World\")\n"
"label.pack(fill=X, expand=1)\n"
"button = tkinter.Button(frame,text=\"Exit\",command=tk.destroy)\n"
"button.pack(side=BOTTOM)\n"
"tk.mainloop()"
msgstr ""

#: mu/modes/api/python3.py:1705
msgid ""
"turtle.tkinter.simpledialog() \n"
"This modules handles dialog boxes.\n"
"\n"
"It contains the following public symbols:\n"
"\n"
"SimpleDialog -- A simple but flexible modal dialog box\n"
"\n"
"Dialog -- a base class for dialogs\n"
"\n"
"askinteger -- get an integer from the user\n"
"\n"
"askfloat -- get a float from the user\n"
"\n"
"askstring -- get a string from the user"
msgstr ""

#: mu/modes/api/python3.py:1708
msgid ""
"turtle.towards(x, y=None) \n"
"Return the angle of the line from the turtle's position to (x, y).\n"
"\n"
"Arguments:\n"
"x -- a number   or  a pair/vector of numbers   or   a turtle instance\n"
"y -- a number       None                            None\n"
"\n"
"call: distance(x, y)         # two coordinates\n"
"--or: distance((x, y))       # a pair (tuple) of coordinates\n"
"--or: distance(vec)          # e.g. as returned by pos()\n"
"--or: distance(mypen)        # where mypen is another turtle\n"
"\n"
"Return the angle, between the line from turtle-position to position\n"
"specified by x, y and the turtle's start orientation. (Depends on\n"
"modes - \"standard\" or \"logo\")\n"
"\n"
"Example:\n"
">>> pos()\n"
"(10.00, 10.00)\n"
">>> towards(0,0)\n"
"225.0"
msgstr ""

#: mu/modes/api/python3.py:1711
msgid ""
"turtle.tracer(n=None, delay=None) \n"
"Turns turtle animation on/off and set delay for update drawings.\n"
"\n"
"Optional arguments:\n"
"n -- nonnegative  integer\n"
"delay -- nonnegative  integer\n"
"\n"
"If n is given, only each n-th regular screen update is really performed.\n"
"(Can be used to accelerate the drawing of complex graphics.)\n"
"Second arguments sets delay value (see RawTurtle.delay())\n"
"\n"
"Example:\n"
">>> tracer(8, 25)\n"
">>> dist = 2\n"
">>> for i in range(200):\n"
"...     fd(dist)\n"
"...     rt(90)\n"
"...     dist += 2"
msgstr ""

#: mu/modes/api/python3.py:1714
msgid ""
"turtle.turtles() \n"
"Return the list of turtles on the \n"
"\n"
"Example:\n"
">>> turtles()\n"
"[<turtle.Turtle object at 0x00E11FB0>]"
msgstr ""

#: mu/modes/api/python3.py:1717
msgid ""
"turtle.turtlesize(stretch_wid=None, stretch_len=None, outline=None) \n"
"Set/return turtle's stretchfactors/outline. Set resizemode to \"user\".\n"
"\n"
"Optional arguments:\n"
"   stretch_wid : positive number\n"
"   stretch_len : positive number\n"
"   outline  : positive number\n"
"\n"
"Return or set the pen's attributes x/y-stretchfactors and/or outline.\n"
"Set resizemode to \"user\".\n"
"If and only if resizemode is set to \"user\", the turtle will be displayed\n"
"stretched according to its stretchfactors:\n"
"stretch_wid is stretchfactor perpendicular to orientation\n"
"stretch_len is stretchfactor in direction of turtles orientation.\n"
"outline determines the width of the shapes's outline.\n"
"\n"
"Examples:\n"
">>> resizemode(\"user\")\n"
">>> shapesize(5, 5, 12)\n"
">>> shapesize(outline=8)"
msgstr ""

#: mu/modes/api/python3.py:1720
msgid ""
"turtle.types() \n"
"Define names for built-in types that aren't directly accessible as a builtin."
msgstr ""

#: mu/modes/api/python3.py:1723
msgid ""
"turtle.undo() \n"
"undo (repeatedly) the last turtle action.\n"
"\n"
"No argument.\n"
"\n"
"undo (repeatedly) the last turtle action.\n"
"Number of available undo actions is determined by the size of\n"
"the undobuffer.\n"
"\n"
"Example:\n"
">>> for i in range(4):\n"
"...     fd(50); lt(80)\n"
"...\n"
">>> for i in range(8):\n"
"...     undo()\n"
"..."
msgstr ""

#: mu/modes/api/python3.py:1726
msgid ""
"turtle.undobufferentries() \n"
"Return count of entries in the undobuffer.\n"
"\n"
"No argument.\n"
"\n"
"Example:\n"
">>> while undobufferentries():\n"
"...     undo()"
msgstr ""

#: mu/modes/api/python3.py:1729
msgid ""
"turtle.up() \n"
"Pull the pen up -- no drawing when moving.\n"
"\n"
"Aliases: penup | pu | up\n"
"\n"
"No argument\n"
"\n"
"Example:\n"
">>> penup()"
msgstr ""

#: mu/modes/api/python3.py:1731
msgid ""
"turtle.update() \n"
"Perform a TurtleScreen update.\n"
"        "
msgstr ""

#: mu/modes/api/python3.py:1733
msgid ""
"turtle.width(width=None) \n"
"Set or return the line thickness.\n"
"\n"
"Aliases:  pensize | width\n"
"\n"
"Argument:\n"
"width -- positive number\n"
"\n"
"Set the line thickness to width or return it. If resizemode is set\n"
"to \"auto\" and turtleshape is a polygon, that polygon is drawn with\n"
"the same line thickness. If no argument is given, current pensize\n"
"is returned.\n"
"\n"
"Example:\n"
">>> pensize()\n"
"1\n"
">>> pensize(10)   # from here on lines of width 10 are drawn"
msgstr ""

#: mu/modes/api/python3.py:1736
msgid ""
"turtle.window_height() \n"
"Return the height of the turtle window.\n"
"\n"
"Example:\n"
">>> window_height()\n"
"480"
msgstr ""

#: mu/modes/api/python3.py:1739
msgid ""
"turtle.window_width() \n"
"Return the width of the turtle window.\n"
"\n"
"Example:\n"
">>> window_width()\n"
"640"
msgstr ""

#: mu/modes/api/python3.py:1742
msgid ""
"turtle.write(arg, move=False, align='left', font='Arial', 8, 'normal') \n"
"Write text at the current turtle position.\n"
"\n"
"Arguments:\n"
"arg -- info, which is to be written to the TurtleScreen\n"
"move (optional) -- True/False\n"
"align (optional) -- one of the strings \"left\", \"center\" or right\"\n"
"font (optional) -- a triple (fontname, fontsize, fonttype)\n"
"\n"
"Write text - the string representation of arg - at the current\n"
"turtle position according to align (\"left\", \"center\" or right\")\n"
"and with the given font.\n"
"If move is True, the pen is moved to the bottom-right corner\n"
"of the text. By default, move is False.\n"
"\n"
"Example:\n"
">>> write('Home = ', True, align=\"center\")\n"
">>> write((0,0), True)"
msgstr ""

#: mu/modes/api/python3.py:1745
msgid ""
"turtle.write_docstringdict(filename='turtle_docstringdict') \n"
"Create and write docstring-dictionary to file.\n"
"\n"
"Optional argument:\n"
"filename -- a string, used as filename\n"
"            default value is turtle_docstringdict\n"
"\n"
"Has to be called explicitly, (not used by the turtle-graphics classes)\n"
"The docstring dictionary will be written to the Python script <filname>.py\n"
"It is intended to serve as a template for translation of the docstrings\n"
"into different languages."
msgstr ""

#: mu/modes/api/python3.py:1748
msgid ""
"turtle.xcor() \n"
"Return the turtle's x coordinate.\n"
"\n"
"No arguments.\n"
"\n"
"Example:\n"
">>> reset()\n"
">>> left(60)\n"
">>> forward(100)\n"
">>> print xcor()\n"
"50.0"
msgstr ""

#: mu/modes/api/python3.py:1751
msgid ""
"turtle.ycor() \n"
"Return the turtle's y coordinate\n"
"---\n"
"No arguments.\n"
"\n"
"Example:\n"
">>> reset()\n"
">>> left(60)\n"
">>> forward(100)\n"
">>> print ycor()\n"
"86.6025403784"
msgstr ""

#: mu/modes/api/python3.py:1754
msgid ""
"uuid.UUID(hex=None, bytes=None, bytes_le=None, fields=None, int=None, "
"version=None) \n"
"Instances of the UUID class represent UUIDs as specified in RFC 4122.\n"
"UUID objects are immutable, hashable, and usable as dictionary keys.\n"
"Converting a UUID to a string with str() yields something in the form\n"
"'12345678-1234-1234-1234-123456789abc'.  The UUID constructor accepts\n"
"five possible forms: a similar string of hexadecimal digits, or a tuple\n"
"of six integer fields (with 32-bit, 16-bit, 16-bit, 8-bit, 8-bit, and\n"
"48-bit values respectively) as an argument named 'fields', or a string\n"
"of 16 bytes (with all the integer fields in big-endian order) as an\n"
"argument named 'bytes', or a string of 16 bytes (with the first three\n"
"fields in little-endian order) as an argument named 'bytes_le', or a\n"
"single 128-bit integer as an argument named 'int'.\n"
"\n"
"UUIDs have these read-only attributes:\n"
"\n"
"    bytes       the UUID as a 16-byte string (containing the six\n"
"                integer fields in big-endian byte order)\n"
"\n"
"    bytes_le    the UUID as a 16-byte string (with time_low, time_mid,\n"
"                and time_hi_version in little-endian byte order)\n"
"\n"
"    fields      a tuple of the six integer fields of the UUID,\n"
"                which are also available as six individual attributes\n"
"                and two derived attributes:\n"
"\n"
"        time_low                the first 32 bits of the UUID\n"
"        time_mid                the next 16 bits of the UUID\n"
"        time_hi_version         the next 16 bits of the UUID\n"
"        clock_seq_hi_variant    the next 8 bits of the UUID\n"
"        clock_seq_low           the next 8 bits of the UUID\n"
"        node                    the last 48 bits of the UUID\n"
"\n"
"        time                    the 60-bit timestamp\n"
"        clock_seq               the 14-bit sequence number\n"
"\n"
"    hex         the UUID as a 32-character hexadecimal string\n"
"\n"
"    int         the UUID as a 128-bit integer\n"
"\n"
"    urn         the UUID as a URN as specified in RFC 4122\n"
"\n"
"    variant     the UUID variant (one of the constants RESERVED_NCS,\n"
"                RFC_4122, RESERVED_MICROSOFT, or RESERVED_FUTURE)\n"
"\n"
"    version     the UUID version number (1 through 5, meaningful only\n"
"                when the variant is RFC_4122)"
msgstr ""

#: mu/modes/api/python3.py:1757
msgid ""
"uuid.bytes() \n"
"bytes(iterable_of_ints) -> bytes\n"
"bytes(string, encoding[, errors]) -> bytes\n"
"bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\n"
"bytes(int) -> bytes object of size given by the parameter initialized with "
"null bytes\n"
"bytes() -> empty bytes object\n"
"\n"
"Construct an immutable array of bytes from:\n"
"  - an iterable yielding integers in range(256)\n"
"  - a text string encoded using the specified encoding\n"
"  - any object implementing the buffer API.\n"
"  - an integer"
msgstr ""

#: mu/modes/api/python3.py:1759
msgid ""
"uuid.ctypes() \n"
"create and manipulate C data types in Python"
msgstr ""

#: mu/modes/api/python3.py:1761
msgid ""
"uuid.getnode() \n"
"Get the hardware address as a 48-bit positive integer.\n"
"\n"
"The first time this runs, it may launch a separate program, which could\n"
"be quite slow.  If all attempts to obtain the hardware address fail, we\n"
"choose a random 48-bit number with its eighth bit set to 1 as recommended\n"
"in RFC 4122."
msgstr ""

#: mu/modes/api/python3.py:1764
msgid ""
"uuid.int() \n"
"int(x=0) -> integer\n"
"int(x, base=10) -> integer\n"
"\n"
"Convert a number or string to an integer, or return 0 if no arguments\n"
"are given.  If x is a number, return x.__int__().  For floating point\n"
"numbers, this truncates towards zero.\n"
"\n"
"If x is not a number or if base is given, then x must be a string,\n"
"bytes, or bytearray instance representing an integer literal in the\n"
"given base.  The literal can be preceded by '+' or '-' and be surrounded\n"
"by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\n"
"Base 0 means to interpret the base from the string as an integer literal.\n"
">>> int('0b100', base=0)\n"
"4"
msgstr ""

#: mu/modes/api/python3.py:1767
msgid ""
"uuid.os() \n"
"OS routines for NT or Posix depending on what system we're on.\n"
"\n"
"This exports:\n"
"  - all functions from posix or nt, e.g. unlink, stat, etc.\n"
"  - os.path is either posixpath or ntpath\n"
"  - os.name is either 'posix' or 'nt'\n"
"  - os.curdir is a string representing the current directory (always '.')\n"
"  - os.pardir is a string representing the parent directory (always '..')\n"
"  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n"
"  - os.extsep is the extension separator (always '.')\n"
"  - os.altsep is the alternate pathname separator (None or '/')\n"
"  - os.pathsep is the component separator used in $PATH etc\n"
"  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r"
"\\n')\n"
"  - os.defpath is the default search path for executables\n"
"  - os.devnull is the file path of the null device ('/dev/null', etc.)\n"
"\n"
"Programs that import and use 'os' stand a better chance of being\n"
"portable between different platforms.  Of course, they must then\n"
"only use functions that are defined by all platforms (e.g., unlink\n"
"and opendir), and leave all pathname manipulation to os.path\n"
"(e.g., split and join)."
msgstr ""

#: mu/modes/api/python3.py:1770
msgid ""
"uuid.sys() \n"
"This module provides access to some objects used or maintained by the\n"
"interpreter and to functions that interact strongly with the interpreter.\n"
"\n"
"Dynamic objects:\n"
"\n"
"argv -- command line arguments; argv[0] is the script pathname if known\n"
"path -- module search path; path[0] is the script directory, else ''\n"
"modules -- dictionary of loaded modules\n"
"\n"
"displayhook -- called to show results in an interactive session\n"
"excepthook -- called to handle any uncaught exception other than SystemExit\n"
"  To customize printing in an interactive session or to install a custom\n"
"  top-level exception handler, assign other functions to replace these.\n"
"\n"
"stdin -- standard input file object; used by input()\n"
"stdout -- standard output file object; used by print()\n"
"stderr -- standard error object; used for error messages\n"
"  By assigning other file objects (or objects that behave like files)\n"
"  to these, it is possible to redirect all of the interpreter's I/O.\n"
"\n"
"last_type -- type of last uncaught exception\n"
"last_value -- value of last uncaught exception\n"
"last_traceback -- traceback of last uncaught exception\n"
"  These three are only available in an interactive session after a\n"
"  traceback has been printed.\n"
"\n"
"Static objects:\n"
"\n"
"builtin_module_names -- tuple of module names built into this interpreter\n"
"copyright -- copyright notice pertaining to this interpreter\n"
"exec_prefix -- prefix used to find the machine-specific Python library\n"
"executable -- absolute path of the executable binary of the Python "
"interpreter\n"
"float_info -- a struct sequence with information about the float "
"implementation.\n"
"float_repr_style -- string indicating the style of repr() output for floats\n"
"hash_info -- a struct sequence with information about the hash algorithm.\n"
"hexversion -- version information encoded as a single integer\n"
"implementation -- Python implementation information.\n"
"int_info -- a struct sequence with information about the int "
"implementation.\n"
"maxsize -- the largest supported length of containers.\n"
"maxunicode -- the value of the largest Unicode code point\n"
"platform -- platform identifier\n"
"prefix -- prefix used to find the Python library\n"
"thread_info -- a struct sequence with information about the thread "
"implementation.\n"
"version -- the version of this interpreter as a string\n"
"version_info -- version information as a named tuple\n"
"__stdin__ -- the original stdin; don't touch!\n"
"__stdout__ -- the original stdout; don't touch!\n"
"__stderr__ -- the original stderr; don't touch!\n"
"__displayhook__ -- the original displayhook; don't touch!\n"
"__excepthook__ -- the original excepthook; don't touch!\n"
"\n"
"Functions:\n"
"\n"
"displayhook() -- print an object to the screen, and save it in builtins._\n"
"excepthook() -- print an exception and its traceback to sys.stderr\n"
"exc_info() -- return thread-safe information about the current exception\n"
"exit() -- exit the interpreter by raising SystemExit\n"
"getdlopenflags() -- returns flags to be used for dlopen() calls\n"
"getprofile() -- get the global profiling function\n"
"getrefcount() -- return the reference count for an object (plus one :-)\n"
"getrecursionlimit() -- return the max recursion depth for the interpreter\n"
"getsizeof() -- return the size of an object in bytes\n"
"gettrace() -- get the global debug tracing function\n"
"setcheckinterval() -- control how often the interpreter checks for events\n"
"setdlopenflags() -- set the flags to be used for dlopen() calls\n"
"setprofile() -- set the global profiling function\n"
"setrecursionlimit() -- set the max recursion depth for the interpreter\n"
"settrace() -- set the global debug tracing function"
msgstr ""

#: mu/modes/api/python3.py:1773
msgid ""
"uuid.uuid1(node=None, clock_seq=None) \n"
"Generate a UUID from a host ID, sequence number, and the current time.\n"
"If 'node' is not given, getnode() is used to obtain the hardware\n"
"address.  If 'clock_seq' is given, it is used as the sequence number;\n"
"otherwise a random 14-bit sequence number is chosen."
msgstr ""

#: mu/modes/api/python3.py:1776
msgid ""
"uuid.uuid3(namespace, name) \n"
"Generate a UUID from the MD5 hash of a namespace UUID and a name."
msgstr ""

#: mu/modes/api/python3.py:1778
msgid ""
"uuid.uuid4() \n"
"Generate a random UUID."
msgstr ""

#: mu/modes/api/python3.py:1780
msgid ""
"uuid.uuid5(namespace, name) \n"
"Generate a UUID from the SHA-1 hash of a namespace UUID and a name."
msgstr ""

#: mu/modes/api/shared.py:25
msgid ""
"find(sub, start, end) \n"
"Return the lowest index in the string where substring 'sub' is found. The "
"optional\n"
"'start' and 'end' arguments specify the slice of string to use.\n"
"Returns -1 if 'sub' cannot be found."
msgstr ""
"find(sub, start, end) \n"
"返回在字符串中查找到子串 'sub' 的最小索引。\n"
"可选的 'start' 和 'end' 参数指定查找子串的范围。\n"
"如果找不到 'sub' 则返回 -1。"

#: mu/modes/api/shared.py:28
msgid ""
"rfind(sub, start, end) \n"
"Return the highest index in the string where substring 'sub' is found. The "
"optional\n"
"'start' and 'end' arguments specify the slice of string to use.\n"
"Returns -1 if 'sub' cannot be found."
msgstr ""
"rfind(sub, start, end) \n"
"返回在字符串中查找到子串 'sub' 的最大索引。\n"
"可选的 'start' 和 'end' 参数指定查找子串的范围。\n"
"如果找不到 'sub' 则返回 -1。"

#: mu/modes/api/shared.py:31
msgid ""
"index(sub, start, end) \n"
"Return the lowest index in the string where substring 'sub' is found. The "
"optional\n"
"'start' and 'end' arguments specify the slice of string to use.\n"
"Raises a ValueError if 'sub' cannot be found."
msgstr ""
"index(sub, start, end) \n"
"返回在字符串中查找到子串 'sub' 的最小索引。\n"
"可选的 'start' 和 'end' 参数指定查找子串的范围。\n"
"如果找不到 'sub' 则触发 ValueError。"

#: mu/modes/api/shared.py:34
msgid ""
"rindex(sub, start, end) \n"
"Return the highest index in the string where substring 'sub' is found. The "
"optional\n"
"'start' and 'end' arguments specify the slice of string to use.\n"
"Raises a ValueError if 'sub' cannot be found."
msgstr ""
"rindex(sub, start, end) \n"
"返回在字符串中查找到子串 'sub' 的最小索引。\n"
"可选的 'start' 和 'end' 参数指定查找子串的范围。\n"
"如果找不到 'sub' 则触发 ValueError。"

#: mu/modes/api/shared.py:37
msgid ""
"join(iterable) \n"
"Return a string which is the concatenation of the strings in 'iterable'.\n"
"The separator between elements is the string providing this method."
msgstr ""
"join(iterable) \n"
"返回一个由 'iterable' 中所有字符串连接在一起的新字符串。\n"
"成员之间用调用该方法的字符串分隔。"

#: mu/modes/api/shared.py:40
msgid ""
"split(sep=None, maxsplit=-1) \n"
"Return a list of the words in a string, using 'sep' as the delimiter "
"string.\n"
"If 'sep' is not provided, the splitting algorithm uses whitespace.\n"
"If the optional 'maxsplit' is provided, splitting will occur 'maxsplit' "
"times."
msgstr ""
"split(sep=None, maxsplit=-1) \n"
"使用 'sep' 作为分隔符把字符串拆分成列表。\n"
"如果未提供 'sep'，则使用空格当作分隔符。\n"
"如果提供了可选的 'maxsplit'，则拆分只进行 'maxsplit' 次。"

#: mu/modes/api/shared.py:43
msgid ""
"rsplit(sep=None, maxsplit=-1) \n"
"Return a list of the words in a string, using 'sep' as the delimiter "
"string.\n"
"If 'sep' is not provided, the splitting algorithm uses whitespace.\n"
"If the optional 'maxsplit' is provided, splitting will only occur "
"'maxsplit'\n"
"times from the right."
msgstr ""
"rsplit(sep=None, maxsplit=-1) \n"
"使用 'sep' 作为分隔符把字符串拆分成列表。\n"
"如果未提供 'sep'，则使用空格当作分隔符。\n"
"如果提供了可选的 'maxsplit'，则拆分只从右侧开始进行 'maxsplit' 次。"

#: mu/modes/api/shared.py:45
msgid ""
"startswith(prefix) \n"
"Returns True if the string starts with 'prefix'."
msgstr ""
"startswith(prefix) \n"
"如果字符串以 'prefix' 开头，则返回True。"

#: mu/modes/api/shared.py:46
msgid ""
"endswith(suffix) \n"
"Returns True if the string ends with 'suffix'."
msgstr ""
"endswith(suffix) \n"
"如果字符串以 'suffix' 结尾，则返回True。"

#: mu/modes/api/shared.py:48
msgid ""
"strip(chars) \n"
"Return a copy of the string with the leading and trailing characters "
"removed.\n"
"The chars argument is a string specifying the set of characters to be "
"removed.\n"
"If omitted or None, the chars argument defaults to removing whitespace.\n"
"The chars argument is not a prefix or suffix; rather, all combinations of "
"its values are stripped"
msgstr ""
"strip(chars) \n"
"返回一个删除了前导和后缀字符的字符串。\n"
"'chars' 参数是一个字符串，指定要删除的内容。\n"
"如果省略或为None，则 'chars' 参数默认为值为空格。\n"
"'chars' 参数不是前缀或后缀；它包含了所有会删除的字符"

#: mu/modes/api/shared.py:51
msgid ""
"lstrip(chars) \n"
"Return a copy of the string with leading characters removed. The chars "
"argument\n"
"is a string specifying the set of characters to be removed.\n"
"If omitted or None, the chars argument defaults to removing whitespace.\n"
"The chars argument is not a prefix; rather, all combinations of its values "
"are\n"
"stripped"
msgstr ""
"lstrip(chars) \n"
"返回一个删除了前导字符的字符串。\n"
"'chars' 参数是一个字符串，指定要删除的内容。\n"
"如果省略或为None，则 'chars' 参数默认为值为空格。\n"
"'chars' 参数不是前缀或后缀；它包含了所有会删除的字符"

#: mu/modes/api/shared.py:54
msgid ""
"rstrip(chars) \n"
"Return a copy of the string with trailing characters removed. The chars "
"argument\n"
"is a string specifying the set of characters to be removed.\n"
"If omitted or None, the chars argument defaults to removing whitespace.\n"
"The chars argument is not a suffix; rather, all combinations of its values "
"are\n"
"stripped"
msgstr ""
"rstrip(chars) \n"
"返回一个删除了后缀字符的字符串。\n"
"'chars' 参数是一个字符串，指定要删除的内容。\n"
"如果省略或为None，则 'chars' 参数默认为值为空格。\n"
"'chars' 参数不是前缀或后缀；它包含了所有会删除的字符"

#: mu/modes/api/shared.py:57
msgid ""
"format(*args, **kwargs) \n"
"Perform a string formatting operation. The string on which this method is "
"called\n"
"can contain literal text or replacement fields delimited by braces {}. Each\n"
"replacement field contains either the numeric index of a positional "
"argument,\n"
"or the name of a keyword argument.\n"
"Returns a copy of the string where each replacement field is replaced with "
"the\n"
"string value of the corresponding argument."
msgstr ""
"format(*args, **kwargs) \n"
"执行字符串格式化操作。\n"
"调用此方法的字符串可以包含字符或用大括号{}分隔的替换字段。\n"
"每个替换字段使用数字索引或关键字。\n"
"返回的字符串中每个替换字段都用相应参数中的字符串替换。"

#: mu/modes/api/shared.py:60
msgid ""
"replace(old, new) \n"
"Return a copy of the string with all othe occurrences of 'old' replaced with "
"'new'."
msgstr ""
"replace(old, new) \n"
"返回字符串的副本，其中所有出现的 'old' 都替换为 'new' 。"

#: mu/modes/api/shared.py:63
msgid ""
"count(sub, start, end) \n"
"Return the number of non-overlapping occurrences of substring 'sub'.\n"
"Optional arguments 'start' and 'end' specify the slice of the string to use. "
msgstr ""
"count(sub, start, end) \n"
"返回子字符串 'sub' 不重叠的出现次数。\n"
"可选参数 'start' 和 'end' 指定统计字符串的范围 "

#: mu/modes/api/shared.py:66
msgid ""
"partition(sep) \n"
"Split the string at the first occurrence of 'sep', and return a 3-tuple "
"containing\n"
"the part before the separator, the separator itself, and the part after the "
"separator.\n"
"If the separator is not found, return a 3-tuple containing the string "
"itself,\n"
"followed by two empty strings."
msgstr ""
"partition(sep) \n"
"使用找到的首个 'sep' 分割字符串，并返回一个三个成员的元组。包含分隔符前的部"
"分，分隔符本身以及分隔符后的部分。\n"
"如果找不到分隔符，返回的元组为字符串本身，和两个空字符串。"

#: mu/modes/api/shared.py:69
msgid ""
"rpartition(sep) \n"
"Split the string at the last occurrence of 'sep', and return a 3-tuple "
"containing\n"
"the part before the separator, the separator itself, and the part after the "
"separator.\n"
"If the separator is not found, return a 3-tuple containing two empty "
"strings,\n"
"followed by the string itself."
msgstr ""
"rpartition(sep) \n"
"使用逆向找到的首个 'sep' 分割字符串，并返回一个三个成员的元组。包含分隔符前的"
"部分，分隔符本身以及分隔符后的部分。\n"
"如果找不到分隔符，返回的元组为字符串本身，和两个空字符串。"

#: mu/modes/api/shared.py:72
msgid ""
"lower() \n"
"Return a copy of the string with all the cased characters converted to "
"lowercase."
msgstr ""
"lower() \n"
"所有字符都转换为小写。"

#: mu/modes/api/shared.py:75
msgid ""
"upper() \n"
"Return a copy of the string with all the cased characters converted to "
"uppercase."
msgstr ""
"upper() \n"
"所有字符都转换为大写。"

#: mu/modes/api/shared.py:78
msgid ""
"isspace() \n"
"Return True if there are only whitespace characters in the string and thers "
"is\n"
"at least one character."
msgstr ""
"isspace() \n"
"如果字符串由一到任意多个空格组成，则返回True。"

#: mu/modes/api/shared.py:81
msgid ""
"isalpha() \n"
"Return True if all the characters in the string are alphabetic and there is\n"
"at least one character."
msgstr ""
"isalpha() \n"
"如果字符串仅由一到做任意多个字母组成，则返回True。"

#: mu/modes/api/shared.py:84
msgid ""
"isdigit() \n"
"Return True if all characters in the string are digits and there is\n"
"at least one character."
msgstr ""
"isdigit() \n"
"如果字符串仅由一到做任意多个数字组成，则返回True。"

#: mu/modes/api/shared.py:87
msgid ""
"isupper() \n"
"Return True if all characters in the string are uppercase and there is\n"
"at least one character."
msgstr ""
"isupper() \n"
"如果字符串不为空并且所有字符都是大写的，则返回True。"

#: mu/modes/api/shared.py:90
msgid ""
"islower() \n"
"Return True if all characters in the string are lowercase and there is\n"
"at least one character."
msgstr ""
"islower() \n"
"如果字符串不为空并且所有字符都是小写的，则返回True。"

#: mu/modes/api/shared.py:93
msgid ""
"abs(x) \n"
"Return the absolute value of the number 'x'."
msgstr ""
"abs(x) \n"
"返回数字 'x' 的绝对值。"

#: mu/modes/api/shared.py:95
msgid ""
"all(iterable) \n"
"Return True if all elements of iterable are true (or iterable is empty)."
msgstr ""
"all(iterable) \n"
"如果迭代器里所有成员都为真值（或迭代器为空），则返回True。"

#: mu/modes/api/shared.py:98
msgid ""
"any(iterable) \n"
"Return True if any element of iterable is true. If iterable is empty, return "
"False."
msgstr ""
"any(iterable) \n"
"如果迭代器里任一个成员为真值，则返回True。如果迭代器为空，则返回False。"

#: mu/modes/api/shared.py:100
msgid ""
"bin(x) \n"
"Convert an integer (whole) number into a binary string."
msgstr ""
"bin(x) \n"
"将整数 'x' 转换为二进制字符串，以 '0b' 作前缀。"

#: mu/modes/api/shared.py:102
msgid ""
"bool(x) \n"
"Return a Boolean value, i.e. one of True or False. The argument 'x' is used "
"to\n"
"generate the resulting truth value."
msgstr ""
"bool(x) \n"
"把 'x' 转换成布尔值，即True或False之一。"

#: mu/modes/api/shared.py:105
msgid ""
"bytearray(seq) \n"
"Return a new array of bytes specified by the sequence 'seq' of integers."
msgstr ""
"bytearray(seq) \n"
"把 'seq' 转换成 bytearray（每个成员都只有单个字节）。"

#: mu/modes/api/shared.py:108
msgid ""
"bytes(seq) \n"
"Return a new 'bytes' object - an immutable sequence of 'seq' integers."
msgstr ""
"bytes(seq) \n"
"返回 'seq' 个元素的 byte 串。"

#: mu/modes/api/shared.py:111
msgid ""
"callable(object) \n"
"Return True if the 'object' appears to be callable. Otherwise return False."
msgstr ""
"callable(object) \n"
"如果 'object' 可调用，则返回True。否则返回False。"

#: mu/modes/api/shared.py:114
msgid ""
"chr(i) \n"
"Return a string representing a character whose Unicode code point is the "
"integer 'i'."
msgstr ""
"chr(i) \n"
"返回一个 Unicode 为 'i' 的字符。"

#: mu/modes/api/shared.py:117
msgid ""
"classmethod(function) \n"
"Return a class method for a function. Usually used as a decorator:\n"
"\n"
"class C:\n"
"  @classmethod\n"
"  def func(cls): ..."
msgstr ""
"classmethod(function) \n"
"返回函数的类方法。通常用作装饰器：\n"
"\n"
"class C:\n"
"  @classmethod\n"
"  def func(cls): ..."

#: mu/modes/api/shared.py:119
msgid ""
"dict(): \n"
"Create a new dictionary object."
msgstr ""
"dict(): \n"
"创建一个新的字典对象。"

#: mu/modes/api/shared.py:121
msgid ""
"dir(object) \n"
"Return a list of names in the scope of 'object'. If no object is supplied,\n"
"returns a ist of names in the current local scope."
msgstr ""
"dir(object) \n"
"返回 'object' 的属性列表。如果没有提供 'object' 则返回self的属性列表。"

#: mu/modes/api/shared.py:124
msgid ""
"divmod(a, b) \n"
"Take two (non complex) numbers and return a pair of numbers consisting of "
"the quotient and remainder. For example, divmod(5, 4) results in (1, 1). "
"That is, what's is 5 divided by 4? It's 1 remainder 1."
msgstr ""
"divmod(a, b) \n"
"返回 'a' 除以 'b' 的商和余数。例如，divmod(5, 4) 得到 (1, 1)。即5除以4为1余"
"1。"

#: mu/modes/api/shared.py:127
msgid ""
"enumerate(iterable, start=0) \n"
"Return an enumerate object from an iterable object.\n"
"Each iteration of the resulting object returns a tuple containing a count "
"and the value. For example:\n"
"\n"
"seasons = ['Spring', 'Summer', 'Autumn', 'Winter']\n"
"list(enumerate(seasons))\n"
"[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]"
msgstr ""
"enumerate(iterable, start=0) \n"
"从迭代器生成一个枚举对象。\n"
"每个枚举成员都包含索引和迭代器里的值。例如：\n"
"\n"
"seasons = ['Spring', 'Summer', 'Autumn', 'Winter']\n"
"list(enumerate(seasons))\n"
"[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]"

#: mu/modes/api/shared.py:130
msgid ""
"eval(expression, globals=None, locals=None) \n"
"The 'expression' string containing a Python expression is parsed and "
"evaluated given\n"
"the context specified by 'globals' and 'locals' which must be dictionary "
"objects."
msgstr ""
"eval(expression, globals=None, locals=None) \n"
"解释并执行 Python表达式 'expression'。可以通过（字典类型）'globals' 和 "
"'locals' 指定上下文。"

#: mu/modes/api/shared.py:133
msgid ""
"exec(object, globals, locals) \n"
"This function supports dynamic execution of Python code. The 'object' must "
"be\n"
"a string containing Python code that can be parsed and evaluated. If "
"`globals` and\n"
"`locals` are emitted the code is executed in the local scope. Otherwise, "
"both\n"
"'globals' and 'locals' must be dictionary objects."
msgstr ""
"exec(object, globals, locals) \n"
"动态执行Python代码。\n"
"'object' 必须是包含可以解释和执行的Python代码字符串。可以通过（字典类"
"型）'globals' 和 'locals' 指定上下文。"

#: mu/modes/api/shared.py:136
msgid ""
"filter(function, iterable) \n"
"Construct an iterator from those elements of 'iterable' for which 'function' "
"returns True."
msgstr ""
"filter(function, iterable) \n"
"使用 'function' 来过滤 'iterable'，返回代入 'function' 后得到True的成员。"

#: mu/modes/api/shared.py:139
msgid ""
"float(x) \n"
"Return a floating point number constructed from a number or string 'x'."
msgstr ""
"float(x) \n"
"把 'x' 转换成浮点数。"

#: mu/modes/api/shared.py:142
msgid ""
"frozenset(iterable) \n"
"Return a new frozenset object, optionally with elements taken from "
"'iterable'."
msgstr ""
"frozenset(iterable) \n"
"从 'iterable' 生成不可变集合。"

#: mu/modes/api/shared.py:145
msgid ""
"getattr(object, name, default) \n"
"Return the value fo the named attribute of 'object'. 'name' must be a "
"string.\n"
"Optionally return 'default' if 'name' is not an attribute of 'object'."
msgstr ""
"getattr(object, name, default) \n"
"返回 'object' 的 'name' 属性的值。 'name' 必须是字符串。\n"
"如果 'name' 不是 'object' 的属性，则返回 'default'（可选） 。"

#: mu/modes/api/shared.py:148
msgid ""
"globals() \n"
"Return a dictionary representing the current global symbol table.\n"
"I.e. named objects that are currently in the global scope."
msgstr ""
"globals() \n"
"返回全局对象字典。即全局作用域下所有的对象。"

#: mu/modes/api/shared.py:151
msgid ""
"hasattr(object, name) \n"
"Returns True if the 'object' has an attribute called 'name'. 'name' must be "
"a string."
msgstr ""
"hasattr(object, name) \n"
"如果 'object' 有名为 'name' 的属性，则返回True。 'name' 必须是字符串。"

#: mu/modes/api/shared.py:154
msgid ""
"hash(object) \n"
"Return a hash value of the object (if it has one). Hash values are integers."
msgstr ""
"hash(object) \n"
"返回对象的哈希值（如果有）。哈希值是整数。"

#: mu/modes/api/shared.py:157
msgid ""
"help(object) \n"
"Invoke the built-in help system (intended for interactive use in the REPL."
msgstr ""
"help(object) \n"
"调用内置的帮助系统（用于REPL中的交互使用）。"

#: mu/modes/api/shared.py:160
msgid ""
"hex(x) \n"
"Convert an integer 'x' to a lowercase hexadevimal string prefixed with '0x'. "
"For example, hex(255) returns '0xff'."
msgstr ""
"hex(x) \n"
"将整数转换为十六进制字符串，以 '0x' 作前缀。"

#: mu/modes/api/shared.py:163
msgid ""
"id(object) \n"
"Return the identity of an object. This is an integer that is guaranteed to "
"be unique."
msgstr ""
"id(object) \n"
"返回对象的标识。是一个确保唯一的整数。"

#: mu/modes/api/shared.py:166
msgid ""
"int(x, base=10) \n"
"Return an integer constructed from a number or string 'x'. The optional "
"'base' (indicating the base of the number) defaults to 10."
msgstr ""
"int(x, base=10) \n"
"把 'x' 转成整数。可选的 'base' 表示 'x' 是多少进制数。"

#: mu/modes/api/shared.py:169
msgid ""
"isinstance(object, classinfo) \n"
"Return True if the 'object' is an instance of 'classinfo'."
msgstr ""
"isinstance(object, classinfo) \n"
"如果 'object' 是 'classinfo' 的实例，则返回True。"

#: mu/modes/api/shared.py:172
msgid ""
"issubclass(class, classinfo) \n"
"Return True if the 'class' is a subclass (direct, indirect or virtual) of "
"'classinfo'."
msgstr ""
"issubclass(class, classinfo) \n"
"如果 'class' 是 'classinfo' 的子类（直接，间接或虚拟），则返回True。"

#: mu/modes/api/shared.py:175
msgid ""
"iter(object) \n"
"Return an iterator object for the 'object' (that must support the iteration "
"protocol."
msgstr ""
"iter(object) \n"
"从 'object' 生成一个迭代器（必须支持迭代）。"

#: mu/modes/api/shared.py:177
msgid ""
"len(object) \n"
"Return the length (the number of items) in an 'object'."
msgstr ""
"len(object) \n"
"返回 'object' 的长度（成员数）。"

#: mu/modes/api/shared.py:179
msgid ""
"list(iterable) \n"
"Return a list, optionally based upon the members of 'iterable'."
msgstr ""
"list(iterable) \n"
"从 'iterable' 生成列表。"

#: mu/modes/api/shared.py:182
msgid ""
"locals() \n"
"Return a dictionary representing the current local symbol table. I.e. named "
"objects\n"
"that are currently in the local scope."
msgstr ""
"locals() \n"
"返回当前作用域对象字典。即当前作用域下所有的对象。"

#: mu/modes/api/shared.py:185
msgid ""
"map(function, iterable) \n"
"Return an iterator that applies 'function' to every item of 'iterable', "
"yielding the results."
msgstr ""
"map(function, iterable) \n"
"使用 'function' 来重新生成 'iterable'，由每个成员代入 'function' 后得到的返回"
"值组成。"

#: mu/modes/api/shared.py:188
msgid ""
"max(items) \n"
"Return the largest item in 'items', which can be either an iterable or two "
"or more arguments."
msgstr ""
"max(items) \n"
"返回 'items' 中最大的成员，'items' 可以是迭代器，也可以是两个或更多个参数。"

#: mu/modes/api/shared.py:191
msgid ""
"min(items) \n"
"Return the smallest item in 'items', which can be either an iterable or two "
"or more arguments."
msgstr ""
"min(items) \n"
"返回 'items' 中最小的成员，'items' 可以是迭代器，也可以是两个或更多个参数。"

#: mu/modes/api/shared.py:193
msgid ""
"next(iterator) \n"
"Retrieve the next item from the iterator."
msgstr ""
"next(iterator) \n"
"返回迭代器的下一个成员。"

#: mu/modes/api/shared.py:194
msgid ""
"object() \n"
"Return a new featureless object."
msgstr ""
"object() \n"
"返回一个空对象。"

#: mu/modes/api/shared.py:195
msgid ""
"oct(x) \n"
"Convert an integer number to an octal (base 8) string."
msgstr ""
"oct(x) \n"
"将整数转换为八进制字符串，以 '0o' 作前缀。"

#: mu/modes/api/shared.py:197
msgid ""
"open(file, mode='rt') \n"
"Open 'file' and return a corresponding file object. The 'mode' is an "
"optional\n"
"string that specifies how the file is opened:\n"
"'r' - open for reading\n"
"'w' - open for writing\n"
"'b' - binary mode\n"
"'t' - text mode."
msgstr ""
"open(file, mode='rt') \n"
"打开 'file' 文件并返回句柄对象。 'mode' 是可选的，用于指定访问模式：\n"
"'r' - 只读\n"
"'w' - 只写\n"
"'b' - 二进制模式\n"
"'t' - 文本模式。"

#: mu/modes/api/shared.py:200
msgid ""
"ord(c) \n"
"Given a string representing one Unicode character, return an integer "
"representing the Unicode code point of that character."
msgstr ""
"ord(c) \n"
"返回字符 'c' 的 Unicode。"

#: mu/modes/api/shared.py:203
msgid ""
"pow(x, y, z) \n"
"Return 'x' to the power of 'y'. If the optional 'z' is given, return 'x' to "
"the power of 'y' modulo 'z' (giving the remainder)."
msgstr ""
"pow(x, y, z) \n"
"返回 'x' 的 'y' 次幂。如果给出了可选的 'z'，则返回 'x' 的 'y' 次幂除以 'z' 后"
"的余数。"

#: mu/modes/api/shared.py:206
msgid ""
"print(*objects, sep=' ', end='\\n') \n"
"Print objects, separated by 'sep' and followed by 'end'.\n"
"All non-keyword arguments are converted to strings."
msgstr ""
"print(*objects, sep=' ', end='\\n') \n"
"打印对象，以 'sep' 分隔，后跟 'end' 。除 'sep', 'end' 外的其它参数都将转换为"
"字符串。"

#: mu/modes/api/shared.py:209
msgid ""
"range(start, stop, step) \n"
"Return an immutable sequence containing items between 'start' and 'stop' "
"with 'step' difference between them."
msgstr ""
"range(start, stop, step) \n"
"返回一个序列，从 'start' 开始到 'stop' 结束，间隔 'step'。例如：\n"
"range(5) #0, 1, 2, 3, 4\n"
"range(1, 9, 3)  #1, 4, 7 ."

#: mu/modes/api/shared.py:212
msgid ""
"repr(object) \n"
"Return a string containing a printable representation of an 'object'."
msgstr ""
"repr(object) \n"
"将对象转化为可以被解释器读取的字串。"

#: mu/modes/api/shared.py:214
msgid ""
"reversed(seq) \n"
"Return a reverse iterator of the sequence 'seq'."
msgstr ""
"reversed(seq) \n"
"返回序列 'seq' 逆序后生成的迭代器。"

#: mu/modes/api/shared.py:216
msgid ""
"round(number, ndigits) \n"
"Return the floating point 'number' rounded to the (optional) 'ndigits'.\n"
"If 'ndigits' is omitted, round to the nearest whole number."
msgstr ""
"round(number, ndigits) \n"
"返回把 'number' 四舍五入到某一位（可选 'ndigits'）的浮点数 。\n"
"如果省略 'ndigits'，则四舍五入到整数。"

#: mu/modes/api/shared.py:219
msgid ""
"set(iterable) \n"
"Return a new set object, optionally containing elements taken from iterable."
msgstr ""
"set(iterable) \n"
"返回用迭代器的成员生成的集合。"

#: mu/modes/api/shared.py:222
msgid ""
"setattr(object, name, value) \n"
"Set the 'value' to the attribute called 'name' on object 'object'. 'name' "
"must be a string."
msgstr ""
"setattr(object, name, value) \n"
"将对象 'object' 上名为 'name' 的属性值设置为 'value'。 'name' 必须是字符串。"

#: mu/modes/api/shared.py:225
msgid ""
"sorted(iterable, key, reverse) \n"
"Return a new sorted list from the items in iterable. The optional 'key' "
"specifies\n"
"a function used for comparison and the optional 'reverse' is a boolean "
"indicating the comparison should be reversed."
msgstr ""
"sorted(iterable, key, reverse) \n"
"返回一个排序后的 'iterable' 列表。\n"
"可选的 'key' 指定了用于比较的函数，可选的 'reverse' 是一个布尔值，表示是否倒"
"序。"

#: mu/modes/api/shared.py:228
msgid ""
"staticmethod(function) \n"
"Returns a static method for a function. Usually used as a decorator:\n"
"\n"
"class C:\n"
"  @staticmethod\n"
"def func(): ..."
msgstr ""
"staticmethod(function) \n"
"返回函数的静态方法。通常用作装饰器：\n"
"\n"
"class C:\n"
"  @staticmethod\n"
"def func(): ..."

#: mu/modes/api/shared.py:230
msgid ""
"str(object) \n"
"Return a string version of 'object'."
msgstr ""
"str(object) \n"
"返回'object'v的字符串副本。"

#: mu/modes/api/shared.py:232
msgid ""
"sum(iterable, start=0) \n"
"Sums 'start' and items of an iterable from left to right and returns the "
"total."
msgstr ""
"sum(iterable, start=0) \n"
"从 'start' 开始对 'iterable' 里的成员进行求和并返回。"

#: mu/modes/api/shared.py:235
msgid ""
"super(type, object-or-type) \n"
"Return a proxy object that delegates method calls to a parent or sibling "
"class\n"
"of 'type'. This is useful for accessing inherited methods that have been\n"
"overridden in a class."
msgstr ""
"super(type, object-or-type) \n"
"返回 'type' 的父级或同级类的委托方法代理。\n"
"这个方法用来调用已在类里重写的继承方法。"

#: mu/modes/api/shared.py:238
msgid ""
"tuple(iterable) \n"
"Return an immutable sequence based upon the items in 'iterable'."
msgstr ""
"tuple(iterable) \n"
"根据 'iterable' 中的成员返回一个元组。"

#: mu/modes/api/shared.py:241
msgid ""
"type(object) \n"
"Return the type of an object (i.e. what sort of thing it is)."
msgstr ""
"type(object) \n"
"返回 'object' 的类型（即 'object' 是什么东西）。"

#: mu/modes/api/shared.py:244
msgid ""
"zip(*iterables) \n"
"Make an iterator that aggregates elements from each of the passed in "
"iterables.\n"
"For example:\n"
"x = [1, 2, 3]\n"
"y = [4, 5, 6]\n"
"list(zip(x, y))\n"
"[(1, 4), (2, 5), (3, 6)]"
msgstr ""
"zip(*iterables) \n"
"创建一个迭代器，整合了传入的可迭代对象中的元素。\n"
"例如：\n"
"x = [1, 2, 3]\n"
"y = [4, 5, 6]\n"
"list(zip(x, y))\n"
"[(1, 4), (2, 5), (3, 6)]"

#: mu/modes/base.py:220
msgid "Data Flood Detected!"
msgstr "检测到数据泛滥！"

#: mu/modes/base.py:222
msgid ""
"The plotter is flooded with data which will make Mu unresponsive and freeze. "
"As a safeguard, the plotter has been stopped.\n"
"\n"
"Flooding is when chunks of data of more than 1024 bytes are repeatedly sent "
"to the plotter.\n"
"\n"
"To fix this, make sure your code prints small tuples of data between calls "
"to 'sleep' for a very short period of time."
msgstr ""
"绘图器已经数据泛滥，这将使 Mu 无响应并卡死。作为一种保护措施，绘图器已经停"
"止。\n"
"\n"
"泛滥是指不停的发送超过 1024 字节的大量数据到绘图器。\n"
"\n"
"要解决此问题，请确保您的代码在打印小的元组(tuple)数据的间隔中，调用非常短时间"
"的“sleep”函数。"

#: mu/modes/base.py:333 mu/modes/base.py:376
msgid ""
"Click on the device's reset button, wait a few seconds and then try again."
msgstr "按一下设备的重置(reset)按钮，等待几秒钟，然后重试。"

#: mu/modes/base.py:340 mu/modes/base.py:383
msgid "Could not find an attached device."
msgstr "找不到已连接的设备。"

#: mu/modes/base.py:342
msgid ""
"Please make sure the device is plugged into this computer.\n"
"\n"
"It must have a version of MicroPython (or CircuitPython) flashed onto it "
"before the REPL will work.\n"
"\n"
"Finally, press the device's reset button and wait a few seconds before "
"trying again."
msgstr ""
"请确保已将设备插入这台电脑。\n"
"\n"
"在 REPL 工作之前，设备必须有一个 MicroPython 或 CircuitPython 版本的固件已经"
"刷入。\n"
"\n"
"最后，按一下设备的重置(reset)按钮并等待几秒钟后再重试。"

#: mu/modes/base.py:385
msgid ""
"Please make sure the device is plugged into this computer.\n"
"\n"
"It must have a version of MicroPython (or CircuitPython) flashed onto it "
"before the Plotter will work.\n"
"\n"
"Finally, press the device's reset button and wait a few seconds before "
"trying again."
msgstr ""
"请确保已将设备插入这台电脑。\n"
"\n"
"在绘图器工作之前，设备必须有一个 MicroPython 或 CircuitPython 版本的固件已经"
"刷入。\n"
"\n"
"最后，按一下设备的重置(reset)按钮并等待几秒钟后再重试。"

#: mu/modes/debugger.py:35
msgid "Graphical Debugger"
msgstr "图形化调试器"

#: mu/modes/debugger.py:36
msgid "Debug your Python 3 code."
msgstr "调试你的 Python 3 代码。"

#: mu/modes/debugger.py:50 mu/modes/pygamezero.py:121 mu/modes/python3.py:178
#: mu/modes/web.py:135
msgid "Stop"
msgstr "停止"

#: mu/modes/debugger.py:51
msgid "Stop the running code."
msgstr "停止运行代码。"

#: mu/modes/debugger.py:57
msgid "Continue"
msgstr "继续"

#: mu/modes/debugger.py:58
msgid "Continue to run your Python script."
msgstr "继续运行你的 Python 脚本。"

#: mu/modes/debugger.py:64
msgid "Step Over"
msgstr "步进"

#: mu/modes/debugger.py:65
msgid "Step over a line of code."
msgstr "步进一行代码。"

#: mu/modes/debugger.py:71
msgid "Step In"
msgstr "步入"

#: mu/modes/debugger.py:72
msgid "Step into a function."
msgstr "步入一个函数。"

#: mu/modes/debugger.py:78
msgid "Step Out"
msgstr "步出"

#: mu/modes/debugger.py:79
msgid "Step out of a function."
msgstr "步出一个函数。"

#: mu/modes/debugger.py:156
msgid "Your script has finished running."
msgstr "您的脚本已完成运行。"

#: mu/modes/debugger.py:224
msgid ""
"Unable to connect to the Python debugger.\n"
"\n"
msgstr ""
"无法连接到 Python 调试器。\n"
"\n"

#: mu/modes/debugger.py:312
msgid "Debugger info: {}"
msgstr "调试器信息：{}"

#: mu/modes/debugger.py:319
msgid "Debugger warning: {}"
msgstr "调试器警告：{}"

#: mu/modes/debugger.py:327
msgid "Debugger error: {}"
msgstr "调试器错误：{}"

#: mu/modes/microbit.py:87
msgid "BBC micro:bit"
msgstr "BBC micro:bit"

#: mu/modes/microbit.py:88
msgid "Write MicroPython for the BBC micro:bit."
msgstr "为 BBC micro:bit 编写 MicroPython。"

#: mu/modes/microbit.py:109
msgid "Flash"
msgstr "刷入"

#: mu/modes/microbit.py:110
msgid "Flash your code onto the micro:bit."
msgstr "将代码刷入到 micro:bit 上。"

#: mu/modes/esp.py:68 mu/modes/microbit.py:116
msgid "Files"
msgstr "文件"

#: mu/modes/microbit.py:117
msgid "Access the file system on the micro:bit."
msgstr "访问 micro:bit 上的文件系统。"

#: mu/modes/esp.py:75 mu/modes/microbit.py:123 mu/modes/python3.py:135
msgid "REPL"
msgstr "REPL"

#: mu/modes/microbit.py:125
msgid "Use the REPL to live-code on the micro:bit."
msgstr "使用 REPL 在 micro:bit 上实时编写代码。"

#: mu/modes/microbit.py:178
msgid "Unable to flash \"{}\""
msgstr "无法刷入“{}”"

#: mu/modes/microbit.py:188
msgid "Problem with script"
msgstr "脚本问题"

#: mu/modes/microbit.py:189
msgid "{} [{}:{}]"
msgstr "{} [{}:{}]"

#: mu/modes/microbit.py:203
msgid "Our minifier tried but your script is too long!"
msgstr "我们的简化器尝试过了，但你的脚本实在太长！"

#: mu/modes/microbit.py:209
msgid "Your script is too long and the minifier isn't available"
msgstr "您的脚本太长，简化器不可用"

#: mu/modes/microbit.py:215
msgid "Your script is too long!"
msgstr "你的脚本太长了！"

#: mu/modes/microbit.py:302
msgid "Flashing \"{}\" onto the micro:bit."
msgstr "正在将“{}”刷入到 micro:bit。"

#: mu/modes/microbit.py:304
msgid " Runtime: {}"
msgstr " 运行时：{}"

#: mu/modes/microbit.py:352
msgid "Unsupported BBC micro:bit."
msgstr "不支持的 BBC micro:bit。"

#: mu/modes/microbit.py:354
msgid ""
"Your device is newer than this version of Mu. Please update Mu to the latest "
"version to support this device.\n"
"\n"
"https://codewith.mu/"
msgstr ""
"您的设备比此版本的 Mu 更新。 请将 Mu 更新到最新版本以支持此设备。\n"
"\n"
"https://codewith.mu/"

#: mu/modes/microbit.py:412 mu/modes/microbit.py:559
msgid "Could not find an attached BBC micro:bit."
msgstr "找不到已连接的 BBC micro:bit。"

#: mu/modes/microbit.py:414
msgid ""
"Please ensure you leave enough time for the BBC micro:bit to be attached and "
"configured correctly by your computer. This may take several seconds. "
"Alternatively, try removing and re-attaching the device or saving your work "
"and restarting Mu if the device remains unfound."
msgstr ""
"请确保您留出了足够的时间让您的计算机正确连接和配置 BBC micro:bit 设备。这可能"
"需要几秒钟的时间。 或者您可以尝试保存文件并重新连接设备，如果仍未发现设备，您"
"还可以尝试重新启动 Mu。"

#: mu/modes/microbit.py:429
msgid "Finished flashing."
msgstr "刷入完成。"

#: mu/modes/microbit.py:461
msgid "Copied code onto micro:bit."
msgstr "已将代码复制到 micro:bit。"

#: mu/modes/microbit.py:470
msgid "There was a problem flashing the micro:bit."
msgstr "刷入程序到 micro:bit 时出现了一个问题。"

#: mu/modes/microbit.py:472
msgid ""
"Please do not disconnect the device until flashing has completed. Please "
"check the logs for more information."
msgstr "在刷入完成之前，请不要断开设备。 请查看日志以获取更多信息。"

#: mu/modes/esp.py:114 mu/modes/microbit.py:494
msgid "REPL and file system cannot work at the same time."
msgstr "REPL和文件系统不能同时工作。"

#: mu/modes/esp.py:116 mu/modes/microbit.py:496
msgid ""
"The REPL and file system both use the same USB serial connection. Only one "
"can be active at any time. Toggle the file system off and try again."
msgstr ""
"REPL和文件系统都使用相同的USB串口通讯。任何时候只能使用其中一个功能。请关闭文"
"件系统，然后重试。"

#: mu/modes/esp.py:135 mu/modes/microbit.py:515
msgid "The plotter and file system cannot work at the same time."
msgstr "绘图器和文件系统无法同时工作。"

#: mu/modes/esp.py:138 mu/modes/microbit.py:518
msgid ""
"The plotter and file system both use the same USB serial connection. Only "
"one can be active at any time. Toggle the file system off and try again."
msgstr ""
"绘图器和文件系统都使用相同的USB串口通讯。任何时候只能使用其中一个功能。请关闭"
"文件系统，然后重试。"

#: mu/modes/esp.py:186 mu/modes/microbit.py:532
msgid "File system cannot work at the same time as the REPL or plotter."
msgstr "文件系统无法与REPL或绘图器同时工作。"

#: mu/modes/esp.py:190 mu/modes/microbit.py:536
msgid ""
"The file system and the REPL and plotter use the same USB serial connection. "
"Toggle the REPL and plotter off and try again."
msgstr ""
"文件系统、REPL、绘图器使用相同的USB串口通讯。 请关闭REPL和绘图器，然后重试。"

#: mu/modes/esp.py:218 mu/modes/microbit.py:561
msgid ""
"Please make sure the device is plugged into this computer.\n"
"\n"
"The device must have MicroPython flashed onto it before the file system will "
"work.\n"
"\n"
"Finally, press the device's reset button and wait a few seconds before "
"trying again."
msgstr ""
"请确保已将设备插入此计算机。\n"
"\n"
"在文件系统工作之前，设备必须已刷入MicroPython。\n"
"\n"
"最后，按设备的复位(reset)按钮并等待几秒钟后再重试。"

#: mu/modes/pygamezero.py:34
msgid "Pygame Zero"
msgstr "Pygame Zero"

#: mu/modes/pygamezero.py:35
msgid "Make games with Pygame Zero."
msgstr "用 Pygame Zero 做游戏。"

#: mu/modes/pygamezero.py:63 mu/modes/pygamezero.py:113
msgid "Play"
msgstr "开始"

#: mu/modes/pygamezero.py:64 mu/modes/pygamezero.py:114
msgid "Play your Pygame Zero game."
msgstr "开始你的 Pygame Zero 游戏。"

#: mu/modes/pygamezero.py:70 mu/modes/web.py:102
msgid "Images"
msgstr "图片"

#: mu/modes/pygamezero.py:71
msgid "Show the images used by Pygame Zero."
msgstr "显示 Pygame Zero 使用的图片。"

#: mu/modes/pygamezero.py:77
msgid "Fonts"
msgstr "字体"

#: mu/modes/pygamezero.py:78
msgid "Show the fonts used by Pygame Zero."
msgstr "显示 Pygame Zero 使用的字体。"

#: mu/modes/pygamezero.py:84
msgid "Sounds"
msgstr "音效"

#: mu/modes/pygamezero.py:85
msgid "Show the sounds used by Pygame Zero."
msgstr "显示 Pygame Zero 使用的音效。"

#: mu/modes/pygamezero.py:91
msgid "Music"
msgstr "音乐"

#: mu/modes/pygamezero.py:92
msgid "Show the music used by Pygame Zero."
msgstr "显示 Pygame Zero 使用的音乐。"

#: mu/modes/pygamezero.py:122
msgid "Stop your Pygame Zero game."
msgstr "停止你的 Pygame Zero 游戏。"

#: mu/modes/python3.py:105
msgid "Python 3"
msgstr "Python 3"

#: mu/modes/python3.py:106
msgid "Create code using standard Python 3."
msgstr "使用标准 Python 3 编写代码。"

#: mu/modes/esp.py:58 mu/modes/python3.py:121 mu/modes/python3.py:170
#: mu/modes/web.py:74 mu/modes/web.py:127
msgid "Run"
msgstr "运行"

#: mu/modes/python3.py:122 mu/modes/python3.py:171
msgid "Run your Python script."
msgstr "运行你的 Python 脚本。"

#: mu/modes/python3.py:128
msgid "Debug"
msgstr "调试"

#: mu/modes/python3.py:129
msgid "Debug your Python script."
msgstr "调试你的 Python 脚本。"

#: mu/modes/python3.py:136
msgid "Use the REPL for live coding."
msgstr "用 REPL 进行实时编程。"

#: mu/modes/python3.py:147
msgid "Plot data from your script or the REPL."
msgstr "从你的脚本或 REPL 的绘制数据。"

#: mu/modes/python3.py:179
msgid "Stop your Python script."
msgstr "停止你的 Python 脚本。"

#: mu/modes/python3.py:238
msgid "Starting iPython REPL."
msgstr "正在启动 iPython REPL。"

#: mu/modes/python3.py:244
msgid "Stopping iPython REPL (this may take a short amount of time)."
msgstr "正在停止 iPython REPL （可能需要一点点时间）。"

#: mu/modes/python3.py:333
msgid "REPL started."
msgstr "REPL 已启动。"

#: mu/modes/python3.py:342
msgid "REPL stopped."
msgstr "REPL 已停止。"

#: mu/interface/dialogs.py:214
msgid ""
"The packages shown below will be available to import in Python 3 mode. "
"Delete a package from the list to remove its availability.\n"
"\n"
"Each separate package name should be on a new line. Packages are installed "
"from PyPI (see: https://pypi.org/)."
msgstr ""

#: mu/interface/dialogs.py:265
msgid "Third Party Packages"
msgstr ""

#: mu/interface/dialogs.py:361
msgid "Third Party Package Status"
msgstr ""

#: mu/interface/main.py:155
msgid "Tidy"
msgstr ""

#: mu/interface/main.py:156
msgid "Tidy up the layout of your code."
msgstr ""

#: mu/interface/main.py:263
msgid "Close file"
msgstr ""

#: mu/interface/main.py:559
msgid "Filesystem on "
msgstr ""

#: mu/interface/panes.py:548
msgid "Files on your device:"
msgstr ""

#: mu/interface/panes.py:623
msgid ""
"There was a problem getting the list of files on the device. Please check "
"Mu's logs for technical information. Alternatively, try unplugging/plugging-"
"in your device and/or restarting Mu."
msgstr ""

#: mu/interface/panes.py:638
msgid ""
"There was a problem copying the file '{}' onto the device. Please check Mu's "
"logs for more information."
msgstr ""

#: mu/interface/panes.py:650
msgid ""
"There was a problem deleting '{}' from the device. Please check Mu's logs "
"for more information."
msgstr ""

#: mu/interface/panes.py:662
msgid ""
"There was a problem getting '{}' from the device. Please check Mu's logs for "
"more information."
msgstr ""

#: mu/logic.py:1631
msgid "Successfully cleaned the code. Use CTRL-Z to undo."
msgstr ""

#: mu/logic.py:1637
msgid "Your code contains problems."
msgstr ""

#: mu/logic.py:1639
msgid ""
"These must be fixed before tidying will work. Please use the 'Check' button "
"to highlight these problems."
msgstr ""

#: mu/modes/api/esp.py:52
msgid ""
"os.getcwd() \n"
"Return current working directory"
msgstr ""

#: mu/modes/api/esp.py:53
msgid ""
"os.chdir(path) \n"
"Change current working directory"
msgstr ""

#: mu/modes/api/esp.py:54
msgid ""
"os.mkdir(path) \n"
"Make new directory"
msgstr ""

#: mu/modes/api/esp.py:55
msgid ""
"os.rmdir(path) \n"
"Remove directory"
msgstr ""

#: mu/modes/api/esp.py:57
msgid ""
"os.listdir(path='.') \n"
"Return list of directory. Defaults to current working directory."
msgstr ""

#: mu/modes/api/esp.py:60
msgid ""
"sys.version \n"
"Return Python version as a string "
msgstr ""

#: mu/modes/api/esp.py:61
msgid ""
"sys.version_info \n"
"Return Python version as a tuple"
msgstr ""

#: mu/modes/api/esp.py:62
msgid ""
"sys.implementation \n"
"Return MicroPython version"
msgstr ""

#: mu/modes/api/esp.py:64
msgid ""
"sys.platform \n"
"Return hardware platform as string, e.g. 'esp8266' or 'esp32'"
msgstr ""

#: mu/modes/api/esp.py:67
msgid ""
"sys.byteorder \n"
"Return platform endianness. 'little' for least-significant byte first or "
"'big' for most-significant byte first."
msgstr ""

#: mu/modes/api/esp.py:74
msgid ""
"machine.reset() \n"
"Resets the device in a manner similar to pushing the external RESET button"
msgstr ""

#: mu/modes/api/esp.py:76
msgid ""
"machine.freq() \n"
"Returns CPU frequency in hertz."
msgstr ""

#: mu/modes/api/esp.py:78
msgid ""
"machine.Pin(id [, mode, pull])\n"
"Create a Pin-object. Only id is mandatory.\n"
"mode (optional): specifies the pin mode (Pin.OUT or Pin.IN)\n"
"pull (optional): specifies if the pin has a pull resistor attached \n"
"  pull can be one of: None, Pin.PULL_UP or Pin.PULL_DOWN."
msgstr ""

#: mu/modes/api/esp.py:84
msgid ""
"machine.Pin.value([x])\n"
" This method allows to set and get the\n"
"value of the pin, depending on whether the argument x is supplied or not.\n"
"If the argument is omitted, the method returns the actual input value (0 or "
"1) on the pin.\n"
"If the argument is supplied, the method sets the output to the given value."
msgstr ""

#: mu/modes/api/esp.py:89
msgid "machine.Pin.OUT"
msgstr ""

#: mu/modes/api/esp.py:90
msgid "machine.Pin.IN"
msgstr ""

#: mu/modes/api/esp.py:91
msgid "machine.Pin.PULL_UP"
msgstr ""

#: mu/modes/api/esp.py:92
msgid "machine.Pin.PULL_DOWN"
msgstr ""

#: mu/modes/api/esp.py:94
msgid ""
"machine.ADC(pin)\n"
"Create an ADC object associated with the given pin. \n"
"This allows you to then read analog values on that pin.\n"
"machine.ADC(machine.Pin(39))"
msgstr ""

#: mu/modes/api/esp.py:100
msgid ""
"machine.ADC.read() \n"
"Read the analog pin value.\n"
"\n"
"adc = machine.ADC(machine.Pin(39))\n"
"value = adc.read()"
msgstr ""

#: mu/modes/api/esp.py:103
msgid ""
"time.sleep(seconds) \n"
"Sleep the given number of seconds."
msgstr ""

#: mu/modes/api/esp.py:104
msgid ""
"time.sleep_ms(milliseconds) \n"
"Sleep the given number of milliseconds."
msgstr ""

#: mu/modes/api/esp.py:105
msgid ""
"time.sleep_us(milliseconds) \n"
"Sleep the given number of microseconds."
msgstr ""

#: mu/modes/api/esp.py:107
msgid ""
"time.ticks_ms() \n"
"Return number of milliseconds from an increasing counter. Wraps around after "
"some value."
msgstr ""

#: mu/modes/api/esp.py:110
msgid ""
"time.ticks_us() \n"
"Return number of microseconds from an increasing counter. Wraps around after "
"some value."
msgstr ""

#: mu/modes/api/esp.py:113
msgid ""
"time.ticks_diff() \n"
"Compute difference between values ticks values obtained from time.ticks_ms() "
"and time.ticks_us()."
msgstr ""

#: mu/modes/api/esp.py:116
msgid ""
"time.time() \n"
"Returns the number of seconds, as an integer, since the Epoch, \n"
"assuming that underlying RTC is set and maintained. If an\n"
"RTC is not set, this function returns number of seconds since a\n"
"port-specific reference point in time (usually since boot or reset)."
msgstr ""

#: mu/modes/api/esp.py:124
msgid ""
"network.WLAN(interface_id) \n"
"\n"
"Create a WLAN interface object. Supported interfaces are:\n"
"network.STA_IF (station aka client, connects to upstream WiFi access points) "
"and \n"
"network.AP_IF (access point mode, allows other WiFi clients to connect)."
msgstr ""

#: mu/modes/api/esp.py:129
msgid "network.WLAN.STA_IF"
msgstr ""

#: mu/modes/api/esp.py:130
msgid "network.WLAN.AP_IF"
msgstr ""

#: mu/modes/api/esp.py:132
msgid ""
"network.WLAN.active([ is_active ])\n"
"Activates or deactivates the network interface when given boolean\n"
"argument. When argument is omitted the function returns the current state."
msgstr ""

#: mu/modes/api/esp.py:137
msgid ""
"network.WLAN.connect(ssid, password)\n"
"Connect to the specified wireless network using the specified password."
msgstr ""

#: mu/modes/api/esp.py:141
msgid ""
"network.WLAN.disconnect() \n"
"Disconnect from the currently connected wireless network."
msgstr ""

#: mu/modes/api/esp.py:144
msgid ""
"network.WLAN.scan()\n"
"Scan for the available wireless networks. Scanning is only possible on\n"
"STA interface. Returns list of tuples with the information about WiFi\n"
"access points:\n"
"   (ssid, bssid, channel, RSSI, authmode, hidden)"
msgstr ""

#: mu/modes/api/esp.py:151
msgid ""
"network.WLAN.status()\n"
"Return the current status of the wireless connection. Possible values:\n"
" - STAT_IDLE (no connection and no activity)\n"
" - STAT_CONNECTING (connecting in progress)\n"
" - STAT_WRONG_PASSWORD (failed due to incorrect password),\n"
" - STAT_NO_AP_FOUND (failed because no access point replied),\n"
" - STAT_CONNECT_FAIL (failed due to other problems),\n"
" - STAT_GOT_IP (connection successful)"
msgstr ""

#: mu/modes/api/esp.py:161
msgid ""
"network.WLAN.isconnected()\n"
"In case of STA mode, returns True if connected to a WiFi access point\n"
"and has a valid IP address. In AP mode returns True when a station is\n"
"connected. Returns False otherwise."
msgstr ""

#: mu/modes/api/esp.py:167
msgid ""
"network.WLAN.ifconfig([ (ip, subnet, gateway, dns) ]) \n"
"Get/set IP-level network interface parameters: IP address, subnet\n"
"mask, gateway and DNS server. When called with no arguments, this\n"
"method returns a 4-tuple with the above information. To set the above\n"
"values, pass a 4-tuple with the required information. For example:\n"
"\n"
"nic = network.WLAN(network.WLAN.AP_IF)\n"
"nic.ifconfig(('192.168.0.4', '255.255.255.0', '192.168.0.1', '8.8.8.8'))"
msgstr ""

#: mu/modes/api/esp.py:178
msgid ""
"urequests.get(url, headers={})\n"
"Send HTTP GET request to the given URL. \n"
"An optional dictionary of HTTP headers can be provided.\n"
"Returns a urequests.Response-object"
msgstr ""

#: mu/modes/api/esp.py:184
msgid ""
"urequests.post(url, data=None, json=None, headers={}) \n"
"Send HTTP POST request to the given URL. Returns a\n"
"urequests.Response-object.\n"
" - data (optional): bytes to send in the body of the request.\n"
" - json (optional): JSON data to send in the body of the Request.\n"
" - headers (optional): An optional dictionary of HTTP headers."
msgstr ""

#: mu/modes/api/esp.py:191
msgid ""
"urequests.Response() \n"
" Object returned by "
msgstr ""

#: mu/modes/api/esp.py:192
msgid ""
"urequests.Response.text \n"
" String representation of response "
msgstr ""

#: mu/modes/api/esp.py:194
msgid ""
"urequests.Response.json() \n"
" Convert Response from JSON to Python dictionary."
msgstr ""

#: mu/modes/api/esp.py:198
msgid ""
"neopixel.NeoPixel(pin, n) \n"
"\n"
"Create a list representing a strip of 'n' neopixels controlled from\n"
"the specified pin (e.g. machine.Pin(0)). Use the resulting object to\n"
"change each pixel by position (starting from 0). Individual pixels\n"
"are given RGB (red, green, blue) values between 0-255 as a tupel. For\n"
"example, (255, 255, 255) is white:\n"
"\n"
"np = neopixel.NeoPixel(machine.Pin(0), 8)\n"
"np[0] = (255, 0, 128)\n"
"np.write()"
msgstr ""

#: mu/modes/api/esp.py:210
msgid ""
"neopixel.NeoPixel.write() \n"
"Show the pixels. Must be called for any updates to become visible."
msgstr ""

#: mu/modes/api/flask.py:24 mu/modes/api/flask.py:27
msgid ""
"AppContext(app) \n"
"The application context binds an application object implicitly\n"
"to the current thread or greenlet, similar to how the\n"
"RequestContext binds request information.  The application\n"
"context is also implicitly created if a request context is created\n"
"but the application is not on top of the individual application\n"
"context.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:29 mu/modes/api/flask.py:30
msgid ""
"AppContext.pop(exc=&lt;object object&gt;) \n"
"Pops the app context.\n"
msgstr ""

#: mu/modes/api/flask.py:31 mu/modes/api/flask.py:32
msgid ""
"AppContext.push() \n"
"Binds the app context to the current context.\n"
msgstr ""

#: mu/modes/api/flask.py:34 mu/modes/api/flask.py:37
msgid ""
"AppGroup(name=None, commands=None, **attrs) \n"
"This works similar to a regular click Group but it\n"
"changes the behavior of the command() decorator so that it\n"
"automatically wraps the functions in with_appcontext().\n"
"\n"
"Not to be confused with FlaskGroup.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:40 mu/modes/api/flask.py:43
msgid ""
"AppGroup.command(*args, **kwargs) \n"
"This works exactly like the method of the same name on a regular\n"
"click.Group but it wraps callbacks in with_appcontext()\n"
"unless it’s disabled by passing with_appcontext=False.\n"
msgstr ""

#: mu/modes/api/flask.py:46 mu/modes/api/flask.py:49
msgid ""
"AppGroup.group(*args, **kwargs) \n"
"This works exactly like the method of the same name on a regular\n"
"click.Group but it defaults the group class to\n"
"AppGroup.\n"
msgstr ""

#: mu/modes/api/flask.py:52 mu/modes/api/flask.py:55
msgid ""
"Blueprint(name, import_name, static_folder=None, static_url_path=None, "
"template_folder=None, url_prefix=None, subdomain=None, url_defaults=None, "
"root_path=None) \n"
"Represents a blueprint.  A blueprint is an object that records\n"
"functions that will be called with the\n"
"BlueprintSetupState later to register functions\n"
"or other things on the main application.  See Modular Applications with "
"Blueprints for more\n"
"information.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:58 mu/modes/api/flask.py:61
msgid ""
"Blueprint.add_app_template_filter(f, name=None) \n"
"Register a custom template filter, available application wide.  Like\n"
"Flask.add_template_filter() but for a blueprint.  Works exactly\n"
"like the app_template_filter() decorator.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:name -- the optional name of the filter, otherwise the\n"
"function name will be used.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:64 mu/modes/api/flask.py:67
msgid ""
"Blueprint.add_app_template_global(f, name=None) \n"
"Register a custom template global, available application wide.  Like\n"
"Flask.add_template_global() but for a blueprint.  Works exactly\n"
"like the app_template_global() decorator.\n"
"\n"
"Changelog\n"
"New in version 0.10.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:name -- the optional name of the global, otherwise the\n"
"function name will be used.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:70 mu/modes/api/flask.py:73
msgid ""
"Blueprint.add_app_template_test(f, name=None) \n"
"Register a custom template test, available application wide.  Like\n"
"Flask.add_template_test() but for a blueprint.  Works exactly\n"
"like the app_template_test() decorator.\n"
"\n"
"Changelog\n"
"New in version 0.10.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:name -- the optional name of the test, otherwise the\n"
"function name will be used.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:76 mu/modes/api/flask.py:79
msgid ""
"Blueprint.add_url_rule(rule, endpoint=None, view_func=None, **options) \n"
"Like Flask.add_url_rule() but for a blueprint.  The endpoint for\n"
"the url_for() function is prefixed with the name of the blueprint.\n"
msgstr ""

#: mu/modes/api/flask.py:82 mu/modes/api/flask.py:85
msgid ""
"Blueprint.after_app_request(f) \n"
"Like Flask.after_request() but for a blueprint.  Such a function\n"
"is executed after each request, even if outside of the blueprint.\n"
msgstr ""

#: mu/modes/api/flask.py:88 mu/modes/api/flask.py:91
msgid ""
"Blueprint.after_request(f) \n"
"Like Flask.after_request() but for a blueprint.  This function\n"
"is only executed after each request that is handled by a function of\n"
"that blueprint.\n"
msgstr ""

#: mu/modes/api/flask.py:94 mu/modes/api/flask.py:97
msgid ""
"Blueprint.app_context_processor(f) \n"
"Like Flask.context_processor() but for a blueprint.  Such a\n"
"function is executed each request, even if outside of the blueprint.\n"
msgstr ""

#: mu/modes/api/flask.py:100 mu/modes/api/flask.py:103
msgid ""
"Blueprint.app_errorhandler(code) \n"
"Like Flask.errorhandler() but for a blueprint.  This\n"
"handler is used for all requests, even if outside of the blueprint.\n"
msgstr ""

#: mu/modes/api/flask.py:106 mu/modes/api/flask.py:109
msgid ""
"Blueprint.app_template_filter(name=None) \n"
"Register a custom template filter, available application wide.  Like\n"
"Flask.template_filter() but for a blueprint.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:name -- the optional name of the filter, otherwise the\n"
"function name will be used.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:112 mu/modes/api/flask.py:115
msgid ""
"Blueprint.app_template_global(name=None) \n"
"Register a custom template global, available application wide.  Like\n"
"Flask.template_global() but for a blueprint.\n"
"\n"
"Changelog\n"
"New in version 0.10.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:name -- the optional name of the global, otherwise the\n"
"function name will be used.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:118 mu/modes/api/flask.py:121
msgid ""
"Blueprint.app_template_test(name=None) \n"
"Register a custom template test, available application wide.  Like\n"
"Flask.template_test() but for a blueprint.\n"
"\n"
"Changelog\n"
"New in version 0.10.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:name -- the optional name of the test, otherwise the\n"
"function name will be used.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:124 mu/modes/api/flask.py:127
msgid ""
"Blueprint.app_url_defaults(f) \n"
"Same as url_defaults() but application wide.\n"
msgstr ""

#: mu/modes/api/flask.py:130 mu/modes/api/flask.py:133
msgid ""
"Blueprint.app_url_value_preprocessor(f) \n"
"Same as url_value_preprocessor() but application wide.\n"
msgstr ""

#: mu/modes/api/flask.py:136 mu/modes/api/flask.py:139
msgid ""
"Blueprint.before_app_first_request(f) \n"
"Like Flask.before_first_request().  Such a function is\n"
"executed before the first request to the application.\n"
msgstr ""

#: mu/modes/api/flask.py:142 mu/modes/api/flask.py:145
msgid ""
"Blueprint.before_app_request(f) \n"
"Like Flask.before_request().  Such a function is executed\n"
"before each request, even if outside of a blueprint.\n"
msgstr ""

#: mu/modes/api/flask.py:148 mu/modes/api/flask.py:151
msgid ""
"Blueprint.before_request(f) \n"
"Like Flask.before_request() but for a blueprint.  This function\n"
"is only executed before each request that is handled by a function of\n"
"that blueprint.\n"
msgstr ""

#: mu/modes/api/flask.py:154 mu/modes/api/flask.py:157
msgid ""
"Blueprint.context_processor(f) \n"
"Like Flask.context_processor() but for a blueprint.  This\n"
"function is only executed for requests handled by a blueprint.\n"
msgstr ""

#: mu/modes/api/flask.py:160 mu/modes/api/flask.py:163
msgid ""
"Blueprint.endpoint(endpoint) \n"
"Like Flask.endpoint() but for a blueprint.  This does not\n"
"prefix the endpoint with the blueprint name, this has to be done\n"
"explicitly by the user of this method.  If the endpoint is prefixed\n"
"with a . it will be registered to the current blueprint, otherwise\n"
"it’s an application independent endpoint.\n"
msgstr ""

#: mu/modes/api/flask.py:166 mu/modes/api/flask.py:169
msgid ""
"Blueprint.errorhandler(code_or_exception) \n"
"Registers an error handler that becomes active for this blueprint\n"
"only.  Please be aware that routing does not happen local to a\n"
"blueprint so an error handler for 404 usually is not handled by\n"
"a blueprint unless it is caused inside a view function.  Another\n"
"special case is the 500 internal server error which is always looked\n"
"up from the application.\n"
"Otherwise works as the errorhandler() decorator\n"
"of the Flask object.\n"
msgstr ""

#: mu/modes/api/flask.py:172 mu/modes/api/flask.py:175
msgid ""
"Blueprint.get_send_file_max_age(filename) \n"
"Provides default cache_timeout for the send_file() functions.\n"
"By default, this function returns SEND_FILE_MAX_AGE_DEFAULT from\n"
"the configuration of current_app.\n"
"Static file functions such as send_from_directory() use this\n"
"function, and send_file() calls this function on\n"
"current_app when the given cache_timeout is None. If a\n"
"cache_timeout is given in send_file(), that timeout is used;\n"
"otherwise, this method is called.\n"
"This allows subclasses to change the behavior when sending files based\n"
"on the filename.  For example, to set the cache timeout for .js files\n"
"to 60 seconds:\n"
"class MyFlask(flask.Flask):\n"
"    def get_send_file_max_age(self, name):\n"
"        if name.lower().endswith('.js'):\n"
"            return 60\n"
"        return flask.Flask.get_send_file_max_age(self, name)\n"
"\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.9.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:178 mu/modes/api/flask.py:181
msgid ""
"Blueprint.has_static_folder() \n"
"This is True if the package bound object’s container has a\n"
"folder for static files.\n"
"\n"
"Changelog\n"
"New in version 0.5.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:184 mu/modes/api/flask.py:187
msgid ""
"Blueprint.import_name() \n"
"The name of the package or module that this app belongs to. Do not\n"
"change this once it is set by the constructor.\n"
msgstr ""

#: mu/modes/api/flask.py:190 mu/modes/api/flask.py:193
msgid ""
"Blueprint.jinja_loader() \n"
"The Jinja loader for this package bound object.\n"
"\n"
"Changelog\n"
"New in version 0.5.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:196 mu/modes/api/flask.py:199
msgid ""
"Blueprint.json_decoder() \n"
"Blueprint local JSON decoder class to use.\n"
"Set to None to use the app’s json_decoder.\n"
msgstr ""

#: mu/modes/api/flask.py:202 mu/modes/api/flask.py:205
msgid ""
"Blueprint.json_encoder() \n"
"Blueprint local JSON decoder class to use.\n"
"Set to None to use the app’s json_encoder.\n"
msgstr ""

#: mu/modes/api/flask.py:208 mu/modes/api/flask.py:211
msgid ""
"Blueprint.make_setup_state(app, options, first_registration=False) \n"
"Creates an instance of BlueprintSetupState()\n"
"object that is later passed to the register callback functions.\n"
"Subclasses can override this to return a subclass of the setup state.\n"
msgstr ""

#: mu/modes/api/flask.py:214 mu/modes/api/flask.py:217
msgid ""
"Blueprint.open_resource(resource, mode='rb') \n"
"Opens a resource from the application’s resource folder.  To see\n"
"how this works, consider the following folder structure:\n"
"/myapplication.py\n"
"/schema.sql\n"
"/static\n"
"    /style.css\n"
"/templates\n"
"    /layout.html\n"
"    /index.html\n"
"\n"
"\n"
"If you want to open the schema.sql file you would do the\n"
"following:\n"
"with app.open_resource('schema.sql') as f:\n"
"    contents = f.read()\n"
"    do_something_with(contents)\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"resource -- the name of the resource.  To access resources within\n"
"subfolders use forward slashes as separator.\n"
"mode -- resource file opening mode, default is ‘rb’.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:220 mu/modes/api/flask.py:223
msgid ""
"Blueprint.record(func) \n"
"Registers a function that is called when the blueprint is\n"
"registered on the application.  This function is called with the\n"
"state as argument as returned by the make_setup_state()\n"
"method.\n"
msgstr ""

#: mu/modes/api/flask.py:226 mu/modes/api/flask.py:229
msgid ""
"Blueprint.record_once(func) \n"
"Works like record() but wraps the function in another\n"
"function that will ensure the function is only called once.  If the\n"
"blueprint is registered a second time on the application, the\n"
"function passed is not called.\n"
msgstr ""

#: mu/modes/api/flask.py:232 mu/modes/api/flask.py:235
msgid ""
"Blueprint.register(app, options, first_registration=False) \n"
"Called by Flask.register_blueprint() to register all views\n"
"and callbacks registered on the blueprint with the application. Creates\n"
"a BlueprintSetupState and calls each record() callback\n"
"with it.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"app -- The application this blueprint is being registered with.\n"
"options -- Keyword arguments forwarded from\n"
"register_blueprint().\n"
"first_registration -- Whether this is the first time this\n"
"blueprint has been registered on the application.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:238 mu/modes/api/flask.py:241
msgid ""
"Blueprint.register_error_handler(code_or_exception, f) \n"
"Non-decorator version of the errorhandler() error attach\n"
"function, akin to the register_error_handler()\n"
"application-wide function of the Flask object but\n"
"for error handlers limited to this blueprint.\n"
"\n"
"Changelog\n"
"New in version 0.11.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:244 mu/modes/api/flask.py:247
msgid ""
"Blueprint.root_path() \n"
"Absolute path to the package on the filesystem. Used to look up\n"
"resources contained in the package.\n"
msgstr ""

#: mu/modes/api/flask.py:250 mu/modes/api/flask.py:253
msgid ""
"Blueprint.route(rule, **options) \n"
"Like Flask.route() but for a blueprint.  The endpoint for the\n"
"url_for() function is prefixed with the name of the blueprint.\n"
msgstr ""

#: mu/modes/api/flask.py:256 mu/modes/api/flask.py:259
msgid ""
"Blueprint.send_static_file(filename) \n"
"Function used internally to send static files from the static\n"
"folder to the browser.\n"
"\n"
"Changelog\n"
"New in version 0.5.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:262 mu/modes/api/flask.py:265
msgid ""
"Blueprint.static_folder() \n"
"The absolute path to the configured static folder.\n"
msgstr ""

#: mu/modes/api/flask.py:268 mu/modes/api/flask.py:271
msgid ""
"Blueprint.static_url_path() \n"
"The URL prefix that the static route will be registered for.\n"
msgstr ""

#: mu/modes/api/flask.py:274 mu/modes/api/flask.py:277
msgid ""
"Blueprint.teardown_app_request(f) \n"
"Like Flask.teardown_request() but for a blueprint.  Such a\n"
"function is executed when tearing down each request, even if outside of\n"
"the blueprint.\n"
msgstr ""

#: mu/modes/api/flask.py:280 mu/modes/api/flask.py:283
msgid ""
"Blueprint.teardown_request(f) \n"
"Like Flask.teardown_request() but for a blueprint.  This\n"
"function is only executed when tearing down requests handled by a\n"
"function of that blueprint.  Teardown request functions are executed\n"
"when the request context is popped, even when no actual request was\n"
"performed.\n"
msgstr ""

#: mu/modes/api/flask.py:286 mu/modes/api/flask.py:289
msgid ""
"Blueprint.template_folder() \n"
"Location of the template files to be added to the template lookup.\n"
"None if templates should not be added.\n"
msgstr ""

#: mu/modes/api/flask.py:292 mu/modes/api/flask.py:295
msgid ""
"Blueprint.url_defaults(f) \n"
"Callback function for URL defaults for this blueprint.  It’s called\n"
"with the endpoint and values and should update the values passed\n"
"in place.\n"
msgstr ""

#: mu/modes/api/flask.py:298 mu/modes/api/flask.py:301
msgid ""
"Blueprint.url_value_preprocessor(f) \n"
"Registers a function as URL value preprocessor for this\n"
"blueprint.  It’s called before the view functions are called and\n"
"can modify the url values provided.\n"
msgstr ""

#: mu/modes/api/flask.py:304 mu/modes/api/flask.py:307
msgid ""
"BlueprintSetupState(blueprint, app, options, first_registration) \n"
"Temporary holder object for registering a blueprint with the\n"
"application.  An instance of this class is created by the\n"
"make_setup_state() method and later passed\n"
"to all register callback functions.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:310 mu/modes/api/flask.py:313
msgid ""
"BlueprintSetupState.add_url_rule(rule, endpoint=None, view_func=None, "
"**options) \n"
"A helper method to register a rule (and optionally a view function)\n"
"to the application.  The endpoint is automatically prefixed with the\n"
"blueprint’s name.\n"
msgstr ""

#: mu/modes/api/flask.py:315 mu/modes/api/flask.py:316
msgid ""
"BlueprintSetupState.app() \n"
"a reference to the current application\n"
msgstr ""

#: mu/modes/api/flask.py:318 mu/modes/api/flask.py:321
msgid ""
"BlueprintSetupState.blueprint() \n"
"a reference to the blueprint that created this setup state.\n"
msgstr ""

#: mu/modes/api/flask.py:324 mu/modes/api/flask.py:327
msgid ""
"BlueprintSetupState.first_registration() \n"
"as blueprints can be registered multiple times with the\n"
"application and not everything wants to be registered\n"
"multiple times on it, this attribute can be used to figure\n"
"out if the blueprint was registered in the past already.\n"
msgstr ""

#: mu/modes/api/flask.py:330 mu/modes/api/flask.py:333
msgid ""
"BlueprintSetupState.options() \n"
"a dictionary with all options that were passed to the\n"
"register_blueprint() method.\n"
msgstr ""

#: mu/modes/api/flask.py:336 mu/modes/api/flask.py:339
msgid ""
"BlueprintSetupState.subdomain() \n"
"The subdomain that the blueprint should be active for, None\n"
"otherwise.\n"
msgstr ""

#: mu/modes/api/flask.py:342 mu/modes/api/flask.py:345
msgid ""
"BlueprintSetupState.url_defaults() \n"
"A dictionary with URL defaults that is added to each and every\n"
"URL that was defined with the blueprint.\n"
msgstr ""

#: mu/modes/api/flask.py:348 mu/modes/api/flask.py:351
msgid ""
"BlueprintSetupState.url_prefix() \n"
"The prefix that should be used for all URLs defined on the\n"
"blueprint.\n"
msgstr ""

#: mu/modes/api/flask.py:354 mu/modes/api/flask.py:357
msgid ""
"Config(root_path, defaults=None) \n"
"Works exactly like a dict but provides ways to fill it from files\n"
"or special dictionaries.  There are two common patterns to populate the\n"
"config.\n"
"\n"
"Either you can fill the config from a config file:\n"
"\n"
"Or alternatively you can define the configuration options in the\n"
"module that calls from_object() or provide an import path to\n"
"a module that should be loaded.  It is also possible to tell it to\n"
"use the same module and with that provide the configuration values\n"
"just before the call:\n"
"\n"
"In both cases (loading from any Python file or loading from modules),\n"
"only uppercase keys are added to the config.  This makes it possible to use\n"
"lowercase values in the config file for temporary values that are not added\n"
"to the config or to define the config keys in the same file that implements\n"
"the application.\n"
"\n"
"Probably the most interesting way to load configurations is from an\n"
"environment variable pointing to a file:\n"
"\n"
"In this case before launching the application you have to set this\n"
"environment variable to the file you want to use.  On Linux and OS X\n"
"use the export statement:\n"
"\n"
"On windows use set instead.\n"
"\n"
"\n"
"Parameters:\n"
"root_path -- path to which files are read relative from.  When the\n"
"config object is created by the application, this is\n"
"the application’s root_path.\n"
"defaults -- an optional dictionary of default values"
msgstr ""

#: mu/modes/api/flask.py:360 mu/modes/api/flask.py:363
msgid ""
"Config.from_envvar(variable_name, silent=False) \n"
"Loads a configuration from an environment variable pointing to\n"
"a configuration file.  This is basically just a shortcut with nicer\n"
"error messages for this line of code:\n"
"app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"variable_name -- name of the environment variable\n"
"silent -- set to True if you want silent failure for missing\n"
"files.\n"
"\n"
"\n"
"\n"
"Returns:bool. True if able to load config, False otherwise.\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:366 mu/modes/api/flask.py:369
msgid ""
"Config.from_json(filename, silent=False) \n"
"Updates the values in the config from a JSON file. This function\n"
"behaves as if the JSON object was a dictionary and passed to the\n"
"from_mapping() function.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"filename -- the filename of the JSON file.  This can either be an\n"
"absolute filename or a filename relative to the\n"
"root path.\n"
"silent -- set to True if you want silent failure for missing\n"
"files.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.11.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:372 mu/modes/api/flask.py:375
msgid ""
"Config.from_mapping(*mapping, **kwargs) \n"
"Updates the config like update() ignoring items with non-upper\n"
"keys.\n"
"\n"
"Changelog\n"
"New in version 0.11.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:378 mu/modes/api/flask.py:381
msgid ""
"Config.from_object(obj) \n"
"Updates the values from the given object.  An object can be of one\n"
"of the following two types:\n"
"\n"
"a string: in this case the object with that name will be imported\n"
"an actual object reference: that object is used directly\n"
"\n"
"Objects are usually either modules or classes. from_object()\n"
"loads only the uppercase attributes of the module/class. A dict\n"
"object will not work with from_object() because the keys of a\n"
"dict are not attributes of the dict class.\n"
"Example of module-based configuration:\n"
"app.config.from_object('yourapplication.default_config')\n"
"from yourapplication import default_config\n"
"app.config.from_object(default_config)\n"
"\n"
"\n"
"You should not use this function to load the actual configuration but\n"
"rather configuration defaults.  The actual config should be loaded\n"
"with from_pyfile() and ideally from a location not within the\n"
"package because the package might be installed system wide.\n"
"See Development / Production for an example of class-based configuration\n"
"using from_object().\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:obj -- an import name or object\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:384 mu/modes/api/flask.py:387
msgid ""
"Config.from_pyfile(filename, silent=False) \n"
"Updates the values in the config from a Python file.  This function\n"
"behaves as if the file was imported as module with the\n"
"from_object() function.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"filename -- the filename of the config.  This can either be an\n"
"absolute filename or a filename relative to the\n"
"root path.\n"
"silent -- set to True if you want silent failure for missing\n"
"files.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.7: silent parameter.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:390 mu/modes/api/flask.py:393
msgid ""
"Config.get_namespace(namespace, lowercase=True, trim_namespace=True) \n"
"Returns a dictionary containing a subset of configuration options\n"
"that match the specified namespace/prefix. Example usage:\n"
"app.config['IMAGE_STORE_TYPE'] = 'fs'\n"
"app.config['IMAGE_STORE_PATH'] = '/var/app/images'\n"
"app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'\n"
"image_store_config = app.config.get_namespace('IMAGE_STORE_')\n"
"\n"
"\n"
"The resulting dictionary image_store_config would look like:\n"
"{\n"
"    'type': 'fs',\n"
"    'path': '/var/app/images',\n"
"    'base_url': 'http://img.website.com'\n"
"}\n"
"\n"
"\n"
"This is often useful when configuration options map directly to\n"
"keyword arguments in functions or class constructors.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"namespace -- a configuration namespace\n"
"lowercase -- a flag indicating if the keys of the resulting\n"
"dictionary should be lowercase\n"
"trim_namespace -- a flag indicating if the keys of the resulting\n"
"dictionary should not include the namespace\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.11.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:396 mu/modes/api/flask.py:399
msgid ""
"Flask(import_name, static_url_path=None, static_folder='static', "
"static_host=None, host_matching=False, subdomain_matching=False, "
"template_folder='templates', instance_path=None, "
"instance_relative_config=False, root_path=None) \n"
"The flask object implements a WSGI application and acts as the central\n"
"object.  It is passed the name of the module or package of the\n"
"application.  Once it is created it will act as a central registry for\n"
"the view functions, the URL rules, template configuration and much more.\n"
"\n"
"The name of the package is used to resolve resources from inside the\n"
"package or the folder the module is contained in depending on if the\n"
"package parameter resolves to an actual python package (a folder with\n"
"an __init__.py file inside) or a standard module (just a .py file).\n"
"\n"
"For more information about resource loading, see open_resource().\n"
"\n"
"Usually you create a Flask instance in your main module or\n"
"in the __init__.py file of your package like this:\n"
"\n"
"\n"
"Parameters:\n"
"import_name -- the name of the application package\n"
"static_url_path -- can be used to specify a different path for the\n"
"static files on the web.  Defaults to the name\n"
"of the static_folder folder.\n"
"static_folder -- the folder with static files that should be served\n"
"at static_url_path.  Defaults to the 'static'\n"
"folder in the root path of the application.\n"
"static_host -- the host to use when adding the static route.\n"
"Defaults to None. Required when using host_matching=True\n"
"with a static_folder configured.\n"
"host_matching -- set url_map.host_matching attribute.\n"
"Defaults to False.\n"
"subdomain_matching -- consider the subdomain relative to\n"
"SERVER_NAME when matching routes. Defaults to False.\n"
"template_folder -- the folder that contains the templates that should\n"
"be used by the application.  Defaults to\n"
"'templates' folder in the root path of the\n"
"application.\n"
"instance_path -- An alternative instance path for the application.\n"
"By default the folder 'instance' next to the\n"
"package or module is assumed to be the instance\n"
"path.\n"
"instance_relative_config -- if set to True relative filenames\n"
"for loading the config are assumed to\n"
"be relative to the instance path instead\n"
"of the application root.\n"
"root_path -- Flask by default will automatically calculate the path\n"
"to the root of the application.  In certain situations\n"
"this cannot be achieved (for instance if the package\n"
"is a Python 3 namespace package) and needs to be\n"
"manually defined."
msgstr ""

#: mu/modes/api/flask.py:402 mu/modes/api/flask.py:405
msgid ""
"Flask.add_template_filter(f, name=None) \n"
"Register a custom template filter.  Works exactly like the\n"
"template_filter() decorator.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:name -- the optional name of the filter, otherwise the\n"
"function name will be used.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:408 mu/modes/api/flask.py:411
msgid ""
"Flask.add_template_global(f, name=None) \n"
"Register a custom template global function. Works exactly like the\n"
"template_global() decorator.\n"
"\n"
"Changelog\n"
"New in version 0.10.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:name -- the optional name of the global function, otherwise the\n"
"function name will be used.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:414 mu/modes/api/flask.py:417
msgid ""
"Flask.add_template_test(f, name=None) \n"
"Register a custom template test.  Works exactly like the\n"
"template_test() decorator.\n"
"\n"
"Changelog\n"
"New in version 0.10.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:name -- the optional name of the test, otherwise the\n"
"function name will be used.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:420 mu/modes/api/flask.py:423
msgid ""
"Flask.add_url_rule(rule, endpoint=None, view_func=None, "
"provide_automatic_options=None, **options) \n"
"Connects a URL rule.  Works exactly like the route()\n"
"decorator.  If a view_func is provided it will be registered with the\n"
"endpoint.\n"
"Basically this example:\n"
"@app.route('/')\n"
"def index():\n"
"    pass\n"
"\n"
"\n"
"Is equivalent to the following:\n"
"def index():\n"
"    pass\n"
"app.add_url_rule('/', 'index', index)\n"
"\n"
"\n"
"If the view_func is not provided you will need to connect the endpoint\n"
"to a view function like so:\n"
"app.view_functions['index'] = index\n"
"\n"
"\n"
"Internally route() invokes add_url_rule() so if you want\n"
"to customize the behavior via subclassing you only need to change\n"
"this method.\n"
"For more information refer to URL Route Registrations.\n"
"\n"
"Changelog\n"
"Changed in version 0.6: OPTIONS is added automatically as method.\n"
"\n"
"\n"
"Changed in version 0.2: view_func parameter added.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"rule -- the URL rule as string\n"
"endpoint -- the endpoint for the registered URL rule.  Flask\n"
"itself assumes the name of the view function as\n"
"endpoint\n"
"view_func -- the function to call when serving a request to the\n"
"provided endpoint\n"
"provide_automatic_options -- controls whether the OPTIONS\n"
"method should be added automatically. This can also be controlled\n"
"by setting the view_func.provide_automatic_options = False\n"
"before adding the rule.\n"
"options -- the options to be forwarded to the underlying\n"
"Rule object.  A change\n"
"to Werkzeug is handling of method options.  methods\n"
"is a list of methods this rule should be limited\n"
"to (GET, POST etc.).  By default a rule\n"
"just listens for GET (and implicitly HEAD).\n"
"Starting with Flask 0.6, OPTIONS is implicitly\n"
"added and handled by the standard request handling.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:426 mu/modes/api/flask.py:429
msgid ""
"Flask.after_request(f) \n"
"Register a function to be run after each request.\n"
"Your function must take one parameter, an instance of\n"
"response_class and return a new response object or the\n"
"same (see process_response()).\n"
"As of Flask 0.7 this function might not be executed at the end of the\n"
"request in case an unhandled exception occurred.\n"
msgstr ""

#: mu/modes/api/flask.py:432 mu/modes/api/flask.py:435
msgid ""
"Flask.after_request_funcs() \n"
"A dictionary with lists of functions that should be called after\n"
"each request.  The key of the dictionary is the name of the blueprint\n"
"this function is active for, None for all requests.  This can for\n"
"example be used to close database connections. To register a function\n"
"here, use the after_request() decorator.\n"
msgstr ""

#: mu/modes/api/flask.py:438 mu/modes/api/flask.py:441
msgid ""
"Flask.app_context() \n"
"Create an AppContext. Use as a with\n"
"block to push the context, which will make current_app\n"
"point at this application.\n"
"An application context is automatically pushed by\n"
"RequestContext.push()\n"
"when handling a request, and when running a CLI command. Use\n"
"this to manually create a context outside of these situations.\n"
"with app.app_context():\n"
"    init_db()\n"
"\n"
"\n"
"See The Application Context.\n"
"\n"
"Changelog\n"
"New in version 0.9.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:443 mu/modes/api/flask.py:444
msgid ""
"Flask.app_ctx_globals_class() \n"
"alias of flask.ctx._AppCtxGlobals\n"
msgstr ""

#: mu/modes/api/flask.py:446 mu/modes/api/flask.py:449
msgid ""
"Flask.auto_find_instance_path() \n"
"Tries to locate the instance path if it was not provided to the\n"
"constructor of the application class.  It will basically calculate\n"
"the path to a folder named instance next to your main file or\n"
"the package.\n"
"\n"
"Changelog\n"
"New in version 0.8.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:452 mu/modes/api/flask.py:455
msgid ""
"Flask.before_first_request(f) \n"
"Registers a function to be run before the first request to this\n"
"instance of the application.\n"
"The function will be called without any arguments and its return\n"
"value is ignored.\n"
"\n"
"Changelog\n"
"New in version 0.8.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:458 mu/modes/api/flask.py:461
msgid ""
"Flask.before_first_request_funcs() \n"
"A list of functions that will be called at the beginning of the\n"
"first request to this instance. To register a function, use the\n"
"before_first_request() decorator.\n"
"\n"
"Changelog\n"
"New in version 0.8.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:464 mu/modes/api/flask.py:467
msgid ""
"Flask.before_request(f) \n"
"Registers a function to run before each request.\n"
"For example, this can be used to open a database connection, or to load\n"
"the logged in user from the session.\n"
"The function will be called without any arguments. If it returns a\n"
"non-None value, the value is handled as if it was the return value from\n"
"the view, and further request handling is stopped.\n"
msgstr ""

#: mu/modes/api/flask.py:470 mu/modes/api/flask.py:473
msgid ""
"Flask.before_request_funcs() \n"
"A dictionary with lists of functions that will be called at the\n"
"beginning of each request. The key of the dictionary is the name of\n"
"the blueprint this function is active for, or None for all\n"
"requests. To register a function, use the before_request()\n"
"decorator.\n"
msgstr ""

#: mu/modes/api/flask.py:476 mu/modes/api/flask.py:479
msgid ""
"Flask.blueprints() \n"
"all the attached blueprints in a dictionary by name.  Blueprints\n"
"can be attached multiple times so this dictionary does not tell\n"
"you how often they got attached.\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:482 mu/modes/api/flask.py:485
msgid ""
"Flask.cli() \n"
"The click command line context for this application.  Commands\n"
"registered here show up in the flask command once the\n"
"application has been discovered.  The default commands are\n"
"provided by Flask itself and can be overridden.\n"
"This is an instance of a click.Group object.\n"
msgstr ""

#: mu/modes/api/flask.py:488 mu/modes/api/flask.py:491
msgid ""
"Flask.config() \n"
"The configuration dictionary as Config.  This behaves\n"
"exactly like a regular dictionary but supports additional methods\n"
"to load a config from files.\n"
msgstr ""

#: mu/modes/api/flask.py:493 mu/modes/api/flask.py:494
msgid ""
"Flask.config_class() \n"
"alias of flask.config.Config\n"
msgstr ""

#: mu/modes/api/flask.py:496 mu/modes/api/flask.py:499
msgid ""
"Flask.context_processor(f) \n"
"Registers a template context processor function.\n"
msgstr ""

#: mu/modes/api/flask.py:502 mu/modes/api/flask.py:505
msgid ""
"Flask.create_global_jinja_loader() \n"
"Creates the loader for the Jinja2 environment.  Can be used to\n"
"override just the loader and keeping the rest unchanged.  It’s\n"
"discouraged to override this function.  Instead one should override\n"
"the jinja_loader() function instead.\n"
"The global loader dispatches between the loaders of the application\n"
"and the individual blueprints.\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:508 mu/modes/api/flask.py:511
msgid ""
"Flask.create_jinja_environment() \n"
"Creates the Jinja2 environment based on jinja_options\n"
"and select_jinja_autoescape().  Since 0.7 this also adds\n"
"the Jinja2 globals and filters after initialization.  Override\n"
"this function to customize the behavior.\n"
"\n"
"Changelog\n"
"Changed in version 0.11: Environment.auto_reload set in accordance with\n"
"TEMPLATES_AUTO_RELOAD configuration option.\n"
"\n"
"\n"
"New in version 0.5.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:514 mu/modes/api/flask.py:517
msgid ""
"Flask.create_url_adapter(request) \n"
"Creates a URL adapter for the given request. The URL adapter\n"
"is created at a point where the request context is not yet set\n"
"up so the request is passed explicitly.\n"
"\n"
"Changed in version 1.0: SERVER_NAME no longer implicitly enables subdomain\n"
"matching. Use subdomain_matching instead.\n"
"\n"
"\n"
"Changelog\n"
"Changed in version 0.9: This can now also be called without a request object "
"when the\n"
"URL adapter is created for the application context.\n"
"\n"
"\n"
"New in version 0.6.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:520 mu/modes/api/flask.py:523
msgid ""
"Flask.debug() \n"
"Whether debug mode is enabled. When using flask run to start\n"
"the development server, an interactive debugger will be shown for\n"
"unhandled exceptions, and the server will be reloaded when code\n"
"changes. This maps to the DEBUG config key. This is\n"
"enabled when env is 'development' and is overridden\n"
"by the FLASK_DEBUG environment variable. It may not behave as\n"
"expected if set in code.\n"
"Do not enable debug mode when deploying in production.\n"
"Default: True if env is 'development', or\n"
"False otherwise.\n"
msgstr ""

#: mu/modes/api/flask.py:525 mu/modes/api/flask.py:526
msgid ""
"Flask.default_config() \n"
"Default configuration parameters.\n"
msgstr ""

#: mu/modes/api/flask.py:528 mu/modes/api/flask.py:531
msgid ""
"Flask.dispatch_request() \n"
"Does the request dispatching.  Matches the URL and returns the\n"
"return value of the view or error handler.  This does not have to\n"
"be a response object.  In order to convert the return value to a\n"
"proper response object, call make_response().\n"
"\n"
"Changelog\n"
"Changed in version 0.7: This no longer does the exception handling, this "
"code was\n"
"moved to the new full_dispatch_request().\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:534 mu/modes/api/flask.py:537
msgid ""
"Flask.do_teardown_appcontext(exc=&lt;object object&gt;) \n"
"Called right before the application context is popped.\n"
"When handling a request, the application context is popped\n"
"after the request context. See do_teardown_request().\n"
"This calls all functions decorated with\n"
"teardown_appcontext(). Then the\n"
"appcontext_tearing_down signal is sent.\n"
"This is called by\n"
"AppContext.pop().\n"
"\n"
"Changelog\n"
"New in version 0.9.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:540 mu/modes/api/flask.py:543
msgid ""
"Flask.do_teardown_request(exc=&lt;object object&gt;) \n"
"Called after the request is dispatched and the response is\n"
"returned, right before the request context is popped.\n"
"This calls all functions decorated with\n"
"teardown_request(), and Blueprint.teardown_request()\n"
"if a blueprint handled the request. Finally, the\n"
"request_tearing_down signal is sent.\n"
"This is called by\n"
"RequestContext.pop(),\n"
"which may be delayed during testing to maintain access to\n"
"resources.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:exc -- An unhandled exception raised while dispatching the\n"
"request. Detected from the current exception information if\n"
"not passed. Passed to each teardown function.\n"
"\n"
"\n"
"\n"
"\n"
"Changelog\n"
"Changed in version 0.9: Added the exc argument.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:546 mu/modes/api/flask.py:549
msgid ""
"Flask.endpoint(endpoint) \n"
"A decorator to register a function as an endpoint.\n"
"Example:\n"
"@app.endpoint('example.endpoint')\n"
"def example():\n"
"    return \"example\"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:endpoint -- the name of the endpoint\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:552 mu/modes/api/flask.py:555
msgid ""
"Flask.env() \n"
"What environment the app is running in. Flask and extensions may\n"
"enable behaviors based on the environment, such as enabling debug\n"
"mode. This maps to the ENV config key. This is set by the\n"
"FLASK_ENV environment variable and may not behave as\n"
"expected if set in code.\n"
"Do not enable development when deploying in production.\n"
"Default: 'production'\n"
msgstr ""

#: mu/modes/api/flask.py:558 mu/modes/api/flask.py:561
msgid ""
"Flask.error_handler_spec() \n"
"A dictionary of all registered error handlers.  The key is None\n"
"for error handlers active on the application, otherwise the key is\n"
"the name of the blueprint.  Each key points to another dictionary\n"
"where the key is the status code of the http exception.  The\n"
"special key None points to a list of tuples where the first item\n"
"is the class for the instance check and the second the error handler\n"
"function.\n"
"To register an error handler, use the errorhandler()\n"
"decorator.\n"
msgstr ""

#: mu/modes/api/flask.py:564 mu/modes/api/flask.py:567
msgid ""
"Flask.errorhandler(code_or_exception) \n"
"Register a function to handle errors by code or exception class.\n"
"A decorator that is used to register a function given an\n"
"error code.  Example:\n"
"@app.errorhandler(404)\n"
"def page_not_found(error):\n"
"    return 'This page does not exist', 404\n"
"\n"
"\n"
"You can also register handlers for arbitrary exceptions:\n"
"@app.errorhandler(DatabaseError)\n"
"def special_exception_handler(error):\n"
"    return 'Database connection failed', 500\n"
"\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.7: Use register_error_handler() instead of modifying\n"
"error_handler_spec directly, for application wide error\n"
"handlers.\n"
"\n"
"\n"
"New in version 0.7: One can now additionally also register custom exception "
"types\n"
"that do not necessarily have to be a subclass of the\n"
"HTTPException class.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:code_or_exception -- the code as integer for the handler, or\n"
"an arbitrary exception\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:570 mu/modes/api/flask.py:573
msgid ""
"Flask.extensions() \n"
"a place where extensions can store application specific state.  For\n"
"example this is where an extension could store database engines and\n"
"similar things.  For backwards compatibility extensions should register\n"
"themselves like this:\n"
"if not hasattr(app, 'extensions'):\n"
"    app.extensions = {}\n"
"app.extensions['extensionname'] = SomeObject()\n"
"\n"
"\n"
"The key must match the name of the extension module. For example in\n"
"case of a “Flask-Foo” extension in flask_foo, the key would be\n"
"'foo'.\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:576 mu/modes/api/flask.py:579
msgid ""
"Flask.full_dispatch_request() \n"
"Dispatches the request and on top of that performs request\n"
"pre and postprocessing as well as HTTP exception catching and\n"
"error handling.\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:582 mu/modes/api/flask.py:585
msgid ""
"Flask.get_send_file_max_age(filename) \n"
"Provides default cache_timeout for the send_file() functions.\n"
"By default, this function returns SEND_FILE_MAX_AGE_DEFAULT from\n"
"the configuration of current_app.\n"
"Static file functions such as send_from_directory() use this\n"
"function, and send_file() calls this function on\n"
"current_app when the given cache_timeout is None. If a\n"
"cache_timeout is given in send_file(), that timeout is used;\n"
"otherwise, this method is called.\n"
"This allows subclasses to change the behavior when sending files based\n"
"on the filename.  For example, to set the cache timeout for .js files\n"
"to 60 seconds:\n"
"class MyFlask(flask.Flask):\n"
"    def get_send_file_max_age(self, name):\n"
"        if name.lower().endswith('.js'):\n"
"            return 60\n"
"        return flask.Flask.get_send_file_max_age(self, name)\n"
"\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.9.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:588 mu/modes/api/flask.py:591
msgid ""
"Flask.got_first_request() \n"
"This attribute is set to True if the application started\n"
"handling the first request.\n"
"\n"
"Changelog\n"
"New in version 0.8.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:594 mu/modes/api/flask.py:597
msgid ""
"Flask.handle_exception(e) \n"
"Default exception handling that kicks in when an exception\n"
"occurs that is not caught.  In debug mode the exception will\n"
"be re-raised immediately, otherwise it is logged and the handler\n"
"for a 500 internal server error is used.  If no such handler\n"
"exists, a default 500 internal server error message is displayed.\n"
"\n"
"Changelog\n"
"New in version 0.3.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:600 mu/modes/api/flask.py:603
msgid ""
"Flask.handle_http_exception(e) \n"
"Handles an HTTP exception.  By default this will invoke the\n"
"registered error handlers and fall back to returning the\n"
"exception as response.\n"
"\n"
"Changelog\n"
"New in version 0.3.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:606 mu/modes/api/flask.py:609
msgid ""
"Flask.handle_url_build_error(error, endpoint, values) \n"
"Handle BuildError on url_for().\n"
msgstr ""

#: mu/modes/api/flask.py:612 mu/modes/api/flask.py:615
msgid ""
"Flask.handle_user_exception(e) \n"
"This method is called whenever an exception occurs that should be\n"
"handled.  A special case are\n"
"HTTPExceptions which are forwarded by\n"
"this function to the handle_http_exception() method.  This\n"
"function will either return a response value or reraise the\n"
"exception with the same traceback.\n"
"\n"
"Changed in version 1.0: Key errors raised from request data like form show "
"the the bad\n"
"key in debug mode rather than a generic bad request message.\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:618 mu/modes/api/flask.py:621
msgid ""
"Flask.has_static_folder() \n"
"This is True if the package bound object’s container has a\n"
"folder for static files.\n"
"\n"
"Changelog\n"
"New in version 0.5.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:624 mu/modes/api/flask.py:627
msgid ""
"Flask.import_name() \n"
"The name of the package or module that this app belongs to. Do not\n"
"change this once it is set by the constructor.\n"
msgstr ""

#: mu/modes/api/flask.py:630 mu/modes/api/flask.py:633
msgid ""
"Flask.inject_url_defaults(endpoint, values) \n"
"Injects the URL defaults for the given endpoint directly into\n"
"the values dictionary passed.  This is used internally and\n"
"automatically called on URL building.\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:636 mu/modes/api/flask.py:639
msgid ""
"Flask.instance_path() \n"
"Holds the path to the instance folder.\n"
"\n"
"Changelog\n"
"New in version 0.8.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:642 mu/modes/api/flask.py:645
msgid ""
"Flask.iter_blueprints() \n"
"Iterates over all blueprints by the order they were registered.\n"
"\n"
"Changelog\n"
"New in version 0.11.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:647 mu/modes/api/flask.py:648
msgid ""
"Flask.jinja_env() \n"
"The Jinja2 environment used to load templates.\n"
msgstr ""

#: mu/modes/api/flask.py:649 mu/modes/api/flask.py:650
msgid ""
"Flask.jinja_environment() \n"
"alias of flask.templating.Environment\n"
msgstr ""

#: mu/modes/api/flask.py:652 mu/modes/api/flask.py:655
msgid ""
"Flask.jinja_loader() \n"
"The Jinja loader for this package bound object.\n"
"\n"
"Changelog\n"
"New in version 0.5.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:658 mu/modes/api/flask.py:661
msgid ""
"Flask.jinja_options() \n"
"Options that are passed directly to the Jinja2 environment.\n"
msgstr ""

#: mu/modes/api/flask.py:663 mu/modes/api/flask.py:664
msgid ""
"Flask.json_decoder() \n"
"alias of flask.json.JSONDecoder\n"
msgstr ""

#: mu/modes/api/flask.py:665 mu/modes/api/flask.py:666
msgid ""
"Flask.json_encoder() \n"
"alias of flask.json.JSONEncoder\n"
msgstr ""

#: mu/modes/api/flask.py:668 mu/modes/api/flask.py:671
msgid ""
"Flask.log_exception(exc_info) \n"
"Logs an exception.  This is called by handle_exception()\n"
"if debugging is disabled and right before the handler is called.\n"
"The default implementation logs the exception as error on the\n"
"logger.\n"
"\n"
"Changelog\n"
"New in version 0.8.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:674 mu/modes/api/flask.py:677
msgid ""
"Flask.logger() \n"
"The 'flask.app' logger, a standard Python\n"
"Logger.\n"
"In debug mode, the logger’s level will be set\n"
"to DEBUG.\n"
"If there are no handlers configured, a default handler will be added.\n"
"See Logging for more information.\n"
"\n"
"Changed in version 1.0: Behavior was simplified. The logger is always named\n"
"flask.app. The level is only set during configuration, it\n"
"doesn’t check app.debug each time. Only one format is used,\n"
"not different ones depending on app.debug. No handlers are\n"
"removed, and a handler is only added if no handlers are already\n"
"configured.\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.3.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:680 mu/modes/api/flask.py:683
msgid ""
"Flask.make_config(instance_relative=False) \n"
"Used to create the config attribute by the Flask constructor.\n"
"The instance_relative parameter is passed in from the constructor\n"
"of Flask (there named instance_relative_config) and indicates if\n"
"the config should be relative to the instance path or the root path\n"
"of the application.\n"
"\n"
"Changelog\n"
"New in version 0.8.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:686 mu/modes/api/flask.py:689
msgid ""
"Flask.make_default_options_response() \n"
"This method is called to create the default OPTIONS response.\n"
"This can be changed through subclassing to change the default\n"
"behavior of OPTIONS responses.\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:692 mu/modes/api/flask.py:695
msgid ""
"Flask.make_null_session() \n"
"Creates a new instance of a missing session.  Instead of overriding\n"
"this method we recommend replacing the session_interface.\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:698 mu/modes/api/flask.py:701
msgid ""
"Flask.make_response(rv) \n"
"Convert the return value from a view function to an instance of\n"
"response_class.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:rv -- the return value from the view function. The view function\n"
"must return a response. Returning None, or the view ending\n"
"without returning, is not allowed. The following types are allowed\n"
"for view_rv:\n"
"\n"
"str (unicode in Python 2)\n"
"A response object is created with the string encoded to UTF-8\n"
"as the body.\n"
"bytes (str in Python 2)\n"
"A response object is created with the bytes as the body.\n"
"tuple\n"
"Either (body, status, headers), (body, status), or\n"
"(body, headers), where body is any of the other types\n"
"allowed here, status is a string or an integer, and\n"
"headers is a dictionary or a list of (key, value)\n"
"tuples. If body is a response_class instance,\n"
"status overwrites the exiting value and headers are\n"
"extended.\n"
"response_class\n"
"The object is returned unchanged.\n"
"other Response class\n"
"The object is coerced to response_class.\n"
"callable()\n"
"The function is called as a WSGI application. The result is\n"
"used to create a response object.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Changelog\n"
"Changed in version 0.9: Previously a tuple was interpreted as the arguments "
"for the\n"
"response object.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:704 mu/modes/api/flask.py:707
msgid ""
"Flask.make_shell_context() \n"
"Returns the shell context for an interactive shell for this\n"
"application.  This runs all the registered shell context\n"
"processors.\n"
"\n"
"Changelog\n"
"New in version 0.11.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:710 mu/modes/api/flask.py:713
msgid ""
"Flask.name() \n"
"The name of the application.  This is usually the import name\n"
"with the difference that it’s guessed from the run file if the\n"
"import name is main.  This name is used as a display name when\n"
"Flask needs the name of the application.  It can be set and overridden\n"
"to change the value.\n"
"\n"
"Changelog\n"
"New in version 0.8.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:716 mu/modes/api/flask.py:719
msgid ""
"Flask.open_instance_resource(resource, mode='rb') \n"
"Opens a resource from the application’s instance folder\n"
"(instance_path).  Otherwise works like\n"
"open_resource().  Instance resources can also be opened for\n"
"writing.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"resource -- the name of the resource.  To access resources within\n"
"subfolders use forward slashes as separator.\n"
"mode -- resource file opening mode, default is ‘rb’.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:722 mu/modes/api/flask.py:725
msgid ""
"Flask.open_resource(resource, mode='rb') \n"
"Opens a resource from the application’s resource folder.  To see\n"
"how this works, consider the following folder structure:\n"
"/myapplication.py\n"
"/schema.sql\n"
"/static\n"
"    /style.css\n"
"/templates\n"
"    /layout.html\n"
"    /index.html\n"
"\n"
"\n"
"If you want to open the schema.sql file you would do the\n"
"following:\n"
"with app.open_resource('schema.sql') as f:\n"
"    contents = f.read()\n"
"    do_something_with(contents)\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"resource -- the name of the resource.  To access resources within\n"
"subfolders use forward slashes as separator.\n"
"mode -- resource file opening mode, default is ‘rb’.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:728 mu/modes/api/flask.py:731
msgid ""
"Flask.open_session(request) \n"
"Creates or opens a new session.  Default implementation stores all\n"
"session data in a signed cookie.  This requires that the\n"
"secret_key is set.  Instead of overriding this method\n"
"we recommend replacing the session_interface.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:request -- an instance of request_class.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:734 mu/modes/api/flask.py:737
msgid ""
"Flask.permanent_session_lifetime() \n"
"A timedelta which is used to set the expiration\n"
"date of a permanent session.  The default is 31 days which makes a\n"
"permanent session survive for roughly one month.\n"
"This attribute can also be configured from the config with the\n"
"PERMANENT_SESSION_LIFETIME configuration key.  Defaults to\n"
"timedelta(days=31)\n"
msgstr ""

#: mu/modes/api/flask.py:740 mu/modes/api/flask.py:743
msgid ""
"Flask.preprocess_request() \n"
"Called before the request is dispatched. Calls\n"
"url_value_preprocessors registered with the app and the\n"
"current blueprint (if any). Then calls before_request_funcs\n"
"registered with the app and the blueprint.\n"
"If any before_request() handler returns a non-None value, the\n"
"value is handled as if it was the return value from the view, and\n"
"further request handling is stopped.\n"
msgstr ""

#: mu/modes/api/flask.py:746 mu/modes/api/flask.py:749
msgid ""
"Flask.preserve_context_on_exception() \n"
"Returns the value of the PRESERVE_CONTEXT_ON_EXCEPTION\n"
"configuration value in case it’s set, otherwise a sensible default\n"
"is returned.\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:752 mu/modes/api/flask.py:755
msgid ""
"Flask.process_response(response) \n"
"Can be overridden in order to modify the response object\n"
"before it’s sent to the WSGI server.  By default this will\n"
"call all the after_request() decorated functions.\n"
"\n"
"Changelog\n"
"Changed in version 0.5: As of Flask 0.5 the functions registered for after "
"request\n"
"execution are called in reverse order of registration.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:response -- a response_class object.\n"
"\n"
"Returns:a new response object or the same, has to be an\n"
"instance of response_class.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:758 mu/modes/api/flask.py:761
msgid ""
"Flask.propagate_exceptions() \n"
"Returns the value of the PROPAGATE_EXCEPTIONS configuration\n"
"value in case it’s set, otherwise a sensible default is returned.\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:764 mu/modes/api/flask.py:767
msgid ""
"Flask.register_blueprint(blueprint, **options) \n"
"Register a Blueprint on the application. Keyword\n"
"arguments passed to this method will override the defaults set on the\n"
"blueprint.\n"
"Calls the blueprint’s register() method after\n"
"recording the blueprint in the application’s blueprints.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"blueprint -- The blueprint to register.\n"
"url_prefix -- Blueprint routes will be prefixed with this.\n"
"subdomain -- Blueprint routes will match on this subdomain.\n"
"url_defaults -- Blueprint routes will use these default values for\n"
"view arguments.\n"
"options -- Additional keyword arguments are passed to\n"
"BlueprintSetupState. They can be\n"
"accessed in record() callbacks.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:770 mu/modes/api/flask.py:773
msgid ""
"Flask.register_error_handler(code_or_exception, f) \n"
"Alternative error attach function to the errorhandler()\n"
"decorator that is more straightforward to use for non decorator\n"
"usage.\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:775 mu/modes/api/flask.py:776
msgid ""
"Flask.request_class() \n"
"alias of flask.wrappers.Request\n"
msgstr ""

#: mu/modes/api/flask.py:778 mu/modes/api/flask.py:781
msgid ""
"Flask.request_context(environ) \n"
"Create a RequestContext representing a\n"
"WSGI environment. Use a with block to push the context,\n"
"which will make request point at this request.\n"
"See The Request Context.\n"
"Typically you should not call this from your own code. A request\n"
"context is automatically pushed by the wsgi_app() when\n"
"handling a request. Use test_request_context() to create\n"
"an environment and context instead of this method.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:environ -- a WSGI environment\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:783 mu/modes/api/flask.py:784
msgid ""
"Flask.response_class() \n"
"alias of flask.wrappers.Response\n"
msgstr ""

#: mu/modes/api/flask.py:786 mu/modes/api/flask.py:789
msgid ""
"Flask.root_path() \n"
"Absolute path to the package on the filesystem. Used to look up\n"
"resources contained in the package.\n"
msgstr ""

#: mu/modes/api/flask.py:792 mu/modes/api/flask.py:795
msgid ""
"Flask.route(rule, **options) \n"
"A decorator that is used to register a view function for a\n"
"given URL rule.  This does the same thing as add_url_rule()\n"
"but is intended for decorator usage:\n"
"@app.route('/')\n"
"def index():\n"
"    return 'Hello World'\n"
"\n"
"\n"
"For more information refer to URL Route Registrations.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"rule -- the URL rule as string\n"
"endpoint -- the endpoint for the registered URL rule.  Flask\n"
"itself assumes the name of the view function as\n"
"endpoint\n"
"options -- the options to be forwarded to the underlying\n"
"Rule object.  A change\n"
"to Werkzeug is handling of method options.  methods\n"
"is a list of methods this rule should be limited\n"
"to (GET, POST etc.).  By default a rule\n"
"just listens for GET (and implicitly HEAD).\n"
"Starting with Flask 0.6, OPTIONS is implicitly\n"
"added and handled by the standard request handling.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:798 mu/modes/api/flask.py:801
msgid ""
"Flask.run(host=None, port=None, debug=None, load_dotenv=True, **options) \n"
"Runs the application on a local development server.\n"
"Do not use run() in a production setting. It is not intended to\n"
"meet security and performance requirements for a production server.\n"
"Instead, see Deployment Options for WSGI server recommendations.\n"
"If the debug flag is set the server will automatically reload\n"
"for code changes and show a debugger in case an exception happened.\n"
"If you want to run the application in debug mode, but disable the\n"
"code execution on the interactive debugger, you can pass\n"
"use_evalex=False as parameter.  This will keep the debugger’s\n"
"traceback screen active, but disable code execution.\n"
"It is not recommended to use this function for development with\n"
"automatic reloading as this is badly supported.  Instead you should\n"
"be using the flask command line script’s run support.\n"
"\n"
"Keep in Mind\n"
"Flask will suppress any server error with a generic error page\n"
"unless it is in debug mode.  As such to enable just the\n"
"interactive debugger without the code reloading, you have to\n"
"invoke run() with debug=True and use_reloader=False.\n"
"Setting use_debugger to True without being in debug mode\n"
"won’t catch any exceptions because there won’t be any to\n"
"catch.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"host -- the hostname to listen on. Set this to '0.0.0.0' to\n"
"have the server available externally as well. Defaults to\n"
"'127.0.0.1' or the host in the SERVER_NAME config variable\n"
"if present.\n"
"port -- the port of the webserver. Defaults to 5000 or the\n"
"port defined in the SERVER_NAME config variable if present.\n"
"debug -- if given, enable or disable debug mode. See\n"
"debug.\n"
"load_dotenv -- Load the nearest .env and .flaskenv\n"
"files to set environment variables. Will also change the working\n"
"directory to the directory containing the first file found.\n"
"options -- the options to be forwarded to the underlying Werkzeug\n"
"server. See werkzeug.serving.run_simple() for more\n"
"information.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Changed in version 1.0: If installed, python-dotenv will be used to load "
"environment\n"
"variables from .env and .flaskenv files.\n"
"If set, the FLASK_ENV and FLASK_DEBUG\n"
"environment variables will override env and\n"
"debug.\n"
"Threaded mode is enabled by default.\n"
"\n"
"\n"
"Changelog\n"
"Changed in version 0.10: The default port is now picked from the "
"SERVER_NAME\n"
"variable.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:804 mu/modes/api/flask.py:807
msgid ""
"Flask.save_session(session, response) \n"
"Saves the session if it needs updates.  For the default\n"
"implementation, check open_session().  Instead of overriding this\n"
"method we recommend replacing the session_interface.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"session -- the session to be saved (a\n"
"SecureCookie\n"
"object)\n"
"response -- an instance of response_class\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:810 mu/modes/api/flask.py:813
msgid ""
"Flask.secret_key() \n"
"If a secret key is set, cryptographic components can use this to\n"
"sign cookies and other things. Set this to a complex random value\n"
"when you want to use the secure cookie for instance.\n"
"This attribute can also be configured from the config with the\n"
"SECRET_KEY configuration key. Defaults to None.\n"
msgstr ""

#: mu/modes/api/flask.py:816 mu/modes/api/flask.py:819
msgid ""
"Flask.select_jinja_autoescape(filename) \n"
"Returns True if autoescaping should be active for the given\n"
"template name. If no template name is given, returns True.\n"
"\n"
"Changelog\n"
"New in version 0.5.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:822 mu/modes/api/flask.py:825
msgid ""
"Flask.send_file_max_age_default() \n"
"A timedelta which is used as default cache_timeout\n"
"for the send_file() functions. The default is 12 hours.\n"
"This attribute can also be configured from the config with the\n"
"SEND_FILE_MAX_AGE_DEFAULT configuration key. This configuration\n"
"variable can also be set with an integer value used as seconds.\n"
"Defaults to timedelta(hours=12)\n"
msgstr ""

#: mu/modes/api/flask.py:828 mu/modes/api/flask.py:831
msgid ""
"Flask.send_static_file(filename) \n"
"Function used internally to send static files from the static\n"
"folder to the browser.\n"
"\n"
"Changelog\n"
"New in version 0.5.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:834 mu/modes/api/flask.py:837
msgid ""
"Flask.session_cookie_name() \n"
"The secure cookie uses this for the name of the session cookie.\n"
"This attribute can also be configured from the config with the\n"
"SESSION_COOKIE_NAME configuration key.  Defaults to 'session'\n"
msgstr ""

#: mu/modes/api/flask.py:840 mu/modes/api/flask.py:843
msgid ""
"Flask.session_interface() \n"
"the session interface to use.  By default an instance of\n"
"SecureCookieSessionInterface is used here.\n"
"\n"
"Changelog\n"
"New in version 0.8.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:846 mu/modes/api/flask.py:849
msgid ""
"Flask.shell_context_processor(f) \n"
"Registers a shell context processor function.\n"
"\n"
"Changelog\n"
"New in version 0.11.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:852 mu/modes/api/flask.py:855
msgid ""
"Flask.shell_context_processors() \n"
"A list of shell context processor functions that should be run\n"
"when a shell context is created.\n"
"\n"
"Changelog\n"
"New in version 0.11.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:858 mu/modes/api/flask.py:861
msgid ""
"Flask.should_ignore_error(error) \n"
"This is called to figure out if an error should be ignored\n"
"or not as far as the teardown system is concerned.  If this\n"
"function returns True then the teardown handlers will not be\n"
"passed the error.\n"
"\n"
"Changelog\n"
"New in version 0.10.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:864 mu/modes/api/flask.py:867
msgid ""
"Flask.static_folder() \n"
"The absolute path to the configured static folder.\n"
msgstr ""

#: mu/modes/api/flask.py:870 mu/modes/api/flask.py:873
msgid ""
"Flask.static_url_path() \n"
"The URL prefix that the static route will be registered for.\n"
msgstr ""

#: mu/modes/api/flask.py:876 mu/modes/api/flask.py:879
msgid ""
"Flask.teardown_appcontext(f) \n"
"Registers a function to be called when the application context\n"
"ends.  These functions are typically also called when the request\n"
"context is popped.\n"
"Example:\n"
"ctx = app.app_context()\n"
"ctx.push()\n"
"...\n"
"ctx.pop()\n"
"\n"
"\n"
"When ctx.pop() is executed in the above example, the teardown\n"
"functions are called just before the app context moves from the\n"
"stack of active contexts.  This becomes relevant if you are using\n"
"such constructs in tests.\n"
"Since a request context typically also manages an application\n"
"context it would also be called when you pop a request context.\n"
"When a teardown function was called because of an unhandled exception\n"
"it will be passed an error object. If an errorhandler() is\n"
"registered, it will handle the exception and the teardown will not\n"
"receive it.\n"
"The return values of teardown functions are ignored.\n"
"\n"
"Changelog\n"
"New in version 0.9.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:882 mu/modes/api/flask.py:885
msgid ""
"Flask.teardown_appcontext_funcs() \n"
"A list of functions that are called when the application context\n"
"is destroyed.  Since the application context is also torn down\n"
"if the request ends this is the place to store code that disconnects\n"
"from databases.\n"
"\n"
"Changelog\n"
"New in version 0.9.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:888 mu/modes/api/flask.py:891
msgid ""
"Flask.teardown_request(f) \n"
"Register a function to be run at the end of each request,\n"
"regardless of whether there was an exception or not.  These functions\n"
"are executed when the request context is popped, even if not an\n"
"actual request was performed.\n"
"Example:\n"
"ctx = app.test_request_context()\n"
"ctx.push()\n"
"...\n"
"ctx.pop()\n"
"\n"
"\n"
"When ctx.pop() is executed in the above example, the teardown\n"
"functions are called just before the request context moves from the\n"
"stack of active contexts.  This becomes relevant if you are using\n"
"such constructs in tests.\n"
"Generally teardown functions must take every necessary step to avoid\n"
"that they will fail.  If they do execute code that might fail they\n"
"will have to surround the execution of these code by try/except\n"
"statements and log occurring errors.\n"
"When a teardown function was called because of an exception it will\n"
"be passed an error object.\n"
"The return values of teardown functions are ignored.\n"
"\n"
"Debug Note\n"
"In debug mode Flask will not tear down a request on an exception\n"
"immediately.  Instead it will keep it alive so that the interactive\n"
"debugger can still access it.  This behavior can be controlled\n"
"by the PRESERVE_CONTEXT_ON_EXCEPTION configuration variable.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:894 mu/modes/api/flask.py:897
msgid ""
"Flask.teardown_request_funcs() \n"
"A dictionary with lists of functions that are called after\n"
"each request, even if an exception has occurred. The key of the\n"
"dictionary is the name of the blueprint this function is active for,\n"
"None for all requests. These functions are not allowed to modify\n"
"the request, and their return values are ignored. If an exception\n"
"occurred while processing the request, it gets passed to each\n"
"teardown_request function. To register a function here, use the\n"
"teardown_request() decorator.\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:900 mu/modes/api/flask.py:903
msgid ""
"Flask.template_context_processors() \n"
"A dictionary with list of functions that are called without argument\n"
"to populate the template context.  The key of the dictionary is the\n"
"name of the blueprint this function is active for, None for all\n"
"requests.  Each returns a dictionary that the template context is\n"
"updated with.  To register a function here, use the\n"
"context_processor() decorator.\n"
msgstr ""

#: mu/modes/api/flask.py:906 mu/modes/api/flask.py:909
msgid ""
"Flask.template_filter(name=None) \n"
"A decorator that is used to register custom template filter.\n"
"You can specify a name for the filter, otherwise the function\n"
"name will be used. Example:\n"
"@app.template_filter()\n"
"def reverse(s):\n"
"    return s[::-1]\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:name -- the optional name of the filter, otherwise the\n"
"function name will be used.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:912 mu/modes/api/flask.py:915
msgid ""
"Flask.template_folder() \n"
"Location of the template files to be added to the template lookup.\n"
"None if templates should not be added.\n"
msgstr ""

#: mu/modes/api/flask.py:918 mu/modes/api/flask.py:921
msgid ""
"Flask.template_global(name=None) \n"
"A decorator that is used to register a custom template global function.\n"
"You can specify a name for the global function, otherwise the function\n"
"name will be used. Example:\n"
"@app.template_global()\n"
"def double(n):\n"
"    return 2 * n\n"
"\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.10.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:name -- the optional name of the global function, otherwise the\n"
"function name will be used.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:924 mu/modes/api/flask.py:927
#, python-format
msgid ""
"Flask.template_test(name=None) \n"
"A decorator that is used to register custom template test.\n"
"You can specify a name for the test, otherwise the function\n"
"name will be used. Example:\n"
"@app.template_test()\n"
"def is_prime(n):\n"
"    if n == 2:\n"
"        return True\n"
"    for i in range(2, int(math.ceil(math.sqrt(n))) + 1):\n"
"        if n % i == 0:\n"
"            return False\n"
"    return True\n"
"\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.10.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:name -- the optional name of the test, otherwise the\n"
"function name will be used.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:930 mu/modes/api/flask.py:933
msgid ""
"Flask.templates_auto_reload() \n"
"Reload templates when they are changed. Used by\n"
"create_jinja_environment().\n"
"This attribute can be configured with TEMPLATES_AUTO_RELOAD. If\n"
"not set, it will be enabled in debug mode.\n"
"\n"
"New in version 1.0: This property was added but the underlying config and "
"behavior\n"
"already existed.\n"
"\n"
"\n"
"Changelog"
msgstr ""

#: mu/modes/api/flask.py:936 mu/modes/api/flask.py:939
msgid ""
"Flask.test_cli_runner(**kwargs) \n"
"Create a CLI runner for testing CLI commands.\n"
"See Testing CLI Commands.\n"
"Returns an instance of test_cli_runner_class, by default\n"
"FlaskCliRunner. The Flask app object is\n"
"passed as the first argument.\n"
"\n"
"New in version 1.0.\n"
"\n"
"\n"
"Changelog"
msgstr ""

#: mu/modes/api/flask.py:942 mu/modes/api/flask.py:945
msgid ""
"Flask.test_cli_runner_class() \n"
"The CliRunner subclass, by default\n"
"FlaskCliRunner that is used by\n"
"test_cli_runner(). Its __init__ method should take a\n"
"Flask app object as the first argument.\n"
"\n"
"New in version 1.0.\n"
"\n"
"\n"
"Changelog"
msgstr ""

#: mu/modes/api/flask.py:948 mu/modes/api/flask.py:951
msgid ""
"Flask.test_client(use_cookies=True, **kwargs) \n"
"Creates a test client for this application.  For information\n"
"about unit testing head over to Testing Flask Applications.\n"
"Note that if you are testing for assertions or exceptions in your\n"
"application code, you must set app.testing = True in order for the\n"
"exceptions to propagate to the test client.  Otherwise, the exception\n"
"will be handled by the application (not visible to the test client) and\n"
"the only indication of an AssertionError or other exception will be a\n"
"500 status code response to the test client.  See the testing\n"
"attribute.  For example:\n"
"app.testing = True\n"
"client = app.test_client()\n"
"\n"
"\n"
"The test client can be used in a with block to defer the closing down\n"
"of the context until the end of the with block.  This is useful if\n"
"you want to access the context locals for testing:\n"
"with app.test_client() as c:\n"
"    rv = c.get('/?vodka=42')\n"
"    assert request.args['vodka'] == '42'\n"
"\n"
"\n"
"Additionally, you may pass optional keyword arguments that will then\n"
"be passed to the application’s test_client_class constructor.\n"
"For example:\n"
"from flask.testing import FlaskClient\n"
"\n"
"class CustomClient(FlaskClient):\n"
"    def __init__(self, *args, **kwargs):\n"
"        self._authentication = kwargs.pop(\"authentication\")\n"
"        super(CustomClient,self).__init__( *args, **kwargs)\n"
"\n"
"app.test_client_class = CustomClient\n"
"client = app.test_client(authentication='Basic ....')\n"
"\n"
"\n"
"See FlaskClient for more information.\n"
"\n"
"Changelog\n"
"Changed in version 0.11: Added **kwargs to support passing additional "
"keyword arguments to\n"
"the constructor of test_client_class.\n"
"\n"
"\n"
"New in version 0.7: The use_cookies parameter was added as well as the "
"ability\n"
"to override the client to be used by setting the\n"
"test_client_class attribute.\n"
"\n"
"\n"
"Changed in version 0.4: added support for with block usage for the client.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:954 mu/modes/api/flask.py:957
msgid ""
"Flask.test_client_class() \n"
"the test client that is used with when test_client is used.\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:960 mu/modes/api/flask.py:963
msgid ""
"Flask.test_request_context(*args, **kwargs) \n"
"Create a RequestContext for a WSGI\n"
"environment created from the given values. This is mostly useful\n"
"during testing, where you may want to run a function that uses\n"
"request data without dispatching a full request.\n"
"See The Request Context.\n"
"Use a with block to push the context, which will make\n"
"request point at the request for the created\n"
"environment.\n"
"with test_request_context(...):\n"
"    generate_report()\n"
"\n"
"\n"
"When using the shell, it may be easier to push and pop the\n"
"context manually to avoid indentation.\n"
"ctx = app.test_request_context(...)\n"
"ctx.push()\n"
"...\n"
"ctx.pop()\n"
"\n"
"\n"
"Takes the same arguments as Werkzeug’s\n"
"EnvironBuilder, with some defaults from\n"
"the application. See the linked Werkzeug docs for most of the\n"
"available arguments. Flask-specific behavior is listed here.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"path -- URL path being requested.\n"
"base_url -- Base URL where the app is being served, which\n"
"path is relative to. If not given, built from\n"
"PREFERRED_URL_SCHEME, subdomain,\n"
"SERVER_NAME, and APPLICATION_ROOT.\n"
"subdomain -- Subdomain name to append to\n"
"SERVER_NAME.\n"
"url_scheme -- Scheme to use instead of\n"
"PREFERRED_URL_SCHEME.\n"
"data -- The request body, either as a string or a dict of\n"
"form keys and values.\n"
"json -- If given, this is serialized as JSON and passed as\n"
"data. Also defaults content_type to\n"
"application/json.\n"
"args -- other positional arguments passed to\n"
"EnvironBuilder.\n"
"kwargs -- other keyword arguments passed to\n"
"EnvironBuilder.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:966 mu/modes/api/flask.py:969
msgid ""
"Flask.testing() \n"
"The testing flag.  Set this to True to enable the test mode of\n"
"Flask extensions (and in the future probably also Flask itself).\n"
"For example this might activate test helpers that have an\n"
"additional runtime cost which should not be enabled by default.\n"
"If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the\n"
"default it’s implicitly enabled.\n"
"This attribute can also be configured from the config with the\n"
"TESTING configuration key.  Defaults to False.\n"
msgstr ""

#: mu/modes/api/flask.py:972 mu/modes/api/flask.py:975
msgid ""
"Flask.trap_http_exception(e) \n"
"Checks if an HTTP exception should be trapped or not.  By default\n"
"this will return False for all exceptions except for a bad request\n"
"key error if TRAP_BAD_REQUEST_ERRORS is set to True.  It\n"
"also returns True if TRAP_HTTP_EXCEPTIONS is set to True.\n"
"This is called for all HTTP exceptions raised by a view function.\n"
"If it returns True for any exception the error handler for this\n"
"exception is not called and it shows up as regular exception in the\n"
"traceback.  This is helpful for debugging implicitly raised HTTP\n"
"exceptions.\n"
"\n"
"Changed in version 1.0: Bad request errors are not trapped by default in "
"debug mode.\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.8.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:978 mu/modes/api/flask.py:981
msgid ""
"Flask.update_template_context(context) \n"
"Update the template context with some commonly used variables.\n"
"This injects request, session, config and g into the template\n"
"context as well as everything template context processors want\n"
"to inject.  Note that the as of Flask 0.6, the original values\n"
"in the context will not be overridden if a context processor\n"
"decides to return a value with the same key.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:context -- the context as a dictionary that is updated in place\n"
"to add extra variables.\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:984 mu/modes/api/flask.py:987
msgid ""
"Flask.url_build_error_handlers() \n"
"A list of functions that are called when url_for() raises a\n"
"BuildError.  Each function registered here\n"
"is called with error, endpoint and values.  If a function\n"
"returns None or raises a BuildError the next function is\n"
"tried.\n"
"\n"
"Changelog\n"
"New in version 0.9.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:990 mu/modes/api/flask.py:993
msgid ""
"Flask.url_default_functions() \n"
"A dictionary with lists of functions that can be used as URL value\n"
"preprocessors.  The key None here is used for application wide\n"
"callbacks, otherwise the key is the name of the blueprint.\n"
"Each of these functions has the chance to modify the dictionary\n"
"of URL values before they are used as the keyword arguments of the\n"
"view function.  For each function registered this one should also\n"
"provide a url_defaults() function that adds the parameters\n"
"automatically again that were removed that way.\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:996 mu/modes/api/flask.py:999
msgid ""
"Flask.url_defaults(f) \n"
"Callback function for URL defaults for all view functions of the\n"
"application.  It’s called with the endpoint and values and should\n"
"update the values passed in place.\n"
msgstr ""

#: mu/modes/api/flask.py:1002 mu/modes/api/flask.py:1005
msgid ""
"Flask.url_map() \n"
"The Map for this instance.  You can use\n"
"this to change the routing converters after the class was created\n"
"but before any routes are connected.  Example:\n"
"from werkzeug.routing import BaseConverter\n"
"\n"
"class ListConverter(BaseConverter):\n"
"    def to_python(self, value):\n"
"        return value.split(',')\n"
"    def to_url(self, values):\n"
"        return ','.join(super(ListConverter, self).to_url(value)\n"
"                        for value in values)\n"
"\n"
"app = Flask(__name__)\n"
"app.url_map.converters['list'] = ListConverter\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1007 mu/modes/api/flask.py:1008
msgid ""
"Flask.url_rule_class() \n"
"alias of werkzeug.routing.Rule\n"
msgstr ""

#: mu/modes/api/flask.py:1010 mu/modes/api/flask.py:1013
msgid ""
"Flask.url_value_preprocessor(f) \n"
"Register a URL value preprocessor function for all view\n"
"functions in the application. These functions will be called before the\n"
"before_request() functions.\n"
"The function can modify the values captured from the matched url before\n"
"they are passed to the view. For example, this can be used to pop a\n"
"common language code value and place it in g rather than pass it to\n"
"every view.\n"
"The function is passed the endpoint name and values dict. The return\n"
"value is ignored.\n"
msgstr ""

#: mu/modes/api/flask.py:1016 mu/modes/api/flask.py:1019
msgid ""
"Flask.url_value_preprocessors() \n"
"A dictionary with lists of functions that are called before the\n"
"before_request_funcs functions. The key of the dictionary is\n"
"the name of the blueprint this function is active for, or None\n"
"for all requests. To register a function, use\n"
"url_value_preprocessor().\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1022 mu/modes/api/flask.py:1025
msgid ""
"Flask.use_x_sendfile() \n"
"Enable this if you want to use the X-Sendfile feature.  Keep in\n"
"mind that the server has to support this.  This only affects files\n"
"sent with the send_file() method.\n"
"\n"
"Changelog\n"
"New in version 0.2.\n"
"\n"
"This attribute can also be configured from the config with the\n"
"USE_X_SENDFILE configuration key.  Defaults to False.\n"
msgstr ""

#: mu/modes/api/flask.py:1028 mu/modes/api/flask.py:1031
msgid ""
"Flask.view_functions() \n"
"A dictionary of all view functions registered.  The keys will\n"
"be function names which are also used to generate URLs and\n"
"the values are the function objects themselves.\n"
"To register a view function, use the route() decorator.\n"
msgstr ""

#: mu/modes/api/flask.py:1034 mu/modes/api/flask.py:1037
msgid ""
"Flask.wsgi_app(environ, start_response) \n"
"The actual WSGI application. This is not implemented in\n"
"__call__() so that middlewares can be applied without\n"
"losing a reference to the app object. Instead of doing this:\n"
"app = MyMiddleware(app)\n"
"\n"
"\n"
"It’s a better idea to do this instead:\n"
"app.wsgi_app = MyMiddleware(app.wsgi_app)\n"
"\n"
"\n"
"Then you still have the original application object around and\n"
"can continue to call methods on it.\n"
"\n"
"Changelog\n"
"Changed in version 0.7: Teardown events for the request and app contexts are "
"called\n"
"even if an unhandled error occurs. Other events may not be\n"
"called depending on when an error occurs during dispatch.\n"
"See Callbacks and Errors.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"environ -- A WSGI environment.\n"
"start_response -- A callable accepting a status code,\n"
"a list of headers, and an optional exception context to\n"
"start the response.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1040 mu/modes/api/flask.py:1043
msgid ""
"FlaskCliRunner(app, **kwargs) \n"
"A CliRunner for testing a Flask app’s\n"
"CLI commands. Typically created using\n"
"test_cli_runner(). See Testing CLI Commands.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1046 mu/modes/api/flask.py:1049
msgid ""
"FlaskCliRunner.invoke(cli=None, args=None, **kwargs) \n"
"Invokes a CLI command in an isolated environment. See\n"
"CliRunner.invoke for\n"
"full method documentation. See Testing CLI Commands for examples.\n"
"If the obj argument is not given, passes an instance of\n"
"ScriptInfo that knows how to load the Flask\n"
"app being tested.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"cli -- Command object to invoke. Default is the app’s\n"
"cli group.\n"
"args -- List of strings to invoke the command with.\n"
"\n"
"\n"
"\n"
"Returns:a Result object.\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1052 mu/modes/api/flask.py:1055
msgid ""
"FlaskClient(*args, **kwargs) \n"
"Works like a regular Werkzeug test client but has some knowledge about\n"
"how Flask works to defer the cleanup of the request context stack to the\n"
"end of a with body when used in a with statement.  For general\n"
"information about how to use this class refer to\n"
"werkzeug.test.Client.\n"
"\n"
"Basic usage is outlined in the Testing Flask Applications chapter.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1058 mu/modes/api/flask.py:1061
msgid ""
"FlaskClient.open(*args, **kwargs) \n"
"Takes the same arguments as the EnvironBuilder class with\n"
"some additions:  You can provide a EnvironBuilder or a WSGI\n"
"environment as only argument instead of the EnvironBuilder\n"
"arguments and two optional keyword arguments (as_tuple, buffered)\n"
"that change the type of the return value or the way the application is\n"
"executed.\n"
"\n"
"Changelog\n"
"Changed in version 0.5: If a dict is provided as file in the dict for the "
"data parameter\n"
"the content type has to be called content_type now instead of\n"
"mimetype.  This change was made for consistency with\n"
"werkzeug.FileWrapper.\n"
"\n"
"The follow_redirects parameter was added to open().\n"
"\n"
"Additional parameters:\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"as_tuple -- Returns a tuple in the form (environ, result)\n"
"buffered -- Set this to True to buffer the application run.\n"
"This will automatically close the application for\n"
"you as well.\n"
"follow_redirects -- Set this to True if the Client should\n"
"follow HTTP redirects.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1064 mu/modes/api/flask.py:1067
msgid ""
"FlaskClient.session_transaction(*args, **kwargs) \n"
"When used in combination with a with statement this opens a\n"
"session transaction.  This can be used to modify the session that\n"
"the test client uses.  Once the with block is left the session is\n"
"stored back.\n"
"with client.session_transaction() as session:\n"
"    session['value'] = 42\n"
"\n"
"\n"
"Internally this is implemented by going through a temporary test\n"
"request context and since session handling could depend on\n"
"request variables this function accepts the same arguments as\n"
"test_request_context() which are directly\n"
"passed through.\n"
msgstr ""

#: mu/modes/api/flask.py:1070 mu/modes/api/flask.py:1073
msgid ""
"FlaskGroup(add_default_commands=True, create_app=None, "
"add_version_option=True, load_dotenv=True, **extra) \n"
"Special subclass of the AppGroup group that supports\n"
"loading more commands from the configured Flask app.  Normally a\n"
"developer does not have to interface with this class but there are\n"
"some very advanced use cases for which it makes sense to create an\n"
"instance of this.\n"
"\n"
"For information as of why this is useful see Custom Scripts.\n"
"\n"
"\n"
"Parameters:\n"
"add_default_commands -- if this is True then the default run and\n"
"shell commands wil be added.\n"
"add_version_option -- adds the --version option.\n"
"create_app -- an optional callback that is passed the script info and\n"
"returns the loaded app.\n"
"load_dotenv -- Load the nearest .env and .flaskenv\n"
"files to set environment variables. Will also change the working\n"
"directory to the directory containing the first file found."
msgstr ""

#: mu/modes/api/flask.py:1076 mu/modes/api/flask.py:1079
msgid ""
"FlaskGroup.get_command(ctx, name) \n"
"Given a context and a command name, this returns a\n"
"Command object if it exists or returns None.\n"
msgstr ""

#: mu/modes/api/flask.py:1082 mu/modes/api/flask.py:1085
msgid ""
"FlaskGroup.list_commands(ctx) \n"
"Returns a list of subcommand names in the order they should\n"
"appear.\n"
msgstr ""

#: mu/modes/api/flask.py:1088 mu/modes/api/flask.py:1091
msgid ""
"FlaskGroup.main(*args, **kwargs) \n"
"This is the way to invoke a script with all the bells and\n"
"whistles as a command line application.  This will always terminate\n"
"the application after a call.  If this is not wanted, SystemExit\n"
"needs to be caught.\n"
"This method is also available by directly calling the instance of\n"
"a Command.\n"
"\n"
"New in version 3.0: Added the standalone_mode flag to control the standalone "
"mode.\n"
"\n"
"\n"
"Changelog\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"args -- the arguments that should be used for parsing.  If not\n"
"provided, sys.argv[1:] is used.\n"
"prog_name -- the program name that should be used.  By default\n"
"the program name is constructed by taking the file\n"
"name from sys.argv[0].\n"
"complete_var -- the environment variable that controls the\n"
"bash completion support.  The default is\n"
"\"_<prog_name>_COMPLETE\" with prog name in\n"
"uppercase.\n"
"standalone_mode -- the default behavior is to invoke the script\n"
"in standalone mode.  Click will then\n"
"handle exceptions and convert them into\n"
"error messages and the function will never\n"
"return but shut down the interpreter.  If\n"
"this is set to False they will be\n"
"propagated to the caller and the return\n"
"value of this function is the return value\n"
"of invoke().\n"
"extra -- extra keyword arguments are forwarded to the context\n"
"constructor.  See Context for more information.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1094 mu/modes/api/flask.py:1097
msgid ""
"JSONDecoder(*, object_hook=None, parse_float=None, parse_int=None, "
"parse_constant=None, strict=True, object_pairs_hook=None) \n"
"The default JSON decoder.  This one does not change the behavior from\n"
"the default simplejson decoder.  Consult the json documentation\n"
"for more information.  This decoder is not only used for the load\n"
"functions of this module but also Request.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1100 mu/modes/api/flask.py:1103
msgid ""
"JSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, "
"allow_nan=True, sort_keys=False, indent=None, separators=None, "
"default=None) \n"
"The default Flask JSON encoder.  This one extends the default simplejson\n"
"encoder by also supporting datetime objects, UUID as well as\n"
"Markup objects which are serialized as RFC 822 datetime strings (same\n"
"as the HTTP date format).  In order to support more data types override the\n"
"default() method.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1106 mu/modes/api/flask.py:1109
msgid ""
"JSONEncoder.default(o) \n"
"Implement this method in a subclass such that it returns a\n"
"serializable object for o, or calls the base implementation (to\n"
"raise a TypeError).\n"
"For example, to support arbitrary iterators, you could implement\n"
"default like this:\n"
"def default(self, o):\n"
"    try:\n"
"        iterable = iter(o)\n"
"    except TypeError:\n"
"        pass\n"
"    else:\n"
"        return list(iterable)\n"
"    return JSONEncoder.default(self, o)\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1112 mu/modes/api/flask.py:1115
msgid ""
"JSONTag(serializer) \n"
"Base class for defining type tags for TaggedJSONSerializer.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1118 mu/modes/api/flask.py:1121
msgid ""
"JSONTag.check(value) \n"
"Check if the given value should be tagged by this tag.\n"
msgstr ""

#: mu/modes/api/flask.py:1124 mu/modes/api/flask.py:1127
msgid ""
"JSONTag.key() \n"
"The tag to mark the serialized object with. If None, this tag is\n"
"only used as an intermediate step during tagging.\n"
msgstr ""

#: mu/modes/api/flask.py:1130 mu/modes/api/flask.py:1133
msgid ""
"JSONTag.tag(value) \n"
"Convert the value to a valid JSON type and add the tag structure\n"
"around it.\n"
msgstr ""

#: mu/modes/api/flask.py:1136 mu/modes/api/flask.py:1139
msgid ""
"JSONTag.to_json(value) \n"
"Convert the Python object to an object that is a valid JSON type.\n"
"The tag will be added later.\n"
msgstr ""

#: mu/modes/api/flask.py:1142 mu/modes/api/flask.py:1145
msgid ""
"JSONTag.to_python(value) \n"
"Convert the JSON representation back to the correct type. The tag\n"
"will already be removed.\n"
msgstr ""

#: mu/modes/api/flask.py:1148 mu/modes/api/flask.py:1151
msgid ""
"Markup() \n"
"Marks a string as being safe for inclusion in HTML/XML output without\n"
"needing to be escaped.  This implements the __html__ interface a couple\n"
"of frameworks and web applications use.  Markup is a direct\n"
"subclass of unicode and provides all the methods of unicode just that\n"
"it escapes arguments passed and always returns Markup.\n"
"\n"
"The escape function returns markup objects so that double escaping can’t\n"
"happen.\n"
"\n"
"The constructor of the Markup class can be used for three\n"
"different things:  When passed an unicode object it’s assumed to be safe,\n"
"when passed an object with an HTML representation (has an __html__\n"
"method) that representation is used, otherwise the object passed is\n"
"converted into a unicode string and then assumed to be safe:\n"
"\n"
"If you want object passed being always treated as unsafe you can use the\n"
"escape() classmethod to create a Markup object:\n"
"\n"
"Operations on a markup string are markup aware which means that all\n"
"arguments are passed through the escape() function:\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1154 mu/modes/api/flask.py:1157
msgid ""
"Markup.striptags() \n"
"Unescape markup into an text_type string and strip all tags.  This\n"
"also resolves known HTML4 and XHTML entities.  Whitespace is\n"
"normalized to one:\n"
">>> Markup(\"Main &raquo;  <em>About</em>\").striptags()\n"
"u'Main \\xbb About'\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1160 mu/modes/api/flask.py:1163
msgid ""
"Markup.unescape() \n"
"Unescape markup again into an text_type string.  This also resolves\n"
"known HTML4 and XHTML entities:\n"
">>> Markup(\"Main &raquo; <em>About</em>\").unescape()\n"
"u'Main \\xbb <em>About</em>'\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1166 mu/modes/api/flask.py:1169
msgid ""
"MethodView() \n"
"A class-based view that dispatches request methods to the corresponding\n"
"class methods. For example, if you implement a get method, it will be\n"
"used to handle GET requests.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1172 mu/modes/api/flask.py:1175
msgid ""
"MethodView.dispatch_request(*args, **kwargs) \n"
"Subclasses have to override this method to implement the\n"
"actual view function code.  This method is called with all\n"
"the arguments from the URL rule.\n"
msgstr ""

#: mu/modes/api/flask.py:1178 mu/modes/api/flask.py:1181
msgid ""
"Namespace() \n"
"An alias for blinker.base.Namespace if blinker is available,\n"
"otherwise a dummy class that creates fake signals.  This class is\n"
"available for Flask extensions that want to provide the same fallback\n"
"system as Flask itself.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1184 mu/modes/api/flask.py:1187
msgid ""
"Namespace.signal(name, doc=None) \n"
"Creates a new signal for this namespace if blinker is available,\n"
"otherwise returns a fake signal that has a send method that will\n"
"do nothing but will fail with a RuntimeError for all other\n"
"operations, including connecting.\n"
msgstr ""

#: mu/modes/api/flask.py:1190 mu/modes/api/flask.py:1193
msgid ""
"NullSession(initial=None) \n"
"Class used to generate nicer error messages if sessions are not\n"
"available.  Will still allow read-only access to the empty session\n"
"but fail on setting.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1196 mu/modes/api/flask.py:1199
msgid ""
"Request(environ, populate_request=True, shallow=False) \n"
"The request object used by default in Flask.  Remembers the\n"
"matched endpoint and view arguments.\n"
"\n"
"It is what ends up as request.  If you want to replace\n"
"the request object used you can subclass this and set\n"
"request_class to your subclass.\n"
"\n"
"The request object is a Request subclass and\n"
"provides all of the attributes Werkzeug defines plus a few Flask\n"
"specific ones.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1202 mu/modes/api/flask.py:1205
msgid ""
"Request.accept_charsets() \n"
"List of charsets this client supports as\n"
"CharsetAccept object.\n"
msgstr ""

#: mu/modes/api/flask.py:1208 mu/modes/api/flask.py:1211
msgid ""
"Request.accept_encodings() \n"
"List of encodings this client accepts.  Encodings in a HTTP term\n"
"are compression encodings such as gzip.  For charsets have a look at\n"
"accept_charset.\n"
msgstr ""

#: mu/modes/api/flask.py:1214 mu/modes/api/flask.py:1217
msgid ""
"Request.accept_languages() \n"
"List of languages this client accepts as\n"
"LanguageAccept object.\n"
msgstr ""

#: mu/modes/api/flask.py:1220 mu/modes/api/flask.py:1223
msgid ""
"Request.accept_mimetypes() \n"
"List of mimetypes this client supports as\n"
"MIMEAccept object.\n"
msgstr ""

#: mu/modes/api/flask.py:1226 mu/modes/api/flask.py:1229
msgid ""
"Request.access_route() \n"
"If a forwarded header exists this is a list of all ip addresses\n"
"from the client ip to the last proxy server.\n"
msgstr ""

#: mu/modes/api/flask.py:1232 mu/modes/api/flask.py:1235
msgid ""
"Request.args() \n"
"The parsed URL parameters (the part in the URL after the question\n"
"mark).\n"
"By default an\n"
"ImmutableMultiDict\n"
"is returned from this function.  This can be changed by setting\n"
"parameter_storage_class to a different type.  This might\n"
"be necessary if the order of the form data is important.\n"
msgstr ""

#: mu/modes/api/flask.py:1237 mu/modes/api/flask.py:1238
msgid ""
"Request.authorization() \n"
"The Authorization object in parsed form.\n"
msgstr ""

#: mu/modes/api/flask.py:1239 mu/modes/api/flask.py:1243
msgid "Request.base_url() \n"
msgstr ""

#: mu/modes/api/flask.py:1241 mu/modes/api/flask.py:1245
msgid ""
"Request.base_url() \n"
"Like url but without the querystring\n"
"See also: trusted_hosts.\n"
msgstr ""

#: mu/modes/api/flask.py:1247 mu/modes/api/flask.py:1248
msgid ""
"Request.blueprint() \n"
"The name of the current blueprint\n"
msgstr ""

#: mu/modes/api/flask.py:1250 mu/modes/api/flask.py:1253
msgid ""
"Request.cache_control() \n"
"A RequestCacheControl object\n"
"for the incoming cache control headers.\n"
msgstr ""

#: mu/modes/api/flask.py:1256 mu/modes/api/flask.py:1259
msgid ""
"Request.close() \n"
"Closes associated resources of this request object.  This\n"
"closes all file handles explicitly.  You can also use the request\n"
"object in a with statement which will automatically close it.\n"
"\n"
"Changelog\n"
"New in version 0.9.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1262 mu/modes/api/flask.py:1265
msgid ""
"Request.content_encoding() \n"
"The Content-Encoding entity-header field is used as a modifier to the\n"
"media-type.  When present, its value indicates what additional content\n"
"codings have been applied to the entity-body, and thus what decoding\n"
"mechanisms must be applied in order to obtain the media-type\n"
"referenced by the Content-Type header field.\n"
"\n"
"Changelog\n"
"New in version 0.9.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1268 mu/modes/api/flask.py:1271
msgid ""
"Request.content_length() \n"
"The Content-Length entity-header field indicates the size of the\n"
"entity-body in bytes or, in the case of the HEAD method, the size of\n"
"the entity-body that would have been sent had the request been a\n"
"GET.\n"
msgstr ""

#: mu/modes/api/flask.py:1274 mu/modes/api/flask.py:1277
msgid ""
"Request.content_md5() \n"
"\n"
"The Content-MD5 entity-header field, as defined in RFC 1864, is an\n"
"MD5 digest of the entity-body for the purpose of providing an\n"
"end-to-end message integrity check (MIC) of the entity-body.  (Note:\n"
"a MIC is good for detecting accidental modification of the\n"
"entity-body in transit, but is not proof against malicious attacks.)\n"
"\n"
"Changelog\n"
"New in version 0.9.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1280 mu/modes/api/flask.py:1283
msgid ""
"Request.content_type() \n"
"The Content-Type entity-header field indicates the media type of\n"
"the entity-body sent to the recipient or, in the case of the HEAD\n"
"method, the media type that would have been sent had the request\n"
"been a GET.\n"
msgstr ""

#: mu/modes/api/flask.py:1286 mu/modes/api/flask.py:1289
msgid ""
"Request.cookies() \n"
"A dict with the contents of all cookies transmitted with\n"
"the request.\n"
msgstr ""

#: mu/modes/api/flask.py:1292 mu/modes/api/flask.py:1295
msgid ""
"Request.data() \n"
"Contains the incoming request data as string in case it came with\n"
"a mimetype Werkzeug does not handle.\n"
msgstr ""

#: mu/modes/api/flask.py:1298 mu/modes/api/flask.py:1301
msgid ""
"Request.date() \n"
"The Date general-header field represents the date and time at which\n"
"the message was originated, having the same semantics as orig-date\n"
"in RFC 822.\n"
msgstr ""

#: mu/modes/api/flask.py:1304 mu/modes/api/flask.py:1307
msgid ""
"Request.dict_storage_class() \n"
"alias of werkzeug.datastructures.ImmutableTypeConversionDict\n"
msgstr ""

#: mu/modes/api/flask.py:1310 mu/modes/api/flask.py:1313
msgid ""
"Request.endpoint() \n"
"The endpoint that matched the request.  This in combination with\n"
"view_args can be used to reconstruct the same or a\n"
"modified URL.  If an exception happened when matching, this will\n"
"be None.\n"
msgstr ""

#: mu/modes/api/flask.py:1315 mu/modes/api/flask.py:1316
msgid ""
"Request.environ() \n"
"The underlying WSGI environment.\n"
msgstr ""

#: mu/modes/api/flask.py:1318 mu/modes/api/flask.py:1321
msgid ""
"Request.files() \n"
"MultiDict object containing\n"
"all uploaded files.  Each key in files is the name from the\n"
"<input type=\"file\" name=\"\">.  Each value in files is a\n"
"Werkzeug FileStorage object.\n"
"It basically behaves like a standard file object you know from Python,\n"
"with the difference that it also has a\n"
"save() function that can\n"
"store the file on the filesystem.\n"
"Note that files will only contain data if the request method was\n"
"POST, PUT or PATCH and the <form> that posted to the request had\n"
"enctype=\"multipart/form-data\".  It will be empty otherwise.\n"
"See the MultiDict /\n"
"FileStorage documentation for\n"
"more details about the used data structure.\n"
msgstr ""

#: mu/modes/api/flask.py:1324 mu/modes/api/flask.py:1327
msgid ""
"Request.form() \n"
"The form parameters.  By default an\n"
"ImmutableMultiDict\n"
"is returned from this function.  This can be changed by setting\n"
"parameter_storage_class to a different type.  This might\n"
"be necessary if the order of the form data is important.\n"
"Please keep in mind that file uploads will not end up here, but instead\n"
"in the files attribute.\n"
"\n"
"Changelog\n"
"Changed in version 0.9: Previous to Werkzeug 0.9 this would only contain "
"form data for POST\n"
"and PUT requests.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1330 mu/modes/api/flask.py:1333
msgid ""
"Request.form_data_parser_class() \n"
"alias of werkzeug.formparser.FormDataParser\n"
msgstr ""

#: mu/modes/api/flask.py:1335 mu/modes/api/flask.py:1339
msgid "Request.full_path() \n"
msgstr ""

#: mu/modes/api/flask.py:1337 mu/modes/api/flask.py:1341
msgid ""
"Request.full_path() \n"
"Requested path as unicode, including the query string.\n"
msgstr ""

#: mu/modes/api/flask.py:1344 mu/modes/api/flask.py:1347
msgid ""
"Request.get_data(cache=True, as_text=False, parse_form_data=False) \n"
"This reads the buffered incoming data from the client into one\n"
"bytestring.  By default this is cached but that behavior can be\n"
"changed by setting cache to False.\n"
"Usually it’s a bad idea to call this method without checking the\n"
"content length first as a client could send dozens of megabytes or more\n"
"to cause memory problems on the server.\n"
"Note that if the form data was already parsed this method will not\n"
"return anything as form data parsing does not cache the data like\n"
"this method does.  To implicitly invoke form data parsing function\n"
"set parse_form_data to True.  When this is done the return value\n"
"of this method will be an empty string if the form parser handles\n"
"the data.  This generally is not necessary as if the whole data is\n"
"cached (which is the default) the form parser will used the cached\n"
"data to parse the form data.  Please be generally aware of checking\n"
"the content length first in any case before calling this method\n"
"to avoid exhausting server memory.\n"
"If as_text is set to True the return value will be a decoded\n"
"unicode string.\n"
"\n"
"Changelog\n"
"New in version 0.9.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1350 mu/modes/api/flask.py:1353
msgid ""
"Request.get_json(force=False, silent=False, cache=True, <em class=\"mimetype"
"\">application/json) \n"
"Parse and return the data as JSON. If the mimetype does not\n"
"indicate JSON (application/json, see\n"
"is_json()), this returns None unless force is\n"
"true. If parsing fails, on_json_loading_failed() is called\n"
"and its return value is used as the return value.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"force -- Ignore the mimetype and always try to parse JSON.\n"
"silent -- Silence parsing errors and return None\n"
"instead.\n"
"cache -- Store the parsed JSON to return for subsequent\n"
"calls.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1356 mu/modes/api/flask.py:1359
msgid ""
"Request.headers() \n"
"The headers from the WSGI environ as immutable\n"
"EnvironHeaders.\n"
msgstr ""

#: mu/modes/api/flask.py:1362 mu/modes/api/flask.py:1365
msgid ""
"Request.host() \n"
"Just the host including the port if available.\n"
"See also: trusted_hosts.\n"
msgstr ""

#: mu/modes/api/flask.py:1368 mu/modes/api/flask.py:1371
msgid ""
"Request.host_url() \n"
"Just the host with scheme as IRI.\n"
"See also: trusted_hosts.\n"
msgstr ""

#: mu/modes/api/flask.py:1374 mu/modes/api/flask.py:1377
msgid ""
"Request.if_match() \n"
"An object containing all the etags in the If-Match header.\n"
"\n"
"\n"
"\n"
"\n"
"Return type:ETags\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1380 mu/modes/api/flask.py:1383
msgid ""
"Request.if_modified_since() \n"
"The parsed If-Modified-Since header as datetime object.\n"
msgstr ""

#: mu/modes/api/flask.py:1386 mu/modes/api/flask.py:1389
msgid ""
"Request.if_none_match() \n"
"An object containing all the etags in the If-None-Match header.\n"
"\n"
"\n"
"\n"
"\n"
"Return type:ETags\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1392 mu/modes/api/flask.py:1395
msgid ""
"Request.if_range() \n"
"The parsed If-Range header.\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Return type:IfRange\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1398 mu/modes/api/flask.py:1401
msgid ""
"Request.if_unmodified_since() \n"
"The parsed If-Unmodified-Since header as datetime object.\n"
msgstr ""

#: mu/modes/api/flask.py:1404 mu/modes/api/flask.py:1407
msgid ""
"Request.is_json() \n"
"Check if the mimetype indicates JSON data, either\n"
"application/json or application/*+json.\n"
"\n"
"Changelog\n"
"New in version 0.11.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1410 mu/modes/api/flask.py:1413
msgid ""
"Request.is_multiprocess() \n"
"boolean that is True if the application is served by\n"
"a WSGI server that spawns multiple processes.\n"
msgstr ""

#: mu/modes/api/flask.py:1416 mu/modes/api/flask.py:1419
msgid ""
"Request.is_multithread() \n"
"boolean that is True if the application is served by\n"
"a multithreaded WSGI server.\n"
msgstr ""

#: mu/modes/api/flask.py:1422 mu/modes/api/flask.py:1425
msgid ""
"Request.is_run_once() \n"
"boolean that is True if the application will be executed only\n"
"once in a process lifetime.  This is the case for CGI for example,\n"
"but it’s not guaranteed that the execution only happens one time.\n"
msgstr ""

#: mu/modes/api/flask.py:1427 mu/modes/api/flask.py:1428
msgid ""
"Request.is_secure() \n"
"True if the request is secure.\n"
msgstr ""

#: mu/modes/api/flask.py:1430 mu/modes/api/flask.py:1433
msgid ""
"Request.is_xhr() \n"
"True if the request was triggered via a JavaScript XMLHttpRequest.\n"
"This only works with libraries that support the X-Requested-With\n"
"header and set it to “XMLHttpRequest”.  Libraries that do that are\n"
"prototype, jQuery and Mochikit and probably some more.\n"
"\n"
"Deprecated since version 0.13: X-Requested-With is not standard and is "
"unreliable.\n"
"\n"
"\n"
"Changelog"
msgstr ""

#: mu/modes/api/flask.py:1436 mu/modes/api/flask.py:1439
msgid ""
"Request.json() \n"
"This will contain the parsed JSON data if the mimetype indicates\n"
"JSON (application/json, see is_json()), otherwise it\n"
"will be None.\n"
msgstr ""

#: mu/modes/api/flask.py:1442 mu/modes/api/flask.py:1445
msgid ""
"Request.list_storage_class() \n"
"alias of werkzeug.datastructures.ImmutableList\n"
msgstr ""

#: mu/modes/api/flask.py:1448 mu/modes/api/flask.py:1451
msgid ""
"Request.make_form_data_parser() \n"
"Creates the form data parser. Instantiates the\n"
"form_data_parser_class with some parameters.\n"
"\n"
"Changelog\n"
"New in version 0.8.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1454 mu/modes/api/flask.py:1457
msgid ""
"Request.max_content_length() \n"
"Read-only view of the MAX_CONTENT_LENGTH config key.\n"
msgstr ""

#: mu/modes/api/flask.py:1460 mu/modes/api/flask.py:1463
msgid ""
"Request.max_forwards() \n"
"The Max-Forwards request-header field provides a mechanism with the\n"
"TRACE and OPTIONS methods to limit the number of proxies or gateways\n"
"that can forward the request to the next inbound server.\n"
msgstr ""

#: mu/modes/api/flask.py:1466 mu/modes/api/flask.py:1469
msgid ""
"Request.method() \n"
"The request method. (For example 'GET' or 'POST').\n"
msgstr ""

#: mu/modes/api/flask.py:1472 mu/modes/api/flask.py:1475
msgid ""
"Request.mimetype() \n"
"Like content_type, but without parameters (eg, without\n"
"charset, type etc.) and always lowercase.  For example if the content\n"
"type is text/HTML; charset=utf-8 the mimetype would be\n"
"'text/html'.\n"
msgstr ""

#: mu/modes/api/flask.py:1478 mu/modes/api/flask.py:1481
msgid ""
"Request.mimetype_params() \n"
"The mimetype parameters as dict.  For example if the content\n"
"type is text/html; charset=utf-8 the params would be\n"
"{'charset': 'utf-8'}.\n"
msgstr ""

#: mu/modes/api/flask.py:1484 mu/modes/api/flask.py:1487
msgid ""
"Request.on_json_loading_failed(e) \n"
"Called if get_json() parsing fails and isn’t silenced. If\n"
"this method returns a value, it is used as the return value for\n"
"get_json(). The default implementation raises a\n"
"BadRequest exception.\n"
"\n"
"Changelog\n"
"Changed in version 0.10: Raise a BadRequest error instead of returning an "
"error\n"
"message as JSON. If you want that behavior you can add it by\n"
"subclassing.\n"
"\n"
"\n"
"New in version 0.8.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1490 mu/modes/api/flask.py:1493
msgid ""
"Request.parameter_storage_class() \n"
"alias of werkzeug.datastructures.ImmutableMultiDict\n"
msgstr ""

#: mu/modes/api/flask.py:1495 mu/modes/api/flask.py:1499
msgid "Request.path() \n"
msgstr ""

#: mu/modes/api/flask.py:1497 mu/modes/api/flask.py:1501
msgid ""
"Request.path() \n"
"Requested path as unicode.  This works a bit like the regular path\n"
"info in the WSGI environment but will always include a leading slash,\n"
"even if the URL root is accessed.\n"
msgstr ""

#: mu/modes/api/flask.py:1504 mu/modes/api/flask.py:1507
msgid ""
"Request.pragma() \n"
"The Pragma general-header field is used to include\n"
"implementation-specific directives that might apply to any recipient\n"
"along the request/response chain.  All pragma directives specify\n"
"optional behavior from the viewpoint of the protocol; however, some\n"
"systems MAY require that behavior be consistent with the directives.\n"
msgstr ""

#: mu/modes/api/flask.py:1509 mu/modes/api/flask.py:1510
msgid ""
"Request.query_string() \n"
"The URL parameters as raw bytestring.\n"
msgstr ""

#: mu/modes/api/flask.py:1512 mu/modes/api/flask.py:1515
msgid ""
"Request.range() \n"
"The parsed Range header.\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Return type:Range\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1518 mu/modes/api/flask.py:1521
msgid ""
"Request.referrer() \n"
"The Referer[sic] request-header field allows the client to specify,\n"
"for the server’s benefit, the address (URI) of the resource from which\n"
"the Request-URI was obtained (the “referrer”, although the header\n"
"field is misspelled).\n"
msgstr ""

#: mu/modes/api/flask.py:1523 mu/modes/api/flask.py:1524
msgid ""
"Request.remote_addr() \n"
"The remote address of the client.\n"
msgstr ""

#: mu/modes/api/flask.py:1526 mu/modes/api/flask.py:1529
msgid ""
"Request.remote_user() \n"
"If the server supports user authentication, and the script is\n"
"protected, this attribute contains the username the user has\n"
"authenticated as.\n"
msgstr ""

#: mu/modes/api/flask.py:1532 mu/modes/api/flask.py:1535
msgid ""
"Request.routing_exception() \n"
"If matching the URL failed, this is the exception that will be\n"
"raised / was raised as part of the request handling.  This is\n"
"usually a NotFound exception or\n"
"something similar.\n"
msgstr ""

#: mu/modes/api/flask.py:1538 mu/modes/api/flask.py:1541
msgid ""
"Request.scheme() \n"
"URL scheme (http or https).\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1543 mu/modes/api/flask.py:1547
msgid "Request.script_root() \n"
msgstr ""

#: mu/modes/api/flask.py:1545 mu/modes/api/flask.py:1549
msgid ""
"Request.script_root() \n"
"The root path of the script without the trailing slash.\n"
msgstr ""

#: mu/modes/api/flask.py:1552 mu/modes/api/flask.py:1555
msgid ""
"Request.stream() \n"
"If the incoming form data was not encoded with a known mimetype\n"
"the data is stored unmodified in this stream for consumption.  Most\n"
"of the time it is a better idea to use data which will give\n"
"you that data as a string.  The stream only returns the data once.\n"
"Unlike input_stream this stream is properly guarded that you\n"
"can’t accidentally read past the length of the input.  Werkzeug will\n"
"internally always refer to this stream to read data which makes it\n"
"possible to wrap this object with a stream that does filtering.\n"
"\n"
"Changelog\n"
"Changed in version 0.9: This stream is now always available but might be "
"consumed by the\n"
"form parser later on.  Previously the stream was only set if no\n"
"parsing happened.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1557 mu/modes/api/flask.py:1561
msgid "Request.url() \n"
msgstr ""

#: mu/modes/api/flask.py:1559 mu/modes/api/flask.py:1563
msgid ""
"Request.url() \n"
"The reconstructed current URL as IRI.\n"
"See also: trusted_hosts.\n"
msgstr ""

#: mu/modes/api/flask.py:1566 mu/modes/api/flask.py:1569
msgid ""
"Request.url_charset() \n"
"The charset that is assumed for URLs.  Defaults to the value\n"
"of charset.\n"
"\n"
"Changelog\n"
"New in version 0.6.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1572 mu/modes/api/flask.py:1578
msgid ""
"Request.url_root() \n"
"Provides different ways to look at the current IRI.  Imagine your "
"application is\n"
"listening on the following application root:\n"
"http://www.example.com/myapplication\n"
"\n"
"\n"
"And a user requests the following URI:\n"
"http://www.example.com/myapplication/%CF%80/page.html?x=y\n"
"\n"
"\n"
"In this case the values of the above mentioned attributes would be\n"
"the following:\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"path\n"
"u'/π/page.html'\n"
"\n"
"full_path\n"
"u'/π/page.html?x=y'\n"
"\n"
"script_root\n"
"u'/myapplication'\n"
"\n"
"base_url\n"
"u'http://www.example.com/myapplication/π/page.html'\n"
"\n"
"url\n"
"u'http://www.example.com/myapplication/π/page.html?x=y'\n"
"\n"
"url_root\n"
"u'http://www.example.com/myapplication/'\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1575 mu/modes/api/flask.py:1581
msgid ""
"Request.url_root() \n"
"The full URL root (with hostname), this is the application\n"
"root as IRI.\n"
"See also: trusted_hosts.\n"
msgstr ""

#: mu/modes/api/flask.py:1584 mu/modes/api/flask.py:1587
msgid ""
"Request.url_rule() \n"
"The internal URL rule that matched the request.  This can be\n"
"useful to inspect which methods are allowed for the URL from\n"
"a before/after handler (request.url_rule.methods) etc.\n"
"Though if the request’s method was invalid for the URL rule,\n"
"the valid list is available in routing_exception.valid_methods\n"
"instead (an attribute of the Werkzeug exception MethodNotAllowed)\n"
"because the request was never internally bound.\n"
"\n"
"Changelog\n"
"New in version 0.6.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1589 mu/modes/api/flask.py:1590
msgid ""
"Request.user_agent() \n"
"The current user agent.\n"
msgstr ""

#: mu/modes/api/flask.py:1592 mu/modes/api/flask.py:1595
msgid ""
"Request.values() \n"
"A werkzeug.datastructures.CombinedMultiDict that combines\n"
"args and form.\n"
msgstr ""

#: mu/modes/api/flask.py:1598 mu/modes/api/flask.py:1601
msgid ""
"Request.view_args() \n"
"A dict of view arguments that matched the request.  If an exception\n"
"happened when matching, this will be None.\n"
msgstr ""

#: mu/modes/api/flask.py:1604 mu/modes/api/flask.py:1607
msgid ""
"Request.want_form_data_parsed() \n"
"Returns True if the request method carries content.  As of\n"
"Werkzeug 0.9 this will be the case if a content type is transmitted.\n"
"\n"
"Changelog\n"
"New in version 0.8.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1610 mu/modes/api/flask.py:1613
msgid ""
"RequestContext(app, environ, request=None) \n"
"The request context contains all request relevant information.  It is\n"
"created at the beginning of the request and pushed to the\n"
"_request_ctx_stack and removed at the end of it.  It will create the\n"
"URL adapter and request object for the WSGI environment provided.\n"
"\n"
"Do not attempt to use this class directly, instead use\n"
"test_request_context() and\n"
"request_context() to create this object.\n"
"\n"
"When the request context is popped, it will evaluate all the\n"
"functions registered on the application for teardown execution\n"
"(teardown_request()).\n"
"\n"
"The request context is automatically popped at the end of the request\n"
"for you.  In debug mode the request context is kept around if\n"
"exceptions happen so that interactive debuggers have a chance to\n"
"introspect the data.  With 0.4 this can also be forced for requests\n"
"that did not fail and outside of DEBUG mode.  By setting\n"
"'flask._preserve_context' to True on the WSGI environment the\n"
"context will not pop itself at the end of the request.  This is used by\n"
"the test_client() for example to implement the\n"
"deferred cleanup functionality.\n"
"\n"
"You might find this helpful for unittests where you need the\n"
"information from the context local around for a little longer.  Make\n"
"sure to properly pop() the stack yourself in\n"
"that situation, otherwise your unittests will leak memory.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1616 mu/modes/api/flask.py:1619
msgid ""
"RequestContext.copy() \n"
"Creates a copy of this request context with the same request object.\n"
"This can be used to move a request context to a different greenlet.\n"
"Because the actual request object is the same this cannot be used to\n"
"move a request context to a different thread unless access to the\n"
"request object is locked.\n"
"\n"
"Changelog\n"
"New in version 0.10.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1622 mu/modes/api/flask.py:1625
msgid ""
"RequestContext.match_request() \n"
"Can be overridden by a subclass to hook into the matching\n"
"of the request.\n"
msgstr ""

#: mu/modes/api/flask.py:1628 mu/modes/api/flask.py:1631
msgid ""
"RequestContext.pop(exc=&lt;object object&gt;) \n"
"Pops the request context and unbinds it by doing that.  This will\n"
"also trigger the execution of functions registered by the\n"
"teardown_request() decorator.\n"
"\n"
"Changelog\n"
"Changed in version 0.9: Added the exc argument.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1634 mu/modes/api/flask.py:1637
msgid ""
"RequestContext.push() \n"
"Binds the request context to the current context.\n"
msgstr ""

#: mu/modes/api/flask.py:1640 mu/modes/api/flask.py:1643
msgid ""
"Response(response=None, status=None, headers=None, mimetype=None, "
"content_type=None, direct_passthrough=False) \n"
"The response object that is used by default in Flask.  Works like the\n"
"response object from Werkzeug but is set to have an HTML mimetype by\n"
"default.  Quite often you don’t have to create this object yourself because\n"
"make_response() will take care of that for you.\n"
"\n"
"If you want to replace the response object used you can subclass this and\n"
"set response_class to your subclass.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1646 mu/modes/api/flask.py:1649
msgid ""
"Response.data() \n"
"A descriptor that calls get_data() and set_data().  This\n"
"should not be used and will eventually get deprecated.\n"
msgstr ""

#: mu/modes/api/flask.py:1652 mu/modes/api/flask.py:1655
msgid ""
"Response.get_json(force=False, silent=False, cache=True, <em class=\"mimetype"
"\">application/json) \n"
"Parse and return the data as JSON. If the mimetype does not\n"
"indicate JSON (application/json, see\n"
"is_json()), this returns None unless force is\n"
"true. If parsing fails, on_json_loading_failed() is called\n"
"and its return value is used as the return value.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"force -- Ignore the mimetype and always try to parse JSON.\n"
"silent -- Silence parsing errors and return None\n"
"instead.\n"
"cache -- Store the parsed JSON to return for subsequent\n"
"calls.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1658 mu/modes/api/flask.py:1661
msgid ""
"Response.headers() \n"
"A Headers object representing the response headers.\n"
msgstr ""

#: mu/modes/api/flask.py:1664 mu/modes/api/flask.py:1667
msgid ""
"Response.is_json() \n"
"Check if the mimetype indicates JSON data, either\n"
"application/json or application/*+json.\n"
"\n"
"Changelog\n"
"New in version 0.11.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1670 mu/modes/api/flask.py:1673
msgid ""
"Response.max_cookie_size() \n"
"Read-only view of the MAX_COOKIE_SIZE config key.\n"
"See max_cookie_size in\n"
"Werkzeug’s docs.\n"
msgstr ""

#: mu/modes/api/flask.py:1676 mu/modes/api/flask.py:1679
msgid ""
"Response.mimetype() \n"
"The mimetype (content type without charset etc.)\n"
msgstr ""

#: mu/modes/api/flask.py:1682 mu/modes/api/flask.py:1685
msgid ""
"Response.set_cookie(key, value='', max_age=None, expires=None, path='/', "
"domain=None, secure=False, httponly=False, samesite=None) \n"
"Sets a cookie. The parameters are the same as in the cookie Morsel\n"
"object in the Python standard library but it accepts unicode data, too.\n"
"A warning is raised if the size of the cookie header exceeds\n"
"max_cookie_size, but the header will still be set.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"key -- the key (name) of the cookie to be set.\n"
"value -- the value of the cookie.\n"
"max_age -- should be a number of seconds, or None (default) if\n"
"the cookie should last only as long as the client’s\n"
"browser session.\n"
"expires -- should be a datetime object or UNIX timestamp.\n"
"path -- limits the cookie to a given path, per default it will\n"
"span the whole domain.\n"
"domain -- if you want to set a cross-domain cookie.  For example,\n"
"domain=\".example.com\" will set a cookie that is\n"
"readable by the domain www.example.com,\n"
"foo.example.com etc.  Otherwise, a cookie will only\n"
"be readable by the domain that set it.\n"
"secure -- If True, the cookie will only be available via HTTPS\n"
"httponly -- disallow JavaScript to access the cookie.  This is an\n"
"extension to the cookie standard and probably not\n"
"supported by all browsers.\n"
"samesite -- Limits the scope of the cookie such that it will only\n"
"be attached to requests if those requests are\n"
"“same-site”.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1687 mu/modes/api/flask.py:1688
msgid ""
"Response.status() \n"
"A string with a response status.\n"
msgstr ""

#: mu/modes/api/flask.py:1689 mu/modes/api/flask.py:1690
msgid ""
"Response.status_code() \n"
"The response status as integer.\n"
msgstr ""

#: mu/modes/api/flask.py:1692 mu/modes/api/flask.py:1695
msgid ""
"ScriptInfo(app_import_path=None, create_app=None) \n"
"Help object to deal with Flask applications.  This is usually not\n"
"necessary to interface with as it’s used internally in the dispatching\n"
"to click.  In future versions of Flask this object will most likely play\n"
"a bigger role.  Typically it’s created automatically by the\n"
"FlaskGroup but you can also manually create it and pass it\n"
"onwards as click object.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1698 mu/modes/api/flask.py:1701
msgid ""
"ScriptInfo.app_import_path() \n"
"Optionally the import path for the Flask application.\n"
msgstr ""

#: mu/modes/api/flask.py:1704 mu/modes/api/flask.py:1707
msgid ""
"ScriptInfo.create_app() \n"
"Optionally a function that is passed the script info to create\n"
"the instance of the application.\n"
msgstr ""

#: mu/modes/api/flask.py:1710 mu/modes/api/flask.py:1713
msgid ""
"ScriptInfo.data() \n"
"A dictionary with arbitrary data that can be associated with\n"
"this script info.\n"
msgstr ""

#: mu/modes/api/flask.py:1716 mu/modes/api/flask.py:1719
msgid ""
"ScriptInfo.load_app() \n"
"Loads the Flask app (if not yet loaded) and returns it.  Calling\n"
"this multiple times will just result in the already loaded app to\n"
"be returned.\n"
msgstr ""

#: mu/modes/api/flask.py:1722 mu/modes/api/flask.py:1725
msgid ""
"SecureCookieSession(initial=None) \n"
"Base class for sessions based on signed cookies.\n"
"\n"
"This session backend will set the modified and\n"
"accessed attributes. It cannot reliably track whether a\n"
"session is new (vs. empty), so new remains hard coded to\n"
"False.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1728 mu/modes/api/flask.py:1731
msgid ""
"SecureCookieSession.accessed() \n"
"header, which allows caching proxies to cache different pages for\n"
"different users.\n"
msgstr ""

#: mu/modes/api/flask.py:1733 mu/modes/api/flask.py:1734
msgid "SecureCookieSession.get(k, d) \n"
msgstr ""

#: mu/modes/api/flask.py:1736 mu/modes/api/flask.py:1739
msgid ""
"SecureCookieSession.modified() \n"
"When data is changed, this is set to True. Only the session\n"
"dictionary itself is tracked; if the session contains mutable\n"
"data (for example a nested dict) then this must be set to\n"
"True manually when modifying that data. The session cookie\n"
"will only be written to the response if this is True.\n"
msgstr ""

#: mu/modes/api/flask.py:1741 mu/modes/api/flask.py:1742
msgid "SecureCookieSession.setdefault(k, d) \n"
msgstr ""

#: mu/modes/api/flask.py:1744 mu/modes/api/flask.py:1747
msgid ""
"SecureCookieSessionInterface() \n"
"The default session interface that stores sessions in signed cookies\n"
"through the itsdangerous module.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1750 mu/modes/api/flask.py:1753
msgid ""
"SecureCookieSessionInterface.key_derivation() \n"
"the name of the itsdangerous supported key derivation.  The default\n"
"is hmac.\n"
msgstr ""

#: mu/modes/api/flask.py:1756 mu/modes/api/flask.py:1759
msgid ""
"SecureCookieSessionInterface.open_session(app, request) \n"
"This method has to be implemented and must either return None\n"
"in case the loading failed because of a configuration error or an\n"
"instance of a session object which implements a dictionary like\n"
"interface + the methods and attributes on SessionMixin.\n"
msgstr ""

#: mu/modes/api/flask.py:1762 mu/modes/api/flask.py:1765
msgid ""
"SecureCookieSessionInterface.salt() \n"
"the salt that should be applied on top of the secret key for the\n"
"signing of cookie based sessions.\n"
msgstr ""

#: mu/modes/api/flask.py:1768 mu/modes/api/flask.py:1771
msgid ""
"SecureCookieSessionInterface.save_session(app, session, response) \n"
"This is called for actual sessions returned by open_session()\n"
"at the end of the request.  This is still called during a request\n"
"context so if you absolutely need access to the request you can do\n"
"that.\n"
msgstr ""

#: mu/modes/api/flask.py:1774 mu/modes/api/flask.py:1777
msgid ""
"SecureCookieSessionInterface.serializer() \n"
"A python serializer for the payload.  The default is a compact\n"
"JSON derived serializer with support for some extra Python types\n"
"such as datetime objects or tuples.\n"
msgstr ""

#: mu/modes/api/flask.py:1780 mu/modes/api/flask.py:1783
msgid ""
"SecureCookieSessionInterface.session_class() \n"
"alias of SecureCookieSession\n"
msgstr ""

#: mu/modes/api/flask.py:1786 mu/modes/api/flask.py:1789
msgid ""
"SessionInterface() \n"
"The basic interface you have to implement in order to replace the\n"
"default session interface which uses werkzeug’s securecookie\n"
"implementation.  The only methods you have to implement are\n"
"open_session() and save_session(), the others have\n"
"useful defaults which you don’t need to change.\n"
"\n"
"The session object returned by the open_session() method has to\n"
"provide a dictionary like interface plus the properties and methods\n"
"from the SessionMixin.  We recommend just subclassing a dict\n"
"and adding that mixin:\n"
"\n"
"If open_session() returns None Flask will call into\n"
"make_null_session() to create a session that acts as replacement\n"
"if the session support cannot work because some requirement is not\n"
"fulfilled.  The default NullSession class that is created\n"
"will complain that the secret key was not set.\n"
"\n"
"To replace the session interface on an application all you have to do\n"
"is to assign flask.Flask.session_interface:\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1792 mu/modes/api/flask.py:1795
msgid ""
"SessionInterface.get_cookie_domain(app) \n"
"Returns the domain that should be set for the session cookie.\n"
"Uses SESSION_COOKIE_DOMAIN if it is configured, otherwise\n"
"falls back to detecting the domain based on SERVER_NAME.\n"
"Once detected (or if not set at all), SESSION_COOKIE_DOMAIN is\n"
"updated to avoid re-running the logic.\n"
msgstr ""

#: mu/modes/api/flask.py:1798 mu/modes/api/flask.py:1801
msgid ""
"SessionInterface.get_cookie_httponly(app) \n"
"Returns True if the session cookie should be httponly.  This\n"
"currently just returns the value of the SESSION_COOKIE_HTTPONLY\n"
"config var.\n"
msgstr ""

#: mu/modes/api/flask.py:1804 mu/modes/api/flask.py:1807
msgid ""
"SessionInterface.get_cookie_path(app) \n"
"Returns the path for which the cookie should be valid.  The\n"
"default implementation uses the value from the SESSION_COOKIE_PATH\n"
"config var if it’s set, and falls back to APPLICATION_ROOT or\n"
"uses / if it’s None.\n"
msgstr ""

#: mu/modes/api/flask.py:1810 mu/modes/api/flask.py:1813
msgid ""
"SessionInterface.get_cookie_samesite(app) \n"
"Return 'Strict' or 'Lax' if the cookie should use the\n"
"SameSite attribute. This currently just returns the value of\n"
"the SESSION_COOKIE_SAMESITE setting.\n"
msgstr ""

#: mu/modes/api/flask.py:1816 mu/modes/api/flask.py:1819
msgid ""
"SessionInterface.get_cookie_secure(app) \n"
"Returns True if the cookie should be secure.  This currently\n"
"just returns the value of the SESSION_COOKIE_SECURE setting.\n"
msgstr ""

#: mu/modes/api/flask.py:1822 mu/modes/api/flask.py:1825
msgid ""
"SessionInterface.get_expiration_time(app, session) \n"
"A helper method that returns an expiration date for the session\n"
"or None if the session is linked to the browser session.  The\n"
"default implementation returns now + the permanent session\n"
"lifetime configured on the application.\n"
msgstr ""

#: mu/modes/api/flask.py:1828 mu/modes/api/flask.py:1831
msgid ""
"SessionInterface.is_null_session(obj) \n"
"Checks if a given object is a null session.  Null sessions are\n"
"not asked to be saved.\n"
"This checks if the object is an instance of null_session_class\n"
"by default.\n"
msgstr ""

#: mu/modes/api/flask.py:1834 mu/modes/api/flask.py:1837
msgid ""
"SessionInterface.make_null_session(app) \n"
"Creates a null session which acts as a replacement object if the\n"
"real session support could not be loaded due to a configuration\n"
"error.  This mainly aids the user experience because the job of the\n"
"null session is to still support lookup without complaining but\n"
"modifications are answered with a helpful error message of what\n"
"failed.\n"
"This creates an instance of null_session_class by default.\n"
msgstr ""

#: mu/modes/api/flask.py:1840 mu/modes/api/flask.py:1843
msgid ""
"SessionInterface.null_session_class() \n"
"make_null_session() will look here for the class that should\n"
"be created when a null session is requested.  Likewise the\n"
"is_null_session() method will perform a typecheck against\n"
"this type.\n"
"alias of NullSession\n"
msgstr ""

#: mu/modes/api/flask.py:1846 mu/modes/api/flask.py:1849
msgid ""
"SessionInterface.open_session(app, request) \n"
"This method has to be implemented and must either return None\n"
"in case the loading failed because of a configuration error or an\n"
"instance of a session object which implements a dictionary like\n"
"interface + the methods and attributes on SessionMixin.\n"
msgstr ""

#: mu/modes/api/flask.py:1852 mu/modes/api/flask.py:1855
msgid ""
"SessionInterface.pickle_based() \n"
"A flag that indicates if the session interface is pickle based.\n"
"This can be used by Flask extensions to make a decision in regards\n"
"to how to deal with the session object.\n"
"\n"
"Changelog\n"
"New in version 0.10.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1858 mu/modes/api/flask.py:1861
msgid ""
"SessionInterface.save_session(app, session, response) \n"
"This is called for actual sessions returned by open_session()\n"
"at the end of the request.  This is still called during a request\n"
"context so if you absolutely need access to the request you can do\n"
"that.\n"
msgstr ""

#: mu/modes/api/flask.py:1864 mu/modes/api/flask.py:1867
msgid ""
"SessionInterface.should_set_cookie(app, session) \n"
"Used by session backends to determine if a Set-Cookie header\n"
"should be set for this session cookie for this response. If the session\n"
"has been modified, the cookie is set. If the session is permanent and\n"
"the SESSION_REFRESH_EACH_REQUEST config is true, the cookie is\n"
"always set.\n"
"This check is usually skipped if the session was deleted.\n"
"\n"
"Changelog\n"
"New in version 0.11.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1870 mu/modes/api/flask.py:1873
msgid ""
"SessionMixin() \n"
"Expands a basic dictionary with session attributes.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1876 mu/modes/api/flask.py:1879
msgid ""
"SessionMixin.accessed() \n"
"Some implementations can detect when session data is read or\n"
"written and set this when that happens. The mixin default is hard\n"
"coded to True.\n"
msgstr ""

#: mu/modes/api/flask.py:1882 mu/modes/api/flask.py:1885
msgid ""
"SessionMixin.modified() \n"
"Some implementations can detect changes to the session and set\n"
"this when that happens. The mixin default is hard coded to\n"
"True.\n"
msgstr ""

#: mu/modes/api/flask.py:1888 mu/modes/api/flask.py:1891
msgid ""
"SessionMixin.permanent() \n"
"This reflects the '_permanent' key in the dict.\n"
msgstr ""

#: mu/modes/api/flask.py:1894 mu/modes/api/flask.py:1897
msgid ""
"TaggedJSONSerializer() \n"
"Serializer that uses a tag system to compactly represent objects that\n"
"are not JSON types. Passed as the intermediate serializer to\n"
"itsdangerous.Serializer.\n"
"\n"
"The following extra types are supported:\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1900 mu/modes/api/flask.py:1903
msgid ""
"TaggedJSONSerializer.default_tags() \n"
"Tag classes to bind when creating the serializer. Other tags can be\n"
"added later using register().\n"
msgstr ""

#: mu/modes/api/flask.py:1906 mu/modes/api/flask.py:1909
msgid ""
"TaggedJSONSerializer.dumps(value) \n"
"Tag the value and dump it to a compact JSON string.\n"
msgstr ""

#: mu/modes/api/flask.py:1912 mu/modes/api/flask.py:1915
msgid ""
"TaggedJSONSerializer.loads(value) \n"
"Load data from a JSON string and deserialized any tagged objects.\n"
msgstr ""

#: mu/modes/api/flask.py:1918 mu/modes/api/flask.py:1921
msgid ""
"TaggedJSONSerializer.register(tag_class, force=False, index=None) \n"
"Register a new tag with this serializer.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"tag_class -- tag class to register. Will be instantiated with this\n"
"serializer instance.\n"
"force -- overwrite an existing tag. If false (default), a\n"
"KeyError is raised.\n"
"index -- index to insert the new tag in the tag order. Useful when\n"
"the new tag is a special case of an existing tag. If None\n"
"(default), the tag is appended to the end of the order.\n"
"\n"
"\n"
"\n"
"Raises:KeyError -- if the tag key is already registered and force is\n"
"not true.\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1924 mu/modes/api/flask.py:1927
msgid ""
"TaggedJSONSerializer.tag(value) \n"
"Convert a value to a tagged representation if necessary.\n"
msgstr ""

#: mu/modes/api/flask.py:1930 mu/modes/api/flask.py:1933
msgid ""
"TaggedJSONSerializer.untag(value) \n"
"Convert a tagged representation back to the original type.\n"
msgstr ""

#: mu/modes/api/flask.py:1936 mu/modes/api/flask.py:1939
msgid ""
"View() \n"
"Alternative way to use view functions.  A subclass has to implement\n"
"dispatch_request() which is called with the view arguments from\n"
"the URL routing system.  If methods is provided the methods\n"
"do not have to be passed to the add_url_rule()\n"
"method explicitly:\n"
"\n"
"When you want to decorate a pluggable view you will have to either do that\n"
"when the view function is created (by wrapping the return value of\n"
"as_view()) or you can use the decorators attribute:\n"
"\n"
"The decorators stored in the decorators list are applied one after another\n"
"when the view function is created.  Note that you can not use the class\n"
"based decorators since those would decorate the view class and not the\n"
"generated view function!\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1942 mu/modes/api/flask.py:1945
msgid ""
"View.decorators() \n"
"The canonical way to decorate class-based views is to decorate the\n"
"return value of as_view().  However since this moves parts of the\n"
"logic from the class declaration to the place where it’s hooked\n"
"into the routing system.\n"
"You can place one or more decorators in this list and whenever the\n"
"view function is created the result is automatically decorated.\n"
"\n"
"Changelog\n"
"New in version 0.8.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1948 mu/modes/api/flask.py:1951
msgid ""
"View.dispatch_request() \n"
"Subclasses have to override this method to implement the\n"
"actual view function code.  This method is called with all\n"
"the arguments from the URL rule.\n"
msgstr ""

#: mu/modes/api/flask.py:1953 mu/modes/api/flask.py:1954
msgid ""
"View.methods() \n"
"A list of methods this view can handle.\n"
msgstr ""

#: mu/modes/api/flask.py:1956 mu/modes/api/flask.py:1959
msgid ""
"View.provide_automatic_options() \n"
"Setting this disables or force-enables the automatic options handling.\n"
msgstr ""

#: mu/modes/api/flask.py:1962 mu/modes/api/flask.py:1965
msgid ""
"_AppCtxGlobals() \n"
"A plain object. Used as a namespace for storing data during an\n"
"application context.\n"
"\n"
"Creating an app context automatically creates this object, which is\n"
"made available as the g proxy.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1968 mu/modes/api/flask.py:1971
msgid ""
"_AppCtxGlobals.get(name, default=None) \n"
"Get an attribute by name, or a default value. Like\n"
"dict.get().\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"name -- Name of attribute to get.\n"
"default -- Value to return if the attribute is not present.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.10.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1974 mu/modes/api/flask.py:1977
msgid ""
"_AppCtxGlobals.pop(name, default=&lt;object object&gt;) \n"
"Get and remove an attribute by name. Like dict.pop().\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"name -- Name of attribute to pop.\n"
"default -- Value to return if the attribute is not present,\n"
"instead of raise a KeyError.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.11.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1980 mu/modes/api/flask.py:1983
msgid ""
"_AppCtxGlobals.setdefault(name, default=None) \n"
"Get the value of an attribute if it is present, otherwise\n"
"set and return a default value. Like dict.setdefault().\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:name -- Name of attribute to get.\n"
"\n"
"Param:default: Value to set and return if the attribute is not\n"
"present.\n"
"\n"
"\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.11.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1986 mu/modes/api/flask.py:1989
msgid ""
"abort(status, *args, **kwargs) \n"
"Raises an HTTPException for the given status code or WSGI\n"
"application:\n"
"abort(404)  # 404 Not Found\n"
"abort(Response('Hello World'))\n"
"\n"
"\n"
"Can be passed a WSGI application or a status code.  If a status code is\n"
"given it’s looked up in the list of exceptions and will raise that\n"
"exception, if passed a WSGI application it will wrap it in a proxy WSGI\n"
"exception and raise that:\n"
"abort(404)\n"
"abort(Response('Hello World'))\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1992 mu/modes/api/flask.py:1995
msgid ""
"after_this_request(f) \n"
"Executes a function after this request.  This is useful to modify\n"
"response objects.  The function is passed the response object and has\n"
"to return the same or a new one.\n"
"Example:\n"
"@app.route('/')\n"
"def index():\n"
"    @after_this_request\n"
"    def add_header(response):\n"
"        response.headers['X-Foo'] = 'Parachute'\n"
"        return response\n"
"    return 'Hello World!'\n"
"\n"
"\n"
"This is more useful if a function other than the view function wants to\n"
"modify a response.  For instance think of a decorator that wants to add\n"
"some headers without converting the return value into a response object.\n"
"\n"
"Changelog\n"
"New in version 0.9.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:1998 mu/modes/api/flask.py:2001
msgid ""
"copy_current_request_context(f) \n"
"A helper function that decorates a function to retain the current\n"
"request context.  This is useful when working with greenlets.  The moment\n"
"the function is decorated a copy of the request context is created and\n"
"then pushed when the function is called.\n"
"Example:\n"
"import gevent\n"
"from flask import copy_current_request_context\n"
"\n"
"@app.route('/')\n"
"def index():\n"
"    @copy_current_request_context\n"
"    def do_some_work():\n"
"        # do some work here, it can access flask.request like you\n"
"        # would otherwise in the view function.\n"
"        ...\n"
"    gevent.spawn(do_some_work)\n"
"    return 'Regular response'\n"
"\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.10.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2004 mu/modes/api/flask.py:2007
msgid ""
"dump(obj, fp, **kwargs) \n"
"Like dumps() but writes into a file object.\n"
msgstr ""

#: mu/modes/api/flask.py:2010 mu/modes/api/flask.py:2013
msgid ""
"dumps(obj, **kwargs) \n"
"Serialize obj to a JSON formatted str by using the application’s\n"
"configured encoder (json_encoder) if there is an\n"
"application on the stack.\n"
"This function can return unicode strings or ascii-only bytestrings by\n"
"default which coerce into unicode strings automatically.  That behavior by\n"
"default is controlled by the JSON_AS_ASCII configuration variable\n"
"and can be overridden by the simplejson ensure_ascii parameter.\n"
msgstr ""

#: mu/modes/api/flask.py:2016 mu/modes/api/flask.py:2019
msgid ""
"escape(s) \n"
"Convert the characters &, <, >, ‘, and ” in string s to HTML-safe\n"
"sequences.  Use this if you need to display text that might contain\n"
"such characters in HTML.  Marks return value as markup string.\n"
msgstr ""

#: mu/modes/api/flask.py:2022 mu/modes/api/flask.py:2025
msgid ""
"flash(message, category='message') \n"
"Flashes a message to the next request.  In order to remove the\n"
"flashed message from the session and to display it to the user,\n"
"the template has to call get_flashed_messages().\n"
"\n"
"Changelog\n"
"Changed in version 0.3: category parameter added.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"message -- the message to be flashed.\n"
"category -- the category for the message.  The following values\n"
"are recommended: 'message' for any kind of message,\n"
"'error' for errors, 'info' for information\n"
"messages and 'warning' for warnings.  However any\n"
"kind of string can be used as category.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2028 mu/modes/api/flask.py:2031
msgid ""
"get_flashed_messages(with_categories=False, category_filter=[]) \n"
"Pulls all flashed messages from the session and returns them.\n"
"Further calls in the same request to the function will return\n"
"the same messages.  By default just the messages are returned,\n"
"but when with_categories is set to True, the return value will\n"
"be a list of tuples in the form (category, message) instead.\n"
"Filter the flashed messages to one or more categories by providing those\n"
"categories in category_filter.  This allows rendering categories in\n"
"separate html blocks.  The with_categories and category_filter\n"
"arguments are distinct:\n"
"\n"
"with_categories controls whether categories are returned with message\n"
"text (True gives a tuple, where False gives just the message text).\n"
"category_filter filters the messages down to only those matching the\n"
"provided categories.\n"
"\n"
"See Message Flashing for examples.\n"
"\n"
"Changelog\n"
"Changed in version 0.9: category_filter parameter added.\n"
"\n"
"\n"
"Changed in version 0.3: with_categories parameter added.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"with_categories -- set to True to also receive categories.\n"
"category_filter -- whitelist of categories to limit return values\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2034 mu/modes/api/flask.py:2037
msgid ""
"get_template_attribute(template_name, attribute) \n"
"Loads a macro (or variable) a template exports.  This can be used to\n"
"invoke a macro from within Python code.  If you for example have a\n"
"template named _cider.html with the following contents:\n"
"{% macro hello(name) %}Hello {{ name }}!{% endmacro %}\n"
"\n"
"\n"
"You can access this from Python code like this:\n"
"hello = get_template_attribute('_cider.html', 'hello')\n"
"return hello('World')\n"
"\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.2.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"template_name -- the name of the template\n"
"attribute -- the name of the variable of macro to access\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2040 mu/modes/api/flask.py:2043
msgid ""
"has_app_context() \n"
"Works like has_request_context() but for the application\n"
"context.  You can also just do a boolean check on the\n"
"current_app object instead.\n"
"\n"
"Changelog\n"
"New in version 0.9.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2046 mu/modes/api/flask.py:2049
msgid ""
"has_request_context() \n"
"If you have code that wants to test if a request context is there or\n"
"not this function can be used.  For instance, you may want to take "
"advantage\n"
"of request information if the request object is available, but fail\n"
"silently if it is unavailable.\n"
"class User(db.Model):\n"
"\n"
"    def __init__(self, username, remote_addr=None):\n"
"        self.username = username\n"
"        if remote_addr is None and has_request_context():\n"
"            remote_addr = request.remote_addr\n"
"        self.remote_addr = remote_addr\n"
"\n"
"\n"
"Alternatively you can also just test any of the context bound objects\n"
"(such as request or g for truthness):\n"
"class User(db.Model):\n"
"\n"
"    def __init__(self, username, remote_addr=None):\n"
"        self.username = username\n"
"        if remote_addr is None and request:\n"
"            remote_addr = request.remote_addr\n"
"        self.remote_addr = remote_addr\n"
"\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.7.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2052 mu/modes/api/flask.py:2055
msgid ""
"jsonify(*args, **kwargs) \n"
"This function wraps dumps() to add a few enhancements that make\n"
"life easier.  It turns the JSON output into a Response\n"
"object with the application/json mimetype.  For convenience, it\n"
"also converts multiple arguments into an array or multiple keyword "
"arguments\n"
"into a dict.  This means that both jsonify(1,2,3) and\n"
"jsonify([1,2,3]) serialize to [1,2,3].\n"
"For clarity, the JSON serialization behavior has the following differences\n"
"from dumps():\n"
"\n"
"Single argument: Passed straight through to dumps().\n"
"Multiple arguments: Converted to an array before being passed to\n"
"dumps().\n"
"Multiple keyword arguments: Converted to a dict before being passed to\n"
"dumps().\n"
"Both args and kwargs: Behavior undefined and will throw an exception.\n"
"\n"
"Example usage:\n"
"from flask import jsonify\n"
"\n"
"@app.route('/_get_current_user')\n"
"def get_current_user():\n"
"    return jsonify(username=g.user.username,\n"
"                   email=g.user.email,\n"
"                   id=g.user.id)\n"
"\n"
"\n"
"This will send a JSON response like this to the browser:\n"
"{\n"
"    \"username\": \"admin\",\n"
"    \"email\": \"admin@localhost\",\n"
"    \"id\": 42\n"
"}\n"
"\n"
"\n"
"\n"
"Changelog\n"
"Changed in version 0.11: Added support for serializing top-level arrays. "
"This introduces a\n"
"security risk in ancient browsers. See JSON Security for details.\n"
"\n"
"This function’s response will be pretty printed if the\n"
"JSONIFY_PRETTYPRINT_REGULAR config parameter is set to True or the\n"
"Flask app is running in debug mode. Compressed (not pretty) formatting\n"
"currently means no indents and no spaces after separators.\n"
"\n"
"Changelog\n"
"New in version 0.2.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2057 mu/modes/api/flask.py:2058
msgid ""
"load(fp, **kwargs) \n"
"Like loads() but reads from a file object.\n"
msgstr ""

#: mu/modes/api/flask.py:2060 mu/modes/api/flask.py:2063
msgid ""
"load_dotenv(path=None) \n"
"Load “dotenv” files in order of precedence to set environment variables.\n"
"If an env var is already set it is not overwritten, so earlier files in the\n"
"list are preferred over later files.\n"
"Changes the current working directory to the location of the first file\n"
"found, with the assumption that it is in the top level project directory\n"
"and will be where the Python path should import local packages from.\n"
"This is a no-op if python-dotenv is not installed.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:path -- Load the file at this location instead of searching.\n"
"\n"
"Returns:True if a file was loaded.\n"
"\n"
"\n"
"\n"
"\n"
"New in version 1.0.\n"
"\n"
"\n"
"Changelog"
msgstr ""

#: mu/modes/api/flask.py:2066 mu/modes/api/flask.py:2069
msgid ""
"loads(s, **kwargs) \n"
"Unserialize a JSON object from a string s by using the application’s\n"
"configured decoder (json_decoder) if there is an\n"
"application on the stack.\n"
msgstr ""

#: mu/modes/api/flask.py:2072 mu/modes/api/flask.py:2075
msgid ""
"make_response(*args) \n"
"Sometimes it is necessary to set additional headers in a view.  Because\n"
"views do not have to return response objects but can return a value that\n"
"is converted into a response object by Flask itself, it becomes tricky to\n"
"add headers to it.  This function can be called instead of using a return\n"
"and you will get a response object which you can use to attach headers.\n"
"If view looked like this and you want to add a new header:\n"
"def index():\n"
"    return render_template('index.html', foo=42)\n"
"\n"
"\n"
"You can now do something like this:\n"
"def index():\n"
"    response = make_response(render_template('index.html', foo=42))\n"
"    response.headers['X-Parachutes'] = 'parachutes are cool'\n"
"    return response\n"
"\n"
"\n"
"This function accepts the very same arguments you can return from a\n"
"view function.  This for example creates a response with a 404 error\n"
"code:\n"
"response = make_response(render_template('not_found.html'), 404)\n"
"\n"
"\n"
"The other use case of this function is to force the return value of a\n"
"view function into a response which is helpful with view\n"
"decorators:\n"
"response = make_response(view_function())\n"
"response.headers['X-Parachutes'] = 'parachutes are cool'\n"
"\n"
"\n"
"Internally this function does the following things:\n"
"\n"
"if no arguments are passed, it creates a new response argument\n"
"if one argument is passed, flask.Flask.make_response()\n"
"is invoked with it.\n"
"if more than one argument is passed, the arguments are passed\n"
"to the flask.Flask.make_response() function as tuple.\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.6.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2078 mu/modes/api/flask.py:2081
msgid ""
"pass_script_info(f) \n"
"Marks a function so that an instance of ScriptInfo is passed\n"
"as first argument to the click callback.\n"
msgstr ""

#: mu/modes/api/flask.py:2084 mu/modes/api/flask.py:2087
msgid ""
"redirect(location, code=302, Response=None) \n"
"Returns a response object (a WSGI application) that, if called,\n"
"redirects the client to the target location.  Supported codes are 301,\n"
"302, 303, 305, and 307.  300 is not supported because it’s not a real\n"
"redirect and 304 because it’s the answer for a request with a request\n"
"with defined If-Modified-Since headers.\n"
"\n"
"Changelog\n"
"New in version 0.10: The class used for the Response object can now be "
"passed in.\n"
"\n"
"\n"
"New in version 0.6: The location can now be a unicode string that is encoded "
"using\n"
"the iri_to_uri() function.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"location -- the location the response should redirect to.\n"
"code -- the redirect status code. defaults to 302.\n"
"Response (class) -- a Response class to use when instantiating a\n"
"response. The default is werkzeug.wrappers.Response if\n"
"unspecified.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2090 mu/modes/api/flask.py:2093
msgid ""
"render_template(template_name_or_list, **context) \n"
"Renders a template from the template folder with the given\n"
"context.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"template_name_or_list -- the name of the template to be\n"
"rendered, or an iterable with template names\n"
"the first one existing will be rendered\n"
"context -- the variables that should be available in the\n"
"context of the template.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2096 mu/modes/api/flask.py:2099
msgid ""
"render_template_string(source, **context) \n"
"Renders a template from the given template source string\n"
"with the given context. Template variables will be autoescaped.\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"source -- the source code of the template to be\n"
"rendered\n"
"context -- the variables that should be available in the\n"
"context of the template.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2102 mu/modes/api/flask.py:2105
msgid ""
"safe_join(directory, *pathnames) \n"
"Safely join directory and zero or more untrusted pathnames\n"
"components.\n"
"Example usage:\n"
"@app.route('/wiki/<path:filename>')\n"
"def wiki_page(filename):\n"
"    filename = safe_join(app.config['WIKI_FOLDER'], filename)\n"
"    with open(filename, 'rb') as fd:\n"
"        content = fd.read()  # Read and process the file content...\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"directory -- the trusted base directory.\n"
"pathnames -- the untrusted pathnames relative to that directory.\n"
"\n"
"\n"
"\n"
"Raises:NotFound if one or more passed\n"
"paths fall out of its boundaries.\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2108 mu/modes/api/flask.py:2111
msgid ""
"send_file(filename_or_fp, mimetype=None, as_attachment=False, "
"attachment_filename=None, add_etags=True, cache_timeout=None, "
"conditional=False, last_modified=None) \n"
"Sends the contents of a file to the client.  This will use the\n"
"most efficient method available and configured.  By default it will\n"
"try to use the WSGI server’s file_wrapper support.  Alternatively\n"
"you can set the application’s use_x_sendfile attribute\n"
"to True to directly emit an X-Sendfile header.  This however\n"
"requires support of the underlying webserver for X-Sendfile.\n"
"By default it will try to guess the mimetype for you, but you can\n"
"also explicitly provide one.  For extra security you probably want\n"
"to send certain files as attachment (HTML for instance).  The mimetype\n"
"guessing requires a filename or an attachment_filename to be\n"
"provided.\n"
"ETags will also be attached automatically if a filename is provided. You\n"
"can turn this off by setting add_etags=False.\n"
"If conditional=True and filename is provided, this method will try to\n"
"upgrade the response stream to support range requests.  This will allow\n"
"the request to be answered with partial content response.\n"
"Please never pass filenames to this function from user sources;\n"
"you should use send_from_directory() instead.\n"
"\n"
"Changed in version 1.0: UTF-8 filenames, as specified in RFC 2231, are "
"supported.\n"
"\n"
"\n"
"Changelog\n"
"Changed in version 0.12: The filename is no longer automatically inferred "
"from file objects. If\n"
"you want to use automatic mimetype and etag support, pass a filepath via\n"
"filename_or_fp or attachment_filename.\n"
"\n"
"\n"
"Changed in version 0.12: The attachment_filename is preferred over filename "
"for MIME-type\n"
"detection.\n"
"\n"
"\n"
"Changed in version 0.9: cache_timeout pulls its default from application "
"config, when None.\n"
"\n"
"\n"
"Changed in version 0.7: mimetype guessing and etag support for file objects "
"was\n"
"deprecated because it was unreliable.  Pass a filename if you are\n"
"able to, otherwise attach an etag yourself.  This functionality\n"
"will be removed in Flask 1.0\n"
"\n"
"\n"
"New in version 0.5: The add_etags, cache_timeout and conditional parameters "
"were\n"
"added.  The default behavior is now to attach etags.\n"
"\n"
"\n"
"New in version 0.2.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"filename_or_fp -- the filename of the file to send.\n"
"This is relative to the root_path\n"
"if a relative path is specified.\n"
"Alternatively a file object might be provided in\n"
"which case X-Sendfile might not work and fall\n"
"back to the traditional method.  Make sure that the\n"
"file pointer is positioned at the start of data to\n"
"send before calling send_file().\n"
"mimetype -- the mimetype of the file if provided. If a file path is\n"
"given, auto detection happens as fallback, otherwise an\n"
"error will be raised.\n"
"as_attachment -- set to True if you want to send this file with\n"
"a Content-Disposition: attachment header.\n"
"attachment_filename -- the filename for the attachment if it\n"
"differs from the file’s filename.\n"
"add_etags -- set to False to disable attaching of etags.\n"
"conditional -- set to True to enable conditional responses.\n"
"cache_timeout -- the timeout in seconds for the headers. When None\n"
"(default), this value is set by\n"
"get_send_file_max_age() of\n"
"current_app.\n"
"last_modified -- set the Last-Modified header to this value,\n"
"a datetime or timestamp.\n"
"If a file was passed, this overrides its mtime.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2114 mu/modes/api/flask.py:2117
msgid ""
"send_from_directory(directory, filename, **options) \n"
"Send a file from a given directory with send_file().  This\n"
"is a secure way to quickly expose static files from an upload folder\n"
"or something similar.\n"
"Example usage:\n"
"@app.route('/uploads/<path:filename>')\n"
"def download_file(filename):\n"
"    return send_from_directory(app.config['UPLOAD_FOLDER'],\n"
"                               filename, as_attachment=True)\n"
"\n"
"\n"
"\n"
"Sending files and Performance\n"
"It is strongly recommended to activate either X-Sendfile support in\n"
"your webserver or (if no authentication happens) to tell the webserver\n"
"to serve files for the given path on its own without calling into the\n"
"web application for improved performance.\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.5.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"directory -- the directory where all the files are stored.\n"
"filename -- the filename relative to that directory to\n"
"download.\n"
"options -- optional keyword arguments that are directly\n"
"forwarded to send_file().\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2120 mu/modes/api/flask.py:2123
msgid ""
"session() \n"
"The session object works pretty much like an ordinary dict, with the\n"
"difference that it keeps track on modifications.\n"
"\n"
"This is a proxy.  See Notes On Proxies for more information.\n"
"\n"
"The following attributes are interesting:\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2126 mu/modes/api/flask.py:2129
msgid ""
"session.modified() \n"
"True if the session object detected a modification.  Be advised\n"
"that modifications on mutable structures are not picked up\n"
"automatically, in that situation you have to explicitly set the\n"
"attribute to True yourself.  Here an example:\n"
"# this change is not picked up because a mutable object (here\n"
"# a list) is changed.\n"
"session['objects'].append(42)\n"
"# so mark it as modified yourself\n"
"session.modified = True\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2131 mu/modes/api/flask.py:2132
msgid ""
"session.new() \n"
"True if the session is new, False otherwise.\n"
msgstr ""

#: mu/modes/api/flask.py:2134 mu/modes/api/flask.py:2137
msgid ""
"session.permanent() \n"
"If set to True the session lives for\n"
"permanent_session_lifetime seconds.  The\n"
"default is 31 days.  If set to False (which is the default) the\n"
"session will be deleted when the user closes the browser.\n"
msgstr ""

#: mu/modes/api/flask.py:2140 mu/modes/api/flask.py:2143
msgid ""
"stream_with_context(generator_or_function) \n"
"Request contexts disappear when the response is started on the server.\n"
"This is done for efficiency reasons and to make it less likely to encounter\n"
"memory leaks with badly written WSGI middlewares.  The downside is that if\n"
"you are using streamed responses, the generator cannot access request bound\n"
"information any more.\n"
"This function however can help you keep the context around for longer:\n"
"from flask import stream_with_context, request, Response\n"
"\n"
"@app.route('/stream')\n"
"def streamed_response():\n"
"    @stream_with_context\n"
"    def generate():\n"
"        yield 'Hello '\n"
"        yield request.args['name']\n"
"        yield '!'\n"
"    return Response(generate())\n"
"\n"
"\n"
"Alternatively it can also be used around a specific generator:\n"
"from flask import stream_with_context, request, Response\n"
"\n"
"@app.route('/stream')\n"
"def streamed_response():\n"
"    def generate():\n"
"        yield 'Hello '\n"
"        yield request.args['name']\n"
"        yield '!'\n"
"    return Response(stream_with_context(generate()))\n"
"\n"
"\n"
"\n"
"Changelog\n"
"New in version 0.9.\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2146 mu/modes/api/flask.py:2149
msgid ""
"url_for(endpoint, **values) \n"
"Generates a URL to the given endpoint with the method provided.\n"
"Variable arguments that are unknown to the target endpoint are appended\n"
"to the generated URL as query arguments.  If the value of a query argument\n"
"is None, the whole pair is skipped.  In case blueprints are active\n"
"you can shortcut references to the same blueprint by prefixing the\n"
"local endpoint with a dot (.).\n"
"This will reference the index function local to the current blueprint:\n"
"url_for('.index')\n"
"\n"
"\n"
"For more information, head over to the Quickstart.\n"
"To integrate applications, Flask has a hook to intercept URL build\n"
"errors through Flask.url_build_error_handlers.  The url_for\n"
"function results in a BuildError when the current\n"
"app does not have a URL for the given endpoint and values.  When it does, "
"the\n"
"current_app calls its url_build_error_handlers if\n"
"it is not None, which can return a string to use as the result of\n"
"url_for (instead of url_for’s default to raise the\n"
"BuildError exception) or re-raise the exception.\n"
"An example:\n"
"def external_url_handler(error, endpoint, values):\n"
"    \"Looks up an external URL when `url_for` cannot build a URL.\"\n"
"    # This is an example of hooking the build_error_handler.\n"
"    # Here, lookup_url is some utility function you've built\n"
"    # which looks up the endpoint in some external URL registry.\n"
"    url = lookup_url(endpoint, **values)\n"
"    if url is None:\n"
"        # External lookup did not have a URL.\n"
"        # Re-raise the BuildError, in context of original traceback.\n"
"        exc_type, exc_value, tb = sys.exc_info()\n"
"        if exc_value is error:\n"
"            raise exc_type, exc_value, tb\n"
"        else:\n"
"            raise error\n"
"    # url_for will use this result, instead of raising BuildError.\n"
"    return url\n"
"\n"
"app.url_build_error_handlers.append(external_url_handler)\n"
"\n"
"\n"
"Here, error is the instance of BuildError, and\n"
"endpoint and values are the arguments passed into url_for.  Note\n"
"that this is for building URLs outside the current application, and not for\n"
"handling 404 NotFound errors.\n"
"\n"
"Changelog\n"
"New in version 0.10: The _scheme parameter was added.\n"
"\n"
"\n"
"New in version 0.9: The _anchor and _method parameters were added.\n"
"\n"
"\n"
"New in version 0.9: Calls Flask.handle_build_error() on\n"
"BuildError.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"Parameters:\n"
"endpoint -- the endpoint of the URL (name of the function)\n"
"values -- the variable arguments of the URL rule\n"
"_external -- if set to True, an absolute URL is generated. Server\n"
"address can be changed via SERVER_NAME configuration variable which\n"
"defaults to localhost.\n"
"_scheme -- a string specifying the desired URL scheme. The _external\n"
"parameter must be set to True or a ValueError is raised. The default\n"
"behavior uses the same scheme as the current request, or\n"
"PREFERRED_URL_SCHEME from the app configuration if no\n"
"request context is available. As of Werkzeug 0.10, this also can be set\n"
"to an empty string to build protocol-relative URLs.\n"
"_anchor -- if provided this is added as anchor to the URL.\n"
"_method -- if provided this explicitly specifies an HTTP method.\n"
"\n"
"\n"
"\n"
"\n"
"\n"
msgstr ""

#: mu/modes/api/flask.py:2152 mu/modes/api/flask.py:2155
msgid ""
"with_appcontext(f) \n"
"Wraps a callback so that it’s guaranteed to be executed with the\n"
"script’s application context.  If callbacks are registered directly\n"
"to the app.cli object then they are wrapped with this function\n"
"by default unless it’s disabled.\n"
msgstr ""

#: mu/modes/api/microbit.py:66
msgid ""
"microbit.sleep(time) \n"
"Put micro:bit to sleep for some milliseconds (1 second = 1000 ms) of time.\n"
"sleep(2000) gives micro:bit a 2 second nap.\n"
"NB: If you use time.sleep(), times are in whole seconds not milliseconds,\n"
"use time.sleep(2) to nap for 2 seconds, in that case."
msgstr ""
"microbit.sleep(time) \n"
"让micro:bit睡眠几毫秒（1秒= 1000 ms）\n"
"sleep(2000) 使micro:bit小睡2秒。\n"
"注意：如果您使用time.sleep()，其时间以秒为单位，而不是毫秒，\n"
"在这种情况下，请使用time.sleep(2) 让micro:bit小睡2秒。."

#: mu/modes/api/pygamezero.py:94
msgid ""
"draw.circle(position, radius, (r, g, b)) \n"
"Draw the outline of a circle."
msgstr ""

#: mu/modes/api/pygamezero.py:97
msgid ""
"draw.filled_circle(position, radius, (r, g, b)) \n"
"Draw a filled circle."
msgstr ""

#: mu/modes/api/pygamezero.py:100
msgid ""
"draw.filled_rect(rect, (r, g, b)) \n"
"Draw a filled rectangle. Takes a Rect object. For example, Rect((20, 20), "
"(100, 100))"
msgstr ""

#: mu/modes/api/pygamezero.py:102
msgid ""
"draw.line(start, end, (r, g, b)) \n"
"Draw a line from start to end."
msgstr ""

#: mu/modes/api/pygamezero.py:104
msgid ""
"draw.rect(rect, (r, g, b)) \n"
"Draw the outline of a rectangle. Takes a Rect object. For example, Rect((20, "
"20), (100, 100))"
msgstr ""

#: mu/modes/api/pygamezero.py:107
msgid ""
"draw.text(text, [pos, ]**kwargs) \n"
"Draw text. There’s an extremely rich API for positioning and formatting "
"text; see Pygame Zero Text Formatting for full details."
msgstr ""

#: mu/modes/api/pygamezero.py:110
msgid ""
"draw.textbox(text, rect, **kwargs) \n"
"Draw text, sized to fill the given Rect. There’s an extremely rich API for "
"positioning and formatting text; see Pygame Zero Text Formatting for full "
"details."
msgstr ""

#: mu/modes/api/pygamezero.py:152
msgid ""
"screen.blit(image, (left, top)) \n"
"Draw the image to the screen at the given position. \n"
"blit() accepts either a Surface or a string as its image parameter. If image "
"is a str then the named image will be loaded from the images/ directory."
msgstr ""

#: mu/modes/api/pygamezero.py:154
msgid ""
"screen.clear() \n"
"Reset the screen to black."
msgstr ""

#: mu/modes/api/pygamezero.py:155
msgid ""
"screen.fill((red, green, blue)) \n"
"Fill the screen with a solid color."
msgstr ""

#: mu/modes/circuitpython.py:32
msgid "CircuitPython"
msgstr ""

#: mu/modes/circuitpython.py:33
msgid "Write code for boards running CircuitPython."
msgstr ""

#: mu/modes/circuitpython.py:175
msgid "Could not find an attached CircuitPython device."
msgstr ""

#: mu/modes/circuitpython.py:177
msgid ""
"Python files for CircuitPython devices are stored on the device. Therefore, "
"to edit these files you need to have the device plugged in. Until you plug "
"in a device, Mu will use the directory found here:\n"
"\n"
" {}\n"
"\n"
"...to store your code."
msgstr ""

#: mu/modes/esp.py:35
msgid "ESP MicroPython"
msgstr ""

#: mu/modes/esp.py:36
msgid "Write MicroPython on ESP8266/ESP32 boards."
msgstr ""

#: mu/modes/esp.py:60
msgid "Run your code directly on the ESP8266/ESP32 via the REPL."
msgstr ""

#: mu/modes/esp.py:69
msgid "Access the file system on ESP8266/ESP32."
msgstr ""

#: mu/modes/esp.py:77
msgid "Use the REPL to live-code on the ESP8266/ESP32."
msgstr ""

#: mu/modes/esp.py:165
msgid "Cannot run anything without any active editor tabs."
msgstr ""

#: mu/modes/esp.py:167
msgid ""
"Running transfers the content of the current tab onto the device. It seems "
"like you don't have  any tabs open."
msgstr ""

#: mu/modes/esp.py:216
msgid "Could not find an attached ESP8266/ESP32."
msgstr ""

#: mu/modes/esp.py:240
msgid "ESP board"
msgstr ""

#: mu/modes/microbit.py:576
msgid "micro:bit"
msgstr ""

#: mu/modes/web.py:58
msgid "Web"
msgstr ""

#: mu/modes/web.py:59
msgid "Build simple websites with the \"Flask\" web framework."
msgstr ""

#: mu/modes/web.py:75 mu/modes/web.py:128
msgid "Run the web server."
msgstr ""

#: mu/modes/web.py:81
msgid "Browse"
msgstr ""

#: mu/modes/web.py:82
msgid "Open your website in a browser."
msgstr ""

#: mu/modes/web.py:88
msgid "Templates"
msgstr ""

#: mu/modes/web.py:89
msgid "Load HTML templates used by your website."
msgstr ""

#: mu/modes/web.py:95
msgid "CSS"
msgstr ""

#: mu/modes/web.py:96
msgid "Load CSS files used by your website."
msgstr ""

#: mu/modes/web.py:104
msgid "Open the directory containing images used by your website."
msgstr ""

#: mu/modes/web.py:136
msgid "Stop the web server."
msgstr ""

#: mu/modes/web.py:156
msgid "This is not a Python file!"
msgstr ""

#: mu/modes/web.py:158
msgid ""
"Mu is only able to serve a Python file. Please make sure the current tab in "
"Mu is the one for your web application and then try again."
msgstr ""

#: mu/modes/web.py:257
msgid "Cannot Open Website - Server not Running."
msgstr ""

#: mu/modes/web.py:259
msgid ""
"You must have the local web server running in order to view your website in "
"a browser. Click on the 'Run' button to start the server and then try again."
msgstr ""
