"""
Contains definitions for the PI Pico related APIs so they can be
used in the editor for autocomplete and call tips.

Copyright (c) 2024- Roboticsware and others (see the AUTHORS file).

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""


PICO_APIS = {
    'en_US': [
        _('AnalogInputDevice.is_active() \n\nReturns :data:`True` if the device is active.'),
        _('AnalogInputDevice.threshold() \n\nThe threshold that the device must be above or below to be\nconsidered active. The default is 0.5.'),
        _('AnalogInputDevice.voltage() \n\nReturns the voltage of the analogue device.'),
        _('DigitalInputDevice.close() \n\nCloses the device and releases any resources. Once closed, the device\ncan no longer be used.'),
        _('DigitalInputDevice.is_active() \n\nReturns :data:`True` if the device is active.'),
        _('DigitalInputDevice.is_inactive() \n\nReturns :data:`True` if the device is inactive.'),
        _('DigitalInputDevice.when_activated() \n\nReturns a :samp:`callback` that will be called when the device is activated.'),
        _('DigitalInputDevice.when_deactivated() \n\nReturns a :samp:`callback` that will be called when the device is deactivated.'),
        _('DigitalOutputDevice.close() \n\nCloses the device and turns the device off. Once closed, the device\ncan no longer be used.'),
        _('DistanceSensor.distance() \n\nReturns the current distance measured by the sensor in meters. Note \nthat this property will have a value between 0 and max_distance.'),
        _('DistanceSensor.max_distance() \n\nReturns the maximum distance that the sensor will measure in metres.'),
        _('DistanceSensor.value() \n\nReturns a value between 0, indicating the reflector is either touching \nthe sensor or is sufficiently near that the sensor canâ€™t tell the \ndifference, and 1, indicating the reflector is at or beyond the \nspecified max_distance. A return value of None indicates that the\necho was not received before the timeout.'),
        _('InputDevice.active_state() \n\nSets or returns the active state of the device. If :data:`None` (the default),\nthe device will return the value that the pin is set to. If\n:data:`True`, the device will return :data:`True` if the pin is\nHIGH. If :data:`False`, the device will return :data:`False` if the\npin is LOW.'),
        _('InputDevice.value() \n\nReturns the current value of the device. This is either :data:`True`\nor :data:`False` depending on the value of :attr:`active_state`.'),
        _('Motor.backward([speed], [t], [wait]) \n\nMakes the motor turn "backward".\n\n:param float speed:\n    The speed as a value between 0 and 1: 1 is full speed, 0 is stop. Defaults to 1.\n\n:param float t:\n    The time in seconds that the motor should turn for. If None is \n    specified, the motor will stay on. The default is None.\n\n:param bool wait:\n   If True, the method will block until the time `t` has expired. \n   If False, the method will return and the motor will turn on in\n   the background. Defaults to False. Only effective if `t` is not\n   None.'),
        _('Motor.close() \n\nCloses the device and releases any resources. Once closed, the device\ncan no longer be used.'),
        _('Motor.forward([speed], [t], [wait]) \n\nMakes the motor turn "forward".\n\n:param float speed:\n    The speed as a value between 0 and 1: 1 is full speed, 0 is stop. Defaults to 1.\n\n:param float t:\n    The time in seconds that the motor should turn for. If None is \n    specified, the motor will stay on. The default is None.\n\n:param bool wait:\n   If True, the method will block until the time `t` has expired. \n   If False, the method will return and the motor will turn on in\n   the background. Defaults to False. Only effective if `t` is not\n   None.'),
        _('Motor.off() \n\nStops the motor turning.'),
        _('Motor.on([speed], [t], [wait]) \n\nTurns the motor on and makes it turn.\n\n:param float speed:\n    The speed as a value between -1 and 1: 1 turns the motor at\n    full speed in one direction, -1 turns the motor at full speed in\n    the opposite direction. Defaults to 1.\n\n:param float t:\n    The time in seconds that the motor should run for. If None is \n    specified, the motor will stay on. The default is None.\n\n:param bool wait:\n   If True, the method will block until the time `t` has expired. \n   If False, the method will return and the motor will turn on in\n   the background. Defaults to False. Only effective if `t` is not\n   None.'),
        _('Motor.value() \n\nSets or returns the motor speed as a value between -1 and 1: -1 is full\nspeed "backward", 1 is full speed "forward", 0 is stopped.'),
        _('OutputDevice.active_high() \n\nSets or returns the active_high property. If :data:`True`, the\n:meth:`on` method will set the Pin to HIGH. If :data:`False`,\nthe :meth:`on` method will set the Pin to LOW (the :meth:`off` method\nalways does the opposite).'),
        _('OutputDevice.blink([on_time], [off_time], [n], [wait]) \n\nMakes the device turn on and off repeatedly.\n\nArgs:\n    on_time (float): The length of time in seconds that the\n        device will be on. Defaults to 1.\n    off_time (float): The length of time in seconds that the\n        device will be off. If `None`, it will be the same as\n        ``on_time``. Defaults to `None`.\n    n (int): The number of times to repeat the blink operation.\n        If None is specified, the device will continue blinking\n        forever. The default is None.\n    wait (bool): If True, the method will block until the device\n        stops turning on and off. If False, the method will\n        return and the device will turn on and off in the\n        background. Defaults to False.'),
        _('OutputDevice.close() \n\nTurns the device off.'),
        _('OutputDevice.is_active() \n\nReturns :data:`True` if the device is on.'),
        _('OutputDevice.off() \n\nTurns the device off.'),
        _('OutputDevice.on([value], [t], [wait]) \n\nTurns the device on.\n\nArgs:\n    value (float): The value to set when turning on. Defaults to\n        1.\n    t (float): The time in seconds that the device should be on.\n        If None is specified, the device will stay on. The\n        default is None.\n    wait (bool): If True, the method will block until the time\n        `t` has expired. If False, the method will return and\n        the device will turn on in the background. Defaults to\n        False. Only effective if `t` is not None.'),
        _('OutputDevice.toggle() \n\nIf the device is off, turn it on. If it is on, turn it off.'),
        _('OutputDevice.value() \n\nSets or returns a value representing the state of the device: 1 is on, 0 is off.'),
        _('PWMLED.LED([pwm], [active_high], [initial_value]) \n\nReturns an instance of :class:`DigitalLED` or :class:`PWMLED` depending on\nthe value of the `pwm` parameter. \n\n::\n\n    from picozero import LED\n\n    my_pwm_led = LED(1)\n\n    my_digital_led = LED(2, pwm=False)\n\n:param int pin:\n    The pin that the device is connected to.\n\n:param int pin:\n    If `pwm` is :data:`True` (the default), a :class:`PWMLED` will be\n    returned. If `pwm` is :data:`False`, a :class:`DigitalLED` will be\n    returned. A :class:`PWMLED` can control the brightness of the LED but\n    uses 1 PWM channel.\n\n:param bool active_high:\n    If :data:`True` (the default), the :meth:`on` method will set the Pin\n    to HIGH. If :data:`False`, the :meth:`on` method will set the Pin to\n    LOW (the :meth:`off` method always does the opposite).\n\n:param bool initial_value:\n    If :data:`False` (the default), the device will be off initially. If\n    :data:`True`, the device will be switched on initially.'),
        _('PWMOutputDevice.blink([on_time], [off_time], [n], [wait], [fade_in_time], [fade_out_time], [fps]) \n\nMakes the device turn on and off repeatedly.\n\n:param float on_time:\n    The length of time in seconds the device will be on. Defaults to 1.\n\n:param float off_time:\n    The length of time in seconds the device will be off. If `None`, \n    it will be the same as ``on_time``. Defaults to `None`.\n\n:param int n:\n    The number of times to repeat the blink operation. If `None`, the \n    device will continue blinking forever. The default is `None`.\n\n:param bool wait:\n   If True, the method will block until the LED stops blinking. If False,\n   the method will return and the LED will blink in the background.\n   Defaults to False.\n\n:param float fade_in_time:\n    The length of time in seconds to spend fading in. Defaults to 0.\n\n:param float fade_out_time:\n    The length of time in seconds to spend fading out. If `None`,\n    it will be the same as ``fade_in_time``. Defaults to `None`.\n\n:param int fps:\n   The frames per second that will be used to calculate the number of\n   steps between off/on states when fading. Defaults to 25.'),
        _('PWMOutputDevice.close() \n\nCloses the device and turns the device off. Once closed, the device\ncan no longer be used.'),
        _('PWMOutputDevice.freq() \n\nReturns the current frequency of the device.'),
        _('PWMOutputDevice.freq(freq) \n\nSets the frequency of the device.'),
        _('PWMOutputDevice.is_active() \n\nReturns :data:`True` if the device is on.'),
        _('PWMOutputDevice.pulse([fade_in_time], [fade_out_time], [n], [wait], [fps]) \n\nMakes the device pulse on and off repeatedly.\n\n:param float fade_in_time:\n    The length of time in seconds that the device will take to turn on.\n    Defaults to 1.\n\n:param float fade_out_time:\n   The length of time in seconds that the device will take to turn off.\n   Defaults to 1.\n   \n:param int fps:\n   The frames per second that will be used to calculate the number of\n   steps between off/on states. Defaults to 25.\n   \n:param int n:\n   The number of times to pulse the LED. If None, the LED will pulse\n   forever. Defaults to None.\n\n:param bool wait:\n   If True, the method will block until the LED stops pulsing. If False,\n   the method will return and the LED will pulse in the background.\n   Defaults to False.'),
        _('PinMixin.pin() \n\nReturns the pin number used by the device.'),
        _('PinsMixin.pins() \n\nReturns a tuple of pins used by the device.'),
        _('RGBLED.blink([on_times], [fade_times], [colors], [n], [wait], [fps]) \n\nMakes the device blink between colours repeatedly.\n\nArgs:\n    on_times (float): Single value or tuple of numbers of\n        seconds to stay on each colour. Defaults to 1 second.\n    fade_times (float): Single value or tuple of times to fade\n        between each colour. Must be 0 if *pwm* was\n        :data:`False` when the class was constructed.\n    colors (tuple Tuple of colours to blink between, use ``(0, 0, 0)`` for off.):\n        The colours to blink between. Defaults to red, green,\n        blue.\n    n (int or None): Number of times to blink; :data:`None` (the\n        default) means forever.\n    wait (bool): If :data:`False` (the default), use a Timer to\n        manage blinking, continue blinking, and return\n        immediately. If :data:`False`, only return when the\n        blinking is finished (warning: the default value of *n*\n        will result in this method never returning).'),
        _('RGBLED.blue() \n\nRepresents the blue component of the LED as a value between 0 and 255 if *pwm* was :data:`True`\nwhen the class was constructed (but only takes values of 0 or 255 otherwise).'),
        _('RGBLED.color() \n\nRepresents the colour of the LED as an RGB 3-tuple of ``(red, green,\nblue)`` where each value is between 0 and 255 if *pwm* was :data:`True`\nwhen the class was constructed (but only takes values of 0 or 255 otherwise).\nFor example, red would be ``(255, 0, 0)`` and yellow would be ``(255, 255,\n0)``, whereas orange would be ``(255, 127, 0)``.'),
        _('RGBLED.cycle([fade_times], [colors], [n], [wait], [fps]) \n\nMakes the device fade in and out repeatedly.\n\nArgs:\n    fade_times (float): Number of seconds to spend fading out.\n        Defaults to 1.\n    colors (tuple)\n    on_color: Tuple of colours to cycle between. Defaults to\n        red, green, blue.\n    n (int or None): Number of times to cycle; :data:`None` (the\n        default) means forever.'),
        _('RGBLED.green() \n\nRepresents the green component of the LED as a value between 0 and 255 if *pwm* was :data:`True`\nwhen the class was constructed (but only takes values of 0 or 255 otherwise).'),
        _('RGBLED.invert() \n\nInverts the state of the device. If the device is currently off\n(:attr:`value` is ``(0, 0, 0)``), this changes it to "fully" on\n(:attr:`value` is ``(1, 1, 1)``). If the device has a specific colour,\nthis method inverts the colour.'),
        _('RGBLED.is_active() \n\nReturns :data:`True` if the LED is currently active (not black) and\n:data:`False` otherwise.'),
        _('RGBLED.on() \n\nTurns the LED on. This is equivalent to setting the LED color to white, e.g.\n``(1, 1, 1)``.'),
        _('RGBLED.pulse([fade_times], [colors], [n], [wait], [fps]) \n\nMakes the device fade between colours repeatedly.\n\nArgs:\n    fade_times (float): Single value or tuple of numbers of\n        seconds to spend fading. Defaults to 1.\n    fade_out_time (float): Number of seconds to spend fading\n        out. Defaults to 1.\n    colors (tuple)\n    on_color: Tuple of colours to pulse between in order.\n        Defaults to red, off, green, off, blue, off.\n    off_color (~colorzero.Color or tuple)\n    n (int or None): Number of times to pulse; :data:`None` (the\n        default) means forever.'),
        _('RGBLED.red() \n\nRepresents the red component of the LED as a value between 0 and 255 if *pwm* was :data:`True`\nwhen the class was constructed (but only takes values of 0 or 255 otherwise).'),
        _('RGBLED.toggle() \n\nToggles the state of the device. If the device has a specific colour, then that colour is saved and the device is turned off.\nIf the device is off, it will be changed to the last colour it had when it was on or, if none, to fully on (:attr:`value` is ``(1, 1, 1)``).'),
        _('RGBLED.value() \n\nRepresents the colour of the LED as an RGB 3-tuple of ``(red, green,\nblue)`` where each value is between 0 and 1 if *pwm* was :data:`True`\nwhen the class was constructed (but only takes values of 0 or 1 otherwise).\nFor example, red would be ``(1, 0, 0)`` and yellow would be ``(1, 1,\n0)``, whereas orange would be ``(1, 0.5, 0)``.'),
        _('Robot.backward([speed], [t], [wait]) \n\nMakes the robot move "backward".\n\nArgs:\n    speed (float): The speed as a value between 0 and 1: 1 is\n        full speed, 0 is stop. Defaults to 1.\n    t (float): The time in seconds that the robot should move\n        for. If None is specified, the robot will continue to\n        move until stopped. The default is None.\n    wait (bool): If True, the method will block until the time\n        `t` has expired. If False, the method will return and\n        the motor will turn on in the background. Defaults to\n        False. Only effective if `t` is not None.'),
        _('Robot.close() \n\nCloses the device and releases any resources. Once closed, the device\ncan no longer be used.'),
        _('Robot.forward([speed], [t], [wait]) \n\nMakes the robot move "forward".\n\nArgs:\n    speed (float): The speed as a value between 0 and 1: 1 is\n        full speed, 0 is stop. Defaults to 1.\n    t (float): The time in seconds that the robot should move\n        for. If None is specified, the robot will continue to\n        move until stopped. The default is None.\n    wait (bool): If True, the method will block until the time\n        `t` has expired. If False, the method will return and\n        the motor will turn on in the background. Defaults to\n        False. Only effective if `t` is not None.'),
        _('Robot.left([speed], [t], [wait]) \n\nMakes the robot turn "left" by turning the left motor backward and the\nright motor forward.\n\nArgs:\n    speed (float): The speed as a value between 0 and 1: 1 is\n        full speed, 0 is stop. Defaults to 1.\n    t (float): The time in seconds that the robot should turn\n        for. If None is specified, the robot will continue to\n        turn until stopped. The default is None.\n    wait (bool): If True, the method will block until the time\n        `t` has expired. If False, the method will return and\n        the motor will turn on in the background. Defaults to\n        False. Only effective if `t` is not None.'),
        _('Robot.left_motor() \n\nReturns the left :class:`Motor`.'),
        _('Robot.right([speed], [t], [wait]) \n\nMakes the robot turn "right" by turning the left motor forward and the\nright motor backward.\n\nArgs:\n    speed (float): The speed as a value between 0 and 1: 1 is\n        full speed, 0 is stop. Defaults to 1.\n    t (float): The time in seconds that the robot should turn\n        for. If None is specified, the robot will continue to\n        turn until stopped. The default is None.\n    wait (bool): If True, the method will block until the time\n        `t` has expired. If False, the method will return and\n        the motor will turn on in the background. Defaults to\n        False. Only effective if `t` is not None.'),
        _('Robot.right_motor() \n\nReturns the right :class:`Motor`.'),
        _('Robot.stop() \n\nStops the robot.'),
        _('Robot.value() \n\nRepresents the motion of the robot as a tuple of (left_motor_speed,\nright_motor_speed) with ``(-1, -1)`` representing full speed backwards,\n``(1, 1)`` representing full speed forwards, and ``(0, 0)``\nrepresenting stopped.'),
        _('Servo.max() \n\nSet the servo to its maximum position.'),
        _('Servo.mid() \n\nSet the servo to its mid-point position.'),
        _('Servo.min() \n\nSet the servo to its minimum position.'),
        _('Servo.off() \n\nTurn the servo "off" by setting the value to `None`.'),
        _('Speaker.beep([on_time], [off_time], [n], [wait], [fade_in_time], [fade_out_time], [fps]) \n\nMakes the buzzer turn on and off repeatedly.\n\nArgs:\n    on_time (float): The length of time in seconds that the\n        device will be on. Defaults to 1.\n    off_time (float): The length of time in seconds that the\n        device will be off. If `None`, it will be the same as\n        ``on_time``. Defaults to `None`.\n    n (int): The number of times to repeat the beep operation.\n        If `None`, the device will continue beeping forever. The\n        default is `None`.\n    wait (bool): If True, the method will block until the buzzer\n        stops beeping. If False, the method will return and the\n        buzzer will beep in the background. Defaults to False.\n    fade_in_time (float): The length of time in seconds to spend\n        fading in. Defaults to 0.\n    fade_out_time (float): The length of time in seconds to\n        spend fading out. If `None`, it will be the same as\n        ``fade_in_time``. Defaults to `None`.\n    fps (int): The frames per second that will be used to\n        calculate the number of steps between off/on states when\n        fading. Defaults to 25.'),
        _('Speaker.freq() \n\nSets or returns the current frequency of the speaker.'),
        _('Speaker.play([tune], [duration], [volume], [n], [wait]) \n\nPlays a tune for a given duration.\n\nArgs:\n    tune (int):\n\n        The tune to play can be specified as:\n\n            + a single "note", represented as:\n              + a frequency in Hz e.g. `440`\n              + a midi note e.g. `60`\n              + a note name as a string e.g. `"E4"`\n            + a list of notes and duration e.g. `[440, 1]` or `["E4", 2]`\n            + a list of two value tuples of (note, duration) e.g. `[(440,1), (60, 2), ("e4", 3)]`\n\n        Defaults to `440`.\n    volume (int): The volume of the tune; 1 is maximum volume, 0\n        is mute. Defaults to 1.\n    duration (float): The duration of each note in seconds.\n        Defaults to 1.\n    n (int): The number of times to play the tune. If None, the\n        tune will play forever. Defaults to 1.\n    wait (bool): If True, the method will block until the tune\n        has finished. If False, the method will return and the\n        tune will play in the background. Defaults to True.'),
        _('Speaker.value() \n\nSets or returns the value of the speaker. The value is a tuple of (freq, volume).'),
        _('Speaker.volume() \n\nSets or returns the volume of the speaker: 1 for maximum volume, 0 for off.'),
        _('TemperatureSensor.conversion() \n\nSets or returns the conversion function for the device.'),
        _('TemperatureSensor.temp() \n\nReturns the temperature of the device. If the conversion function is not\nset, this will return :data:`None`.'),
        _('ValueChange.stop() \n\nStops the ValueChange object running.'),
        _('picozero.AnalogInputDevice(pin, active_state, threshold) \n\nRepresents a generic input device with analogue functionality, e.g.\na potentiometer.\n\nArgs:\n    pin (int): The pin that the device is connected to.\n    active_state: The active state of the device. If :data:`True`\n        (the default), the :class:`AnalogInputDevice` will assume\n        that the device is active when the pin is high and above the\n        threshold. If ``active_state`` is ``False``, the device will\n        be active when the pin is low and below the threshold.\n    threshold (float): The threshold that the device must be above\n        or below to be considered active. The default is 0.5.'),
        _('picozero.Button() \n\nRepresents a push button, which can be either pressed or released.\n\nArgs:\n    pin (int): The pin that the device is connected to.\n    pull_up (bool): If :data:`True` (the default), the device will\n        be pulled up to HIGH. If :data:`False`, the device will be\n        pulled down to LOW.\n    bounce_time (float): The bounce time for the device. If set, the\n        device will ignore any button presses that happen within the\n        bounce time after a button release. This is useful to\n        prevent accidental button presses from registering as\n        multiple presses. Defaults to 0.02 seconds.'),
        _('picozero.Buzzer() \n\nRepresents an active or passive buzzer, which can be turned on or off.\n\n:param int pin:\n    The pin that the device is connected to.\n\n:param bool active_high:\n    If :data:`True` (the default), the :meth:`on` method will set the Pin\n    to HIGH. If :data:`False`, the :meth:`on` method will set the Pin to\n    LOW (the :meth:`off` method always does the opposite).\n\n:param bool initial_value:\n    If :data:`False` (the default), the Buzzer will be off initially. If\n    :data:`True`, the Buzzer will be switched on initially.'),
        _('picozero.DigitalInputDevice(pin, pull_up, active_state, bounce_time) \n\nRepresents a generic input device with digital functionality e.g. buttons\nthat can be either active or inactive.\n\nArgs:\n    pin (int): The pin that the device is connected to.\n    pull_up (bool): If :data:`True`, the device will be pulled up to\n        HIGH. If :data:`False` (the default), the device will be\n        pulled down to LOW.\n    active_state (bool): If :data:`True` (the default), the device\n        will return :data:`True` if the pin is HIGH. If\n        :data:`False`, the device will return :data:`False` if the\n        pin is LOW.\n    bounce_time (float): The bounce time for the device. If set, the\n        device will ignore any button presses that happen within the\n        bounce time after a button release. This is useful to\n        prevent accidental button presses from registering as\n        multiple presses. The default is :data:`None`.'),
        _('picozero.DigitalLED() \n\nRepresents a simple LED, which can be switched on and off.\n\nArgs:\n    pin (int): The pin that the device is connected to.\n    active_high (bool): If :data:`True` (the default), the\n        :meth:`on` method will set the Pin to HIGH. If\n        :data:`False`, the :meth:`on` method will set the Pin to LOW\n        (the :meth:`off` method always does the opposite).\n    initial_value (bool): If :data:`False` (the default), the LED\n        will be off initially. If :data:`True`, the LED will be\n        switched on initially.'),
        _('picozero.DigitalOutputDevice(pin, active_high, initial_value) \n\nRepresents a device driven by a digital pin.\n\nArgs:\n    pin (int): The pin that the device is connected to.\n    active_high (bool): If :data:`True` (the default), the\n        :meth:`on` method will set the Pin to HIGH. If\n        :data:`False`, the :meth:`on` method will set the Pin to LOW\n        (the :meth:`off` method always does the opposite).\n    initial_value (bool): If :data:`False` (the default), the LED\n        will be off initially. If :data:`True`, the LED will be\n        switched on initially.'),
        _('picozero.DistanceSensor(echo, trigger, max_distance) \n\nRepresents a HC-SR04 ultrasonic distance sensor.\n\n:param int echo:\n    The pin that the ECHO pin is connected to.\n\n:param int trigger:\n    The pin that the TRIG pin is connected to. \n\n:param float max_distance:\n    The :attr:`value` attribute reports a normalized value between 0 (too\n    close to measure) and 1 (maximum distance). This parameter specifies\n    the maximum distance expected in meters. This defaults to 1.'),
        _('picozero.InputDevice(active_state) \n\nBase class for input devices.'),
        _('picozero.Motor(forward, backward, pwm) \n\nRepresents a motor connected to a motor controller that has a two-pin\ninput. One pin drives the motor "forward", the other drives the motor\n"backward".\n\n:type forward: int\n:param forward:\n    The GP pin that controls the "forward" motion of the motor. \n\n:type backward: int\n:param backward:\n    The GP pin that controls the "backward" motion of the motor. \n\n:param bool pwm:\n    If :data:`True` (the default), PWM pins are used to drive the motor. \n    When using PWM pins, values between 0 and 1 can be used to set the \n    speed.'),
        _('picozero.OutputDevice(active_high, initial_value) \n\nBase class for output devices.'),
        _('picozero.PWMBuzzer(pin, freq, duty_factor, active_high, initial_value) \n\nRepresents a passive buzzer driven by a PWM pin; the volume of the buzzer can be changed.\n\nArgs:\n    pin (int): The pin that the buzzer is connected to.\n    freq (int): The frequency of the PWM signal in hertz. Defaults\n        to 440.\n    duty_factor (int): The duty factor of the PWM signal. This is a\n        value between 0 and 65535. Defaults to 1023.\n    active_high (bool): If :data:`True` (the default), the\n        :meth:`on` method will set the Pin to HIGH. If\n        :data:`False`, the :meth:`on` method will set the Pin to LOW\n        (the :meth:`off` method always does the opposite).\n    initial_value (bool): If :data:`False` (the default), the buzzer\n        will be off initially.  If :data:`True`, the buzzer will be\n        switched on initially.'),
        _('picozero.PWMLED() \n\nRepresents an LED driven by a PWM pin; the brightness of the LED can be changed.\n\nArgs:\n    pin (int): The pin that the device is connected to.\n    freq (int): The frequency of the PWM signal in hertz. Defaults\n        to 100.\n    duty_factor (int): The duty factor of the PWM signal. This is a\n        value between 0 and 65535. Defaults to 65535.\n    active_high (bool): If :data:`True` (the default), the\n        :meth:`on` method will set the Pin to HIGH. If\n        :data:`False`, the :meth:`on` method will set the Pin to LOW\n        (the :meth:`off` method always does the opposite).\n    initial_value (bool): If :data:`False` (the default), the LED\n        will be off initially. If :data:`True`, the LED will be\n        switched on initially.'),
        _('picozero.PWMOutputDevice(pin, freq, duty_factor, active_high, initial_value) \n\nRepresents a device driven by a PWM pin.\n\n:param int pin:\n    The pin that the device is connected to.\n\n:param int freq:\n    The frequency of the PWM signal in hertz. Defaults to 100.\n\n:param int duty_factor:\n    The duty factor of the PWM signal. This is a value between 0 and 65535.\n    Defaults to 65535.\n\n:param bool active_high:\n    If :data:`True` (the default), the :meth:`on` method will set the Pin\n    to HIGH. If :data:`False`, the :meth:`on` method will set the Pin to\n    LOW (the :meth:`off` method always does the opposite).\n\n:param bool initial_value:\n    If :data:`False` (the default), the LED will be off initially. If\n    :data:`True`, the LED will be switched on initially.'),
        _('picozero.PinMixin() \n\nMixin used by devices that have a single pin number.'),
        _('picozero.PinsMixin() \n\nMixin used by devices that use multiple pins.'),
        _('picozero.Potentiometer() \n\nRepresents a potentiometer, which outputs a variable voltage\nbetween 0 and 3.3V.\n\nAlias for :class:`Pot`.\n\nArgs:\n    pin (int): The pin that the device is connected to.\n    active_state: The active state of the device. If :data:`True`\n        (the default), the :class:`AnalogInputDevice` will assume\n        that the device is active when the pin is high and above the\n        threshold. If ``active_state`` is ``False``, the device will\n        be active when the pin is low and below the threshold.\n    threshold (float): The threshold that the device must be above\n        or below to be considered active. The default is 0.5.'),
        _('picozero.RGBLED(red, green, blue, active_high, initial_value, pwm) \n\nExtends :class:`OutputDevice` and represents a full colour LED component (composed\nof red, green, and blue LEDs).\nConnect the common cathode (longest leg) to a ground pin; connect each of\nthe other legs (representing the red, green, and blue anodes) to any GP\npins. You should use three limiting resistors (one per anode).\nThe following code will make the LED yellow::\n\n    from picozero import RGBLED\n    rgb = RGBLED(1, 2, 3)\n    rgb.color = (1, 1, 0)\n\n0--255 colours are also supported::\n\n    rgb.color = (255, 255, 0)\n\nArgs:\n    red (int): The GP pin that controls the red component of the RGB\n        LED.\n    green (int): The GP pin that controls the green component of the\n        RGB LED.\n    blue (int): The GP pin that controls the blue component of the\n        RGB LED.\n    active_high (bool): Set to :data:`True` (the default) for common\n        cathode RGB LEDs. If you are using a common anode RGB LED,\n        set this to :data:`False`.\n    initial_value (~colorzero.Color or tuple): The initial color for\n        the RGB LED. Defaults to black ``(0, 0, 0)``.\n    pwm (bool): If :data:`True` (the default), construct\n        :class:`PWMLED` instances for each component of the RGBLED.\n        If :data:`False`, construct :class:`DigitalLED` instances.'),
        _("picozero.Robot(left, right, pwm) \n\nRepresents a generic dual-motor robot / rover / buggy.\n\nAlias for :class:`Rover`.\n\nThis class is constructed with two tuples representing the forward and\nbackward pins of the left and right controllers. For example,\nif the left motor's controller is connected to pins 12 and 13, while the\nright motor's controller is connected to pins 14 and 15, then the following\nexample will drive the robot forward::\n\n    from picozero import Robot\n\n    robot = Robot(left=(12, 13), right=(14, 15))\n    robot.forward()\n\nArgs:\n    left (tuple): A tuple of two pins representing the forward and\n        backward inputs of the left motor's controller.\n    right (tuple): A tuple of two pins representing the forward and\n        backward inputs of the right motor's controller.\n    pwm (bool): If :data:`True` (the default), pwm pins will be\n        used, allowing variable speed control."),
        _('picozero.Servo(pin, initial_value, min_pulse_width, max_pulse_width, frame_width, duty_factor) \n\nRepresents a PWM-controlled servo motor.\n\nSetting the `value` to 0 will move the servo to its minimum position,\n1 will move the servo to its maximum position. Setting the `value` to\n:data:`None` will turn the servo "off" (i.e. no signal is sent).\n\n:type pin: int\n:param pin:\n    The pin the servo motor is connected to. \n\n:param bool initial_value:\n    If :data:`0`, the servo will be set to its minimum position.  If\n    :data:`1`, the servo will set to its maximum position. If :data:`None`\n    (the default), the position of the servo will not change.\n\n:param float min_pulse_width:\n    The pulse width corresponding to the servo\'s minimum position. This\n    defaults to 1ms.\n\n:param float max_pulse_width:\n    The pulse width corresponding to the servo\'s maximum position. This\n    defaults to 2ms.\n\n:param float frame_width:\n    The length of time between servo control pulses measured in seconds.\n    This defaults to 20ms which is a common value for servos.\n\n:param int duty_factor:\n    The duty factor of the PWM signal. This is a value between 0 and 65535.\n    Defaults to 65535.    '),
        _('picozero.Speaker(pin, initial_freq, initial_volume, duty_factor, active_high) \n\nRepresents a speaker driven by a PWM pin.\n\nArgs:\n    pin (int): The pin that the speaker is connected to.\n    initial_freq (int): The initial frequency of the PWM signal in\n        hertz. Defaults to 440.\n    initial_volume (int): The initial volume of the PWM signal. This\n        is a value between 0 and 1. Defaults to 0.\n    duty_factor (int): The duty factor of the PWM signal. This is a\n        value between 0 and 65535. Defaults to 1023.\n    active_high (bool): If :data:`True` (the default), the\n        :meth:`on` method will set the Pin to HIGH. If\n        :data:`False`, the :meth:`on` method will set the Pin to LOW\n        (the :meth:`off` method always does the opposite).'),
        _('picozero.Switch(pin, pull_up, bounce_time) \n\nRepresents a toggle switch, which is either open or closed.\n\nArgs:\n    pin (int): The pin that the device is connected to.\n    pull_up (bool): If :data:`True` (the default), the device will\n        be pulled up to HIGH. If :data:`False`, the device will be\n        pulled down to LOW.\n    bounce_time (float): The bounce time for the device. If set, the\n        device will ignore any button presses that happen within the\n        bounce time after a button release. This is useful to\n        prevent accidental button presses from registering as\n        multiple presses. Defaults to 0.02 seconds.'),
        _('picozero.TemperatureSensor(pin, active_state, threshold, conversion) \n\nRepresents a TemperatureSensor, which outputs a variable voltage. The voltage\ncan be converted to a temperature using a `conversion` function passed as a\nparameter.\n\nAlias for :class:`Thermistor` and :class:`TempSensor`.\n\nArgs:\n    pin (int): The pin that the device is connected to.\n    active_state: The active state of the device. If :data:`True`\n        (the default), the :class:`AnalogInputDevice` will assume\n        that the device is active when the pin is high and above the\n        threshold. If ``active_state`` is ``False``, the device will\n        be active when the pin is low and below the threshold.\n    threshold (float): The threshold that the device must be above\n        or below to be considered active. The default is 0.5.\n    conversion (float): A function that takes a voltage and returns\n        a temperature.\n\n        e.g. The internal temperature sensor has a voltage range of 0.706V to 0.716V\n        and would use the follow conversion function::\n\n            def temp_conversion(voltage):\n                return 27 - (voltage - 0.706)/0.001721\n\n            temp_sensor = TemperatureSensor(pin, conversion=temp_conversion)\n\n        If :data:`None` (the default), the ``temp`` property will return :data:`None`.'),
        _("picozero.ValueChange(output_device, generator, n, wait) \n\nInternal class to control the value of an output device.\n\nArgs:\n    output_device (OutputDevice): The OutputDevice object you wish\n        to change the value of.\n    generator: A generator function that yields a 2d list of\n        ((value, seconds), *).\n\n        The output_device's value will be set for the number of\n        seconds.\n    n (int): The number of times to repeat the sequence. If None,\n        the sequence will repeat forever.\n    wait (bool): If True the ValueChange object will block (wait)\n        until the sequence has completed."),
        _('picozero.pinout([output]) \n\nReturns a textual representation of the Raspberry Pi pico pins and functions.\n\nArgs:\n    output (bool): If :data:`True` (the default) the pinout will be\n        "printed".'),
    ]
}